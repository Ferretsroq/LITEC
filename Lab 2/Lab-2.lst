                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Sun Mar 01 20:46:58 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab_2
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _FUNCTION_C_PARM_2
                                     13 	.globl _FUNCTION_B_PARM_2
                                     14 	.globl _main
                                     15 	.globl _rand
                                     16 	.globl _putchar
                                     17 	.globl _printf
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _BUTTON
                                     22 	.globl _BUZZER
                                     23 	.globl _GREEN
                                     24 	.globl _AMBER
                                     25 	.globl _SWITCHC1
                                     26 	.globl _SWITCHC0
                                     27 	.globl _BILEDC1
                                     28 	.globl _BILEDC0
                                     29 	.globl _SWITCHB1
                                     30 	.globl _SWITCHB0
                                     31 	.globl _BILEDB1
                                     32 	.globl _BILEDB0
                                     33 	.globl _SWITCHA1
                                     34 	.globl _SWITCHA0
                                     35 	.globl _BILEDA1
                                     36 	.globl _BILEDA0
                                     37 	.globl _SPIF
                                     38 	.globl _WCOL
                                     39 	.globl _MODF
                                     40 	.globl _RXOVRN
                                     41 	.globl _TXBSY
                                     42 	.globl _SLVSEL
                                     43 	.globl _MSTEN
                                     44 	.globl _SPIEN
                                     45 	.globl _AD0EN
                                     46 	.globl _ADCEN
                                     47 	.globl _AD0TM
                                     48 	.globl _ADCTM
                                     49 	.globl _AD0INT
                                     50 	.globl _ADCINT
                                     51 	.globl _AD0BUSY
                                     52 	.globl _ADBUSY
                                     53 	.globl _AD0CM1
                                     54 	.globl _ADSTM1
                                     55 	.globl _AD0CM0
                                     56 	.globl _ADSTM0
                                     57 	.globl _AD0WINT
                                     58 	.globl _ADWINT
                                     59 	.globl _AD0LJST
                                     60 	.globl _ADLJST
                                     61 	.globl _CF
                                     62 	.globl _CR
                                     63 	.globl _CCF4
                                     64 	.globl _CCF3
                                     65 	.globl _CCF2
                                     66 	.globl _CCF1
                                     67 	.globl _CCF0
                                     68 	.globl _CY
                                     69 	.globl _AC
                                     70 	.globl _F0
                                     71 	.globl _RS1
                                     72 	.globl _RS0
                                     73 	.globl _OV
                                     74 	.globl _F1
                                     75 	.globl _P
                                     76 	.globl _TF2
                                     77 	.globl _EXF2
                                     78 	.globl _RCLK
                                     79 	.globl _TCLK
                                     80 	.globl _EXEN2
                                     81 	.globl _TR2
                                     82 	.globl _CT2
                                     83 	.globl _CPRL2
                                     84 	.globl _BUSY
                                     85 	.globl _ENSMB
                                     86 	.globl _STA
                                     87 	.globl _STO
                                     88 	.globl _SI
                                     89 	.globl _AA
                                     90 	.globl _SMBFTE
                                     91 	.globl _SMBTOE
                                     92 	.globl _PT2
                                     93 	.globl _PS
                                     94 	.globl _PS0
                                     95 	.globl _PT1
                                     96 	.globl _PX1
                                     97 	.globl _PT0
                                     98 	.globl _PX0
                                     99 	.globl _P3_7
                                    100 	.globl _P3_6
                                    101 	.globl _P3_5
                                    102 	.globl _P3_4
                                    103 	.globl _P3_3
                                    104 	.globl _P3_2
                                    105 	.globl _P3_1
                                    106 	.globl _P3_0
                                    107 	.globl _EA
                                    108 	.globl _ET2
                                    109 	.globl _ES
                                    110 	.globl _ES0
                                    111 	.globl _ET1
                                    112 	.globl _EX1
                                    113 	.globl _ET0
                                    114 	.globl _EX0
                                    115 	.globl _P2_7
                                    116 	.globl _P2_6
                                    117 	.globl _P2_5
                                    118 	.globl _P2_4
                                    119 	.globl _P2_3
                                    120 	.globl _P2_2
                                    121 	.globl _P2_1
                                    122 	.globl _P2_0
                                    123 	.globl _S0MODE
                                    124 	.globl _SM00
                                    125 	.globl _SM0
                                    126 	.globl _SM10
                                    127 	.globl _SM1
                                    128 	.globl _MCE0
                                    129 	.globl _SM20
                                    130 	.globl _SM2
                                    131 	.globl _REN0
                                    132 	.globl _REN
                                    133 	.globl _TB80
                                    134 	.globl _TB8
                                    135 	.globl _RB80
                                    136 	.globl _RB8
                                    137 	.globl _TI0
                                    138 	.globl _TI
                                    139 	.globl _RI0
                                    140 	.globl _RI
                                    141 	.globl _P1_7
                                    142 	.globl _P1_6
                                    143 	.globl _P1_5
                                    144 	.globl _P1_4
                                    145 	.globl _P1_3
                                    146 	.globl _P1_2
                                    147 	.globl _P1_1
                                    148 	.globl _P1_0
                                    149 	.globl _TF1
                                    150 	.globl _TR1
                                    151 	.globl _TF0
                                    152 	.globl _TR0
                                    153 	.globl _IE1
                                    154 	.globl _IT1
                                    155 	.globl _IE0
                                    156 	.globl _IT0
                                    157 	.globl _P0_7
                                    158 	.globl _P0_6
                                    159 	.globl _P0_5
                                    160 	.globl _P0_4
                                    161 	.globl _P0_3
                                    162 	.globl _P0_2
                                    163 	.globl _P0_1
                                    164 	.globl _P0_0
                                    165 	.globl _PCA0CP4
                                    166 	.globl _PCA0CP3
                                    167 	.globl _PCA0CP2
                                    168 	.globl _PCA0CP1
                                    169 	.globl _PCA0CP0
                                    170 	.globl _PCA0
                                    171 	.globl _DAC1
                                    172 	.globl _DAC0
                                    173 	.globl _ADC0LT
                                    174 	.globl _ADC0GT
                                    175 	.globl _ADC0
                                    176 	.globl _RCAP4
                                    177 	.globl _TMR4
                                    178 	.globl _TMR3RL
                                    179 	.globl _TMR3
                                    180 	.globl _RCAP2
                                    181 	.globl _TMR2
                                    182 	.globl _TMR1
                                    183 	.globl _TMR0
                                    184 	.globl _WDTCN
                                    185 	.globl _PCA0CPH4
                                    186 	.globl _PCA0CPH3
                                    187 	.globl _PCA0CPH2
                                    188 	.globl _PCA0CPH1
                                    189 	.globl _PCA0CPH0
                                    190 	.globl _PCA0H
                                    191 	.globl _SPI0CN
                                    192 	.globl _EIP2
                                    193 	.globl _EIP1
                                    194 	.globl _TH4
                                    195 	.globl _TL4
                                    196 	.globl _SADDR1
                                    197 	.globl _SBUF1
                                    198 	.globl _SCON1
                                    199 	.globl _B
                                    200 	.globl _RSTSRC
                                    201 	.globl _PCA0CPL4
                                    202 	.globl _PCA0CPL3
                                    203 	.globl _PCA0CPL2
                                    204 	.globl _PCA0CPL1
                                    205 	.globl _PCA0CPL0
                                    206 	.globl _PCA0L
                                    207 	.globl _ADC0CN
                                    208 	.globl _EIE2
                                    209 	.globl _EIE1
                                    210 	.globl _RCAP4H
                                    211 	.globl _RCAP4L
                                    212 	.globl _XBR2
                                    213 	.globl _XBR1
                                    214 	.globl _XBR0
                                    215 	.globl _ACC
                                    216 	.globl _PCA0CPM4
                                    217 	.globl _PCA0CPM3
                                    218 	.globl _PCA0CPM2
                                    219 	.globl _PCA0CPM1
                                    220 	.globl _PCA0CPM0
                                    221 	.globl _PCA0MD
                                    222 	.globl _PCA0CN
                                    223 	.globl _DAC1CN
                                    224 	.globl _DAC1H
                                    225 	.globl _DAC1L
                                    226 	.globl _DAC0CN
                                    227 	.globl _DAC0H
                                    228 	.globl _DAC0L
                                    229 	.globl _REF0CN
                                    230 	.globl _PSW
                                    231 	.globl _SMB0CR
                                    232 	.globl _TH2
                                    233 	.globl _TL2
                                    234 	.globl _RCAP2H
                                    235 	.globl _RCAP2L
                                    236 	.globl _T4CON
                                    237 	.globl _T2CON
                                    238 	.globl _ADC0LTH
                                    239 	.globl _ADC0LTL
                                    240 	.globl _ADC0GTH
                                    241 	.globl _ADC0GTL
                                    242 	.globl _SMB0ADR
                                    243 	.globl _SMB0DAT
                                    244 	.globl _SMB0STA
                                    245 	.globl _SMB0CN
                                    246 	.globl _ADC0H
                                    247 	.globl _ADC0L
                                    248 	.globl _P1MDIN
                                    249 	.globl _ADC0CF
                                    250 	.globl _AMX0SL
                                    251 	.globl _AMX0CF
                                    252 	.globl _SADEN0
                                    253 	.globl _IP
                                    254 	.globl _FLACL
                                    255 	.globl _FLSCL
                                    256 	.globl _P74OUT
                                    257 	.globl _OSCICN
                                    258 	.globl _OSCXCN
                                    259 	.globl _P3
                                    260 	.globl __XPAGE
                                    261 	.globl _EMI0CN
                                    262 	.globl _SADEN1
                                    263 	.globl _P3IF
                                    264 	.globl _AMX1SL
                                    265 	.globl _ADC1CF
                                    266 	.globl _ADC1CN
                                    267 	.globl _SADDR0
                                    268 	.globl _IE
                                    269 	.globl _P3MDOUT
                                    270 	.globl _PRT3CF
                                    271 	.globl _P2MDOUT
                                    272 	.globl _PRT2CF
                                    273 	.globl _P1MDOUT
                                    274 	.globl _PRT1CF
                                    275 	.globl _P0MDOUT
                                    276 	.globl _PRT0CF
                                    277 	.globl _EMI0CF
                                    278 	.globl _EMI0TC
                                    279 	.globl _P2
                                    280 	.globl _CPT1CN
                                    281 	.globl _CPT0CN
                                    282 	.globl _SPI0CKR
                                    283 	.globl _ADC1
                                    284 	.globl _SPI0DAT
                                    285 	.globl _SPI0CFG
                                    286 	.globl _SBUF0
                                    287 	.globl _SBUF
                                    288 	.globl _SCON0
                                    289 	.globl _SCON
                                    290 	.globl _P7
                                    291 	.globl _TMR3H
                                    292 	.globl _TMR3L
                                    293 	.globl _TMR3RLH
                                    294 	.globl _TMR3RLL
                                    295 	.globl _TMR3CN
                                    296 	.globl _P1
                                    297 	.globl _PSCTL
                                    298 	.globl _CKCON
                                    299 	.globl _TH1
                                    300 	.globl _TH0
                                    301 	.globl _TL1
                                    302 	.globl _TL0
                                    303 	.globl _TMOD
                                    304 	.globl _TCON
                                    305 	.globl _PCON
                                    306 	.globl _P6
                                    307 	.globl _P5
                                    308 	.globl _P4
                                    309 	.globl _DPH
                                    310 	.globl _DPL
                                    311 	.globl _SP
                                    312 	.globl _P0
                                    313 	.globl _FUNCTION_Db_PARM_3
                                    314 	.globl _FUNCTION_Db_PARM_2
                                    315 	.globl _FUNCTION_Da_PARM_3
                                    316 	.globl _FUNCTION_Da_PARM_2
                                    317 	.globl _MA_Copy
                                    318 	.globl _Guess_Array
                                    319 	.globl _Mastermind_Array
                                    320 	.globl _timer
                                    321 	.globl _TMAX
                                    322 	.globl _number_of_correct_spots
                                    323 	.globl _number_of_correct_colors
                                    324 	.globl _flag
                                    325 	.globl _buzzer_delay
                                    326 	.globl _j
                                    327 	.globl _i
                                    328 	.globl _result
                                    329 	.globl _points
                                    330 	.globl _green_score
                                    331 	.globl _amber_score
                                    332 	.globl _Seconds
                                    333 	.globl _Counts
                                    334 	.globl _GENERATE_MASTERMIND_ARRAY
                                    335 	.globl _FUNCTION_A
                                    336 	.globl _FUNCTION_B
                                    337 	.globl _FUNCTION_C
                                    338 	.globl _FUNCTION_Da
                                    339 	.globl _FUNCTION_Db
                                    340 	.globl _FUNCTION_E
                                    341 	.globl _FUNCTION_F
                                    342 	.globl _FUNCTION_G
                                    343 	.globl _Port_Init
                                    344 	.globl _ADC_Init
                                    345 	.globl _read_AD_input
                                    346 	.globl _random
                                    347 	.globl _Interrupt_Init
                                    348 	.globl _Timer_Init
                                    349 	.globl _Timer0_ISR
                                    350 	.globl _Start_Button
                                    351 	.globl _Switch_A0
                                    352 	.globl _Switch_A1
                                    353 	.globl _Switch_B0
                                    354 	.globl _Switch_B1
                                    355 	.globl _Switch_C0
                                    356 	.globl _Switch_C1
                                    357 	.globl _Debugging
                                    358 ;--------------------------------------------------------
                                    359 ; special function registers
                                    360 ;--------------------------------------------------------
                                    361 	.area RSEG    (ABS,DATA)
      000000                        362 	.org 0x0000
                           000080   363 G$P0$0$0 == 0x0080
                           000080   364 _P0	=	0x0080
                           000081   365 G$SP$0$0 == 0x0081
                           000081   366 _SP	=	0x0081
                           000082   367 G$DPL$0$0 == 0x0082
                           000082   368 _DPL	=	0x0082
                           000083   369 G$DPH$0$0 == 0x0083
                           000083   370 _DPH	=	0x0083
                           000084   371 G$P4$0$0 == 0x0084
                           000084   372 _P4	=	0x0084
                           000085   373 G$P5$0$0 == 0x0085
                           000085   374 _P5	=	0x0085
                           000086   375 G$P6$0$0 == 0x0086
                           000086   376 _P6	=	0x0086
                           000087   377 G$PCON$0$0 == 0x0087
                           000087   378 _PCON	=	0x0087
                           000088   379 G$TCON$0$0 == 0x0088
                           000088   380 _TCON	=	0x0088
                           000089   381 G$TMOD$0$0 == 0x0089
                           000089   382 _TMOD	=	0x0089
                           00008A   383 G$TL0$0$0 == 0x008a
                           00008A   384 _TL0	=	0x008a
                           00008B   385 G$TL1$0$0 == 0x008b
                           00008B   386 _TL1	=	0x008b
                           00008C   387 G$TH0$0$0 == 0x008c
                           00008C   388 _TH0	=	0x008c
                           00008D   389 G$TH1$0$0 == 0x008d
                           00008D   390 _TH1	=	0x008d
                           00008E   391 G$CKCON$0$0 == 0x008e
                           00008E   392 _CKCON	=	0x008e
                           00008F   393 G$PSCTL$0$0 == 0x008f
                           00008F   394 _PSCTL	=	0x008f
                           000090   395 G$P1$0$0 == 0x0090
                           000090   396 _P1	=	0x0090
                           000091   397 G$TMR3CN$0$0 == 0x0091
                           000091   398 _TMR3CN	=	0x0091
                           000092   399 G$TMR3RLL$0$0 == 0x0092
                           000092   400 _TMR3RLL	=	0x0092
                           000093   401 G$TMR3RLH$0$0 == 0x0093
                           000093   402 _TMR3RLH	=	0x0093
                           000094   403 G$TMR3L$0$0 == 0x0094
                           000094   404 _TMR3L	=	0x0094
                           000095   405 G$TMR3H$0$0 == 0x0095
                           000095   406 _TMR3H	=	0x0095
                           000096   407 G$P7$0$0 == 0x0096
                           000096   408 _P7	=	0x0096
                           000098   409 G$SCON$0$0 == 0x0098
                           000098   410 _SCON	=	0x0098
                           000098   411 G$SCON0$0$0 == 0x0098
                           000098   412 _SCON0	=	0x0098
                           000099   413 G$SBUF$0$0 == 0x0099
                           000099   414 _SBUF	=	0x0099
                           000099   415 G$SBUF0$0$0 == 0x0099
                           000099   416 _SBUF0	=	0x0099
                           00009A   417 G$SPI0CFG$0$0 == 0x009a
                           00009A   418 _SPI0CFG	=	0x009a
                           00009B   419 G$SPI0DAT$0$0 == 0x009b
                           00009B   420 _SPI0DAT	=	0x009b
                           00009C   421 G$ADC1$0$0 == 0x009c
                           00009C   422 _ADC1	=	0x009c
                           00009D   423 G$SPI0CKR$0$0 == 0x009d
                           00009D   424 _SPI0CKR	=	0x009d
                           00009E   425 G$CPT0CN$0$0 == 0x009e
                           00009E   426 _CPT0CN	=	0x009e
                           00009F   427 G$CPT1CN$0$0 == 0x009f
                           00009F   428 _CPT1CN	=	0x009f
                           0000A0   429 G$P2$0$0 == 0x00a0
                           0000A0   430 _P2	=	0x00a0
                           0000A1   431 G$EMI0TC$0$0 == 0x00a1
                           0000A1   432 _EMI0TC	=	0x00a1
                           0000A3   433 G$EMI0CF$0$0 == 0x00a3
                           0000A3   434 _EMI0CF	=	0x00a3
                           0000A4   435 G$PRT0CF$0$0 == 0x00a4
                           0000A4   436 _PRT0CF	=	0x00a4
                           0000A4   437 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   438 _P0MDOUT	=	0x00a4
                           0000A5   439 G$PRT1CF$0$0 == 0x00a5
                           0000A5   440 _PRT1CF	=	0x00a5
                           0000A5   441 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   442 _P1MDOUT	=	0x00a5
                           0000A6   443 G$PRT2CF$0$0 == 0x00a6
                           0000A6   444 _PRT2CF	=	0x00a6
                           0000A6   445 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   446 _P2MDOUT	=	0x00a6
                           0000A7   447 G$PRT3CF$0$0 == 0x00a7
                           0000A7   448 _PRT3CF	=	0x00a7
                           0000A7   449 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   450 _P3MDOUT	=	0x00a7
                           0000A8   451 G$IE$0$0 == 0x00a8
                           0000A8   452 _IE	=	0x00a8
                           0000A9   453 G$SADDR0$0$0 == 0x00a9
                           0000A9   454 _SADDR0	=	0x00a9
                           0000AA   455 G$ADC1CN$0$0 == 0x00aa
                           0000AA   456 _ADC1CN	=	0x00aa
                           0000AB   457 G$ADC1CF$0$0 == 0x00ab
                           0000AB   458 _ADC1CF	=	0x00ab
                           0000AC   459 G$AMX1SL$0$0 == 0x00ac
                           0000AC   460 _AMX1SL	=	0x00ac
                           0000AD   461 G$P3IF$0$0 == 0x00ad
                           0000AD   462 _P3IF	=	0x00ad
                           0000AE   463 G$SADEN1$0$0 == 0x00ae
                           0000AE   464 _SADEN1	=	0x00ae
                           0000AF   465 G$EMI0CN$0$0 == 0x00af
                           0000AF   466 _EMI0CN	=	0x00af
                           0000AF   467 G$_XPAGE$0$0 == 0x00af
                           0000AF   468 __XPAGE	=	0x00af
                           0000B0   469 G$P3$0$0 == 0x00b0
                           0000B0   470 _P3	=	0x00b0
                           0000B1   471 G$OSCXCN$0$0 == 0x00b1
                           0000B1   472 _OSCXCN	=	0x00b1
                           0000B2   473 G$OSCICN$0$0 == 0x00b2
                           0000B2   474 _OSCICN	=	0x00b2
                           0000B5   475 G$P74OUT$0$0 == 0x00b5
                           0000B5   476 _P74OUT	=	0x00b5
                           0000B6   477 G$FLSCL$0$0 == 0x00b6
                           0000B6   478 _FLSCL	=	0x00b6
                           0000B7   479 G$FLACL$0$0 == 0x00b7
                           0000B7   480 _FLACL	=	0x00b7
                           0000B8   481 G$IP$0$0 == 0x00b8
                           0000B8   482 _IP	=	0x00b8
                           0000B9   483 G$SADEN0$0$0 == 0x00b9
                           0000B9   484 _SADEN0	=	0x00b9
                           0000BA   485 G$AMX0CF$0$0 == 0x00ba
                           0000BA   486 _AMX0CF	=	0x00ba
                           0000BB   487 G$AMX0SL$0$0 == 0x00bb
                           0000BB   488 _AMX0SL	=	0x00bb
                           0000BC   489 G$ADC0CF$0$0 == 0x00bc
                           0000BC   490 _ADC0CF	=	0x00bc
                           0000BD   491 G$P1MDIN$0$0 == 0x00bd
                           0000BD   492 _P1MDIN	=	0x00bd
                           0000BE   493 G$ADC0L$0$0 == 0x00be
                           0000BE   494 _ADC0L	=	0x00be
                           0000BF   495 G$ADC0H$0$0 == 0x00bf
                           0000BF   496 _ADC0H	=	0x00bf
                           0000C0   497 G$SMB0CN$0$0 == 0x00c0
                           0000C0   498 _SMB0CN	=	0x00c0
                           0000C1   499 G$SMB0STA$0$0 == 0x00c1
                           0000C1   500 _SMB0STA	=	0x00c1
                           0000C2   501 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   502 _SMB0DAT	=	0x00c2
                           0000C3   503 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   504 _SMB0ADR	=	0x00c3
                           0000C4   505 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   506 _ADC0GTL	=	0x00c4
                           0000C5   507 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   508 _ADC0GTH	=	0x00c5
                           0000C6   509 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   510 _ADC0LTL	=	0x00c6
                           0000C7   511 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   512 _ADC0LTH	=	0x00c7
                           0000C8   513 G$T2CON$0$0 == 0x00c8
                           0000C8   514 _T2CON	=	0x00c8
                           0000C9   515 G$T4CON$0$0 == 0x00c9
                           0000C9   516 _T4CON	=	0x00c9
                           0000CA   517 G$RCAP2L$0$0 == 0x00ca
                           0000CA   518 _RCAP2L	=	0x00ca
                           0000CB   519 G$RCAP2H$0$0 == 0x00cb
                           0000CB   520 _RCAP2H	=	0x00cb
                           0000CC   521 G$TL2$0$0 == 0x00cc
                           0000CC   522 _TL2	=	0x00cc
                           0000CD   523 G$TH2$0$0 == 0x00cd
                           0000CD   524 _TH2	=	0x00cd
                           0000CF   525 G$SMB0CR$0$0 == 0x00cf
                           0000CF   526 _SMB0CR	=	0x00cf
                           0000D0   527 G$PSW$0$0 == 0x00d0
                           0000D0   528 _PSW	=	0x00d0
                           0000D1   529 G$REF0CN$0$0 == 0x00d1
                           0000D1   530 _REF0CN	=	0x00d1
                           0000D2   531 G$DAC0L$0$0 == 0x00d2
                           0000D2   532 _DAC0L	=	0x00d2
                           0000D3   533 G$DAC0H$0$0 == 0x00d3
                           0000D3   534 _DAC0H	=	0x00d3
                           0000D4   535 G$DAC0CN$0$0 == 0x00d4
                           0000D4   536 _DAC0CN	=	0x00d4
                           0000D5   537 G$DAC1L$0$0 == 0x00d5
                           0000D5   538 _DAC1L	=	0x00d5
                           0000D6   539 G$DAC1H$0$0 == 0x00d6
                           0000D6   540 _DAC1H	=	0x00d6
                           0000D7   541 G$DAC1CN$0$0 == 0x00d7
                           0000D7   542 _DAC1CN	=	0x00d7
                           0000D8   543 G$PCA0CN$0$0 == 0x00d8
                           0000D8   544 _PCA0CN	=	0x00d8
                           0000D9   545 G$PCA0MD$0$0 == 0x00d9
                           0000D9   546 _PCA0MD	=	0x00d9
                           0000DA   547 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   548 _PCA0CPM0	=	0x00da
                           0000DB   549 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   550 _PCA0CPM1	=	0x00db
                           0000DC   551 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   552 _PCA0CPM2	=	0x00dc
                           0000DD   553 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   554 _PCA0CPM3	=	0x00dd
                           0000DE   555 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   556 _PCA0CPM4	=	0x00de
                           0000E0   557 G$ACC$0$0 == 0x00e0
                           0000E0   558 _ACC	=	0x00e0
                           0000E1   559 G$XBR0$0$0 == 0x00e1
                           0000E1   560 _XBR0	=	0x00e1
                           0000E2   561 G$XBR1$0$0 == 0x00e2
                           0000E2   562 _XBR1	=	0x00e2
                           0000E3   563 G$XBR2$0$0 == 0x00e3
                           0000E3   564 _XBR2	=	0x00e3
                           0000E4   565 G$RCAP4L$0$0 == 0x00e4
                           0000E4   566 _RCAP4L	=	0x00e4
                           0000E5   567 G$RCAP4H$0$0 == 0x00e5
                           0000E5   568 _RCAP4H	=	0x00e5
                           0000E6   569 G$EIE1$0$0 == 0x00e6
                           0000E6   570 _EIE1	=	0x00e6
                           0000E7   571 G$EIE2$0$0 == 0x00e7
                           0000E7   572 _EIE2	=	0x00e7
                           0000E8   573 G$ADC0CN$0$0 == 0x00e8
                           0000E8   574 _ADC0CN	=	0x00e8
                           0000E9   575 G$PCA0L$0$0 == 0x00e9
                           0000E9   576 _PCA0L	=	0x00e9
                           0000EA   577 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   578 _PCA0CPL0	=	0x00ea
                           0000EB   579 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   580 _PCA0CPL1	=	0x00eb
                           0000EC   581 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   582 _PCA0CPL2	=	0x00ec
                           0000ED   583 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   584 _PCA0CPL3	=	0x00ed
                           0000EE   585 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   586 _PCA0CPL4	=	0x00ee
                           0000EF   587 G$RSTSRC$0$0 == 0x00ef
                           0000EF   588 _RSTSRC	=	0x00ef
                           0000F0   589 G$B$0$0 == 0x00f0
                           0000F0   590 _B	=	0x00f0
                           0000F1   591 G$SCON1$0$0 == 0x00f1
                           0000F1   592 _SCON1	=	0x00f1
                           0000F2   593 G$SBUF1$0$0 == 0x00f2
                           0000F2   594 _SBUF1	=	0x00f2
                           0000F3   595 G$SADDR1$0$0 == 0x00f3
                           0000F3   596 _SADDR1	=	0x00f3
                           0000F4   597 G$TL4$0$0 == 0x00f4
                           0000F4   598 _TL4	=	0x00f4
                           0000F5   599 G$TH4$0$0 == 0x00f5
                           0000F5   600 _TH4	=	0x00f5
                           0000F6   601 G$EIP1$0$0 == 0x00f6
                           0000F6   602 _EIP1	=	0x00f6
                           0000F7   603 G$EIP2$0$0 == 0x00f7
                           0000F7   604 _EIP2	=	0x00f7
                           0000F8   605 G$SPI0CN$0$0 == 0x00f8
                           0000F8   606 _SPI0CN	=	0x00f8
                           0000F9   607 G$PCA0H$0$0 == 0x00f9
                           0000F9   608 _PCA0H	=	0x00f9
                           0000FA   609 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   610 _PCA0CPH0	=	0x00fa
                           0000FB   611 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   612 _PCA0CPH1	=	0x00fb
                           0000FC   613 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   614 _PCA0CPH2	=	0x00fc
                           0000FD   615 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   616 _PCA0CPH3	=	0x00fd
                           0000FE   617 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   618 _PCA0CPH4	=	0x00fe
                           0000FF   619 G$WDTCN$0$0 == 0x00ff
                           0000FF   620 _WDTCN	=	0x00ff
                           008C8A   621 G$TMR0$0$0 == 0x8c8a
                           008C8A   622 _TMR0	=	0x8c8a
                           008D8B   623 G$TMR1$0$0 == 0x8d8b
                           008D8B   624 _TMR1	=	0x8d8b
                           00CDCC   625 G$TMR2$0$0 == 0xcdcc
                           00CDCC   626 _TMR2	=	0xcdcc
                           00CBCA   627 G$RCAP2$0$0 == 0xcbca
                           00CBCA   628 _RCAP2	=	0xcbca
                           009594   629 G$TMR3$0$0 == 0x9594
                           009594   630 _TMR3	=	0x9594
                           009392   631 G$TMR3RL$0$0 == 0x9392
                           009392   632 _TMR3RL	=	0x9392
                           00F5F4   633 G$TMR4$0$0 == 0xf5f4
                           00F5F4   634 _TMR4	=	0xf5f4
                           00E5E4   635 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   636 _RCAP4	=	0xe5e4
                           00BFBE   637 G$ADC0$0$0 == 0xbfbe
                           00BFBE   638 _ADC0	=	0xbfbe
                           00C5C4   639 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   640 _ADC0GT	=	0xc5c4
                           00C7C6   641 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   642 _ADC0LT	=	0xc7c6
                           00D3D2   643 G$DAC0$0$0 == 0xd3d2
                           00D3D2   644 _DAC0	=	0xd3d2
                           00D6D5   645 G$DAC1$0$0 == 0xd6d5
                           00D6D5   646 _DAC1	=	0xd6d5
                           00F9E9   647 G$PCA0$0$0 == 0xf9e9
                           00F9E9   648 _PCA0	=	0xf9e9
                           00FAEA   649 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   650 _PCA0CP0	=	0xfaea
                           00FBEB   651 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   652 _PCA0CP1	=	0xfbeb
                           00FCEC   653 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   654 _PCA0CP2	=	0xfcec
                           00FDED   655 G$PCA0CP3$0$0 == 0xfded
                           00FDED   656 _PCA0CP3	=	0xfded
                           00FEEE   657 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   658 _PCA0CP4	=	0xfeee
                                    659 ;--------------------------------------------------------
                                    660 ; special function bits
                                    661 ;--------------------------------------------------------
                                    662 	.area RSEG    (ABS,DATA)
      000000                        663 	.org 0x0000
                           000080   664 G$P0_0$0$0 == 0x0080
                           000080   665 _P0_0	=	0x0080
                           000081   666 G$P0_1$0$0 == 0x0081
                           000081   667 _P0_1	=	0x0081
                           000082   668 G$P0_2$0$0 == 0x0082
                           000082   669 _P0_2	=	0x0082
                           000083   670 G$P0_3$0$0 == 0x0083
                           000083   671 _P0_3	=	0x0083
                           000084   672 G$P0_4$0$0 == 0x0084
                           000084   673 _P0_4	=	0x0084
                           000085   674 G$P0_5$0$0 == 0x0085
                           000085   675 _P0_5	=	0x0085
                           000086   676 G$P0_6$0$0 == 0x0086
                           000086   677 _P0_6	=	0x0086
                           000087   678 G$P0_7$0$0 == 0x0087
                           000087   679 _P0_7	=	0x0087
                           000088   680 G$IT0$0$0 == 0x0088
                           000088   681 _IT0	=	0x0088
                           000089   682 G$IE0$0$0 == 0x0089
                           000089   683 _IE0	=	0x0089
                           00008A   684 G$IT1$0$0 == 0x008a
                           00008A   685 _IT1	=	0x008a
                           00008B   686 G$IE1$0$0 == 0x008b
                           00008B   687 _IE1	=	0x008b
                           00008C   688 G$TR0$0$0 == 0x008c
                           00008C   689 _TR0	=	0x008c
                           00008D   690 G$TF0$0$0 == 0x008d
                           00008D   691 _TF0	=	0x008d
                           00008E   692 G$TR1$0$0 == 0x008e
                           00008E   693 _TR1	=	0x008e
                           00008F   694 G$TF1$0$0 == 0x008f
                           00008F   695 _TF1	=	0x008f
                           000090   696 G$P1_0$0$0 == 0x0090
                           000090   697 _P1_0	=	0x0090
                           000091   698 G$P1_1$0$0 == 0x0091
                           000091   699 _P1_1	=	0x0091
                           000092   700 G$P1_2$0$0 == 0x0092
                           000092   701 _P1_2	=	0x0092
                           000093   702 G$P1_3$0$0 == 0x0093
                           000093   703 _P1_3	=	0x0093
                           000094   704 G$P1_4$0$0 == 0x0094
                           000094   705 _P1_4	=	0x0094
                           000095   706 G$P1_5$0$0 == 0x0095
                           000095   707 _P1_5	=	0x0095
                           000096   708 G$P1_6$0$0 == 0x0096
                           000096   709 _P1_6	=	0x0096
                           000097   710 G$P1_7$0$0 == 0x0097
                           000097   711 _P1_7	=	0x0097
                           000098   712 G$RI$0$0 == 0x0098
                           000098   713 _RI	=	0x0098
                           000098   714 G$RI0$0$0 == 0x0098
                           000098   715 _RI0	=	0x0098
                           000099   716 G$TI$0$0 == 0x0099
                           000099   717 _TI	=	0x0099
                           000099   718 G$TI0$0$0 == 0x0099
                           000099   719 _TI0	=	0x0099
                           00009A   720 G$RB8$0$0 == 0x009a
                           00009A   721 _RB8	=	0x009a
                           00009A   722 G$RB80$0$0 == 0x009a
                           00009A   723 _RB80	=	0x009a
                           00009B   724 G$TB8$0$0 == 0x009b
                           00009B   725 _TB8	=	0x009b
                           00009B   726 G$TB80$0$0 == 0x009b
                           00009B   727 _TB80	=	0x009b
                           00009C   728 G$REN$0$0 == 0x009c
                           00009C   729 _REN	=	0x009c
                           00009C   730 G$REN0$0$0 == 0x009c
                           00009C   731 _REN0	=	0x009c
                           00009D   732 G$SM2$0$0 == 0x009d
                           00009D   733 _SM2	=	0x009d
                           00009D   734 G$SM20$0$0 == 0x009d
                           00009D   735 _SM20	=	0x009d
                           00009D   736 G$MCE0$0$0 == 0x009d
                           00009D   737 _MCE0	=	0x009d
                           00009E   738 G$SM1$0$0 == 0x009e
                           00009E   739 _SM1	=	0x009e
                           00009E   740 G$SM10$0$0 == 0x009e
                           00009E   741 _SM10	=	0x009e
                           00009F   742 G$SM0$0$0 == 0x009f
                           00009F   743 _SM0	=	0x009f
                           00009F   744 G$SM00$0$0 == 0x009f
                           00009F   745 _SM00	=	0x009f
                           00009F   746 G$S0MODE$0$0 == 0x009f
                           00009F   747 _S0MODE	=	0x009f
                           0000A0   748 G$P2_0$0$0 == 0x00a0
                           0000A0   749 _P2_0	=	0x00a0
                           0000A1   750 G$P2_1$0$0 == 0x00a1
                           0000A1   751 _P2_1	=	0x00a1
                           0000A2   752 G$P2_2$0$0 == 0x00a2
                           0000A2   753 _P2_2	=	0x00a2
                           0000A3   754 G$P2_3$0$0 == 0x00a3
                           0000A3   755 _P2_3	=	0x00a3
                           0000A4   756 G$P2_4$0$0 == 0x00a4
                           0000A4   757 _P2_4	=	0x00a4
                           0000A5   758 G$P2_5$0$0 == 0x00a5
                           0000A5   759 _P2_5	=	0x00a5
                           0000A6   760 G$P2_6$0$0 == 0x00a6
                           0000A6   761 _P2_6	=	0x00a6
                           0000A7   762 G$P2_7$0$0 == 0x00a7
                           0000A7   763 _P2_7	=	0x00a7
                           0000A8   764 G$EX0$0$0 == 0x00a8
                           0000A8   765 _EX0	=	0x00a8
                           0000A9   766 G$ET0$0$0 == 0x00a9
                           0000A9   767 _ET0	=	0x00a9
                           0000AA   768 G$EX1$0$0 == 0x00aa
                           0000AA   769 _EX1	=	0x00aa
                           0000AB   770 G$ET1$0$0 == 0x00ab
                           0000AB   771 _ET1	=	0x00ab
                           0000AC   772 G$ES0$0$0 == 0x00ac
                           0000AC   773 _ES0	=	0x00ac
                           0000AC   774 G$ES$0$0 == 0x00ac
                           0000AC   775 _ES	=	0x00ac
                           0000AD   776 G$ET2$0$0 == 0x00ad
                           0000AD   777 _ET2	=	0x00ad
                           0000AF   778 G$EA$0$0 == 0x00af
                           0000AF   779 _EA	=	0x00af
                           0000B0   780 G$P3_0$0$0 == 0x00b0
                           0000B0   781 _P3_0	=	0x00b0
                           0000B1   782 G$P3_1$0$0 == 0x00b1
                           0000B1   783 _P3_1	=	0x00b1
                           0000B2   784 G$P3_2$0$0 == 0x00b2
                           0000B2   785 _P3_2	=	0x00b2
                           0000B3   786 G$P3_3$0$0 == 0x00b3
                           0000B3   787 _P3_3	=	0x00b3
                           0000B4   788 G$P3_4$0$0 == 0x00b4
                           0000B4   789 _P3_4	=	0x00b4
                           0000B5   790 G$P3_5$0$0 == 0x00b5
                           0000B5   791 _P3_5	=	0x00b5
                           0000B6   792 G$P3_6$0$0 == 0x00b6
                           0000B6   793 _P3_6	=	0x00b6
                           0000B7   794 G$P3_7$0$0 == 0x00b7
                           0000B7   795 _P3_7	=	0x00b7
                           0000B8   796 G$PX0$0$0 == 0x00b8
                           0000B8   797 _PX0	=	0x00b8
                           0000B9   798 G$PT0$0$0 == 0x00b9
                           0000B9   799 _PT0	=	0x00b9
                           0000BA   800 G$PX1$0$0 == 0x00ba
                           0000BA   801 _PX1	=	0x00ba
                           0000BB   802 G$PT1$0$0 == 0x00bb
                           0000BB   803 _PT1	=	0x00bb
                           0000BC   804 G$PS0$0$0 == 0x00bc
                           0000BC   805 _PS0	=	0x00bc
                           0000BC   806 G$PS$0$0 == 0x00bc
                           0000BC   807 _PS	=	0x00bc
                           0000BD   808 G$PT2$0$0 == 0x00bd
                           0000BD   809 _PT2	=	0x00bd
                           0000C0   810 G$SMBTOE$0$0 == 0x00c0
                           0000C0   811 _SMBTOE	=	0x00c0
                           0000C1   812 G$SMBFTE$0$0 == 0x00c1
                           0000C1   813 _SMBFTE	=	0x00c1
                           0000C2   814 G$AA$0$0 == 0x00c2
                           0000C2   815 _AA	=	0x00c2
                           0000C3   816 G$SI$0$0 == 0x00c3
                           0000C3   817 _SI	=	0x00c3
                           0000C4   818 G$STO$0$0 == 0x00c4
                           0000C4   819 _STO	=	0x00c4
                           0000C5   820 G$STA$0$0 == 0x00c5
                           0000C5   821 _STA	=	0x00c5
                           0000C6   822 G$ENSMB$0$0 == 0x00c6
                           0000C6   823 _ENSMB	=	0x00c6
                           0000C7   824 G$BUSY$0$0 == 0x00c7
                           0000C7   825 _BUSY	=	0x00c7
                           0000C8   826 G$CPRL2$0$0 == 0x00c8
                           0000C8   827 _CPRL2	=	0x00c8
                           0000C9   828 G$CT2$0$0 == 0x00c9
                           0000C9   829 _CT2	=	0x00c9
                           0000CA   830 G$TR2$0$0 == 0x00ca
                           0000CA   831 _TR2	=	0x00ca
                           0000CB   832 G$EXEN2$0$0 == 0x00cb
                           0000CB   833 _EXEN2	=	0x00cb
                           0000CC   834 G$TCLK$0$0 == 0x00cc
                           0000CC   835 _TCLK	=	0x00cc
                           0000CD   836 G$RCLK$0$0 == 0x00cd
                           0000CD   837 _RCLK	=	0x00cd
                           0000CE   838 G$EXF2$0$0 == 0x00ce
                           0000CE   839 _EXF2	=	0x00ce
                           0000CF   840 G$TF2$0$0 == 0x00cf
                           0000CF   841 _TF2	=	0x00cf
                           0000D0   842 G$P$0$0 == 0x00d0
                           0000D0   843 _P	=	0x00d0
                           0000D1   844 G$F1$0$0 == 0x00d1
                           0000D1   845 _F1	=	0x00d1
                           0000D2   846 G$OV$0$0 == 0x00d2
                           0000D2   847 _OV	=	0x00d2
                           0000D3   848 G$RS0$0$0 == 0x00d3
                           0000D3   849 _RS0	=	0x00d3
                           0000D4   850 G$RS1$0$0 == 0x00d4
                           0000D4   851 _RS1	=	0x00d4
                           0000D5   852 G$F0$0$0 == 0x00d5
                           0000D5   853 _F0	=	0x00d5
                           0000D6   854 G$AC$0$0 == 0x00d6
                           0000D6   855 _AC	=	0x00d6
                           0000D7   856 G$CY$0$0 == 0x00d7
                           0000D7   857 _CY	=	0x00d7
                           0000D8   858 G$CCF0$0$0 == 0x00d8
                           0000D8   859 _CCF0	=	0x00d8
                           0000D9   860 G$CCF1$0$0 == 0x00d9
                           0000D9   861 _CCF1	=	0x00d9
                           0000DA   862 G$CCF2$0$0 == 0x00da
                           0000DA   863 _CCF2	=	0x00da
                           0000DB   864 G$CCF3$0$0 == 0x00db
                           0000DB   865 _CCF3	=	0x00db
                           0000DC   866 G$CCF4$0$0 == 0x00dc
                           0000DC   867 _CCF4	=	0x00dc
                           0000DE   868 G$CR$0$0 == 0x00de
                           0000DE   869 _CR	=	0x00de
                           0000DF   870 G$CF$0$0 == 0x00df
                           0000DF   871 _CF	=	0x00df
                           0000E8   872 G$ADLJST$0$0 == 0x00e8
                           0000E8   873 _ADLJST	=	0x00e8
                           0000E8   874 G$AD0LJST$0$0 == 0x00e8
                           0000E8   875 _AD0LJST	=	0x00e8
                           0000E9   876 G$ADWINT$0$0 == 0x00e9
                           0000E9   877 _ADWINT	=	0x00e9
                           0000E9   878 G$AD0WINT$0$0 == 0x00e9
                           0000E9   879 _AD0WINT	=	0x00e9
                           0000EA   880 G$ADSTM0$0$0 == 0x00ea
                           0000EA   881 _ADSTM0	=	0x00ea
                           0000EA   882 G$AD0CM0$0$0 == 0x00ea
                           0000EA   883 _AD0CM0	=	0x00ea
                           0000EB   884 G$ADSTM1$0$0 == 0x00eb
                           0000EB   885 _ADSTM1	=	0x00eb
                           0000EB   886 G$AD0CM1$0$0 == 0x00eb
                           0000EB   887 _AD0CM1	=	0x00eb
                           0000EC   888 G$ADBUSY$0$0 == 0x00ec
                           0000EC   889 _ADBUSY	=	0x00ec
                           0000EC   890 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   891 _AD0BUSY	=	0x00ec
                           0000ED   892 G$ADCINT$0$0 == 0x00ed
                           0000ED   893 _ADCINT	=	0x00ed
                           0000ED   894 G$AD0INT$0$0 == 0x00ed
                           0000ED   895 _AD0INT	=	0x00ed
                           0000EE   896 G$ADCTM$0$0 == 0x00ee
                           0000EE   897 _ADCTM	=	0x00ee
                           0000EE   898 G$AD0TM$0$0 == 0x00ee
                           0000EE   899 _AD0TM	=	0x00ee
                           0000EF   900 G$ADCEN$0$0 == 0x00ef
                           0000EF   901 _ADCEN	=	0x00ef
                           0000EF   902 G$AD0EN$0$0 == 0x00ef
                           0000EF   903 _AD0EN	=	0x00ef
                           0000F8   904 G$SPIEN$0$0 == 0x00f8
                           0000F8   905 _SPIEN	=	0x00f8
                           0000F9   906 G$MSTEN$0$0 == 0x00f9
                           0000F9   907 _MSTEN	=	0x00f9
                           0000FA   908 G$SLVSEL$0$0 == 0x00fa
                           0000FA   909 _SLVSEL	=	0x00fa
                           0000FB   910 G$TXBSY$0$0 == 0x00fb
                           0000FB   911 _TXBSY	=	0x00fb
                           0000FC   912 G$RXOVRN$0$0 == 0x00fc
                           0000FC   913 _RXOVRN	=	0x00fc
                           0000FD   914 G$MODF$0$0 == 0x00fd
                           0000FD   915 _MODF	=	0x00fd
                           0000FE   916 G$WCOL$0$0 == 0x00fe
                           0000FE   917 _WCOL	=	0x00fe
                           0000FF   918 G$SPIF$0$0 == 0x00ff
                           0000FF   919 _SPIF	=	0x00ff
                           000084   920 G$BILEDA0$0$0 == 0x0084
                           000084   921 _BILEDA0	=	0x0084
                           000085   922 G$BILEDA1$0$0 == 0x0085
                           000085   923 _BILEDA1	=	0x0085
                           000082   924 G$SWITCHA0$0$0 == 0x0082
                           000082   925 _SWITCHA0	=	0x0082
                           000083   926 G$SWITCHA1$0$0 == 0x0083
                           000083   927 _SWITCHA1	=	0x0083
                           000080   928 G$BILEDB0$0$0 == 0x0080
                           000080   929 _BILEDB0	=	0x0080
                           000081   930 G$BILEDB1$0$0 == 0x0081
                           000081   931 _BILEDB1	=	0x0081
                           0000A6   932 G$SWITCHB0$0$0 == 0x00a6
                           0000A6   933 _SWITCHB0	=	0x00a6
                           0000A7   934 G$SWITCHB1$0$0 == 0x00a7
                           0000A7   935 _SWITCHB1	=	0x00a7
                           0000A4   936 G$BILEDC0$0$0 == 0x00a4
                           0000A4   937 _BILEDC0	=	0x00a4
                           0000A5   938 G$BILEDC1$0$0 == 0x00a5
                           0000A5   939 _BILEDC1	=	0x00a5
                           0000A2   940 G$SWITCHC0$0$0 == 0x00a2
                           0000A2   941 _SWITCHC0	=	0x00a2
                           0000A3   942 G$SWITCHC1$0$0 == 0x00a3
                           0000A3   943 _SWITCHC1	=	0x00a3
                           0000B0   944 G$AMBER$0$0 == 0x00b0
                           0000B0   945 _AMBER	=	0x00b0
                           0000B1   946 G$GREEN$0$0 == 0x00b1
                           0000B1   947 _GREEN	=	0x00b1
                           0000B2   948 G$BUZZER$0$0 == 0x00b2
                           0000B2   949 _BUZZER	=	0x00b2
                           0000B3   950 G$BUTTON$0$0 == 0x00b3
                           0000B3   951 _BUTTON	=	0x00b3
                                    952 ;--------------------------------------------------------
                                    953 ; overlayable register banks
                                    954 ;--------------------------------------------------------
                                    955 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        956 	.ds 8
                                    957 ;--------------------------------------------------------
                                    958 ; internal ram data
                                    959 ;--------------------------------------------------------
                                    960 	.area DSEG    (DATA)
                           000000   961 G$Counts$0$0==.
      000000                        962 _Counts::
      000000                        963 	.ds 2
                           000002   964 G$Seconds$0$0==.
      000002                        965 _Seconds::
      000002                        966 	.ds 1
                           000003   967 G$amber_score$0$0==.
      000003                        968 _amber_score::
      000003                        969 	.ds 1
                           000004   970 G$green_score$0$0==.
      000004                        971 _green_score::
      000004                        972 	.ds 1
                           000005   973 G$points$0$0==.
      000005                        974 _points::
      000005                        975 	.ds 1
                           000006   976 G$result$0$0==.
      000006                        977 _result::
      000006                        978 	.ds 1
                           000007   979 G$i$0$0==.
      000007                        980 _i::
      000007                        981 	.ds 2
                           000009   982 G$j$0$0==.
      000009                        983 _j::
      000009                        984 	.ds 2
                           00000B   985 G$buzzer_delay$0$0==.
      00000B                        986 _buzzer_delay::
      00000B                        987 	.ds 2
                           00000D   988 G$flag$0$0==.
      00000D                        989 _flag::
      00000D                        990 	.ds 2
                           00000F   991 G$number_of_correct_colors$0$0==.
      00000F                        992 _number_of_correct_colors::
      00000F                        993 	.ds 1
                           000010   994 G$number_of_correct_spots$0$0==.
      000010                        995 _number_of_correct_spots::
      000010                        996 	.ds 1
                           000011   997 G$TMAX$0$0==.
      000011                        998 _TMAX::
      000011                        999 	.ds 1
                           000012  1000 G$timer$0$0==.
      000012                       1001 _timer::
      000012                       1002 	.ds 1
                           000013  1003 G$Mastermind_Array$0$0==.
      000013                       1004 _Mastermind_Array::
      000013                       1005 	.ds 6
                           000019  1006 G$Guess_Array$0$0==.
      000019                       1007 _Guess_Array::
      000019                       1008 	.ds 6
                           00001F  1009 G$MA_Copy$0$0==.
      00001F                       1010 _MA_Copy::
      00001F                       1011 	.ds 6
                           000025  1012 LLab_2.FUNCTION_Da$Guess_Array$1$100==.
      000025                       1013 _FUNCTION_Da_PARM_2:
      000025                       1014 	.ds 3
                           000028  1015 LLab_2.FUNCTION_Da$amber_score$1$100==.
      000028                       1016 _FUNCTION_Da_PARM_3:
      000028                       1017 	.ds 1
                           000029  1018 LLab_2.FUNCTION_Db$Guess_Array$1$105==.
      000029                       1019 _FUNCTION_Db_PARM_2:
      000029                       1020 	.ds 3
                           00002C  1021 LLab_2.FUNCTION_Db$green_score$1$105==.
      00002C                       1022 _FUNCTION_Db_PARM_3:
      00002C                       1023 	.ds 1
                                   1024 ;--------------------------------------------------------
                                   1025 ; overlayable items in internal ram 
                                   1026 ;--------------------------------------------------------
                                   1027 	.area	OSEG    (OVR,DATA)
                                   1028 	.area	OSEG    (OVR,DATA)
                                   1029 	.area	OSEG    (OVR,DATA)
                           000000  1030 LLab_2.FUNCTION_B$Guess_Array$1$90==.
      000000                       1031 _FUNCTION_B_PARM_2:
      000000                       1032 	.ds 3
                           000003  1033 LLab_2.FUNCTION_B$Mastermind_Array$1$90==.
      000003                       1034 _FUNCTION_B_Mastermind_Array_1_90:
      000003                       1035 	.ds 3
                                   1036 	.area	OSEG    (OVR,DATA)
                           000000  1037 LLab_2.FUNCTION_C$Guess_Array$1$96==.
      000000                       1038 _FUNCTION_C_PARM_2:
      000000                       1039 	.ds 3
                                   1040 	.area	OSEG    (OVR,DATA)
                                   1041 	.area	OSEG    (OVR,DATA)
                                   1042 ;--------------------------------------------------------
                                   1043 ; Stack segment in internal ram 
                                   1044 ;--------------------------------------------------------
                                   1045 	.area	SSEG
      000000                       1046 __start__stack:
      000000                       1047 	.ds	1
                                   1048 
                                   1049 ;--------------------------------------------------------
                                   1050 ; indirectly addressable internal ram data
                                   1051 ;--------------------------------------------------------
                                   1052 	.area ISEG    (DATA)
                                   1053 ;--------------------------------------------------------
                                   1054 ; absolute internal ram data
                                   1055 ;--------------------------------------------------------
                                   1056 	.area IABS    (ABS,DATA)
                                   1057 	.area IABS    (ABS,DATA)
                                   1058 ;--------------------------------------------------------
                                   1059 ; bit data
                                   1060 ;--------------------------------------------------------
                                   1061 	.area BSEG    (BIT)
                                   1062 ;--------------------------------------------------------
                                   1063 ; paged external ram data
                                   1064 ;--------------------------------------------------------
                                   1065 	.area PSEG    (PAG,XDATA)
                                   1066 ;--------------------------------------------------------
                                   1067 ; external ram data
                                   1068 ;--------------------------------------------------------
                                   1069 	.area XSEG    (XDATA)
                                   1070 ;--------------------------------------------------------
                                   1071 ; absolute external ram data
                                   1072 ;--------------------------------------------------------
                                   1073 	.area XABS    (ABS,XDATA)
                                   1074 ;--------------------------------------------------------
                                   1075 ; external initialized ram data
                                   1076 ;--------------------------------------------------------
                                   1077 	.area XISEG   (XDATA)
                                   1078 	.area HOME    (CODE)
                                   1079 	.area GSINIT0 (CODE)
                                   1080 	.area GSINIT1 (CODE)
                                   1081 	.area GSINIT2 (CODE)
                                   1082 	.area GSINIT3 (CODE)
                                   1083 	.area GSINIT4 (CODE)
                                   1084 	.area GSINIT5 (CODE)
                                   1085 	.area GSINIT  (CODE)
                                   1086 	.area GSFINAL (CODE)
                                   1087 	.area CSEG    (CODE)
                                   1088 ;--------------------------------------------------------
                                   1089 ; interrupt vector 
                                   1090 ;--------------------------------------------------------
                                   1091 	.area HOME    (CODE)
      000000                       1092 __interrupt_vect:
      000000 02r00r00         [24] 1093 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1094 	reti
      000004                       1095 	.ds	7
      00000B 02r0Br20         [24] 1096 	ljmp	_Timer0_ISR
                                   1097 ;--------------------------------------------------------
                                   1098 ; global & static initialisations
                                   1099 ;--------------------------------------------------------
                                   1100 	.area HOME    (CODE)
                                   1101 	.area GSINIT  (CODE)
                                   1102 	.area GSFINAL (CODE)
                                   1103 	.area GSINIT  (CODE)
                                   1104 	.globl __sdcc_gsinit_startup
                                   1105 	.globl __sdcc_program_startup
                                   1106 	.globl __start__stack
                                   1107 	.globl __mcs51_genXINIT
                                   1108 	.globl __mcs51_genXRAMCLEAR
                                   1109 	.globl __mcs51_genRAMCLEAR
                           000000  1110 	C$Lab_2.c$67$1$173 ==.
                                   1111 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:67: unsigned int Counts = 0;				// elements to be used when keeping track of time
      000000 E4               [12] 1112 	clr	a
      000001 F5*00            [12] 1113 	mov	_Counts,a
      000003 F5*01            [12] 1114 	mov	(_Counts + 1),a
                           000005  1115 	C$Lab_2.c$68$1$173 ==.
                                   1116 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:68: unsigned char Seconds = 0;
                                   1117 ;	1-genFromRTrack replaced	mov	_Seconds,#0x00
      000005 F5*02            [12] 1118 	mov	_Seconds,a
                           000007  1119 	C$Lab_2.c$69$1$173 ==.
                                   1120 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:69: unsigned char amber_score = 0;
                                   1121 ;	1-genFromRTrack replaced	mov	_amber_score,#0x00
      000007 F5*03            [12] 1122 	mov	_amber_score,a
                           000009  1123 	C$Lab_2.c$70$1$173 ==.
                                   1124 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:70: unsigned char green_score = 0;
                                   1125 ;	1-genFromRTrack replaced	mov	_green_score,#0x00
      000009 F5*04            [12] 1126 	mov	_green_score,a
                           00000B  1127 	C$Lab_2.c$71$1$173 ==.
                                   1128 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:71: unsigned char points = 0;				// temporary points value obtained per round
                                   1129 ;	1-genFromRTrack replaced	mov	_points,#0x00
      00000B F5*05            [12] 1130 	mov	_points,a
                           00000D  1131 	C$Lab_2.c$73$1$173 ==.
                                   1132 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:73: int i = 0;
      00000D F5*07            [12] 1133 	mov	_i,a
      00000F F5*08            [12] 1134 	mov	(_i + 1),a
                           000011  1135 	C$Lab_2.c$74$1$173 ==.
                                   1136 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:74: int j = 0;
      000011 F5*09            [12] 1137 	mov	_j,a
      000013 F5*0A            [12] 1138 	mov	(_j + 1),a
                           000015  1139 	C$Lab_2.c$75$1$173 ==.
                                   1140 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:75: int buzzer_delay = 0;
      000015 F5*0B            [12] 1141 	mov	_buzzer_delay,a
      000017 F5*0C            [12] 1142 	mov	(_buzzer_delay + 1),a
                           000019  1143 	C$Lab_2.c$76$1$173 ==.
                                   1144 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:76: int flag = 0;
      000019 F5*0D            [12] 1145 	mov	_flag,a
      00001B F5*0E            [12] 1146 	mov	(_flag + 1),a
                           00001D  1147 	C$Lab_2.c$77$1$173 ==.
                                   1148 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:77: unsigned char number_of_correct_colors = 0;
                                   1149 ;	1-genFromRTrack replaced	mov	_number_of_correct_colors,#0x00
      00001D F5*0F            [12] 1150 	mov	_number_of_correct_colors,a
                           00001F  1151 	C$Lab_2.c$78$1$173 ==.
                                   1152 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:78: unsigned char number_of_correct_spots = 0;
                                   1153 ;	1-genFromRTrack replaced	mov	_number_of_correct_spots,#0x00
      00001F F5*10            [12] 1154 	mov	_number_of_correct_spots,a
                           000021  1155 	C$Lab_2.c$80$1$173 ==.
                                   1156 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:80: unsigned char TMAX = 0;					// maximum time per round
                                   1157 ;	1-genFromRTrack replaced	mov	_TMAX,#0x00
      000021 F5*11            [12] 1158 	mov	_TMAX,a
                           000023  1159 	C$Lab_2.c$81$1$173 ==.
                                   1160 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:81: unsigned char timer = 0;				// timer for each round
                                   1161 ;	1-genFromRTrack replaced	mov	_timer,#0x00
      000023 F5*12            [12] 1162 	mov	_timer,a
                           000025  1163 	C$Lab_2.c$84$1$173 ==.
                                   1164 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:84: int Mastermind_Array[3] = { 7, 7, 7 };
      000025 75*13 07         [24] 1165 	mov	(_Mastermind_Array + 0),#0x07
                                   1166 ;	1-genFromRTrack replaced	mov	(_Mastermind_Array + 1),#0x00
      000028 F5*14            [12] 1167 	mov	(_Mastermind_Array + 1),a
      00002A 75*15 07         [24] 1168 	mov	((_Mastermind_Array + 0x0002) + 0),#0x07
                                   1169 ;	1-genFromRTrack replaced	mov	((_Mastermind_Array + 0x0002) + 1),#0x00
      00002D F5*16            [12] 1170 	mov	((_Mastermind_Array + 0x0002) + 1),a
      00002F 75*17 07         [24] 1171 	mov	((_Mastermind_Array + 0x0004) + 0),#0x07
                                   1172 ;	1-genFromRTrack replaced	mov	((_Mastermind_Array + 0x0004) + 1),#0x00
      000032 F5*18            [12] 1173 	mov	((_Mastermind_Array + 0x0004) + 1),a
                           000034  1174 	C$Lab_2.c$85$1$173 ==.
                                   1175 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:85: int Guess_Array[3] = { 7, 7, 7 };		// the 7s are arbitrary values that will shortly be written over
      000034 75*19 07         [24] 1176 	mov	(_Guess_Array + 0),#0x07
                                   1177 ;	1-genFromRTrack replaced	mov	(_Guess_Array + 1),#0x00
      000037 F5*1A            [12] 1178 	mov	(_Guess_Array + 1),a
      000039 75*1B 07         [24] 1179 	mov	((_Guess_Array + 0x0002) + 0),#0x07
                                   1180 ;	1-genFromRTrack replaced	mov	((_Guess_Array + 0x0002) + 1),#0x00
      00003C F5*1C            [12] 1181 	mov	((_Guess_Array + 0x0002) + 1),a
      00003E 75*1D 07         [24] 1182 	mov	((_Guess_Array + 0x0004) + 0),#0x07
                                   1183 ;	1-genFromRTrack replaced	mov	((_Guess_Array + 0x0004) + 1),#0x00
      000041 F5*1E            [12] 1184 	mov	((_Guess_Array + 0x0004) + 1),a
                           000043  1185 	C$Lab_2.c$86$1$173 ==.
                                   1186 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:86: int MA_Copy[3] = { 7, 7, 7 };
      000043 75*1F 07         [24] 1187 	mov	(_MA_Copy + 0),#0x07
                                   1188 ;	1-genFromRTrack replaced	mov	(_MA_Copy + 1),#0x00
      000046 F5*20            [12] 1189 	mov	(_MA_Copy + 1),a
      000048 75*21 07         [24] 1190 	mov	((_MA_Copy + 0x0002) + 0),#0x07
                                   1191 ;	1-genFromRTrack replaced	mov	((_MA_Copy + 0x0002) + 1),#0x00
      00004B F5*22            [12] 1192 	mov	((_MA_Copy + 0x0002) + 1),a
      00004D 75*23 07         [24] 1193 	mov	((_MA_Copy + 0x0004) + 0),#0x07
                                   1194 ;	1-genFromRTrack replaced	mov	((_MA_Copy + 0x0004) + 1),#0x00
      000050 F5*24            [12] 1195 	mov	((_MA_Copy + 0x0004) + 1),a
                                   1196 	.area GSFINAL (CODE)
      000000 02r00r0E         [24] 1197 	ljmp	__sdcc_program_startup
                                   1198 ;--------------------------------------------------------
                                   1199 ; Home
                                   1200 ;--------------------------------------------------------
                                   1201 	.area HOME    (CODE)
                                   1202 	.area HOME    (CODE)
      00000E                       1203 __sdcc_program_startup:
      00000E 02r00r5C         [24] 1204 	ljmp	_main
                                   1205 ;	return from main will return to caller
                                   1206 ;--------------------------------------------------------
                                   1207 ; code
                                   1208 ;--------------------------------------------------------
                                   1209 	.area CSEG    (CODE)
                                   1210 ;------------------------------------------------------------
                                   1211 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1212 ;------------------------------------------------------------
                                   1213 ;i                         Allocated to registers 
                                   1214 ;------------------------------------------------------------
                           000000  1215 	G$SYSCLK_Init$0$0 ==.
                           000000  1216 	C$c8051_SDCC.h$42$0$0 ==.
                                   1217 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1218 ;	-----------------------------------------
                                   1219 ;	 function SYSCLK_Init
                                   1220 ;	-----------------------------------------
      000000                       1221 _SYSCLK_Init:
                           000007  1222 	ar7 = 0x07
                           000006  1223 	ar6 = 0x06
                           000005  1224 	ar5 = 0x05
                           000004  1225 	ar4 = 0x04
                           000003  1226 	ar3 = 0x03
                           000002  1227 	ar2 = 0x02
                           000001  1228 	ar1 = 0x01
                           000000  1229 	ar0 = 0x00
                           000000  1230 	C$c8051_SDCC.h$46$1$2 ==.
                                   1231 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1232 	mov	_OSCXCN,#0x67
                           000003  1233 	C$c8051_SDCC.h$49$1$2 ==.
                                   1234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1235 	mov	r6,#0x00
      000005 7F 01            [12] 1236 	mov	r7,#0x01
      000007                       1237 00107$:
      000007 1E               [12] 1238 	dec	r6
      000008 BE FF 01         [24] 1239 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1240 	dec	r7
      00000C                       1241 00121$:
      00000C EE               [12] 1242 	mov	a,r6
      00000D 4F               [12] 1243 	orl	a,r7
      00000E 70 F7            [24] 1244 	jnz	00107$
                           000010  1245 	C$c8051_SDCC.h$51$1$2 ==.
                                   1246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1247 00102$:
      000010 E5 B1            [12] 1248 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1249 	jnb	acc.7,00102$
                           000015  1250 	C$c8051_SDCC.h$53$1$2 ==.
                                   1251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1252 	mov	_OSCICN,#0x88
                           000018  1253 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1254 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1255 	ret
                                   1256 ;------------------------------------------------------------
                                   1257 ;Allocation info for local variables in function 'UART0_Init'
                                   1258 ;------------------------------------------------------------
                           000019  1259 	G$UART0_Init$0$0 ==.
                           000019  1260 	C$c8051_SDCC.h$64$1$2 ==.
                                   1261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1262 ;	-----------------------------------------
                                   1263 ;	 function UART0_Init
                                   1264 ;	-----------------------------------------
      000019                       1265 _UART0_Init:
                           000019  1266 	C$c8051_SDCC.h$66$1$4 ==.
                                   1267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1268 	mov	_SCON0,#0x50
                           00001C  1269 	C$c8051_SDCC.h$67$1$4 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1271 	mov	_TMOD,#0x20
                           00001F  1272 	C$c8051_SDCC.h$68$1$4 ==.
                                   1273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1274 	mov	_TH1,#0xDC
                           000022  1275 	C$c8051_SDCC.h$69$1$4 ==.
                                   1276 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1277 	setb	_TR1
                           000024  1278 	C$c8051_SDCC.h$70$1$4 ==.
                                   1279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1280 	orl	_CKCON,#0x10
                           000027  1281 	C$c8051_SDCC.h$71$1$4 ==.
                                   1282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1283 	orl	_PCON,#0x80
                           00002A  1284 	C$c8051_SDCC.h$73$1$4 ==.
                                   1285 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1286 	setb	_TI0
                           00002C  1287 	C$c8051_SDCC.h$74$1$4 ==.
                                   1288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1289 	orl	_P0MDOUT,#0x01
                           00002F  1290 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1291 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1292 	ret
                                   1293 ;------------------------------------------------------------
                                   1294 ;Allocation info for local variables in function 'Sys_Init'
                                   1295 ;------------------------------------------------------------
                           000030  1296 	G$Sys_Init$0$0 ==.
                           000030  1297 	C$c8051_SDCC.h$83$1$4 ==.
                                   1298 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1299 ;	-----------------------------------------
                                   1300 ;	 function Sys_Init
                                   1301 ;	-----------------------------------------
      000030                       1302 _Sys_Init:
                           000030  1303 	C$c8051_SDCC.h$85$1$6 ==.
                                   1304 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1305 	mov	_WDTCN,#0xDE
                           000033  1306 	C$c8051_SDCC.h$86$1$6 ==.
                                   1307 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1308 	mov	_WDTCN,#0xAD
                           000036  1309 	C$c8051_SDCC.h$88$1$6 ==.
                                   1310 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1311 	lcall	_SYSCLK_Init
                           000039  1312 	C$c8051_SDCC.h$89$1$6 ==.
                                   1313 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1314 	lcall	_UART0_Init
                           00003C  1315 	C$c8051_SDCC.h$91$1$6 ==.
                                   1316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1317 	orl	_XBR0,#0x04
                           00003F  1318 	C$c8051_SDCC.h$92$1$6 ==.
                                   1319 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1320 	orl	_XBR2,#0x40
                           000042  1321 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1322 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1323 	ret
                                   1324 ;------------------------------------------------------------
                                   1325 ;Allocation info for local variables in function 'putchar'
                                   1326 ;------------------------------------------------------------
                                   1327 ;c                         Allocated to registers r7 
                                   1328 ;------------------------------------------------------------
                           000043  1329 	G$putchar$0$0 ==.
                           000043  1330 	C$c8051_SDCC.h$98$1$6 ==.
                                   1331 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1332 ;	-----------------------------------------
                                   1333 ;	 function putchar
                                   1334 ;	-----------------------------------------
      000043                       1335 _putchar:
      000043 AF 82            [24] 1336 	mov	r7,dpl
                           000045  1337 	C$c8051_SDCC.h$100$1$8 ==.
                                   1338 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1339 00101$:
                           000045  1340 	C$c8051_SDCC.h$101$1$8 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1342 	jbc	_TI0,00112$
      000048 80 FB            [24] 1343 	sjmp	00101$
      00004A                       1344 00112$:
                           00004A  1345 	C$c8051_SDCC.h$102$1$8 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1347 	mov	_SBUF0,r7
                           00004C  1348 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1349 	XG$putchar$0$0 ==.
      00004C 22               [24] 1350 	ret
                                   1351 ;------------------------------------------------------------
                                   1352 ;Allocation info for local variables in function 'getchar'
                                   1353 ;------------------------------------------------------------
                                   1354 ;c                         Allocated to registers 
                                   1355 ;------------------------------------------------------------
                           00004D  1356 	G$getchar$0$0 ==.
                           00004D  1357 	C$c8051_SDCC.h$108$1$8 ==.
                                   1358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1359 ;	-----------------------------------------
                                   1360 ;	 function getchar
                                   1361 ;	-----------------------------------------
      00004D                       1362 _getchar:
                           00004D  1363 	C$c8051_SDCC.h$111$1$10 ==.
                                   1364 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1365 00101$:
                           00004D  1366 	C$c8051_SDCC.h$112$1$10 ==.
                                   1367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1368 	jbc	_RI0,00112$
      000050 80 FB            [24] 1369 	sjmp	00101$
      000052                       1370 00112$:
                           000052  1371 	C$c8051_SDCC.h$113$1$10 ==.
                                   1372 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1373 	mov	dpl,_SBUF0
                           000055  1374 	C$c8051_SDCC.h$114$1$10 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1376 	lcall	_putchar
                           000058  1377 	C$c8051_SDCC.h$115$1$10 ==.
                                   1378 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1379 	mov	dpl,_SBUF0
                           00005B  1380 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1381 	XG$getchar$0$0 ==.
      00005B 22               [24] 1382 	ret
                                   1383 ;------------------------------------------------------------
                                   1384 ;Allocation info for local variables in function 'main'
                                   1385 ;------------------------------------------------------------
                           00005C  1386 	G$main$0$0 ==.
                           00005C  1387 	C$Lab_2.c$90$1$10 ==.
                                   1388 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:90: main()
                                   1389 ;	-----------------------------------------
                                   1390 ;	 function main
                                   1391 ;	-----------------------------------------
      00005C                       1392 _main:
                           00005C  1393 	C$Lab_2.c$92$1$64 ==.
                                   1394 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:92: Sys_Init();		// Initialize the C8051 board
      00005C 12r00r30         [24] 1395 	lcall	_Sys_Init
                           00005F  1396 	C$Lab_2.c$93$1$64 ==.
                                   1397 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:93: putchar(' ');	// Required for output to terminal
      00005F 75 82 20         [24] 1398 	mov	dpl,#0x20
      000062 12r00r43         [24] 1399 	lcall	_putchar
                           000065  1400 	C$Lab_2.c$94$1$64 ==.
                                   1401 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:94: Port_Init();	// Configure P1.0 for analog input
      000065 12r0ArA3         [24] 1402 	lcall	_Port_Init
                           000068  1403 	C$Lab_2.c$95$1$64 ==.
                                   1404 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:95: ADC_Init();		// Initialize A/D conversion
      000068 12r0ArDC         [24] 1405 	lcall	_ADC_Init
                           00006B  1406 	C$Lab_2.c$96$1$64 ==.
                                   1407 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:96: Interrupt_Init();
      00006B 12r0Br09         [24] 1408 	lcall	_Interrupt_Init
                           00006E  1409 	C$Lab_2.c$97$1$64 ==.
                                   1410 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:97: Timer_Init();    // Initialize Timer 0
      00006E 12r0Br0E         [24] 1411 	lcall	_Timer_Init
                           000071  1412 	C$Lab_2.c$98$1$64 ==.
                                   1413 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:98: putchar(' ');    // the quote fonts may not copy correctly into SiLabs IDE
      000071 75 82 20         [24] 1414 	mov	dpl,#0x20
      000074 12r00r43         [24] 1415 	lcall	_putchar
                           000077  1416 	C$Lab_2.c$100$1$64 ==.
                                   1417 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:100: while (1) // infinite loop
      000077                       1418 00140$:
                           000077  1419 	C$Lab_2.c$104$2$65 ==.
                                   1420 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:104: AMBER = 1; // AmberLED is off
      000077 D2 B0            [12] 1421 	setb	_AMBER
                           000079  1422 	C$Lab_2.c$105$2$65 ==.
                                   1423 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:105: GREEN = 1; // GreenLED is off
      000079 D2 B1            [12] 1424 	setb	_GREEN
                           00007B  1425 	C$Lab_2.c$107$2$65 ==.
                                   1426 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:107: BILEDA0 = 0;
      00007B C2 84            [12] 1427 	clr	_BILEDA0
                           00007D  1428 	C$Lab_2.c$108$2$65 ==.
                                   1429 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:108: BILEDA1 = 0;
      00007D C2 85            [12] 1430 	clr	_BILEDA1
                           00007F  1431 	C$Lab_2.c$109$2$65 ==.
                                   1432 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:109: BILEDB0 = 0;
      00007F C2 80            [12] 1433 	clr	_BILEDB0
                           000081  1434 	C$Lab_2.c$110$2$65 ==.
                                   1435 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:110: BILEDB1 = 0;
      000081 C2 81            [12] 1436 	clr	_BILEDB1
                           000083  1437 	C$Lab_2.c$111$2$65 ==.
                                   1438 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:111: BILEDC0 = 0;
      000083 C2 A4            [12] 1439 	clr	_BILEDC0
                           000085  1440 	C$Lab_2.c$112$2$65 ==.
                                   1441 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:112: BILEDC1 = 0;
      000085 C2 A5            [12] 1442 	clr	_BILEDC1
                           000087  1443 	C$Lab_2.c$113$2$65 ==.
                                   1444 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:113: printf("\rSet the speed pot and press the pushbutton to begin LITEC Mastermind.\n");
      000087 74r00            [12] 1445 	mov	a,#___str_0
      000089 C0 E0            [24] 1446 	push	acc
      00008B 74s00            [12] 1447 	mov	a,#(___str_0 >> 8)
      00008D C0 E0            [24] 1448 	push	acc
      00008F 74 80            [12] 1449 	mov	a,#0x80
      000091 C0 E0            [24] 1450 	push	acc
      000093 12r00r00         [24] 1451 	lcall	_printf
      000096 15 81            [12] 1452 	dec	sp
      000098 15 81            [12] 1453 	dec	sp
      00009A 15 81            [12] 1454 	dec	sp
                           00009C  1455 	C$Lab_2.c$114$2$65 ==.
                                   1456 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:114: while (!Start_Button()); // wait for button to be pressed before starting
      00009C                       1457 00101$:
      00009C 12r0Br42         [24] 1458 	lcall	_Start_Button
      00009F E5 82            [12] 1459 	mov	a,dpl
      0000A1 85 83 F0         [24] 1460 	mov	b,dph
      0000A4 45 F0            [12] 1461 	orl	a,b
      0000A6 60 F4            [24] 1462 	jz	00101$
                           0000A8  1463 	C$Lab_2.c$116$2$65 ==.
                                   1464 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:116: result = read_AD_input(0); // Read the A/D value on P1.0
      0000A8 75 82 00         [24] 1465 	mov	dpl,#0x00
      0000AB 12r0ArE6         [24] 1466 	lcall	_read_AD_input
                           0000AE  1467 	C$Lab_2.c$117$2$65 ==.
                                   1468 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:117: TMAX = ((18750 * result)+15000);
      0000AE E5 82            [12] 1469 	mov	a,dpl
      0000B0 F5*06            [12] 1470 	mov	_result,a
      0000B2 75 F0 3E         [24] 1471 	mov	b,#0x3E
      0000B5 A4               [48] 1472 	mul	ab
      0000B6 24 98            [12] 1473 	add	a,#0x98
      0000B8 F5*11            [12] 1474 	mov	_TMAX,a
                           0000BA  1475 	C$Lab_2.c$118$2$65 ==.
                                   1476 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:118: printf("\rStarting Period: %u\n", TMAX);
      0000BA AE*11            [24] 1477 	mov	r6,_TMAX
      0000BC 7F 00            [12] 1478 	mov	r7,#0x00
      0000BE C0 06            [24] 1479 	push	ar6
      0000C0 C0 07            [24] 1480 	push	ar7
      0000C2 74r48            [12] 1481 	mov	a,#___str_1
      0000C4 C0 E0            [24] 1482 	push	acc
      0000C6 74s00            [12] 1483 	mov	a,#(___str_1 >> 8)
      0000C8 C0 E0            [24] 1484 	push	acc
      0000CA 74 80            [12] 1485 	mov	a,#0x80
      0000CC C0 E0            [24] 1486 	push	acc
      0000CE 12r00r00         [24] 1487 	lcall	_printf
      0000D1 E5 81            [12] 1488 	mov	a,sp
      0000D3 24 FB            [12] 1489 	add	a,#0xfb
      0000D5 F5 81            [12] 1490 	mov	sp,a
                           0000D7  1491 	C$Lab_2.c$122$2$65 ==.
                                   1492 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:122: AMBER = 0;													// 4. Light Amber player LED.
      0000D7 C2 B0            [12] 1493 	clr	_AMBER
                           0000D9  1494 	C$Lab_2.c$123$2$65 ==.
                                   1495 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:123: printf("\n\rAmber Player Turn\n");							// Amber's turn
      0000D9 74r5E            [12] 1496 	mov	a,#___str_2
      0000DB C0 E0            [24] 1497 	push	acc
      0000DD 74s00            [12] 1498 	mov	a,#(___str_2 >> 8)
      0000DF C0 E0            [24] 1499 	push	acc
      0000E1 74 80            [12] 1500 	mov	a,#0x80
      0000E3 C0 E0            [24] 1501 	push	acc
      0000E5 12r00r00         [24] 1502 	lcall	_printf
      0000E8 15 81            [12] 1503 	dec	sp
      0000EA 15 81            [12] 1504 	dec	sp
      0000EC 15 81            [12] 1505 	dec	sp
                           0000EE  1506 	C$Lab_2.c$125$2$65 ==.
                                   1507 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:125: GENERATE_MASTERMIND_ARRAY(Mastermind_Array);				//5. Generate 3 random values from 0 to 2 for BiLED pattern.
      0000EE 90r00r13         [24] 1508 	mov	dptr,#_Mastermind_Array
      0000F1 75 F0 40         [24] 1509 	mov	b,#0x40
      0000F4 12r02rE3         [24] 1510 	lcall	_GENERATE_MASTERMIND_ARRAY
                           0000F7  1511 	C$Lab_2.c$127$3$66 ==.
                                   1512 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:127: while (FUNCTION_C(Mastermind_Array, Guess_Array) != 3)		// while the sequence hasn't been guessed
      0000F7                       1513 00113$:
      0000F7 75*00r19         [24] 1514 	mov	_FUNCTION_C_PARM_2,#_Guess_Array
      0000FA 75*01 00         [24] 1515 	mov	(_FUNCTION_C_PARM_2 + 1),#0x00
      0000FD 75*02 40         [24] 1516 	mov	(_FUNCTION_C_PARM_2 + 2),#0x40
      000100 90r00r13         [24] 1517 	mov	dptr,#_Mastermind_Array
      000103 75 F0 40         [24] 1518 	mov	b,#0x40
      000106 12r05r64         [24] 1519 	lcall	_FUNCTION_C
      000109 AF 82            [24] 1520 	mov	r7,dpl
      00010B BF 03 03         [24] 1521 	cjne	r7,#0x03,00211$
      00010E 02r01r8C         [24] 1522 	ljmp	00115$
      000111                       1523 00211$:
                           000111  1524 	C$Lab_2.c$131$3$66 ==.
                                   1525 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:131: Counts = 0; // reset timer
      000111 E4               [12] 1526 	clr	a
      000112 F5*00            [12] 1527 	mov	_Counts,a
      000114 F5*01            [12] 1528 	mov	(_Counts + 1),a
                           000116  1529 	C$Lab_2.c$132$3$66 ==.
                                   1530 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:132: Seconds = 0;
                                   1531 ;	1-genFromRTrack replaced	mov	_Seconds,#0x00
      000116 F5*02            [12] 1532 	mov	_Seconds,a
                           000118  1533 	C$Lab_2.c$134$3$66 ==.
                                   1534 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:134: while ((!Start_Button()) && (TMAX >= Seconds))
      000118                       1535 00105$:
      000118 12r0Br42         [24] 1536 	lcall	_Start_Button
      00011B E5 82            [12] 1537 	mov	a,dpl
      00011D 85 83 F0         [24] 1538 	mov	b,dph
      000120 45 F0            [12] 1539 	orl	a,b
      000122 70 0C            [24] 1540 	jnz	00107$
      000124 C3               [12] 1541 	clr	c
      000125 E5*11            [12] 1542 	mov	a,_TMAX
      000127 95*02            [12] 1543 	subb	a,_Seconds
      000129 40 05            [24] 1544 	jc	00107$
                           00012B  1545 	C$Lab_2.c$136$4$67 ==.
                                   1546 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:136: FUNCTION_A();
      00012B 12r03r6A         [24] 1547 	lcall	_FUNCTION_A
      00012E 80 E8            [24] 1548 	sjmp	00105$
      000130                       1549 00107$:
                           000130  1550 	C$Lab_2.c$138$3$66 ==.
                                   1551 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:138: timer = Seconds;
      000130 85*02*12         [24] 1552 	mov	_timer,_Seconds
                           000133  1553 	C$Lab_2.c$141$3$66 ==.
                                   1554 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:141: FUNCTION_G(Guess_Array); // this creates Guess_Array
      000133 90r00r19         [24] 1555 	mov	dptr,#_Guess_Array
      000136 75 F0 40         [24] 1556 	mov	b,#0x40
      000139 12r09r9C         [24] 1557 	lcall	_FUNCTION_G
                           00013C  1558 	C$Lab_2.c$144$3$66 ==.
                                   1559 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:144: if (timer >= TMAX)
      00013C C3               [12] 1560 	clr	c
      00013D E5*12            [12] 1561 	mov	a,_timer
      00013F 95*11            [12] 1562 	subb	a,_TMAX
      000141 40 05            [24] 1563 	jc	00111$
                           000143  1564 	C$Lab_2.c$146$4$68 ==.
                                   1565 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:146: points = 6;
      000143 75*05 06         [24] 1566 	mov	_points,#0x06
      000146 80 23            [24] 1567 	sjmp	00112$
      000148                       1568 00111$:
                           000148  1569 	C$Lab_2.c$148$3$66 ==.
                                   1570 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:148: else if (timer < TMAX)
      000148 C3               [12] 1571 	clr	c
      000149 E5*12            [12] 1572 	mov	a,_timer
      00014B 95*11            [12] 1573 	subb	a,_TMAX
      00014D 50 1C            [24] 1574 	jnc	00112$
                           00014F  1575 	C$Lab_2.c$150$4$69 ==.
                                   1576 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:150: points = (((5*timer)/TMAX) + 1);
      00014F E5*12            [12] 1577 	mov	a,_timer
      000151 75 F0 05         [24] 1578 	mov	b,#0x05
      000154 A4               [48] 1579 	mul	ab
      000155 F5 82            [12] 1580 	mov	dpl,a
      000157 85 F0 83         [24] 1581 	mov	dph,b
      00015A 85*11*00         [24] 1582 	mov	__divsint_PARM_2,_TMAX
      00015D 75*01 00         [24] 1583 	mov	(__divsint_PARM_2 + 1),#0x00
      000160 12r00r00         [24] 1584 	lcall	__divsint
      000163 AE 82            [24] 1585 	mov	r6,dpl
      000165 AF 83            [24] 1586 	mov	r7,dph
      000167 EE               [12] 1587 	mov	a,r6
      000168 04               [12] 1588 	inc	a
      000169 F5*05            [12] 1589 	mov	_points,a
      00016B                       1590 00112$:
                           00016B  1591 	C$Lab_2.c$153$3$66 ==.
                                   1592 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:153: amber_score += points;
      00016B E5*05            [12] 1593 	mov	a,_points
      00016D 25*03            [12] 1594 	add	a,_amber_score
      00016F F5*03            [12] 1595 	mov	_amber_score,a
                           000171  1596 	C$Lab_2.c$154$3$66 ==.
                                   1597 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:154: points = 0; // reset
      000171 75*05 00         [24] 1598 	mov	_points,#0x00
                           000174  1599 	C$Lab_2.c$160$3$66 ==.
                                   1600 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:160: FUNCTION_Da(Mastermind_Array, Guess_Array, amber_score); // Formatted Print function and buzzer function for AMBER; reads in Guess_Array and amber_score
      000174 75*25r19         [24] 1601 	mov	_FUNCTION_Da_PARM_2,#_Guess_Array
      000177 75*26 00         [24] 1602 	mov	(_FUNCTION_Da_PARM_2 + 1),#0x00
      00017A 75*27 40         [24] 1603 	mov	(_FUNCTION_Da_PARM_2 + 2),#0x40
      00017D 85*03*28         [24] 1604 	mov	_FUNCTION_Da_PARM_3,_amber_score
      000180 90r00r13         [24] 1605 	mov	dptr,#_Mastermind_Array
      000183 75 F0 40         [24] 1606 	mov	b,#0x40
      000186 12r05rCD         [24] 1607 	lcall	_FUNCTION_Da
      000189 02r00rF7         [24] 1608 	ljmp	00113$
      00018C                       1609 00115$:
                           00018C  1610 	C$Lab_2.c$165$2$65 ==.
                                   1611 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:165: GREEN = 0;													// 4. Light Green player LED.
      00018C C2 B1            [12] 1612 	clr	_GREEN
                           00018E  1613 	C$Lab_2.c$166$2$65 ==.
                                   1614 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:166: printf("\n\rGreen Player Turn\n");							// Green's turn
      00018E 74r73            [12] 1615 	mov	a,#___str_3
      000190 C0 E0            [24] 1616 	push	acc
      000192 74s00            [12] 1617 	mov	a,#(___str_3 >> 8)
      000194 C0 E0            [24] 1618 	push	acc
      000196 74 80            [12] 1619 	mov	a,#0x80
      000198 C0 E0            [24] 1620 	push	acc
      00019A 12r00r00         [24] 1621 	lcall	_printf
      00019D 15 81            [12] 1622 	dec	sp
      00019F 15 81            [12] 1623 	dec	sp
      0001A1 15 81            [12] 1624 	dec	sp
                           0001A3  1625 	C$Lab_2.c$168$2$65 ==.
                                   1626 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:168: GENERATE_MASTERMIND_ARRAY(Mastermind_Array);				//5. Generate 3 random values from 0 to 2 for BiLED pattern.
      0001A3 90r00r13         [24] 1627 	mov	dptr,#_Mastermind_Array
      0001A6 75 F0 40         [24] 1628 	mov	b,#0x40
      0001A9 12r02rE3         [24] 1629 	lcall	_GENERATE_MASTERMIND_ARRAY
                           0001AC  1630 	C$Lab_2.c$170$3$70 ==.
                                   1631 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:170: while ((FUNCTION_C(Mastermind_Array, Guess_Array)) != 3)		// while the sequence hasn't been guessed
      0001AC                       1632 00125$:
      0001AC 75*00r19         [24] 1633 	mov	_FUNCTION_C_PARM_2,#_Guess_Array
      0001AF 75*01 00         [24] 1634 	mov	(_FUNCTION_C_PARM_2 + 1),#0x00
      0001B2 75*02 40         [24] 1635 	mov	(_FUNCTION_C_PARM_2 + 2),#0x40
      0001B5 90r00r13         [24] 1636 	mov	dptr,#_Mastermind_Array
      0001B8 75 F0 40         [24] 1637 	mov	b,#0x40
      0001BB 12r05r64         [24] 1638 	lcall	_FUNCTION_C
      0001BE AF 82            [24] 1639 	mov	r7,dpl
      0001C0 BF 03 03         [24] 1640 	cjne	r7,#0x03,00216$
      0001C3 02r02r41         [24] 1641 	ljmp	00127$
      0001C6                       1642 00216$:
                           0001C6  1643 	C$Lab_2.c$174$3$70 ==.
                                   1644 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:174: Counts = 0; // reset timer
      0001C6 E4               [12] 1645 	clr	a
      0001C7 F5*00            [12] 1646 	mov	_Counts,a
      0001C9 F5*01            [12] 1647 	mov	(_Counts + 1),a
                           0001CB  1648 	C$Lab_2.c$175$3$70 ==.
                                   1649 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:175: Seconds = 0;
                                   1650 ;	1-genFromRTrack replaced	mov	_Seconds,#0x00
      0001CB F5*02            [12] 1651 	mov	_Seconds,a
                           0001CD  1652 	C$Lab_2.c$177$3$70 ==.
                                   1653 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:177: while ((!Start_Button()) && (TMAX >= Seconds))
      0001CD                       1654 00117$:
      0001CD 12r0Br42         [24] 1655 	lcall	_Start_Button
      0001D0 E5 82            [12] 1656 	mov	a,dpl
      0001D2 85 83 F0         [24] 1657 	mov	b,dph
      0001D5 45 F0            [12] 1658 	orl	a,b
      0001D7 70 0C            [24] 1659 	jnz	00119$
      0001D9 C3               [12] 1660 	clr	c
      0001DA E5*11            [12] 1661 	mov	a,_TMAX
      0001DC 95*02            [12] 1662 	subb	a,_Seconds
      0001DE 40 05            [24] 1663 	jc	00119$
                           0001E0  1664 	C$Lab_2.c$179$4$71 ==.
                                   1665 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:179: FUNCTION_A();
      0001E0 12r03r6A         [24] 1666 	lcall	_FUNCTION_A
      0001E3 80 E8            [24] 1667 	sjmp	00117$
      0001E5                       1668 00119$:
                           0001E5  1669 	C$Lab_2.c$181$3$70 ==.
                                   1670 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:181: timer = Seconds;
      0001E5 85*02*12         [24] 1671 	mov	_timer,_Seconds
                           0001E8  1672 	C$Lab_2.c$184$3$70 ==.
                                   1673 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:184: FUNCTION_G(Guess_Array); // this creates Guess_Array
      0001E8 90r00r19         [24] 1674 	mov	dptr,#_Guess_Array
      0001EB 75 F0 40         [24] 1675 	mov	b,#0x40
      0001EE 12r09r9C         [24] 1676 	lcall	_FUNCTION_G
                           0001F1  1677 	C$Lab_2.c$187$3$70 ==.
                                   1678 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:187: if (timer >= TMAX)
      0001F1 C3               [12] 1679 	clr	c
      0001F2 E5*12            [12] 1680 	mov	a,_timer
      0001F4 95*11            [12] 1681 	subb	a,_TMAX
      0001F6 40 05            [24] 1682 	jc	00123$
                           0001F8  1683 	C$Lab_2.c$189$4$72 ==.
                                   1684 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:189: points = 6;
      0001F8 75*05 06         [24] 1685 	mov	_points,#0x06
      0001FB 80 23            [24] 1686 	sjmp	00124$
      0001FD                       1687 00123$:
                           0001FD  1688 	C$Lab_2.c$191$3$70 ==.
                                   1689 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:191: else if (timer < TMAX)
      0001FD C3               [12] 1690 	clr	c
      0001FE E5*12            [12] 1691 	mov	a,_timer
      000200 95*11            [12] 1692 	subb	a,_TMAX
      000202 50 1C            [24] 1693 	jnc	00124$
                           000204  1694 	C$Lab_2.c$193$4$73 ==.
                                   1695 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:193: points = (((5*timer)/TMAX) + 1);
      000204 E5*12            [12] 1696 	mov	a,_timer
      000206 75 F0 05         [24] 1697 	mov	b,#0x05
      000209 A4               [48] 1698 	mul	ab
      00020A F5 82            [12] 1699 	mov	dpl,a
      00020C 85 F0 83         [24] 1700 	mov	dph,b
      00020F 85*11*00         [24] 1701 	mov	__divsint_PARM_2,_TMAX
      000212 75*01 00         [24] 1702 	mov	(__divsint_PARM_2 + 1),#0x00
      000215 12r00r00         [24] 1703 	lcall	__divsint
      000218 AE 82            [24] 1704 	mov	r6,dpl
      00021A AF 83            [24] 1705 	mov	r7,dph
      00021C EE               [12] 1706 	mov	a,r6
      00021D 04               [12] 1707 	inc	a
      00021E F5*05            [12] 1708 	mov	_points,a
      000220                       1709 00124$:
                           000220  1710 	C$Lab_2.c$196$3$70 ==.
                                   1711 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:196: green_score += points;
      000220 E5*05            [12] 1712 	mov	a,_points
      000222 25*04            [12] 1713 	add	a,_green_score
      000224 F5*04            [12] 1714 	mov	_green_score,a
                           000226  1715 	C$Lab_2.c$197$3$70 ==.
                                   1716 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:197: points = 0; // reset
      000226 75*05 00         [24] 1717 	mov	_points,#0x00
                           000229  1718 	C$Lab_2.c$203$3$70 ==.
                                   1719 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:203: FUNCTION_Db(Mastermind_Array, Guess_Array, green_score); // Formatted Print function and buzzer function for GREEN; reads in Guess_Array and green_score
      000229 75*29r19         [24] 1720 	mov	_FUNCTION_Db_PARM_2,#_Guess_Array
      00022C 75*2A 00         [24] 1721 	mov	(_FUNCTION_Db_PARM_2 + 1),#0x00
      00022F 75*2B 40         [24] 1722 	mov	(_FUNCTION_Db_PARM_2 + 2),#0x40
      000232 85*04*2C         [24] 1723 	mov	_FUNCTION_Db_PARM_3,_green_score
      000235 90r00r13         [24] 1724 	mov	dptr,#_Mastermind_Array
      000238 75 F0 40         [24] 1725 	mov	b,#0x40
      00023B 12r07r86         [24] 1726 	lcall	_FUNCTION_Db
      00023E 02r01rAC         [24] 1727 	ljmp	00125$
      000241                       1728 00127$:
                           000241  1729 	C$Lab_2.c$208$2$65 ==.
                                   1730 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:208: printf("\n\rAmber Points = %u", amber_score);
      000241 AE*03            [24] 1731 	mov	r6,_amber_score
      000243 7F 00            [12] 1732 	mov	r7,#0x00
      000245 C0 06            [24] 1733 	push	ar6
      000247 C0 07            [24] 1734 	push	ar7
      000249 74r88            [12] 1735 	mov	a,#___str_4
      00024B C0 E0            [24] 1736 	push	acc
      00024D 74s00            [12] 1737 	mov	a,#(___str_4 >> 8)
      00024F C0 E0            [24] 1738 	push	acc
      000251 74 80            [12] 1739 	mov	a,#0x80
      000253 C0 E0            [24] 1740 	push	acc
      000255 12r00r00         [24] 1741 	lcall	_printf
      000258 E5 81            [12] 1742 	mov	a,sp
      00025A 24 FB            [12] 1743 	add	a,#0xfb
      00025C F5 81            [12] 1744 	mov	sp,a
                           00025E  1745 	C$Lab_2.c$209$2$65 ==.
                                   1746 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:209: printf(", Green Points = %u/n", green_score);
      00025E AE*04            [24] 1747 	mov	r6,_green_score
      000260 7F 00            [12] 1748 	mov	r7,#0x00
      000262 C0 06            [24] 1749 	push	ar6
      000264 C0 07            [24] 1750 	push	ar7
      000266 74r9C            [12] 1751 	mov	a,#___str_5
      000268 C0 E0            [24] 1752 	push	acc
      00026A 74s00            [12] 1753 	mov	a,#(___str_5 >> 8)
      00026C C0 E0            [24] 1754 	push	acc
      00026E 74 80            [12] 1755 	mov	a,#0x80
      000270 C0 E0            [24] 1756 	push	acc
      000272 12r00r00         [24] 1757 	lcall	_printf
      000275 E5 81            [12] 1758 	mov	a,sp
      000277 24 FB            [12] 1759 	add	a,#0xfb
      000279 F5 81            [12] 1760 	mov	sp,a
                           00027B  1761 	C$Lab_2.c$211$2$65 ==.
                                   1762 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:211: if (green_score > amber_score)
      00027B C3               [12] 1763 	clr	c
      00027C E5*03            [12] 1764 	mov	a,_amber_score
      00027E 95*04            [12] 1765 	subb	a,_green_score
      000280 50 17            [24] 1766 	jnc	00134$
                           000282  1767 	C$Lab_2.c$213$3$74 ==.
                                   1768 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:213: printf("\r\tWinner is Amber!\n");
      000282 74rB2            [12] 1769 	mov	a,#___str_6
      000284 C0 E0            [24] 1770 	push	acc
      000286 74s00            [12] 1771 	mov	a,#(___str_6 >> 8)
      000288 C0 E0            [24] 1772 	push	acc
      00028A 74 80            [12] 1773 	mov	a,#0x80
      00028C C0 E0            [24] 1774 	push	acc
      00028E 12r00r00         [24] 1775 	lcall	_printf
      000291 15 81            [12] 1776 	dec	sp
      000293 15 81            [12] 1777 	dec	sp
      000295 15 81            [12] 1778 	dec	sp
      000297 80 38            [24] 1779 	sjmp	00136$
      000299                       1780 00134$:
                           000299  1781 	C$Lab_2.c$215$2$65 ==.
                                   1782 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:215: else if (amber_score > green_score)
      000299 C3               [12] 1783 	clr	c
      00029A E5*04            [12] 1784 	mov	a,_green_score
      00029C 95*03            [12] 1785 	subb	a,_amber_score
      00029E 50 17            [24] 1786 	jnc	00131$
                           0002A0  1787 	C$Lab_2.c$217$3$75 ==.
                                   1788 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:217: printf("\r\tWinner is Green!\n");
      0002A0 74rC6            [12] 1789 	mov	a,#___str_7
      0002A2 C0 E0            [24] 1790 	push	acc
      0002A4 74s00            [12] 1791 	mov	a,#(___str_7 >> 8)
      0002A6 C0 E0            [24] 1792 	push	acc
      0002A8 74 80            [12] 1793 	mov	a,#0x80
      0002AA C0 E0            [24] 1794 	push	acc
      0002AC 12r00r00         [24] 1795 	lcall	_printf
      0002AF 15 81            [12] 1796 	dec	sp
      0002B1 15 81            [12] 1797 	dec	sp
      0002B3 15 81            [12] 1798 	dec	sp
      0002B5 80 1A            [24] 1799 	sjmp	00136$
      0002B7                       1800 00131$:
                           0002B7  1801 	C$Lab_2.c$219$2$65 ==.
                                   1802 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:219: else if (amber_score == green_score)
      0002B7 E5*04            [12] 1803 	mov	a,_green_score
      0002B9 B5*03 15         [24] 1804 	cjne	a,_amber_score,00136$
                           0002BC  1805 	C$Lab_2.c$221$3$76 ==.
                                   1806 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:221: printf("\r\tIt's a tie. FIGHT TO THE DEATH!\n");
      0002BC 74rDA            [12] 1807 	mov	a,#___str_8
      0002BE C0 E0            [24] 1808 	push	acc
      0002C0 74s00            [12] 1809 	mov	a,#(___str_8 >> 8)
      0002C2 C0 E0            [24] 1810 	push	acc
      0002C4 74 80            [12] 1811 	mov	a,#0x80
      0002C6 C0 E0            [24] 1812 	push	acc
      0002C8 12r00r00         [24] 1813 	lcall	_printf
      0002CB 15 81            [12] 1814 	dec	sp
      0002CD 15 81            [12] 1815 	dec	sp
      0002CF 15 81            [12] 1816 	dec	sp
                           0002D1  1817 	C$Lab_2.c$224$2$65 ==.
                                   1818 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:224: while (!Start_Button());		// stall here until it is pressed again.
      0002D1                       1819 00136$:
      0002D1 12r0Br42         [24] 1820 	lcall	_Start_Button
      0002D4 E5 82            [12] 1821 	mov	a,dpl
      0002D6 85 83 F0         [24] 1822 	mov	b,dph
      0002D9 45 F0            [12] 1823 	orl	a,b
      0002DB 60 03            [24] 1824 	jz	00225$
      0002DD 02r00r77         [24] 1825 	ljmp	00140$
      0002E0                       1826 00225$:
      0002E0 80 EF            [24] 1827 	sjmp	00136$
                           0002E2  1828 	C$Lab_2.c$226$1$64 ==.
                           0002E2  1829 	XG$main$0$0 ==.
      0002E2 22               [24] 1830 	ret
                                   1831 ;------------------------------------------------------------
                                   1832 ;Allocation info for local variables in function 'GENERATE_MASTERMIND_ARRAY'
                                   1833 ;------------------------------------------------------------
                                   1834 ;Mastermind_Array          Allocated to registers r5 r6 r7 
                                   1835 ;------------------------------------------------------------
                           0002E3  1836 	G$GENERATE_MASTERMIND_ARRAY$0$0 ==.
                           0002E3  1837 	C$Lab_2.c$230$1$64 ==.
                                   1838 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:230: void GENERATE_MASTERMIND_ARRAY(int Mastermind_Array[])
                                   1839 ;	-----------------------------------------
                                   1840 ;	 function GENERATE_MASTERMIND_ARRAY
                                   1841 ;	-----------------------------------------
      0002E3                       1842 _GENERATE_MASTERMIND_ARRAY:
      0002E3 AD 82            [24] 1843 	mov	r5,dpl
      0002E5 AE 83            [24] 1844 	mov	r6,dph
      0002E7 AF F0            [24] 1845 	mov	r7,b
                           0002E9  1846 	C$Lab_2.c$232$1$78 ==.
                                   1847 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:232: Mastermind_Array[0] = random(); // random integer between 0,1,2
      0002E9 C0 07            [24] 1848 	push	ar7
      0002EB C0 06            [24] 1849 	push	ar6
      0002ED C0 05            [24] 1850 	push	ar5
      0002EF 12r0ArFC         [24] 1851 	lcall	_random
      0002F2 AC 82            [24] 1852 	mov	r4,dpl
      0002F4 D0 05            [24] 1853 	pop	ar5
      0002F6 D0 06            [24] 1854 	pop	ar6
      0002F8 D0 07            [24] 1855 	pop	ar7
      0002FA 7B 00            [12] 1856 	mov	r3,#0x00
      0002FC 8D 82            [24] 1857 	mov	dpl,r5
      0002FE 8E 83            [24] 1858 	mov	dph,r6
      000300 8F F0            [24] 1859 	mov	b,r7
      000302 EC               [12] 1860 	mov	a,r4
      000303 12r00r00         [24] 1861 	lcall	__gptrput
      000306 A3               [24] 1862 	inc	dptr
      000307 EB               [12] 1863 	mov	a,r3
      000308 12r00r00         [24] 1864 	lcall	__gptrput
                           00030B  1865 	C$Lab_2.c$233$1$78 ==.
                                   1866 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:233: Mastermind_Array[1] = random(); // random integer between 0,1,2
      00030B 74 02            [12] 1867 	mov	a,#0x02
      00030D 2D               [12] 1868 	add	a,r5
      00030E FA               [12] 1869 	mov	r2,a
      00030F E4               [12] 1870 	clr	a
      000310 3E               [12] 1871 	addc	a,r6
      000311 FB               [12] 1872 	mov	r3,a
      000312 8F 04            [24] 1873 	mov	ar4,r7
      000314 C0 07            [24] 1874 	push	ar7
      000316 C0 06            [24] 1875 	push	ar6
      000318 C0 05            [24] 1876 	push	ar5
      00031A C0 04            [24] 1877 	push	ar4
      00031C C0 03            [24] 1878 	push	ar3
      00031E C0 02            [24] 1879 	push	ar2
      000320 12r0ArFC         [24] 1880 	lcall	_random
      000323 A9 82            [24] 1881 	mov	r1,dpl
      000325 D0 02            [24] 1882 	pop	ar2
      000327 D0 03            [24] 1883 	pop	ar3
      000329 D0 04            [24] 1884 	pop	ar4
      00032B D0 05            [24] 1885 	pop	ar5
      00032D D0 06            [24] 1886 	pop	ar6
      00032F 89 00            [24] 1887 	mov	ar0,r1
      000331 79 00            [12] 1888 	mov	r1,#0x00
      000333 8A 82            [24] 1889 	mov	dpl,r2
      000335 8B 83            [24] 1890 	mov	dph,r3
      000337 8C F0            [24] 1891 	mov	b,r4
      000339 E8               [12] 1892 	mov	a,r0
      00033A 12r00r00         [24] 1893 	lcall	__gptrput
      00033D A3               [24] 1894 	inc	dptr
      00033E E9               [12] 1895 	mov	a,r1
      00033F 12r00r00         [24] 1896 	lcall	__gptrput
                           000342  1897 	C$Lab_2.c$234$1$78 ==.
                                   1898 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:234: Mastermind_Array[2] = random(); // random integer between 0,1,2
      000342 74 04            [12] 1899 	mov	a,#0x04
      000344 2D               [12] 1900 	add	a,r5
      000345 FD               [12] 1901 	mov	r5,a
      000346 E4               [12] 1902 	clr	a
      000347 3E               [12] 1903 	addc	a,r6
      000348 FE               [12] 1904 	mov	r6,a
      000349 C0 06            [24] 1905 	push	ar6
      00034B C0 05            [24] 1906 	push	ar5
      00034D 12r0ArFC         [24] 1907 	lcall	_random
      000350 AC 82            [24] 1908 	mov	r4,dpl
      000352 D0 05            [24] 1909 	pop	ar5
      000354 D0 06            [24] 1910 	pop	ar6
      000356 D0 07            [24] 1911 	pop	ar7
      000358 7B 00            [12] 1912 	mov	r3,#0x00
      00035A 8D 82            [24] 1913 	mov	dpl,r5
      00035C 8E 83            [24] 1914 	mov	dph,r6
      00035E 8F F0            [24] 1915 	mov	b,r7
      000360 EC               [12] 1916 	mov	a,r4
      000361 12r00r00         [24] 1917 	lcall	__gptrput
      000364 A3               [24] 1918 	inc	dptr
      000365 EB               [12] 1919 	mov	a,r3
      000366 12r00r00         [24] 1920 	lcall	__gptrput
                           000369  1921 	C$Lab_2.c$235$1$78 ==.
                           000369  1922 	XG$GENERATE_MASTERMIND_ARRAY$0$0 ==.
      000369 22               [24] 1923 	ret
                                   1924 ;------------------------------------------------------------
                                   1925 ;Allocation info for local variables in function 'FUNCTION_A'
                                   1926 ;------------------------------------------------------------
                           00036A  1927 	G$FUNCTION_A$0$0 ==.
                           00036A  1928 	C$Lab_2.c$239$1$78 ==.
                                   1929 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:239: void FUNCTION_A(void)
                                   1930 ;	-----------------------------------------
                                   1931 ;	 function FUNCTION_A
                                   1932 ;	-----------------------------------------
      00036A                       1933 _FUNCTION_A:
                           00036A  1934 	C$Lab_2.c$243$1$80 ==.
                                   1935 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:243: if (!Switch_A1())  // turn BILEDA off
      00036A 12r0Br5A         [24] 1936 	lcall	_Switch_A1
      00036D E5 82            [12] 1937 	mov	a,dpl
      00036F 85 83 F0         [24] 1938 	mov	b,dph
      000372 45 F0            [12] 1939 	orl	a,b
      000374 70 06            [24] 1940 	jnz	00109$
                           000376  1941 	C$Lab_2.c$245$2$81 ==.
                                   1942 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:245: BILEDA0 = 0;
      000376 C2 84            [12] 1943 	clr	_BILEDA0
                           000378  1944 	C$Lab_2.c$246$2$81 ==.
                                   1945 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:246: BILEDA1 = 0;
      000378 C2 85            [12] 1946 	clr	_BILEDA1
      00037A 80 3A            [24] 1947 	sjmp	00110$
      00037C                       1948 00109$:
                           00037C  1949 	C$Lab_2.c$248$1$80 ==.
                                   1950 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:248: else if (Switch_A0() && (!Switch_A1())) // turn BILEDA to RED
      00037C 12r0Br4E         [24] 1951 	lcall	_Switch_A0
      00037F E5 82            [12] 1952 	mov	a,dpl
      000381 85 83 F0         [24] 1953 	mov	b,dph
      000384 45 F0            [12] 1954 	orl	a,b
      000386 60 12            [24] 1955 	jz	00105$
      000388 12r0Br5A         [24] 1956 	lcall	_Switch_A1
      00038B E5 82            [12] 1957 	mov	a,dpl
      00038D 85 83 F0         [24] 1958 	mov	b,dph
      000390 45 F0            [12] 1959 	orl	a,b
      000392 70 06            [24] 1960 	jnz	00105$
                           000394  1961 	C$Lab_2.c$250$2$82 ==.
                                   1962 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:250: BILEDA0 = 0;
      000394 C2 84            [12] 1963 	clr	_BILEDA0
                           000396  1964 	C$Lab_2.c$251$2$82 ==.
                                   1965 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:251: BILEDA1 = 1;
      000396 D2 85            [12] 1966 	setb	_BILEDA1
      000398 80 1C            [24] 1967 	sjmp	00110$
      00039A                       1968 00105$:
                           00039A  1969 	C$Lab_2.c$253$1$80 ==.
                                   1970 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:253: else if (Switch_A0() && Switch_A1()) // turn BILEDA to GREEN
      00039A 12r0Br4E         [24] 1971 	lcall	_Switch_A0
      00039D E5 82            [12] 1972 	mov	a,dpl
      00039F 85 83 F0         [24] 1973 	mov	b,dph
      0003A2 45 F0            [12] 1974 	orl	a,b
      0003A4 60 10            [24] 1975 	jz	00110$
      0003A6 12r0Br5A         [24] 1976 	lcall	_Switch_A1
      0003A9 E5 82            [12] 1977 	mov	a,dpl
      0003AB 85 83 F0         [24] 1978 	mov	b,dph
      0003AE 45 F0            [12] 1979 	orl	a,b
      0003B0 60 04            [24] 1980 	jz	00110$
                           0003B2  1981 	C$Lab_2.c$255$2$83 ==.
                                   1982 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:255: BILEDA0 = 1;
      0003B2 D2 84            [12] 1983 	setb	_BILEDA0
                           0003B4  1984 	C$Lab_2.c$256$2$83 ==.
                                   1985 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:256: BILEDA1 = 0;
      0003B4 C2 85            [12] 1986 	clr	_BILEDA1
      0003B6                       1987 00110$:
                           0003B6  1988 	C$Lab_2.c$259$1$80 ==.
                                   1989 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:259: if (!Switch_B1())  // turn BILEDB off
      0003B6 12r0Br72         [24] 1990 	lcall	_Switch_B1
      0003B9 E5 82            [12] 1991 	mov	a,dpl
      0003BB 85 83 F0         [24] 1992 	mov	b,dph
      0003BE 45 F0            [12] 1993 	orl	a,b
      0003C0 70 06            [24] 1994 	jnz	00119$
                           0003C2  1995 	C$Lab_2.c$261$2$84 ==.
                                   1996 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:261: BILEDB0 = 0;
      0003C2 C2 80            [12] 1997 	clr	_BILEDB0
                           0003C4  1998 	C$Lab_2.c$262$2$84 ==.
                                   1999 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:262: BILEDB1 = 0;
      0003C4 C2 81            [12] 2000 	clr	_BILEDB1
      0003C6 80 3A            [24] 2001 	sjmp	00120$
      0003C8                       2002 00119$:
                           0003C8  2003 	C$Lab_2.c$264$1$80 ==.
                                   2004 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:264: else if (Switch_B0() && (!Switch_B1())) // turn BILEDB to RED
      0003C8 12r0Br66         [24] 2005 	lcall	_Switch_B0
      0003CB E5 82            [12] 2006 	mov	a,dpl
      0003CD 85 83 F0         [24] 2007 	mov	b,dph
      0003D0 45 F0            [12] 2008 	orl	a,b
      0003D2 60 12            [24] 2009 	jz	00115$
      0003D4 12r0Br72         [24] 2010 	lcall	_Switch_B1
      0003D7 E5 82            [12] 2011 	mov	a,dpl
      0003D9 85 83 F0         [24] 2012 	mov	b,dph
      0003DC 45 F0            [12] 2013 	orl	a,b
      0003DE 70 06            [24] 2014 	jnz	00115$
                           0003E0  2015 	C$Lab_2.c$266$2$85 ==.
                                   2016 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:266: BILEDB0 = 0;
      0003E0 C2 80            [12] 2017 	clr	_BILEDB0
                           0003E2  2018 	C$Lab_2.c$267$2$85 ==.
                                   2019 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:267: BILEDB1 = 1;
      0003E2 D2 81            [12] 2020 	setb	_BILEDB1
      0003E4 80 1C            [24] 2021 	sjmp	00120$
      0003E6                       2022 00115$:
                           0003E6  2023 	C$Lab_2.c$269$1$80 ==.
                                   2024 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:269: else if (Switch_B0() && Switch_B1()) // turn BILEDB to GREEN
      0003E6 12r0Br66         [24] 2025 	lcall	_Switch_B0
      0003E9 E5 82            [12] 2026 	mov	a,dpl
      0003EB 85 83 F0         [24] 2027 	mov	b,dph
      0003EE 45 F0            [12] 2028 	orl	a,b
      0003F0 60 10            [24] 2029 	jz	00120$
      0003F2 12r0Br72         [24] 2030 	lcall	_Switch_B1
      0003F5 E5 82            [12] 2031 	mov	a,dpl
      0003F7 85 83 F0         [24] 2032 	mov	b,dph
      0003FA 45 F0            [12] 2033 	orl	a,b
      0003FC 60 04            [24] 2034 	jz	00120$
                           0003FE  2035 	C$Lab_2.c$271$2$86 ==.
                                   2036 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:271: BILEDB0 = 1;
      0003FE D2 80            [12] 2037 	setb	_BILEDB0
                           000400  2038 	C$Lab_2.c$272$2$86 ==.
                                   2039 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:272: BILEDB1 = 0;
      000400 C2 81            [12] 2040 	clr	_BILEDB1
      000402                       2041 00120$:
                           000402  2042 	C$Lab_2.c$275$1$80 ==.
                                   2043 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:275: if (!Switch_C1())  // turn BILEDC off
      000402 12r0Br8A         [24] 2044 	lcall	_Switch_C1
      000405 E5 82            [12] 2045 	mov	a,dpl
      000407 85 83 F0         [24] 2046 	mov	b,dph
      00040A 45 F0            [12] 2047 	orl	a,b
      00040C 70 06            [24] 2048 	jnz	00129$
                           00040E  2049 	C$Lab_2.c$277$2$87 ==.
                                   2050 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:277: BILEDC0 = 0;
      00040E C2 A4            [12] 2051 	clr	_BILEDC0
                           000410  2052 	C$Lab_2.c$278$2$87 ==.
                                   2053 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:278: BILEDC1 = 0;
      000410 C2 A5            [12] 2054 	clr	_BILEDC1
      000412 80 3A            [24] 2055 	sjmp	00131$
      000414                       2056 00129$:
                           000414  2057 	C$Lab_2.c$280$1$80 ==.
                                   2058 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:280: else if (Switch_C0() && (!Switch_C1())) // turn BILEDC to RED
      000414 12r0Br7E         [24] 2059 	lcall	_Switch_C0
      000417 E5 82            [12] 2060 	mov	a,dpl
      000419 85 83 F0         [24] 2061 	mov	b,dph
      00041C 45 F0            [12] 2062 	orl	a,b
      00041E 60 12            [24] 2063 	jz	00125$
      000420 12r0Br8A         [24] 2064 	lcall	_Switch_C1
      000423 E5 82            [12] 2065 	mov	a,dpl
      000425 85 83 F0         [24] 2066 	mov	b,dph
      000428 45 F0            [12] 2067 	orl	a,b
      00042A 70 06            [24] 2068 	jnz	00125$
                           00042C  2069 	C$Lab_2.c$282$2$88 ==.
                                   2070 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:282: BILEDC0 = 0;
      00042C C2 A4            [12] 2071 	clr	_BILEDC0
                           00042E  2072 	C$Lab_2.c$283$2$88 ==.
                                   2073 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:283: BILEDC1 = 1;
      00042E D2 A5            [12] 2074 	setb	_BILEDC1
      000430 80 1C            [24] 2075 	sjmp	00131$
      000432                       2076 00125$:
                           000432  2077 	C$Lab_2.c$285$1$80 ==.
                                   2078 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:285: else if (Switch_C0() && Switch_C1()) // turn BILEDC to GREEN
      000432 12r0Br7E         [24] 2079 	lcall	_Switch_C0
      000435 E5 82            [12] 2080 	mov	a,dpl
      000437 85 83 F0         [24] 2081 	mov	b,dph
      00043A 45 F0            [12] 2082 	orl	a,b
      00043C 60 10            [24] 2083 	jz	00131$
      00043E 12r0Br8A         [24] 2084 	lcall	_Switch_C1
      000441 E5 82            [12] 2085 	mov	a,dpl
      000443 85 83 F0         [24] 2086 	mov	b,dph
      000446 45 F0            [12] 2087 	orl	a,b
      000448 60 04            [24] 2088 	jz	00131$
                           00044A  2089 	C$Lab_2.c$287$2$89 ==.
                                   2090 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:287: BILEDC0 = 1;
      00044A D2 A4            [12] 2091 	setb	_BILEDC0
                           00044C  2092 	C$Lab_2.c$288$2$89 ==.
                                   2093 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:288: BILEDC1 = 0;
      00044C C2 A5            [12] 2094 	clr	_BILEDC1
      00044E                       2095 00131$:
                           00044E  2096 	C$Lab_2.c$290$1$80 ==.
                           00044E  2097 	XG$FUNCTION_A$0$0 ==.
      00044E 22               [24] 2098 	ret
                                   2099 ;------------------------------------------------------------
                                   2100 ;Allocation info for local variables in function 'FUNCTION_B'
                                   2101 ;------------------------------------------------------------
                                   2102 ;Guess_Array               Allocated with name '_FUNCTION_B_PARM_2'
                                   2103 ;Mastermind_Array          Allocated with name '_FUNCTION_B_Mastermind_Array_1_90'
                                   2104 ;------------------------------------------------------------
                           00044F  2105 	G$FUNCTION_B$0$0 ==.
                           00044F  2106 	C$Lab_2.c$294$1$80 ==.
                                   2107 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:294: char FUNCTION_B(int Mastermind_Array[], int Guess_Array[])
                                   2108 ;	-----------------------------------------
                                   2109 ;	 function FUNCTION_B
                                   2110 ;	-----------------------------------------
      00044F                       2111 _FUNCTION_B:
      00044F 85 82*03         [24] 2112 	mov	_FUNCTION_B_Mastermind_Array_1_90,dpl
      000452 85 83*04         [24] 2113 	mov	(_FUNCTION_B_Mastermind_Array_1_90 + 1),dph
      000455 85 F0*05         [24] 2114 	mov	(_FUNCTION_B_Mastermind_Array_1_90 + 2),b
                           000458  2115 	C$Lab_2.c$297$1$91 ==.
                                   2116 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:297: j = 0;
      000458 E4               [12] 2117 	clr	a
      000459 F5*09            [12] 2118 	mov	_j,a
      00045B F5*0A            [12] 2119 	mov	(_j + 1),a
                           00045D  2120 	C$Lab_2.c$298$1$91 ==.
                                   2121 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:298: flag = 0;
      00045D F5*0D            [12] 2122 	mov	_flag,a
      00045F F5*0E            [12] 2123 	mov	(_flag + 1),a
                           000461  2124 	C$Lab_2.c$299$1$91 ==.
                                   2125 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:299: number_of_correct_colors = 0;
                                   2126 ;	1-genFromRTrack replaced	mov	_number_of_correct_colors,#0x00
      000461 F5*0F            [12] 2127 	mov	_number_of_correct_colors,a
                           000463  2128 	C$Lab_2.c$301$1$91 ==.
                                   2129 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:301: for (i=0; i<3; i++)
      000463 F5*07            [12] 2130 	mov	_i,a
      000465 F5*08            [12] 2131 	mov	(_i + 1),a
      000467                       2132 00107$:
                           000467  2133 	C$Lab_2.c$303$2$92 ==.
                                   2134 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:303: MA_Copy[i] = Mastermind_Array[i];
      000467 E5*07            [12] 2135 	mov	a,_i
      000469 25*07            [12] 2136 	add	a,_i
      00046B FB               [12] 2137 	mov	r3,a
      00046C E5*08            [12] 2138 	mov	a,(_i + 1)
      00046E 33               [12] 2139 	rlc	a
      00046F FC               [12] 2140 	mov	r4,a
      000470 EB               [12] 2141 	mov	a,r3
      000471 24r1F            [12] 2142 	add	a,#_MA_Copy
      000473 F9               [12] 2143 	mov	r1,a
      000474 EB               [12] 2144 	mov	a,r3
      000475 25*03            [12] 2145 	add	a,_FUNCTION_B_Mastermind_Array_1_90
      000477 FB               [12] 2146 	mov	r3,a
      000478 EC               [12] 2147 	mov	a,r4
      000479 35*04            [12] 2148 	addc	a,(_FUNCTION_B_Mastermind_Array_1_90 + 1)
      00047B FC               [12] 2149 	mov	r4,a
      00047C AA*05            [24] 2150 	mov	r2,(_FUNCTION_B_Mastermind_Array_1_90 + 2)
      00047E 8B 82            [24] 2151 	mov	dpl,r3
      000480 8C 83            [24] 2152 	mov	dph,r4
      000482 8A F0            [24] 2153 	mov	b,r2
      000484 12r00r00         [24] 2154 	lcall	__gptrget
      000487 FB               [12] 2155 	mov	r3,a
      000488 A3               [24] 2156 	inc	dptr
      000489 12r00r00         [24] 2157 	lcall	__gptrget
      00048C FC               [12] 2158 	mov	r4,a
      00048D A7 03            [24] 2159 	mov	@r1,ar3
      00048F 09               [12] 2160 	inc	r1
      000490 A7 04            [24] 2161 	mov	@r1,ar4
      000492 19               [12] 2162 	dec	r1
                           000493  2163 	C$Lab_2.c$301$1$91 ==.
                                   2164 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:301: for (i=0; i<3; i++)
      000493 05*07            [12] 2165 	inc	_i
      000495 E4               [12] 2166 	clr	a
      000496 B5*07 02         [24] 2167 	cjne	a,_i,00139$
      000499 05*08            [12] 2168 	inc	(_i + 1)
      00049B                       2169 00139$:
      00049B C3               [12] 2170 	clr	c
      00049C E5*07            [12] 2171 	mov	a,_i
      00049E 94 03            [12] 2172 	subb	a,#0x03
      0004A0 E5*08            [12] 2173 	mov	a,(_i + 1)
      0004A2 64 80            [12] 2174 	xrl	a,#0x80
      0004A4 94 80            [12] 2175 	subb	a,#0x80
      0004A6 40 BF            [24] 2176 	jc	00107$
                           0004A8  2177 	C$Lab_2.c$305$1$91 ==.
                                   2178 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:305: for (i=0; i<3; i++) // iterate through Guess_Array
      0004A8 E4               [12] 2179 	clr	a
      0004A9 F5*07            [12] 2180 	mov	_i,a
      0004AB F5*08            [12] 2181 	mov	(_i + 1),a
      0004AD                       2182 00111$:
                           0004AD  2183 	C$Lab_2.c$307$2$93 ==.
                                   2184 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:307: for (j=0; j<3; j++) // iterate through Mastermind_Array
      0004AD E4               [12] 2185 	clr	a
      0004AE F5*09            [12] 2186 	mov	_j,a
      0004B0 F5*0A            [12] 2187 	mov	(_j + 1),a
      0004B2                       2188 00109$:
                           0004B2  2189 	C$Lab_2.c$309$3$94 ==.
                                   2190 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:309: if ((Guess_Array[i] == Mastermind_Array[j]) && (flag == 0))
      0004B2 E5*07            [12] 2191 	mov	a,_i
      0004B4 25*07            [12] 2192 	add	a,_i
      0004B6 FB               [12] 2193 	mov	r3,a
      0004B7 E5*08            [12] 2194 	mov	a,(_i + 1)
      0004B9 33               [12] 2195 	rlc	a
      0004BA FC               [12] 2196 	mov	r4,a
      0004BB EB               [12] 2197 	mov	a,r3
      0004BC 25*00            [12] 2198 	add	a,_FUNCTION_B_PARM_2
      0004BE FB               [12] 2199 	mov	r3,a
      0004BF EC               [12] 2200 	mov	a,r4
      0004C0 35*01            [12] 2201 	addc	a,(_FUNCTION_B_PARM_2 + 1)
      0004C2 FC               [12] 2202 	mov	r4,a
      0004C3 AA*02            [24] 2203 	mov	r2,(_FUNCTION_B_PARM_2 + 2)
      0004C5 8B 82            [24] 2204 	mov	dpl,r3
      0004C7 8C 83            [24] 2205 	mov	dph,r4
      0004C9 8A F0            [24] 2206 	mov	b,r2
      0004CB 12r00r00         [24] 2207 	lcall	__gptrget
      0004CE FB               [12] 2208 	mov	r3,a
      0004CF A3               [24] 2209 	inc	dptr
      0004D0 12r00r00         [24] 2210 	lcall	__gptrget
      0004D3 FC               [12] 2211 	mov	r4,a
      0004D4 E5*09            [12] 2212 	mov	a,_j
      0004D6 25*09            [12] 2213 	add	a,_j
      0004D8 FA               [12] 2214 	mov	r2,a
      0004D9 E5*0A            [12] 2215 	mov	a,(_j + 1)
      0004DB 33               [12] 2216 	rlc	a
      0004DC FF               [12] 2217 	mov	r7,a
      0004DD EA               [12] 2218 	mov	a,r2
      0004DE 25*03            [12] 2219 	add	a,_FUNCTION_B_Mastermind_Array_1_90
      0004E0 FA               [12] 2220 	mov	r2,a
      0004E1 EF               [12] 2221 	mov	a,r7
      0004E2 35*04            [12] 2222 	addc	a,(_FUNCTION_B_Mastermind_Array_1_90 + 1)
      0004E4 FF               [12] 2223 	mov	r7,a
      0004E5 AE*05            [24] 2224 	mov	r6,(_FUNCTION_B_Mastermind_Array_1_90 + 2)
      0004E7 8A 82            [24] 2225 	mov	dpl,r2
      0004E9 8F 83            [24] 2226 	mov	dph,r7
      0004EB 8E F0            [24] 2227 	mov	b,r6
      0004ED 12r00r00         [24] 2228 	lcall	__gptrget
      0004F0 FA               [12] 2229 	mov	r2,a
      0004F1 A3               [24] 2230 	inc	dptr
      0004F2 12r00r00         [24] 2231 	lcall	__gptrget
      0004F5 FF               [12] 2232 	mov	r7,a
      0004F6 EB               [12] 2233 	mov	a,r3
      0004F7 B5 02 32         [24] 2234 	cjne	a,ar2,00110$
      0004FA EC               [12] 2235 	mov	a,r4
      0004FB B5 07 2E         [24] 2236 	cjne	a,ar7,00110$
      0004FE E5*0D            [12] 2237 	mov	a,_flag
      000500 45*0E            [12] 2238 	orl	a,(_flag + 1)
      000502 70 28            [24] 2239 	jnz	00110$
                           000504  2240 	C$Lab_2.c$311$4$95 ==.
                                   2241 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:311: number_of_correct_colors++;
      000504 05*0F            [12] 2242 	inc	_number_of_correct_colors
                           000506  2243 	C$Lab_2.c$312$4$95 ==.
                                   2244 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:312: Mastermind_Array[j] = 0;
      000506 E5*09            [12] 2245 	mov	a,_j
      000508 25*09            [12] 2246 	add	a,_j
      00050A FE               [12] 2247 	mov	r6,a
      00050B E5*0A            [12] 2248 	mov	a,(_j + 1)
      00050D 33               [12] 2249 	rlc	a
      00050E FF               [12] 2250 	mov	r7,a
      00050F EE               [12] 2251 	mov	a,r6
      000510 25*03            [12] 2252 	add	a,_FUNCTION_B_Mastermind_Array_1_90
      000512 FE               [12] 2253 	mov	r6,a
      000513 EF               [12] 2254 	mov	a,r7
      000514 35*04            [12] 2255 	addc	a,(_FUNCTION_B_Mastermind_Array_1_90 + 1)
      000516 FF               [12] 2256 	mov	r7,a
      000517 AD*05            [24] 2257 	mov	r5,(_FUNCTION_B_Mastermind_Array_1_90 + 2)
      000519 8E 82            [24] 2258 	mov	dpl,r6
      00051B 8F 83            [24] 2259 	mov	dph,r7
      00051D 8D F0            [24] 2260 	mov	b,r5
      00051F E4               [12] 2261 	clr	a
      000520 12r00r00         [24] 2262 	lcall	__gptrput
      000523 A3               [24] 2263 	inc	dptr
      000524 12r00r00         [24] 2264 	lcall	__gptrput
                           000527  2265 	C$Lab_2.c$313$4$95 ==.
                                   2266 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:313: flag = 1;
      000527 75*0D 01         [24] 2267 	mov	_flag,#0x01
                                   2268 ;	1-genFromRTrack replaced	mov	(_flag + 1),#0x00
      00052A F5*0E            [12] 2269 	mov	(_flag + 1),a
      00052C                       2270 00110$:
                           00052C  2271 	C$Lab_2.c$307$2$93 ==.
                                   2272 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:307: for (j=0; j<3; j++) // iterate through Mastermind_Array
      00052C 05*09            [12] 2273 	inc	_j
      00052E E4               [12] 2274 	clr	a
      00052F B5*09 02         [24] 2275 	cjne	a,_j,00144$
      000532 05*0A            [12] 2276 	inc	(_j + 1)
      000534                       2277 00144$:
      000534 C3               [12] 2278 	clr	c
      000535 E5*09            [12] 2279 	mov	a,_j
      000537 94 03            [12] 2280 	subb	a,#0x03
      000539 E5*0A            [12] 2281 	mov	a,(_j + 1)
      00053B 64 80            [12] 2282 	xrl	a,#0x80
      00053D 94 80            [12] 2283 	subb	a,#0x80
      00053F 50 03            [24] 2284 	jnc	00145$
      000541 02r04rB2         [24] 2285 	ljmp	00109$
      000544                       2286 00145$:
                           000544  2287 	C$Lab_2.c$316$2$93 ==.
                                   2288 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:316: flag = 0; // reset flag
      000544 E4               [12] 2289 	clr	a
      000545 F5*0D            [12] 2290 	mov	_flag,a
      000547 F5*0E            [12] 2291 	mov	(_flag + 1),a
                           000549  2292 	C$Lab_2.c$305$1$91 ==.
                                   2293 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:305: for (i=0; i<3; i++) // iterate through Guess_Array
      000549 05*07            [12] 2294 	inc	_i
                                   2295 ;	genFromRTrack removed	clr	a
      00054B B5*07 02         [24] 2296 	cjne	a,_i,00146$
      00054E 05*08            [12] 2297 	inc	(_i + 1)
      000550                       2298 00146$:
      000550 C3               [12] 2299 	clr	c
      000551 E5*07            [12] 2300 	mov	a,_i
      000553 94 03            [12] 2301 	subb	a,#0x03
      000555 E5*08            [12] 2302 	mov	a,(_i + 1)
      000557 64 80            [12] 2303 	xrl	a,#0x80
      000559 94 80            [12] 2304 	subb	a,#0x80
      00055B 50 03            [24] 2305 	jnc	00147$
      00055D 02r04rAD         [24] 2306 	ljmp	00111$
      000560                       2307 00147$:
                           000560  2308 	C$Lab_2.c$318$1$91 ==.
                                   2309 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:318: return number_of_correct_colors;
      000560 85*0F 82         [24] 2310 	mov	dpl,_number_of_correct_colors
                           000563  2311 	C$Lab_2.c$319$1$91 ==.
                           000563  2312 	XG$FUNCTION_B$0$0 ==.
      000563 22               [24] 2313 	ret
                                   2314 ;------------------------------------------------------------
                                   2315 ;Allocation info for local variables in function 'FUNCTION_C'
                                   2316 ;------------------------------------------------------------
                                   2317 ;Guess_Array               Allocated with name '_FUNCTION_C_PARM_2'
                                   2318 ;Mastermind_Array          Allocated to registers r5 r6 r7 
                                   2319 ;------------------------------------------------------------
                           000564  2320 	G$FUNCTION_C$0$0 ==.
                           000564  2321 	C$Lab_2.c$323$1$91 ==.
                                   2322 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:323: char FUNCTION_C(int Mastermind_Array[], int Guess_Array[])
                                   2323 ;	-----------------------------------------
                                   2324 ;	 function FUNCTION_C
                                   2325 ;	-----------------------------------------
      000564                       2326 _FUNCTION_C:
      000564 AD 82            [24] 2327 	mov	r5,dpl
      000566 AE 83            [24] 2328 	mov	r6,dph
      000568 AF F0            [24] 2329 	mov	r7,b
                           00056A  2330 	C$Lab_2.c$326$1$97 ==.
                                   2331 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:326: number_of_correct_spots = 0;
                           00056A  2332 	C$Lab_2.c$327$1$97 ==.
                                   2333 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:327: for (i=0; i<3; i++)
      00056A E4               [12] 2334 	clr	a
      00056B F5*10            [12] 2335 	mov	_number_of_correct_spots,a
      00056D F5*07            [12] 2336 	mov	_i,a
      00056F F5*08            [12] 2337 	mov	(_i + 1),a
      000571                       2338 00104$:
                           000571  2339 	C$Lab_2.c$329$2$98 ==.
                                   2340 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:329: if (Mastermind_Array[i] == Guess_Array[i])
      000571 E5*07            [12] 2341 	mov	a,_i
      000573 25*07            [12] 2342 	add	a,_i
      000575 FB               [12] 2343 	mov	r3,a
      000576 E5*08            [12] 2344 	mov	a,(_i + 1)
      000578 33               [12] 2345 	rlc	a
      000579 FC               [12] 2346 	mov	r4,a
      00057A EB               [12] 2347 	mov	a,r3
      00057B 2D               [12] 2348 	add	a,r5
      00057C F8               [12] 2349 	mov	r0,a
      00057D EC               [12] 2350 	mov	a,r4
      00057E 3E               [12] 2351 	addc	a,r6
      00057F F9               [12] 2352 	mov	r1,a
      000580 8F 02            [24] 2353 	mov	ar2,r7
      000582 88 82            [24] 2354 	mov	dpl,r0
      000584 89 83            [24] 2355 	mov	dph,r1
      000586 8A F0            [24] 2356 	mov	b,r2
      000588 12r00r00         [24] 2357 	lcall	__gptrget
      00058B F8               [12] 2358 	mov	r0,a
      00058C A3               [24] 2359 	inc	dptr
      00058D 12r00r00         [24] 2360 	lcall	__gptrget
      000590 F9               [12] 2361 	mov	r1,a
      000591 EB               [12] 2362 	mov	a,r3
      000592 25*00            [12] 2363 	add	a,_FUNCTION_C_PARM_2
      000594 FB               [12] 2364 	mov	r3,a
      000595 EC               [12] 2365 	mov	a,r4
      000596 35*01            [12] 2366 	addc	a,(_FUNCTION_C_PARM_2 + 1)
      000598 FC               [12] 2367 	mov	r4,a
      000599 AA*02            [24] 2368 	mov	r2,(_FUNCTION_C_PARM_2 + 2)
      00059B 8B 82            [24] 2369 	mov	dpl,r3
      00059D 8C 83            [24] 2370 	mov	dph,r4
      00059F 8A F0            [24] 2371 	mov	b,r2
      0005A1 12r00r00         [24] 2372 	lcall	__gptrget
      0005A4 FB               [12] 2373 	mov	r3,a
      0005A5 A3               [24] 2374 	inc	dptr
      0005A6 12r00r00         [24] 2375 	lcall	__gptrget
      0005A9 FC               [12] 2376 	mov	r4,a
      0005AA E8               [12] 2377 	mov	a,r0
      0005AB B5 03 06         [24] 2378 	cjne	a,ar3,00105$
      0005AE E9               [12] 2379 	mov	a,r1
      0005AF B5 04 02         [24] 2380 	cjne	a,ar4,00105$
                           0005B2  2381 	C$Lab_2.c$331$3$99 ==.
                                   2382 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:331: number_of_correct_spots++;
      0005B2 05*10            [12] 2383 	inc	_number_of_correct_spots
      0005B4                       2384 00105$:
                           0005B4  2385 	C$Lab_2.c$327$1$97 ==.
                                   2386 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:327: for (i=0; i<3; i++)
      0005B4 05*07            [12] 2387 	inc	_i
      0005B6 E4               [12] 2388 	clr	a
      0005B7 B5*07 02         [24] 2389 	cjne	a,_i,00119$
      0005BA 05*08            [12] 2390 	inc	(_i + 1)
      0005BC                       2391 00119$:
      0005BC C3               [12] 2392 	clr	c
      0005BD E5*07            [12] 2393 	mov	a,_i
      0005BF 94 03            [12] 2394 	subb	a,#0x03
      0005C1 E5*08            [12] 2395 	mov	a,(_i + 1)
      0005C3 64 80            [12] 2396 	xrl	a,#0x80
      0005C5 94 80            [12] 2397 	subb	a,#0x80
      0005C7 40 A8            [24] 2398 	jc	00104$
                           0005C9  2399 	C$Lab_2.c$334$1$97 ==.
                                   2400 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:334: return number_of_correct_spots;
      0005C9 85*10 82         [24] 2401 	mov	dpl,_number_of_correct_spots
                           0005CC  2402 	C$Lab_2.c$335$1$97 ==.
                           0005CC  2403 	XG$FUNCTION_C$0$0 ==.
      0005CC 22               [24] 2404 	ret
                                   2405 ;------------------------------------------------------------
                                   2406 ;Allocation info for local variables in function 'FUNCTION_Da'
                                   2407 ;------------------------------------------------------------
                                   2408 ;Guess_Array               Allocated with name '_FUNCTION_Da_PARM_2'
                                   2409 ;amber_score               Allocated with name '_FUNCTION_Da_PARM_3'
                                   2410 ;Mastermind_Array          Allocated to registers r5 r6 r7 
                                   2411 ;------------------------------------------------------------
                           0005CD  2412 	G$FUNCTION_Da$0$0 ==.
                           0005CD  2413 	C$Lab_2.c$339$1$97 ==.
                                   2414 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:339: void FUNCTION_Da(int Mastermind_Array[], int Guess_Array[], unsigned char amber_score)
                                   2415 ;	-----------------------------------------
                                   2416 ;	 function FUNCTION_Da
                                   2417 ;	-----------------------------------------
      0005CD                       2418 _FUNCTION_Da:
      0005CD AD 82            [24] 2419 	mov	r5,dpl
      0005CF AE 83            [24] 2420 	mov	r6,dph
      0005D1 AF F0            [24] 2421 	mov	r7,b
                           0005D3  2422 	C$Lab_2.c$341$1$101 ==.
                                   2423 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:341: i = 0;
      0005D3 E4               [12] 2424 	clr	a
      0005D4 F5*07            [12] 2425 	mov	_i,a
      0005D6 F5*08            [12] 2426 	mov	(_i + 1),a
                           0005D8  2427 	C$Lab_2.c$342$1$101 ==.
                                   2428 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:342: printf("\r");
      0005D8 C0 07            [24] 2429 	push	ar7
      0005DA C0 06            [24] 2430 	push	ar6
      0005DC C0 05            [24] 2431 	push	ar5
      0005DE 74rFD            [12] 2432 	mov	a,#___str_9
      0005E0 C0 E0            [24] 2433 	push	acc
      0005E2 74s00            [12] 2434 	mov	a,#(___str_9 >> 8)
      0005E4 C0 E0            [24] 2435 	push	acc
      0005E6 74 80            [12] 2436 	mov	a,#0x80
      0005E8 C0 E0            [24] 2437 	push	acc
      0005EA 12r00r00         [24] 2438 	lcall	_printf
      0005ED 15 81            [12] 2439 	dec	sp
      0005EF 15 81            [12] 2440 	dec	sp
      0005F1 15 81            [12] 2441 	dec	sp
      0005F3 D0 05            [24] 2442 	pop	ar5
      0005F5 D0 06            [24] 2443 	pop	ar6
      0005F7 D0 07            [24] 2444 	pop	ar7
                           0005F9  2445 	C$Lab_2.c$343$1$101 ==.
                                   2446 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:343: for (i=0; i<3; i++)
      0005F9 E4               [12] 2447 	clr	a
      0005FA F5*07            [12] 2448 	mov	_i,a
      0005FC F5*08            [12] 2449 	mov	(_i + 1),a
      0005FE                       2450 00106$:
                           0005FE  2451 	C$Lab_2.c$345$2$102 ==.
                                   2452 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:345: printf("%d", Guess_Array[i]);
      0005FE E5*07            [12] 2453 	mov	a,_i
      000600 25*07            [12] 2454 	add	a,_i
      000602 FB               [12] 2455 	mov	r3,a
      000603 E5*08            [12] 2456 	mov	a,(_i + 1)
      000605 33               [12] 2457 	rlc	a
      000606 FC               [12] 2458 	mov	r4,a
      000607 EB               [12] 2459 	mov	a,r3
      000608 25*25            [12] 2460 	add	a,_FUNCTION_Da_PARM_2
      00060A FB               [12] 2461 	mov	r3,a
      00060B EC               [12] 2462 	mov	a,r4
      00060C 35*26            [12] 2463 	addc	a,(_FUNCTION_Da_PARM_2 + 1)
      00060E FC               [12] 2464 	mov	r4,a
      00060F AA*27            [24] 2465 	mov	r2,(_FUNCTION_Da_PARM_2 + 2)
      000611 8B 82            [24] 2466 	mov	dpl,r3
      000613 8C 83            [24] 2467 	mov	dph,r4
      000615 8A F0            [24] 2468 	mov	b,r2
      000617 12r00r00         [24] 2469 	lcall	__gptrget
      00061A FB               [12] 2470 	mov	r3,a
      00061B A3               [24] 2471 	inc	dptr
      00061C 12r00r00         [24] 2472 	lcall	__gptrget
      00061F FC               [12] 2473 	mov	r4,a
      000620 C0 07            [24] 2474 	push	ar7
      000622 C0 06            [24] 2475 	push	ar6
      000624 C0 05            [24] 2476 	push	ar5
      000626 C0 03            [24] 2477 	push	ar3
      000628 C0 04            [24] 2478 	push	ar4
      00062A 74rFF            [12] 2479 	mov	a,#___str_10
      00062C C0 E0            [24] 2480 	push	acc
      00062E 74s00            [12] 2481 	mov	a,#(___str_10 >> 8)
      000630 C0 E0            [24] 2482 	push	acc
      000632 74 80            [12] 2483 	mov	a,#0x80
      000634 C0 E0            [24] 2484 	push	acc
      000636 12r00r00         [24] 2485 	lcall	_printf
      000639 E5 81            [12] 2486 	mov	a,sp
      00063B 24 FB            [12] 2487 	add	a,#0xfb
      00063D F5 81            [12] 2488 	mov	sp,a
      00063F D0 05            [24] 2489 	pop	ar5
      000641 D0 06            [24] 2490 	pop	ar6
      000643 D0 07            [24] 2491 	pop	ar7
                           000645  2492 	C$Lab_2.c$343$1$101 ==.
                                   2493 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:343: for (i=0; i<3; i++)
      000645 05*07            [12] 2494 	inc	_i
      000647 E4               [12] 2495 	clr	a
      000648 B5*07 02         [24] 2496 	cjne	a,_i,00122$
      00064B 05*08            [12] 2497 	inc	(_i + 1)
      00064D                       2498 00122$:
      00064D C3               [12] 2499 	clr	c
      00064E E5*07            [12] 2500 	mov	a,_i
      000650 94 03            [12] 2501 	subb	a,#0x03
      000652 E5*08            [12] 2502 	mov	a,(_i + 1)
      000654 64 80            [12] 2503 	xrl	a,#0x80
      000656 94 80            [12] 2504 	subb	a,#0x80
      000658 40 A4            [24] 2505 	jc	00106$
                           00065A  2506 	C$Lab_2.c$347$1$101 ==.
                                   2507 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:347: printf("\t%u", FUNCTION_B(Mastermind_Array, Guess_Array));
      00065A 85*25*00         [24] 2508 	mov	_FUNCTION_B_PARM_2,_FUNCTION_Da_PARM_2
      00065D 85*26*01         [24] 2509 	mov	(_FUNCTION_B_PARM_2 + 1),(_FUNCTION_Da_PARM_2 + 1)
      000660 85*27*02         [24] 2510 	mov	(_FUNCTION_B_PARM_2 + 2),(_FUNCTION_Da_PARM_2 + 2)
      000663 8D 82            [24] 2511 	mov	dpl,r5
      000665 8E 83            [24] 2512 	mov	dph,r6
      000667 8F F0            [24] 2513 	mov	b,r7
      000669 C0 07            [24] 2514 	push	ar7
      00066B C0 06            [24] 2515 	push	ar6
      00066D C0 05            [24] 2516 	push	ar5
      00066F 12r04r4F         [24] 2517 	lcall	_FUNCTION_B
      000672 E5 82            [12] 2518 	mov	a,dpl
      000674 FC               [12] 2519 	mov	r4,a
      000675 33               [12] 2520 	rlc	a
      000676 95 E0            [12] 2521 	subb	a,acc
      000678 FB               [12] 2522 	mov	r3,a
      000679 C0 04            [24] 2523 	push	ar4
      00067B C0 03            [24] 2524 	push	ar3
      00067D 74r02            [12] 2525 	mov	a,#___str_11
      00067F C0 E0            [24] 2526 	push	acc
      000681 74s01            [12] 2527 	mov	a,#(___str_11 >> 8)
      000683 C0 E0            [24] 2528 	push	acc
      000685 74 80            [12] 2529 	mov	a,#0x80
      000687 C0 E0            [24] 2530 	push	acc
      000689 12r00r00         [24] 2531 	lcall	_printf
      00068C E5 81            [12] 2532 	mov	a,sp
      00068E 24 FB            [12] 2533 	add	a,#0xfb
      000690 F5 81            [12] 2534 	mov	sp,a
      000692 D0 05            [24] 2535 	pop	ar5
      000694 D0 06            [24] 2536 	pop	ar6
      000696 D0 07            [24] 2537 	pop	ar7
                           000698  2538 	C$Lab_2.c$348$1$101 ==.
                                   2539 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:348: printf("\t%u", FUNCTION_C(Mastermind_Array, Guess_Array));
      000698 85*25*00         [24] 2540 	mov	_FUNCTION_C_PARM_2,_FUNCTION_Da_PARM_2
      00069B 85*26*01         [24] 2541 	mov	(_FUNCTION_C_PARM_2 + 1),(_FUNCTION_Da_PARM_2 + 1)
      00069E 85*27*02         [24] 2542 	mov	(_FUNCTION_C_PARM_2 + 2),(_FUNCTION_Da_PARM_2 + 2)
      0006A1 8D 82            [24] 2543 	mov	dpl,r5
      0006A3 8E 83            [24] 2544 	mov	dph,r6
      0006A5 8F F0            [24] 2545 	mov	b,r7
      0006A7 C0 07            [24] 2546 	push	ar7
      0006A9 C0 06            [24] 2547 	push	ar6
      0006AB C0 05            [24] 2548 	push	ar5
      0006AD 12r05r64         [24] 2549 	lcall	_FUNCTION_C
      0006B0 E5 82            [12] 2550 	mov	a,dpl
      0006B2 FC               [12] 2551 	mov	r4,a
      0006B3 33               [12] 2552 	rlc	a
      0006B4 95 E0            [12] 2553 	subb	a,acc
      0006B6 FB               [12] 2554 	mov	r3,a
      0006B7 C0 04            [24] 2555 	push	ar4
      0006B9 C0 03            [24] 2556 	push	ar3
      0006BB 74r02            [12] 2557 	mov	a,#___str_11
      0006BD C0 E0            [24] 2558 	push	acc
      0006BF 74s01            [12] 2559 	mov	a,#(___str_11 >> 8)
      0006C1 C0 E0            [24] 2560 	push	acc
      0006C3 74 80            [12] 2561 	mov	a,#0x80
      0006C5 C0 E0            [24] 2562 	push	acc
      0006C7 12r00r00         [24] 2563 	lcall	_printf
      0006CA E5 81            [12] 2564 	mov	a,sp
      0006CC 24 FB            [12] 2565 	add	a,#0xfb
      0006CE F5 81            [12] 2566 	mov	sp,a
                           0006D0  2567 	C$Lab_2.c$349$1$101 ==.
                                   2568 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:349: printf("\t%u", amber_score);
      0006D0 AB*28            [24] 2569 	mov	r3,_FUNCTION_Da_PARM_3
      0006D2 7C 00            [12] 2570 	mov	r4,#0x00
      0006D4 C0 03            [24] 2571 	push	ar3
      0006D6 C0 04            [24] 2572 	push	ar4
      0006D8 74r02            [12] 2573 	mov	a,#___str_11
      0006DA C0 E0            [24] 2574 	push	acc
      0006DC 74s01            [12] 2575 	mov	a,#(___str_11 >> 8)
      0006DE C0 E0            [24] 2576 	push	acc
      0006E0 74 80            [12] 2577 	mov	a,#0x80
      0006E2 C0 E0            [24] 2578 	push	acc
      0006E4 12r00r00         [24] 2579 	lcall	_printf
      0006E7 E5 81            [12] 2580 	mov	a,sp
      0006E9 24 FB            [12] 2581 	add	a,#0xfb
      0006EB F5 81            [12] 2582 	mov	sp,a
      0006ED D0 05            [24] 2583 	pop	ar5
      0006EF D0 06            [24] 2584 	pop	ar6
      0006F1 D0 07            [24] 2585 	pop	ar7
                           0006F3  2586 	C$Lab_2.c$350$1$101 ==.
                                   2587 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:350: if (FUNCTION_B(Mastermind_Array, Guess_Array) == 0)
      0006F3 85*25*00         [24] 2588 	mov	_FUNCTION_B_PARM_2,_FUNCTION_Da_PARM_2
      0006F6 85*26*01         [24] 2589 	mov	(_FUNCTION_B_PARM_2 + 1),(_FUNCTION_Da_PARM_2 + 1)
      0006F9 85*27*02         [24] 2590 	mov	(_FUNCTION_B_PARM_2 + 2),(_FUNCTION_Da_PARM_2 + 2)
      0006FC 8D 82            [24] 2591 	mov	dpl,r5
      0006FE 8E 83            [24] 2592 	mov	dph,r6
      000700 8F F0            [24] 2593 	mov	b,r7
      000702 C0 07            [24] 2594 	push	ar7
      000704 C0 06            [24] 2595 	push	ar6
      000706 C0 05            [24] 2596 	push	ar5
      000708 12r04r4F         [24] 2597 	lcall	_FUNCTION_B
      00070B E5 82            [12] 2598 	mov	a,dpl
      00070D D0 05            [24] 2599 	pop	ar5
      00070F D0 06            [24] 2600 	pop	ar6
      000711 D0 07            [24] 2601 	pop	ar7
      000713 70 0F            [24] 2602 	jnz	00103$
                           000715  2603 	C$Lab_2.c$353$2$103 ==.
                                   2604 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:353: FUNCTION_E(); // Function that plays buzzer once, to happen when no color matches are found
      000715 C0 07            [24] 2605 	push	ar7
      000717 C0 06            [24] 2606 	push	ar6
      000719 C0 05            [24] 2607 	push	ar5
      00071B 12r09r3A         [24] 2608 	lcall	_FUNCTION_E
      00071E D0 05            [24] 2609 	pop	ar5
      000720 D0 06            [24] 2610 	pop	ar6
      000722 D0 07            [24] 2611 	pop	ar7
      000724                       2612 00103$:
                           000724  2613 	C$Lab_2.c$355$1$101 ==.
                                   2614 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:355: if (FUNCTION_C(Mastermind_Array, Guess_Array) == 3)
      000724 85*25*00         [24] 2615 	mov	_FUNCTION_C_PARM_2,_FUNCTION_Da_PARM_2
      000727 85*26*01         [24] 2616 	mov	(_FUNCTION_C_PARM_2 + 1),(_FUNCTION_Da_PARM_2 + 1)
      00072A 85*27*02         [24] 2617 	mov	(_FUNCTION_C_PARM_2 + 2),(_FUNCTION_Da_PARM_2 + 2)
      00072D 8D 82            [24] 2618 	mov	dpl,r5
      00072F 8E 83            [24] 2619 	mov	dph,r6
      000731 8F F0            [24] 2620 	mov	b,r7
      000733 12r05r64         [24] 2621 	lcall	_FUNCTION_C
      000736 AF 82            [24] 2622 	mov	r7,dpl
      000738 BF 03 35         [24] 2623 	cjne	r7,#0x03,00105$
                           00073B  2624 	C$Lab_2.c$357$2$104 ==.
                                   2625 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:357: printf("\t(Match!)\n");
      00073B 74r06            [12] 2626 	mov	a,#___str_12
      00073D C0 E0            [24] 2627 	push	acc
      00073F 74s01            [12] 2628 	mov	a,#(___str_12 >> 8)
      000741 C0 E0            [24] 2629 	push	acc
      000743 74 80            [12] 2630 	mov	a,#0x80
      000745 C0 E0            [24] 2631 	push	acc
      000747 12r00r00         [24] 2632 	lcall	_printf
      00074A 15 81            [12] 2633 	dec	sp
      00074C 15 81            [12] 2634 	dec	sp
      00074E 15 81            [12] 2635 	dec	sp
                           000750  2636 	C$Lab_2.c$358$2$104 ==.
                                   2637 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:358: printf("Amber Points = %u\n", amber_score);
      000750 AE*28            [24] 2638 	mov	r6,_FUNCTION_Da_PARM_3
      000752 7F 00            [12] 2639 	mov	r7,#0x00
      000754 C0 06            [24] 2640 	push	ar6
      000756 C0 07            [24] 2641 	push	ar7
      000758 74r11            [12] 2642 	mov	a,#___str_13
      00075A C0 E0            [24] 2643 	push	acc
      00075C 74s01            [12] 2644 	mov	a,#(___str_13 >> 8)
      00075E C0 E0            [24] 2645 	push	acc
      000760 74 80            [12] 2646 	mov	a,#0x80
      000762 C0 E0            [24] 2647 	push	acc
      000764 12r00r00         [24] 2648 	lcall	_printf
      000767 E5 81            [12] 2649 	mov	a,sp
      000769 24 FB            [12] 2650 	add	a,#0xfb
      00076B F5 81            [12] 2651 	mov	sp,a
                           00076D  2652 	C$Lab_2.c$360$2$104 ==.
                                   2653 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:360: FUNCTION_F(); // Function that plays when the sequence has been correctly guessed
      00076D 12r09r4A         [24] 2654 	lcall	_FUNCTION_F
      000770                       2655 00105$:
                           000770  2656 	C$Lab_2.c$362$1$101 ==.
                                   2657 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:362: printf("\n");
      000770 74r24            [12] 2658 	mov	a,#___str_14
      000772 C0 E0            [24] 2659 	push	acc
      000774 74s01            [12] 2660 	mov	a,#(___str_14 >> 8)
      000776 C0 E0            [24] 2661 	push	acc
      000778 74 80            [12] 2662 	mov	a,#0x80
      00077A C0 E0            [24] 2663 	push	acc
      00077C 12r00r00         [24] 2664 	lcall	_printf
      00077F 15 81            [12] 2665 	dec	sp
      000781 15 81            [12] 2666 	dec	sp
      000783 15 81            [12] 2667 	dec	sp
                           000785  2668 	C$Lab_2.c$363$1$101 ==.
                           000785  2669 	XG$FUNCTION_Da$0$0 ==.
      000785 22               [24] 2670 	ret
                                   2671 ;------------------------------------------------------------
                                   2672 ;Allocation info for local variables in function 'FUNCTION_Db'
                                   2673 ;------------------------------------------------------------
                                   2674 ;Guess_Array               Allocated with name '_FUNCTION_Db_PARM_2'
                                   2675 ;green_score               Allocated with name '_FUNCTION_Db_PARM_3'
                                   2676 ;Mastermind_Array          Allocated to registers r5 r6 r7 
                                   2677 ;------------------------------------------------------------
                           000786  2678 	G$FUNCTION_Db$0$0 ==.
                           000786  2679 	C$Lab_2.c$367$1$101 ==.
                                   2680 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:367: void FUNCTION_Db(int Mastermind_Array[], int Guess_Array[], unsigned char green_score)
                                   2681 ;	-----------------------------------------
                                   2682 ;	 function FUNCTION_Db
                                   2683 ;	-----------------------------------------
      000786                       2684 _FUNCTION_Db:
      000786 AD 82            [24] 2685 	mov	r5,dpl
      000788 AE 83            [24] 2686 	mov	r6,dph
      00078A AF F0            [24] 2687 	mov	r7,b
                           00078C  2688 	C$Lab_2.c$369$1$106 ==.
                                   2689 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:369: printf("\r");
      00078C C0 07            [24] 2690 	push	ar7
      00078E C0 06            [24] 2691 	push	ar6
      000790 C0 05            [24] 2692 	push	ar5
      000792 74rFD            [12] 2693 	mov	a,#___str_9
      000794 C0 E0            [24] 2694 	push	acc
      000796 74s00            [12] 2695 	mov	a,#(___str_9 >> 8)
      000798 C0 E0            [24] 2696 	push	acc
      00079A 74 80            [12] 2697 	mov	a,#0x80
      00079C C0 E0            [24] 2698 	push	acc
      00079E 12r00r00         [24] 2699 	lcall	_printf
      0007A1 15 81            [12] 2700 	dec	sp
      0007A3 15 81            [12] 2701 	dec	sp
      0007A5 15 81            [12] 2702 	dec	sp
      0007A7 D0 05            [24] 2703 	pop	ar5
      0007A9 D0 06            [24] 2704 	pop	ar6
      0007AB D0 07            [24] 2705 	pop	ar7
                           0007AD  2706 	C$Lab_2.c$371$1$106 ==.
                                   2707 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:371: for (i=0; i<3; i++)
      0007AD E4               [12] 2708 	clr	a
      0007AE F5*07            [12] 2709 	mov	_i,a
      0007B0 F5*08            [12] 2710 	mov	(_i + 1),a
      0007B2                       2711 00106$:
                           0007B2  2712 	C$Lab_2.c$373$2$107 ==.
                                   2713 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:373: printf("%d", Guess_Array[i]);
      0007B2 E5*07            [12] 2714 	mov	a,_i
      0007B4 25*07            [12] 2715 	add	a,_i
      0007B6 FB               [12] 2716 	mov	r3,a
      0007B7 E5*08            [12] 2717 	mov	a,(_i + 1)
      0007B9 33               [12] 2718 	rlc	a
      0007BA FC               [12] 2719 	mov	r4,a
      0007BB EB               [12] 2720 	mov	a,r3
      0007BC 25*29            [12] 2721 	add	a,_FUNCTION_Db_PARM_2
      0007BE FB               [12] 2722 	mov	r3,a
      0007BF EC               [12] 2723 	mov	a,r4
      0007C0 35*2A            [12] 2724 	addc	a,(_FUNCTION_Db_PARM_2 + 1)
      0007C2 FC               [12] 2725 	mov	r4,a
      0007C3 AA*2B            [24] 2726 	mov	r2,(_FUNCTION_Db_PARM_2 + 2)
      0007C5 8B 82            [24] 2727 	mov	dpl,r3
      0007C7 8C 83            [24] 2728 	mov	dph,r4
      0007C9 8A F0            [24] 2729 	mov	b,r2
      0007CB 12r00r00         [24] 2730 	lcall	__gptrget
      0007CE FB               [12] 2731 	mov	r3,a
      0007CF A3               [24] 2732 	inc	dptr
      0007D0 12r00r00         [24] 2733 	lcall	__gptrget
      0007D3 FC               [12] 2734 	mov	r4,a
      0007D4 C0 07            [24] 2735 	push	ar7
      0007D6 C0 06            [24] 2736 	push	ar6
      0007D8 C0 05            [24] 2737 	push	ar5
      0007DA C0 03            [24] 2738 	push	ar3
      0007DC C0 04            [24] 2739 	push	ar4
      0007DE 74rFF            [12] 2740 	mov	a,#___str_10
      0007E0 C0 E0            [24] 2741 	push	acc
      0007E2 74s00            [12] 2742 	mov	a,#(___str_10 >> 8)
      0007E4 C0 E0            [24] 2743 	push	acc
      0007E6 74 80            [12] 2744 	mov	a,#0x80
      0007E8 C0 E0            [24] 2745 	push	acc
      0007EA 12r00r00         [24] 2746 	lcall	_printf
      0007ED E5 81            [12] 2747 	mov	a,sp
      0007EF 24 FB            [12] 2748 	add	a,#0xfb
      0007F1 F5 81            [12] 2749 	mov	sp,a
      0007F3 D0 05            [24] 2750 	pop	ar5
      0007F5 D0 06            [24] 2751 	pop	ar6
      0007F7 D0 07            [24] 2752 	pop	ar7
                           0007F9  2753 	C$Lab_2.c$371$1$106 ==.
                                   2754 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:371: for (i=0; i<3; i++)
      0007F9 05*07            [12] 2755 	inc	_i
      0007FB E4               [12] 2756 	clr	a
      0007FC B5*07 02         [24] 2757 	cjne	a,_i,00122$
      0007FF 05*08            [12] 2758 	inc	(_i + 1)
      000801                       2759 00122$:
      000801 C3               [12] 2760 	clr	c
      000802 E5*07            [12] 2761 	mov	a,_i
      000804 94 03            [12] 2762 	subb	a,#0x03
      000806 E5*08            [12] 2763 	mov	a,(_i + 1)
      000808 64 80            [12] 2764 	xrl	a,#0x80
      00080A 94 80            [12] 2765 	subb	a,#0x80
      00080C 40 A4            [24] 2766 	jc	00106$
                           00080E  2767 	C$Lab_2.c$375$1$106 ==.
                                   2768 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:375: printf("\t%u", FUNCTION_B(Mastermind_Array, Guess_Array));
      00080E 85*29*00         [24] 2769 	mov	_FUNCTION_B_PARM_2,_FUNCTION_Db_PARM_2
      000811 85*2A*01         [24] 2770 	mov	(_FUNCTION_B_PARM_2 + 1),(_FUNCTION_Db_PARM_2 + 1)
      000814 85*2B*02         [24] 2771 	mov	(_FUNCTION_B_PARM_2 + 2),(_FUNCTION_Db_PARM_2 + 2)
      000817 8D 82            [24] 2772 	mov	dpl,r5
      000819 8E 83            [24] 2773 	mov	dph,r6
      00081B 8F F0            [24] 2774 	mov	b,r7
      00081D C0 07            [24] 2775 	push	ar7
      00081F C0 06            [24] 2776 	push	ar6
      000821 C0 05            [24] 2777 	push	ar5
      000823 12r04r4F         [24] 2778 	lcall	_FUNCTION_B
      000826 E5 82            [12] 2779 	mov	a,dpl
      000828 FC               [12] 2780 	mov	r4,a
      000829 33               [12] 2781 	rlc	a
      00082A 95 E0            [12] 2782 	subb	a,acc
      00082C FB               [12] 2783 	mov	r3,a
      00082D C0 04            [24] 2784 	push	ar4
      00082F C0 03            [24] 2785 	push	ar3
      000831 74r02            [12] 2786 	mov	a,#___str_11
      000833 C0 E0            [24] 2787 	push	acc
      000835 74s01            [12] 2788 	mov	a,#(___str_11 >> 8)
      000837 C0 E0            [24] 2789 	push	acc
      000839 74 80            [12] 2790 	mov	a,#0x80
      00083B C0 E0            [24] 2791 	push	acc
      00083D 12r00r00         [24] 2792 	lcall	_printf
      000840 E5 81            [12] 2793 	mov	a,sp
      000842 24 FB            [12] 2794 	add	a,#0xfb
      000844 F5 81            [12] 2795 	mov	sp,a
      000846 D0 05            [24] 2796 	pop	ar5
      000848 D0 06            [24] 2797 	pop	ar6
      00084A D0 07            [24] 2798 	pop	ar7
                           00084C  2799 	C$Lab_2.c$376$1$106 ==.
                                   2800 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:376: printf("\t%u", FUNCTION_C(Mastermind_Array, Guess_Array));
      00084C 85*29*00         [24] 2801 	mov	_FUNCTION_C_PARM_2,_FUNCTION_Db_PARM_2
      00084F 85*2A*01         [24] 2802 	mov	(_FUNCTION_C_PARM_2 + 1),(_FUNCTION_Db_PARM_2 + 1)
      000852 85*2B*02         [24] 2803 	mov	(_FUNCTION_C_PARM_2 + 2),(_FUNCTION_Db_PARM_2 + 2)
      000855 8D 82            [24] 2804 	mov	dpl,r5
      000857 8E 83            [24] 2805 	mov	dph,r6
      000859 8F F0            [24] 2806 	mov	b,r7
      00085B C0 07            [24] 2807 	push	ar7
      00085D C0 06            [24] 2808 	push	ar6
      00085F C0 05            [24] 2809 	push	ar5
      000861 12r05r64         [24] 2810 	lcall	_FUNCTION_C
      000864 E5 82            [12] 2811 	mov	a,dpl
      000866 FC               [12] 2812 	mov	r4,a
      000867 33               [12] 2813 	rlc	a
      000868 95 E0            [12] 2814 	subb	a,acc
      00086A FB               [12] 2815 	mov	r3,a
      00086B C0 04            [24] 2816 	push	ar4
      00086D C0 03            [24] 2817 	push	ar3
      00086F 74r02            [12] 2818 	mov	a,#___str_11
      000871 C0 E0            [24] 2819 	push	acc
      000873 74s01            [12] 2820 	mov	a,#(___str_11 >> 8)
      000875 C0 E0            [24] 2821 	push	acc
      000877 74 80            [12] 2822 	mov	a,#0x80
      000879 C0 E0            [24] 2823 	push	acc
      00087B 12r00r00         [24] 2824 	lcall	_printf
      00087E E5 81            [12] 2825 	mov	a,sp
      000880 24 FB            [12] 2826 	add	a,#0xfb
      000882 F5 81            [12] 2827 	mov	sp,a
                           000884  2828 	C$Lab_2.c$377$1$106 ==.
                                   2829 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:377: printf("\t%u", green_score);
      000884 AB*2C            [24] 2830 	mov	r3,_FUNCTION_Db_PARM_3
      000886 7C 00            [12] 2831 	mov	r4,#0x00
      000888 C0 03            [24] 2832 	push	ar3
      00088A C0 04            [24] 2833 	push	ar4
      00088C 74r02            [12] 2834 	mov	a,#___str_11
      00088E C0 E0            [24] 2835 	push	acc
      000890 74s01            [12] 2836 	mov	a,#(___str_11 >> 8)
      000892 C0 E0            [24] 2837 	push	acc
      000894 74 80            [12] 2838 	mov	a,#0x80
      000896 C0 E0            [24] 2839 	push	acc
      000898 12r00r00         [24] 2840 	lcall	_printf
      00089B E5 81            [12] 2841 	mov	a,sp
      00089D 24 FB            [12] 2842 	add	a,#0xfb
      00089F F5 81            [12] 2843 	mov	sp,a
      0008A1 D0 05            [24] 2844 	pop	ar5
      0008A3 D0 06            [24] 2845 	pop	ar6
      0008A5 D0 07            [24] 2846 	pop	ar7
                           0008A7  2847 	C$Lab_2.c$378$1$106 ==.
                                   2848 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:378: if ((FUNCTION_B(Mastermind_Array, Guess_Array)) == 0)
      0008A7 85*29*00         [24] 2849 	mov	_FUNCTION_B_PARM_2,_FUNCTION_Db_PARM_2
      0008AA 85*2A*01         [24] 2850 	mov	(_FUNCTION_B_PARM_2 + 1),(_FUNCTION_Db_PARM_2 + 1)
      0008AD 85*2B*02         [24] 2851 	mov	(_FUNCTION_B_PARM_2 + 2),(_FUNCTION_Db_PARM_2 + 2)
      0008B0 8D 82            [24] 2852 	mov	dpl,r5
      0008B2 8E 83            [24] 2853 	mov	dph,r6
      0008B4 8F F0            [24] 2854 	mov	b,r7
      0008B6 C0 07            [24] 2855 	push	ar7
      0008B8 C0 06            [24] 2856 	push	ar6
      0008BA C0 05            [24] 2857 	push	ar5
      0008BC 12r04r4F         [24] 2858 	lcall	_FUNCTION_B
      0008BF E5 82            [12] 2859 	mov	a,dpl
      0008C1 D0 05            [24] 2860 	pop	ar5
      0008C3 D0 06            [24] 2861 	pop	ar6
      0008C5 D0 07            [24] 2862 	pop	ar7
      0008C7 70 0F            [24] 2863 	jnz	00103$
                           0008C9  2864 	C$Lab_2.c$381$2$108 ==.
                                   2865 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:381: FUNCTION_E(); // Function that plays buzzer once, to happen when no color matches are found
      0008C9 C0 07            [24] 2866 	push	ar7
      0008CB C0 06            [24] 2867 	push	ar6
      0008CD C0 05            [24] 2868 	push	ar5
      0008CF 12r09r3A         [24] 2869 	lcall	_FUNCTION_E
      0008D2 D0 05            [24] 2870 	pop	ar5
      0008D4 D0 06            [24] 2871 	pop	ar6
      0008D6 D0 07            [24] 2872 	pop	ar7
      0008D8                       2873 00103$:
                           0008D8  2874 	C$Lab_2.c$383$1$106 ==.
                                   2875 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:383: if ((FUNCTION_C(Mastermind_Array, Guess_Array)) == 3)
      0008D8 85*29*00         [24] 2876 	mov	_FUNCTION_C_PARM_2,_FUNCTION_Db_PARM_2
      0008DB 85*2A*01         [24] 2877 	mov	(_FUNCTION_C_PARM_2 + 1),(_FUNCTION_Db_PARM_2 + 1)
      0008DE 85*2B*02         [24] 2878 	mov	(_FUNCTION_C_PARM_2 + 2),(_FUNCTION_Db_PARM_2 + 2)
      0008E1 8D 82            [24] 2879 	mov	dpl,r5
      0008E3 8E 83            [24] 2880 	mov	dph,r6
      0008E5 8F F0            [24] 2881 	mov	b,r7
      0008E7 12r05r64         [24] 2882 	lcall	_FUNCTION_C
      0008EA AF 82            [24] 2883 	mov	r7,dpl
      0008EC BF 03 35         [24] 2884 	cjne	r7,#0x03,00105$
                           0008EF  2885 	C$Lab_2.c$385$2$109 ==.
                                   2886 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:385: printf("\t(Match!)\n");
      0008EF 74r06            [12] 2887 	mov	a,#___str_12
      0008F1 C0 E0            [24] 2888 	push	acc
      0008F3 74s01            [12] 2889 	mov	a,#(___str_12 >> 8)
      0008F5 C0 E0            [24] 2890 	push	acc
      0008F7 74 80            [12] 2891 	mov	a,#0x80
      0008F9 C0 E0            [24] 2892 	push	acc
      0008FB 12r00r00         [24] 2893 	lcall	_printf
      0008FE 15 81            [12] 2894 	dec	sp
      000900 15 81            [12] 2895 	dec	sp
      000902 15 81            [12] 2896 	dec	sp
                           000904  2897 	C$Lab_2.c$386$2$109 ==.
                                   2898 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:386: printf("Green Points = %u\n", green_score);
      000904 AE*2C            [24] 2899 	mov	r6,_FUNCTION_Db_PARM_3
      000906 7F 00            [12] 2900 	mov	r7,#0x00
      000908 C0 06            [24] 2901 	push	ar6
      00090A C0 07            [24] 2902 	push	ar7
      00090C 74r26            [12] 2903 	mov	a,#___str_15
      00090E C0 E0            [24] 2904 	push	acc
      000910 74s01            [12] 2905 	mov	a,#(___str_15 >> 8)
      000912 C0 E0            [24] 2906 	push	acc
      000914 74 80            [12] 2907 	mov	a,#0x80
      000916 C0 E0            [24] 2908 	push	acc
      000918 12r00r00         [24] 2909 	lcall	_printf
      00091B E5 81            [12] 2910 	mov	a,sp
      00091D 24 FB            [12] 2911 	add	a,#0xfb
      00091F F5 81            [12] 2912 	mov	sp,a
                           000921  2913 	C$Lab_2.c$388$2$109 ==.
                                   2914 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:388: FUNCTION_F(); // Function that plays when the sequence has been correctly guessed
      000921 12r09r4A         [24] 2915 	lcall	_FUNCTION_F
      000924                       2916 00105$:
                           000924  2917 	C$Lab_2.c$390$1$106 ==.
                                   2918 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:390: printf("\n");
      000924 74r24            [12] 2919 	mov	a,#___str_14
      000926 C0 E0            [24] 2920 	push	acc
      000928 74s01            [12] 2921 	mov	a,#(___str_14 >> 8)
      00092A C0 E0            [24] 2922 	push	acc
      00092C 74 80            [12] 2923 	mov	a,#0x80
      00092E C0 E0            [24] 2924 	push	acc
      000930 12r00r00         [24] 2925 	lcall	_printf
      000933 15 81            [12] 2926 	dec	sp
      000935 15 81            [12] 2927 	dec	sp
      000937 15 81            [12] 2928 	dec	sp
                           000939  2929 	C$Lab_2.c$391$1$106 ==.
                           000939  2930 	XG$FUNCTION_Db$0$0 ==.
      000939 22               [24] 2931 	ret
                                   2932 ;------------------------------------------------------------
                                   2933 ;Allocation info for local variables in function 'FUNCTION_E'
                                   2934 ;------------------------------------------------------------
                           00093A  2935 	G$FUNCTION_E$0$0 ==.
                           00093A  2936 	C$Lab_2.c$395$1$106 ==.
                                   2937 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:395: void FUNCTION_E(void)
                                   2938 ;	-----------------------------------------
                                   2939 ;	 function FUNCTION_E
                                   2940 ;	-----------------------------------------
      00093A                       2941 _FUNCTION_E:
                           00093A  2942 	C$Lab_2.c$398$1$111 ==.
                                   2943 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:398: Seconds = 0;
      00093A 75*02 00         [24] 2944 	mov	_Seconds,#0x00
                           00093D  2945 	C$Lab_2.c$400$1$111 ==.
                                   2946 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:400: while (Seconds <= 5)
      00093D                       2947 00101$:
      00093D E5*02            [12] 2948 	mov	a,_Seconds
      00093F 24 FA            [12] 2949 	add	a,#0xff - 0x05
      000941 40 04            [24] 2950 	jc	00103$
                           000943  2951 	C$Lab_2.c$402$2$112 ==.
                                   2952 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:402: BUZZER = 0; // turn buzzer on
      000943 C2 B2            [12] 2953 	clr	_BUZZER
      000945 80 F6            [24] 2954 	sjmp	00101$
      000947                       2955 00103$:
                           000947  2956 	C$Lab_2.c$404$1$111 ==.
                                   2957 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:404: BUZZER = 1;	// turn buzzer off
      000947 D2 B2            [12] 2958 	setb	_BUZZER
                           000949  2959 	C$Lab_2.c$405$1$111 ==.
                           000949  2960 	XG$FUNCTION_E$0$0 ==.
      000949 22               [24] 2961 	ret
                                   2962 ;------------------------------------------------------------
                                   2963 ;Allocation info for local variables in function 'FUNCTION_F'
                                   2964 ;------------------------------------------------------------
                           00094A  2965 	G$FUNCTION_F$0$0 ==.
                           00094A  2966 	C$Lab_2.c$409$1$111 ==.
                                   2967 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:409: void FUNCTION_F(void)
                                   2968 ;	-----------------------------------------
                                   2969 ;	 function FUNCTION_F
                                   2970 ;	-----------------------------------------
      00094A                       2971 _FUNCTION_F:
                           00094A  2972 	C$Lab_2.c$412$1$114 ==.
                                   2973 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:412: Counts = 0;
      00094A E4               [12] 2974 	clr	a
      00094B F5*00            [12] 2975 	mov	_Counts,a
      00094D F5*01            [12] 2976 	mov	(_Counts + 1),a
                           00094F  2977 	C$Lab_2.c$413$1$114 ==.
                                   2978 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:413: buzzer_delay = 168;
      00094F 75*0B A8         [24] 2979 	mov	_buzzer_delay,#0xA8
                                   2980 ;	1-genFromRTrack replaced	mov	(_buzzer_delay + 1),#0x00
      000952 F5*0C            [12] 2981 	mov	(_buzzer_delay + 1),a
                           000954  2982 	C$Lab_2.c$415$1$114 ==.
                                   2983 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:415: for (i=0; i<5; i++)
      000954 F5*07            [12] 2984 	mov	_i,a
      000956 F5*08            [12] 2985 	mov	(_i + 1),a
      000958                       2986 00108$:
                           000958  2987 	C$Lab_2.c$417$2$115 ==.
                                   2988 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:417: Counts = 0;
      000958 E4               [12] 2989 	clr	a
      000959 F5*00            [12] 2990 	mov	_Counts,a
      00095B F5*01            [12] 2991 	mov	(_Counts + 1),a
                           00095D  2992 	C$Lab_2.c$418$2$115 ==.
                                   2993 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:418: while (Counts <= buzzer_delay)
      00095D                       2994 00101$:
      00095D AE*0B            [24] 2995 	mov	r6,_buzzer_delay
      00095F AF*0C            [24] 2996 	mov	r7,(_buzzer_delay + 1)
      000961 C3               [12] 2997 	clr	c
      000962 EE               [12] 2998 	mov	a,r6
      000963 95*00            [12] 2999 	subb	a,_Counts
      000965 EF               [12] 3000 	mov	a,r7
      000966 95*01            [12] 3001 	subb	a,(_Counts + 1)
      000968 40 04            [24] 3002 	jc	00103$
                           00096A  3003 	C$Lab_2.c$420$3$116 ==.
                                   3004 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:420: BUZZER = 0; // turn buzzer on
      00096A C2 B2            [12] 3005 	clr	_BUZZER
      00096C 80 EF            [24] 3006 	sjmp	00101$
      00096E                       3007 00103$:
                           00096E  3008 	C$Lab_2.c$422$2$115 ==.
                                   3009 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:422: Counts = 0;
      00096E E4               [12] 3010 	clr	a
      00096F F5*00            [12] 3011 	mov	_Counts,a
      000971 F5*01            [12] 3012 	mov	(_Counts + 1),a
                           000973  3013 	C$Lab_2.c$423$2$115 ==.
                                   3014 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:423: while (Counts <= buzzer_delay)
      000973                       3015 00104$:
      000973 AE*0B            [24] 3016 	mov	r6,_buzzer_delay
      000975 AF*0C            [24] 3017 	mov	r7,(_buzzer_delay + 1)
      000977 C3               [12] 3018 	clr	c
      000978 EE               [12] 3019 	mov	a,r6
      000979 95*00            [12] 3020 	subb	a,_Counts
      00097B EF               [12] 3021 	mov	a,r7
      00097C 95*01            [12] 3022 	subb	a,(_Counts + 1)
      00097E 40 04            [24] 3023 	jc	00109$
                           000980  3024 	C$Lab_2.c$425$3$117 ==.
                                   3025 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:425: BUZZER = 1; // turn buzzer off
      000980 D2 B2            [12] 3026 	setb	_BUZZER
      000982 80 EF            [24] 3027 	sjmp	00104$
      000984                       3028 00109$:
                           000984  3029 	C$Lab_2.c$415$1$114 ==.
                                   3030 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:415: for (i=0; i<5; i++)
      000984 05*07            [12] 3031 	inc	_i
      000986 E4               [12] 3032 	clr	a
      000987 B5*07 02         [24] 3033 	cjne	a,_i,00132$
      00098A 05*08            [12] 3034 	inc	(_i + 1)
      00098C                       3035 00132$:
      00098C C3               [12] 3036 	clr	c
      00098D E5*07            [12] 3037 	mov	a,_i
      00098F 94 05            [12] 3038 	subb	a,#0x05
      000991 E5*08            [12] 3039 	mov	a,(_i + 1)
      000993 64 80            [12] 3040 	xrl	a,#0x80
      000995 94 80            [12] 3041 	subb	a,#0x80
      000997 40 BF            [24] 3042 	jc	00108$
                           000999  3043 	C$Lab_2.c$428$1$114 ==.
                                   3044 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:428: BUZZER = 1; //once more for good measure
      000999 D2 B2            [12] 3045 	setb	_BUZZER
                           00099B  3046 	C$Lab_2.c$429$1$114 ==.
                           00099B  3047 	XG$FUNCTION_F$0$0 ==.
      00099B 22               [24] 3048 	ret
                                   3049 ;------------------------------------------------------------
                                   3050 ;Allocation info for local variables in function 'FUNCTION_G'
                                   3051 ;------------------------------------------------------------
                                   3052 ;Guess_Array               Allocated to registers r5 r6 r7 
                                   3053 ;------------------------------------------------------------
                           00099C  3054 	G$FUNCTION_G$0$0 ==.
                           00099C  3055 	C$Lab_2.c$433$1$114 ==.
                                   3056 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:433: void FUNCTION_G(int Guess_Array[])
                                   3057 ;	-----------------------------------------
                                   3058 ;	 function FUNCTION_G
                                   3059 ;	-----------------------------------------
      00099C                       3060 _FUNCTION_G:
      00099C AD 82            [24] 3061 	mov	r5,dpl
      00099E AE 83            [24] 3062 	mov	r6,dph
      0009A0 AF F0            [24] 3063 	mov	r7,b
                           0009A2  3064 	C$Lab_2.c$436$1$119 ==.
                                   3065 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:436: if ((BILEDA0 == 0) && (BILEDA1 == 0))
      0009A2 20 84 13         [24] 3066 	jb	_BILEDA0,00109$
      0009A5 20 85 10         [24] 3067 	jb	_BILEDA1,00109$
                           0009A8  3068 	C$Lab_2.c$438$2$120 ==.
                                   3069 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:438: Guess_Array[0] = 0; // off
      0009A8 8D 82            [24] 3070 	mov	dpl,r5
      0009AA 8E 83            [24] 3071 	mov	dph,r6
      0009AC 8F F0            [24] 3072 	mov	b,r7
      0009AE E4               [12] 3073 	clr	a
      0009AF 12r00r00         [24] 3074 	lcall	__gptrput
      0009B2 A3               [24] 3075 	inc	dptr
      0009B3 12r00r00         [24] 3076 	lcall	__gptrput
      0009B6 80 2E            [24] 3077 	sjmp	00110$
      0009B8                       3078 00109$:
                           0009B8  3079 	C$Lab_2.c$440$1$119 ==.
                                   3080 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:440: else if ((BILEDA0 == 0) && (BILEDA1 == 1))
      0009B8 20 84 15         [24] 3081 	jb	_BILEDA0,00105$
      0009BB 30 85 12         [24] 3082 	jnb	_BILEDA1,00105$
                           0009BE  3083 	C$Lab_2.c$442$2$121 ==.
                                   3084 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:442: Guess_Array[0] = 1; // red
      0009BE 8D 82            [24] 3085 	mov	dpl,r5
      0009C0 8E 83            [24] 3086 	mov	dph,r6
      0009C2 8F F0            [24] 3087 	mov	b,r7
      0009C4 74 01            [12] 3088 	mov	a,#0x01
      0009C6 12r00r00         [24] 3089 	lcall	__gptrput
      0009C9 A3               [24] 3090 	inc	dptr
      0009CA E4               [12] 3091 	clr	a
      0009CB 12r00r00         [24] 3092 	lcall	__gptrput
      0009CE 80 16            [24] 3093 	sjmp	00110$
      0009D0                       3094 00105$:
                           0009D0  3095 	C$Lab_2.c$444$1$119 ==.
                                   3096 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:444: else if ((BILEDA0 == 1) && (BILEDA1 == 0))
      0009D0 30 84 13         [24] 3097 	jnb	_BILEDA0,00110$
      0009D3 20 85 10         [24] 3098 	jb	_BILEDA1,00110$
                           0009D6  3099 	C$Lab_2.c$446$2$122 ==.
                                   3100 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:446: Guess_Array[0] = 2;  // green
      0009D6 8D 82            [24] 3101 	mov	dpl,r5
      0009D8 8E 83            [24] 3102 	mov	dph,r6
      0009DA 8F F0            [24] 3103 	mov	b,r7
      0009DC 74 02            [12] 3104 	mov	a,#0x02
      0009DE 12r00r00         [24] 3105 	lcall	__gptrput
      0009E1 A3               [24] 3106 	inc	dptr
      0009E2 E4               [12] 3107 	clr	a
      0009E3 12r00r00         [24] 3108 	lcall	__gptrput
      0009E6                       3109 00110$:
                           0009E6  3110 	C$Lab_2.c$450$1$119 ==.
                                   3111 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:450: if ((BILEDB0 == 0) && (BILEDB1 == 0))
      0009E6 20 80 1C         [24] 3112 	jb	_BILEDB0,00120$
      0009E9 20 81 19         [24] 3113 	jb	_BILEDB1,00120$
                           0009EC  3114 	C$Lab_2.c$452$2$123 ==.
                                   3115 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:452: Guess_Array[1] = 0; // off
      0009EC 74 02            [12] 3116 	mov	a,#0x02
      0009EE 2D               [12] 3117 	add	a,r5
      0009EF FA               [12] 3118 	mov	r2,a
      0009F0 E4               [12] 3119 	clr	a
      0009F1 3E               [12] 3120 	addc	a,r6
      0009F2 FB               [12] 3121 	mov	r3,a
      0009F3 8F 04            [24] 3122 	mov	ar4,r7
      0009F5 8A 82            [24] 3123 	mov	dpl,r2
      0009F7 8B 83            [24] 3124 	mov	dph,r3
      0009F9 8C F0            [24] 3125 	mov	b,r4
      0009FB E4               [12] 3126 	clr	a
      0009FC 12r00r00         [24] 3127 	lcall	__gptrput
      0009FF A3               [24] 3128 	inc	dptr
      000A00 12r00r00         [24] 3129 	lcall	__gptrput
      000A03 80 40            [24] 3130 	sjmp	00121$
      000A05                       3131 00120$:
                           000A05  3132 	C$Lab_2.c$454$1$119 ==.
                                   3133 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:454: else if ((BILEDB0 == 0) && (BILEDB1 == 1))
      000A05 20 80 1E         [24] 3134 	jb	_BILEDB0,00116$
      000A08 30 81 1B         [24] 3135 	jnb	_BILEDB1,00116$
                           000A0B  3136 	C$Lab_2.c$456$2$124 ==.
                                   3137 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:456: Guess_Array[1] = 1; // red
      000A0B 74 02            [12] 3138 	mov	a,#0x02
      000A0D 2D               [12] 3139 	add	a,r5
      000A0E FA               [12] 3140 	mov	r2,a
      000A0F E4               [12] 3141 	clr	a
      000A10 3E               [12] 3142 	addc	a,r6
      000A11 FB               [12] 3143 	mov	r3,a
      000A12 8F 04            [24] 3144 	mov	ar4,r7
      000A14 8A 82            [24] 3145 	mov	dpl,r2
      000A16 8B 83            [24] 3146 	mov	dph,r3
      000A18 8C F0            [24] 3147 	mov	b,r4
      000A1A 74 01            [12] 3148 	mov	a,#0x01
      000A1C 12r00r00         [24] 3149 	lcall	__gptrput
      000A1F A3               [24] 3150 	inc	dptr
      000A20 E4               [12] 3151 	clr	a
      000A21 12r00r00         [24] 3152 	lcall	__gptrput
      000A24 80 1F            [24] 3153 	sjmp	00121$
      000A26                       3154 00116$:
                           000A26  3155 	C$Lab_2.c$458$1$119 ==.
                                   3156 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:458: else if ((BILEDB0 == 1) && (BILEDB1 == 0))
      000A26 30 80 1C         [24] 3157 	jnb	_BILEDB0,00121$
      000A29 20 81 19         [24] 3158 	jb	_BILEDB1,00121$
                           000A2C  3159 	C$Lab_2.c$460$2$125 ==.
                                   3160 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:460: Guess_Array[1] = 2;  // green
      000A2C 74 02            [12] 3161 	mov	a,#0x02
      000A2E 2D               [12] 3162 	add	a,r5
      000A2F FA               [12] 3163 	mov	r2,a
      000A30 E4               [12] 3164 	clr	a
      000A31 3E               [12] 3165 	addc	a,r6
      000A32 FB               [12] 3166 	mov	r3,a
      000A33 8F 04            [24] 3167 	mov	ar4,r7
      000A35 8A 82            [24] 3168 	mov	dpl,r2
      000A37 8B 83            [24] 3169 	mov	dph,r3
      000A39 8C F0            [24] 3170 	mov	b,r4
      000A3B 74 02            [12] 3171 	mov	a,#0x02
      000A3D 12r00r00         [24] 3172 	lcall	__gptrput
      000A40 A3               [24] 3173 	inc	dptr
      000A41 E4               [12] 3174 	clr	a
      000A42 12r00r00         [24] 3175 	lcall	__gptrput
      000A45                       3176 00121$:
                           000A45  3177 	C$Lab_2.c$464$1$119 ==.
                                   3178 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:464: if ((BILEDC0 == 0) && (BILEDC1 == 0))
      000A45 20 A4 1C         [24] 3179 	jb	_BILEDC0,00131$
      000A48 20 A5 19         [24] 3180 	jb	_BILEDC1,00131$
                           000A4B  3181 	C$Lab_2.c$466$2$126 ==.
                                   3182 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:466: Guess_Array[2] = 0; // off
      000A4B 74 04            [12] 3183 	mov	a,#0x04
      000A4D 2D               [12] 3184 	add	a,r5
      000A4E FA               [12] 3185 	mov	r2,a
      000A4F E4               [12] 3186 	clr	a
      000A50 3E               [12] 3187 	addc	a,r6
      000A51 FB               [12] 3188 	mov	r3,a
      000A52 8F 04            [24] 3189 	mov	ar4,r7
      000A54 8A 82            [24] 3190 	mov	dpl,r2
      000A56 8B 83            [24] 3191 	mov	dph,r3
      000A58 8C F0            [24] 3192 	mov	b,r4
      000A5A E4               [12] 3193 	clr	a
      000A5B 12r00r00         [24] 3194 	lcall	__gptrput
      000A5E A3               [24] 3195 	inc	dptr
      000A5F 12r00r00         [24] 3196 	lcall	__gptrput
      000A62 80 3E            [24] 3197 	sjmp	00134$
      000A64                       3198 00131$:
                           000A64  3199 	C$Lab_2.c$468$1$119 ==.
                                   3200 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:468: else if ((BILEDC0 == 0) && (BILEDC1 == 1))
      000A64 20 A4 1E         [24] 3201 	jb	_BILEDC0,00127$
      000A67 30 A5 1B         [24] 3202 	jnb	_BILEDC1,00127$
                           000A6A  3203 	C$Lab_2.c$470$2$127 ==.
                                   3204 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:470: Guess_Array[2] = 1; // red
      000A6A 74 04            [12] 3205 	mov	a,#0x04
      000A6C 2D               [12] 3206 	add	a,r5
      000A6D FA               [12] 3207 	mov	r2,a
      000A6E E4               [12] 3208 	clr	a
      000A6F 3E               [12] 3209 	addc	a,r6
      000A70 FB               [12] 3210 	mov	r3,a
      000A71 8F 04            [24] 3211 	mov	ar4,r7
      000A73 8A 82            [24] 3212 	mov	dpl,r2
      000A75 8B 83            [24] 3213 	mov	dph,r3
      000A77 8C F0            [24] 3214 	mov	b,r4
      000A79 74 01            [12] 3215 	mov	a,#0x01
      000A7B 12r00r00         [24] 3216 	lcall	__gptrput
      000A7E A3               [24] 3217 	inc	dptr
      000A7F E4               [12] 3218 	clr	a
      000A80 12r00r00         [24] 3219 	lcall	__gptrput
      000A83 80 1D            [24] 3220 	sjmp	00134$
      000A85                       3221 00127$:
                           000A85  3222 	C$Lab_2.c$472$1$119 ==.
                                   3223 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:472: else if ((BILEDC0 == 1) && (BILEDC1 == 0))
      000A85 30 A4 1A         [24] 3224 	jnb	_BILEDC0,00134$
      000A88 20 A5 17         [24] 3225 	jb	_BILEDC1,00134$
                           000A8B  3226 	C$Lab_2.c$474$2$128 ==.
                                   3227 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:474: Guess_Array[2] = 2;  // green
      000A8B 74 04            [12] 3228 	mov	a,#0x04
      000A8D 2D               [12] 3229 	add	a,r5
      000A8E FD               [12] 3230 	mov	r5,a
      000A8F E4               [12] 3231 	clr	a
      000A90 3E               [12] 3232 	addc	a,r6
      000A91 FE               [12] 3233 	mov	r6,a
      000A92 8D 82            [24] 3234 	mov	dpl,r5
      000A94 8E 83            [24] 3235 	mov	dph,r6
      000A96 8F F0            [24] 3236 	mov	b,r7
      000A98 74 02            [12] 3237 	mov	a,#0x02
      000A9A 12r00r00         [24] 3238 	lcall	__gptrput
      000A9D A3               [24] 3239 	inc	dptr
      000A9E E4               [12] 3240 	clr	a
      000A9F 12r00r00         [24] 3241 	lcall	__gptrput
      000AA2                       3242 00134$:
                           000AA2  3243 	C$Lab_2.c$476$1$119 ==.
                           000AA2  3244 	XG$FUNCTION_G$0$0 ==.
      000AA2 22               [24] 3245 	ret
                                   3246 ;------------------------------------------------------------
                                   3247 ;Allocation info for local variables in function 'Port_Init'
                                   3248 ;------------------------------------------------------------
                           000AA3  3249 	G$Port_Init$0$0 ==.
                           000AA3  3250 	C$Lab_2.c$480$1$119 ==.
                                   3251 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:480: void Port_Init(void)
                                   3252 ;	-----------------------------------------
                                   3253 ;	 function Port_Init
                                   3254 ;	-----------------------------------------
      000AA3                       3255 _Port_Init:
                           000AA3  3256 	C$Lab_2.c$482$1$130 ==.
                                   3257 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:482: P1MDIN &= ~0x01;	// Set P1.0 for analog input
      000AA3 AF BD            [24] 3258 	mov	r7,_P1MDIN
      000AA5 74 FE            [12] 3259 	mov	a,#0xFE
      000AA7 5F               [12] 3260 	anl	a,r7
      000AA8 F5 BD            [12] 3261 	mov	_P1MDIN,a
                           000AAA  3262 	C$Lab_2.c$483$1$130 ==.
                                   3263 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:483: P1MDOUT &= ~0x01;	// Set P1.0 to open drain
      000AAA AF A5            [24] 3264 	mov	r7,_P1MDOUT
      000AAC 74 FE            [12] 3265 	mov	a,#0xFE
      000AAE 5F               [12] 3266 	anl	a,r7
      000AAF F5 A5            [12] 3267 	mov	_P1MDOUT,a
                           000AB1  3268 	C$Lab_2.c$484$1$130 ==.
                                   3269 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:484: P1 |= 0x01;			// Send logic 1 to input pin P1.0
      000AB1 43 90 01         [24] 3270 	orl	_P1,#0x01
                           000AB4  3271 	C$Lab_2.c$485$1$130 ==.
                                   3272 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:485: P0MDOUT |= 0xB3;	// Set output pins to push-pull
      000AB4 43 A4 B3         [24] 3273 	orl	_P0MDOUT,#0xB3
                           000AB7  3274 	C$Lab_2.c$486$1$130 ==.
                                   3275 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:486: P0MDOUT &= 0xF3;	// Set input pins to open-drain
      000AB7 53 A4 F3         [24] 3276 	anl	_P0MDOUT,#0xF3
                           000ABA  3277 	C$Lab_2.c$487$1$130 ==.
                                   3278 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:487: P0 |= ~0xF3;		// Set input pins to high impedance
      000ABA AF 80            [24] 3279 	mov	r7,_P0
      000ABC 74 0C            [12] 3280 	mov	a,#0x0C
      000ABE 4F               [12] 3281 	orl	a,r7
      000ABF F5 80            [12] 3282 	mov	_P0,a
                           000AC1  3283 	C$Lab_2.c$488$1$130 ==.
                                   3284 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:488: P2MDOUT |= 0x30;	// Set output pins to push-pull
      000AC1 43 A6 30         [24] 3285 	orl	_P2MDOUT,#0x30
                           000AC4  3286 	C$Lab_2.c$489$1$130 ==.
                                   3287 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:489: P2MDOUT &= 0x33;	// Set input pins to open-drain
      000AC4 53 A6 33         [24] 3288 	anl	_P2MDOUT,#0x33
                           000AC7  3289 	C$Lab_2.c$490$1$130 ==.
                                   3290 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:490: P2 |= ~0x33;		// Set input pins to high impedance
      000AC7 AF A0            [24] 3291 	mov	r7,_P2
      000AC9 74 CC            [12] 3292 	mov	a,#0xCC
      000ACB 4F               [12] 3293 	orl	a,r7
      000ACC F5 A0            [12] 3294 	mov	_P2,a
                           000ACE  3295 	C$Lab_2.c$491$1$130 ==.
                                   3296 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:491: P3MDOUT |= 0x06;	// Set output pins to push-pull
      000ACE 43 A7 06         [24] 3297 	orl	_P3MDOUT,#0x06
                           000AD1  3298 	C$Lab_2.c$492$1$130 ==.
                                   3299 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:492: P3MDOUT &= 0xFE;	// Set input pins to open-drain
      000AD1 53 A7 FE         [24] 3300 	anl	_P3MDOUT,#0xFE
                           000AD4  3301 	C$Lab_2.c$493$1$130 ==.
                                   3302 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:493: P3 |= ~0xFE;		// Set input pins to high impedance
      000AD4 AF B0            [24] 3303 	mov	r7,_P3
      000AD6 74 01            [12] 3304 	mov	a,#0x01
      000AD8 4F               [12] 3305 	orl	a,r7
      000AD9 F5 B0            [12] 3306 	mov	_P3,a
                           000ADB  3307 	C$Lab_2.c$494$1$130 ==.
                           000ADB  3308 	XG$Port_Init$0$0 ==.
      000ADB 22               [24] 3309 	ret
                                   3310 ;------------------------------------------------------------
                                   3311 ;Allocation info for local variables in function 'ADC_Init'
                                   3312 ;------------------------------------------------------------
                           000ADC  3313 	G$ADC_Init$0$0 ==.
                           000ADC  3314 	C$Lab_2.c$496$1$130 ==.
                                   3315 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:496: void ADC_Init(void)
                                   3316 ;	-----------------------------------------
                                   3317 ;	 function ADC_Init
                                   3318 ;	-----------------------------------------
      000ADC                       3319 _ADC_Init:
                           000ADC  3320 	C$Lab_2.c$498$1$132 ==.
                                   3321 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:498: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000ADC 75 D1 03         [24] 3322 	mov	_REF0CN,#0x03
                           000ADF  3323 	C$Lab_2.c$499$1$132 ==.
                                   3324 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:499: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      000ADF 75 AA 80         [24] 3325 	mov	_ADC1CN,#0x80
                           000AE2  3326 	C$Lab_2.c$500$1$132 ==.
                                   3327 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:500: ADC1CF |= 0x01; // Set A/D converter gain to 1
      000AE2 43 AB 01         [24] 3328 	orl	_ADC1CF,#0x01
                           000AE5  3329 	C$Lab_2.c$501$1$132 ==.
                           000AE5  3330 	XG$ADC_Init$0$0 ==.
      000AE5 22               [24] 3331 	ret
                                   3332 ;------------------------------------------------------------
                                   3333 ;Allocation info for local variables in function 'read_AD_input'
                                   3334 ;------------------------------------------------------------
                                   3335 ;n                         Allocated to registers 
                                   3336 ;------------------------------------------------------------
                           000AE6  3337 	G$read_AD_input$0$0 ==.
                           000AE6  3338 	C$Lab_2.c$503$1$132 ==.
                                   3339 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:503: unsigned char read_AD_input(unsigned char n)
                                   3340 ;	-----------------------------------------
                                   3341 ;	 function read_AD_input
                                   3342 ;	-----------------------------------------
      000AE6                       3343 _read_AD_input:
      000AE6 85 82 AC         [24] 3344 	mov	_AMX1SL,dpl
                           000AE9  3345 	C$Lab_2.c$506$1$134 ==.
                                   3346 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:506: ADC1CN = ADC1CN & ~0x20; // Clear the “Conversion Completed” flag
      000AE9 AF AA            [24] 3347 	mov	r7,_ADC1CN
      000AEB 74 DF            [12] 3348 	mov	a,#0xDF
      000AED 5F               [12] 3349 	anl	a,r7
      000AEE F5 AA            [12] 3350 	mov	_ADC1CN,a
                           000AF0  3351 	C$Lab_2.c$507$1$134 ==.
                                   3352 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:507: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      000AF0 43 AA 10         [24] 3353 	orl	_ADC1CN,#0x10
                           000AF3  3354 	C$Lab_2.c$509$1$134 ==.
                                   3355 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:509: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      000AF3                       3356 00101$:
      000AF3 E5 AA            [12] 3357 	mov	a,_ADC1CN
      000AF5 30 E5 FB         [24] 3358 	jnb	acc.5,00101$
                           000AF8  3359 	C$Lab_2.c$511$1$134 ==.
                                   3360 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:511: return ADC1; // Return digital value in ADC1 register
      000AF8 85 9C 82         [24] 3361 	mov	dpl,_ADC1
                           000AFB  3362 	C$Lab_2.c$512$1$134 ==.
                           000AFB  3363 	XG$read_AD_input$0$0 ==.
      000AFB 22               [24] 3364 	ret
                                   3365 ;------------------------------------------------------------
                                   3366 ;Allocation info for local variables in function 'random'
                                   3367 ;------------------------------------------------------------
                           000AFC  3368 	G$random$0$0 ==.
                           000AFC  3369 	C$Lab_2.c$521$1$134 ==.
                                   3370 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:521: unsigned char random(void)
                                   3371 ;	-----------------------------------------
                                   3372 ;	 function random
                                   3373 ;	-----------------------------------------
      000AFC                       3374 _random:
                           000AFC  3375 	C$Lab_2.c$523$1$136 ==.
                                   3376 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:523: return (rand()%3);  // rand returns a random number between 0 and 32767.
      000AFC 12r00r00         [24] 3377 	lcall	_rand
      000AFF 75*00 03         [24] 3378 	mov	__modsint_PARM_2,#0x03
      000B02 75*01 00         [24] 3379 	mov	(__modsint_PARM_2 + 1),#0x00
      000B05 12r00r00         [24] 3380 	lcall	__modsint
                           000B08  3381 	C$Lab_2.c$527$1$136 ==.
                           000B08  3382 	XG$random$0$0 ==.
      000B08 22               [24] 3383 	ret
                                   3384 ;------------------------------------------------------------
                                   3385 ;Allocation info for local variables in function 'Interrupt_Init'
                                   3386 ;------------------------------------------------------------
                           000B09  3387 	G$Interrupt_Init$0$0 ==.
                           000B09  3388 	C$Lab_2.c$530$1$136 ==.
                                   3389 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:530: void Interrupt_Init(void)
                                   3390 ;	-----------------------------------------
                                   3391 ;	 function Interrupt_Init
                                   3392 ;	-----------------------------------------
      000B09                       3393 _Interrupt_Init:
                           000B09  3394 	C$Lab_2.c$532$1$138 ==.
                                   3395 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:532: ET0 = 1;      // enable Timer0 Interrupt request
      000B09 D2 A9            [12] 3396 	setb	_ET0
                           000B0B  3397 	C$Lab_2.c$533$1$138 ==.
                                   3398 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:533: EA = 1;       // enable global interrupts
      000B0B D2 AF            [12] 3399 	setb	_EA
                           000B0D  3400 	C$Lab_2.c$534$1$138 ==.
                           000B0D  3401 	XG$Interrupt_Init$0$0 ==.
      000B0D 22               [24] 3402 	ret
                                   3403 ;------------------------------------------------------------
                                   3404 ;Allocation info for local variables in function 'Timer_Init'
                                   3405 ;------------------------------------------------------------
                           000B0E  3406 	G$Timer_Init$0$0 ==.
                           000B0E  3407 	C$Lab_2.c$537$1$138 ==.
                                   3408 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:537: void Timer_Init(void)
                                   3409 ;	-----------------------------------------
                                   3410 ;	 function Timer_Init
                                   3411 ;	-----------------------------------------
      000B0E                       3412 _Timer_Init:
                           000B0E  3413 	C$Lab_2.c$540$1$140 ==.
                                   3414 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:540: CKCON |= 0x08;  // Timer0 uses SYSCLK as source
      000B0E 43 8E 08         [24] 3415 	orl	_CKCON,#0x08
                           000B11  3416 	C$Lab_2.c$541$1$140 ==.
                                   3417 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:541: TMOD &= 0xF0;   // clear the 4 least significant bits
      000B11 53 89 F0         [24] 3418 	anl	_TMOD,#0xF0
                           000B14  3419 	C$Lab_2.c$542$1$140 ==.
                                   3420 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:542: TMOD |= 0x01;   // Timer0 in mode 1
      000B14 43 89 01         [24] 3421 	orl	_TMOD,#0x01
                           000B17  3422 	C$Lab_2.c$543$1$140 ==.
                                   3423 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:543: TR0 = 0;           // Stop Timer0
      000B17 C2 8C            [12] 3424 	clr	_TR0
                           000B19  3425 	C$Lab_2.c$544$1$140 ==.
                                   3426 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:544: TL0 = 0;           // Clear low byte of register T0
      000B19 75 8A 00         [24] 3427 	mov	_TL0,#0x00
                           000B1C  3428 	C$Lab_2.c$545$1$140 ==.
                                   3429 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:545: TH0 = 0;           // Clear high byte of register T0
      000B1C 75 8C 00         [24] 3430 	mov	_TH0,#0x00
                           000B1F  3431 	C$Lab_2.c$547$1$140 ==.
                           000B1F  3432 	XG$Timer_Init$0$0 ==.
      000B1F 22               [24] 3433 	ret
                                   3434 ;------------------------------------------------------------
                                   3435 ;Allocation info for local variables in function 'Timer0_ISR'
                                   3436 ;------------------------------------------------------------
                           000B20  3437 	G$Timer0_ISR$0$0 ==.
                           000B20  3438 	C$Lab_2.c$550$1$140 ==.
                                   3439 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:550: void Timer0_ISR(void) __interrupt 1
                                   3440 ;	-----------------------------------------
                                   3441 ;	 function Timer0_ISR
                                   3442 ;	-----------------------------------------
      000B20                       3443 _Timer0_ISR:
      000B20 C0 E0            [24] 3444 	push	acc
      000B22 C0 D0            [24] 3445 	push	psw
                           000B24  3446 	C$Lab_2.c$552$1$142 ==.
                                   3447 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:552: Counts++;
      000B24 05*00            [12] 3448 	inc	_Counts
      000B26 E4               [12] 3449 	clr	a
      000B27 B5*00 02         [24] 3450 	cjne	a,_Counts,00108$
      000B2A 05*01            [12] 3451 	inc	(_Counts + 1)
      000B2C                       3452 00108$:
                           000B2C  3453 	C$Lab_2.c$553$1$142 ==.
                                   3454 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:553: if(Counts == 337)
      000B2C 74 51            [12] 3455 	mov	a,#0x51
      000B2E B5*00 0C         [24] 3456 	cjne	a,_Counts,00103$
      000B31 74 01            [12] 3457 	mov	a,#0x01
      000B33 B5*01 07         [24] 3458 	cjne	a,(_Counts + 1),00103$
                           000B36  3459 	C$Lab_2.c$555$2$143 ==.
                                   3460 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:555: Seconds ++;
      000B36 05*02            [12] 3461 	inc	_Seconds
                           000B38  3462 	C$Lab_2.c$556$2$143 ==.
                                   3463 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:556: Counts = 0;
      000B38 E4               [12] 3464 	clr	a
      000B39 F5*00            [12] 3465 	mov	_Counts,a
      000B3B F5*01            [12] 3466 	mov	(_Counts + 1),a
      000B3D                       3467 00103$:
      000B3D D0 D0            [24] 3468 	pop	psw
      000B3F D0 E0            [24] 3469 	pop	acc
                           000B41  3470 	C$Lab_2.c$558$1$142 ==.
                           000B41  3471 	XG$Timer0_ISR$0$0 ==.
      000B41 32               [24] 3472 	reti
                                   3473 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   3474 ;	eliminated unneeded push/pop dpl
                                   3475 ;	eliminated unneeded push/pop dph
                                   3476 ;	eliminated unneeded push/pop b
                                   3477 ;------------------------------------------------------------
                                   3478 ;Allocation info for local variables in function 'Start_Button'
                                   3479 ;------------------------------------------------------------
                           000B42  3480 	G$Start_Button$0$0 ==.
                           000B42  3481 	C$Lab_2.c$565$1$142 ==.
                                   3482 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:565: int Start_Button(void)
                                   3483 ;	-----------------------------------------
                                   3484 ;	 function Start_Button
                                   3485 ;	-----------------------------------------
      000B42                       3486 _Start_Button:
                           000B42  3487 	C$Lab_2.c$567$1$145 ==.
                                   3488 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:567: if (!BUTTON)
      000B42 20 B3 05         [24] 3489 	jb	_BUTTON,00102$
                           000B45  3490 	C$Lab_2.c$570$2$146 ==.
                                   3491 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:570: return 1;
      000B45 90 00 01         [24] 3492 	mov	dptr,#0x0001
      000B48 80 03            [24] 3493 	sjmp	00104$
      000B4A                       3494 00102$:
                           000B4A  3495 	C$Lab_2.c$574$2$147 ==.
                                   3496 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:574: return 0;
      000B4A 90 00 00         [24] 3497 	mov	dptr,#0x0000
      000B4D                       3498 00104$:
                           000B4D  3499 	C$Lab_2.c$576$1$145 ==.
                           000B4D  3500 	XG$Start_Button$0$0 ==.
      000B4D 22               [24] 3501 	ret
                                   3502 ;------------------------------------------------------------
                                   3503 ;Allocation info for local variables in function 'Switch_A0'
                                   3504 ;------------------------------------------------------------
                           000B4E  3505 	G$Switch_A0$0$0 ==.
                           000B4E  3506 	C$Lab_2.c$582$1$145 ==.
                                   3507 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:582: int Switch_A0(void)
                                   3508 ;	-----------------------------------------
                                   3509 ;	 function Switch_A0
                                   3510 ;	-----------------------------------------
      000B4E                       3511 _Switch_A0:
                           000B4E  3512 	C$Lab_2.c$584$1$149 ==.
                                   3513 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:584: if (!SWITCHA0)
      000B4E 20 82 05         [24] 3514 	jb	_SWITCHA0,00102$
                           000B51  3515 	C$Lab_2.c$586$2$150 ==.
                                   3516 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:586: return 1;
      000B51 90 00 01         [24] 3517 	mov	dptr,#0x0001
      000B54 80 03            [24] 3518 	sjmp	00104$
      000B56                       3519 00102$:
                           000B56  3520 	C$Lab_2.c$590$2$151 ==.
                                   3521 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:590: return 0;
      000B56 90 00 00         [24] 3522 	mov	dptr,#0x0000
      000B59                       3523 00104$:
                           000B59  3524 	C$Lab_2.c$592$1$149 ==.
                           000B59  3525 	XG$Switch_A0$0$0 ==.
      000B59 22               [24] 3526 	ret
                                   3527 ;------------------------------------------------------------
                                   3528 ;Allocation info for local variables in function 'Switch_A1'
                                   3529 ;------------------------------------------------------------
                           000B5A  3530 	G$Switch_A1$0$0 ==.
                           000B5A  3531 	C$Lab_2.c$593$1$149 ==.
                                   3532 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:593: int Switch_A1(void)
                                   3533 ;	-----------------------------------------
                                   3534 ;	 function Switch_A1
                                   3535 ;	-----------------------------------------
      000B5A                       3536 _Switch_A1:
                           000B5A  3537 	C$Lab_2.c$595$1$153 ==.
                                   3538 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:595: if (!SWITCHA1)
      000B5A 20 83 05         [24] 3539 	jb	_SWITCHA1,00102$
                           000B5D  3540 	C$Lab_2.c$597$2$154 ==.
                                   3541 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:597: return 1;
      000B5D 90 00 01         [24] 3542 	mov	dptr,#0x0001
      000B60 80 03            [24] 3543 	sjmp	00104$
      000B62                       3544 00102$:
                           000B62  3545 	C$Lab_2.c$601$2$155 ==.
                                   3546 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:601: return 0;
      000B62 90 00 00         [24] 3547 	mov	dptr,#0x0000
      000B65                       3548 00104$:
                           000B65  3549 	C$Lab_2.c$603$1$153 ==.
                           000B65  3550 	XG$Switch_A1$0$0 ==.
      000B65 22               [24] 3551 	ret
                                   3552 ;------------------------------------------------------------
                                   3553 ;Allocation info for local variables in function 'Switch_B0'
                                   3554 ;------------------------------------------------------------
                           000B66  3555 	G$Switch_B0$0$0 ==.
                           000B66  3556 	C$Lab_2.c$605$1$153 ==.
                                   3557 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:605: int Switch_B0(void)
                                   3558 ;	-----------------------------------------
                                   3559 ;	 function Switch_B0
                                   3560 ;	-----------------------------------------
      000B66                       3561 _Switch_B0:
                           000B66  3562 	C$Lab_2.c$607$1$157 ==.
                                   3563 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:607: if (!SWITCHB0)
      000B66 20 A6 05         [24] 3564 	jb	_SWITCHB0,00102$
                           000B69  3565 	C$Lab_2.c$609$2$158 ==.
                                   3566 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:609: return 1;
      000B69 90 00 01         [24] 3567 	mov	dptr,#0x0001
      000B6C 80 03            [24] 3568 	sjmp	00104$
      000B6E                       3569 00102$:
                           000B6E  3570 	C$Lab_2.c$613$2$159 ==.
                                   3571 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:613: return 0;
      000B6E 90 00 00         [24] 3572 	mov	dptr,#0x0000
      000B71                       3573 00104$:
                           000B71  3574 	C$Lab_2.c$615$1$157 ==.
                           000B71  3575 	XG$Switch_B0$0$0 ==.
      000B71 22               [24] 3576 	ret
                                   3577 ;------------------------------------------------------------
                                   3578 ;Allocation info for local variables in function 'Switch_B1'
                                   3579 ;------------------------------------------------------------
                           000B72  3580 	G$Switch_B1$0$0 ==.
                           000B72  3581 	C$Lab_2.c$616$1$157 ==.
                                   3582 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:616: int Switch_B1(void)
                                   3583 ;	-----------------------------------------
                                   3584 ;	 function Switch_B1
                                   3585 ;	-----------------------------------------
      000B72                       3586 _Switch_B1:
                           000B72  3587 	C$Lab_2.c$618$1$161 ==.
                                   3588 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:618: if (!SWITCHB1)
      000B72 20 A7 05         [24] 3589 	jb	_SWITCHB1,00102$
                           000B75  3590 	C$Lab_2.c$620$2$162 ==.
                                   3591 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:620: return 1;
      000B75 90 00 01         [24] 3592 	mov	dptr,#0x0001
      000B78 80 03            [24] 3593 	sjmp	00104$
      000B7A                       3594 00102$:
                           000B7A  3595 	C$Lab_2.c$624$2$163 ==.
                                   3596 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:624: return 0;
      000B7A 90 00 00         [24] 3597 	mov	dptr,#0x0000
      000B7D                       3598 00104$:
                           000B7D  3599 	C$Lab_2.c$626$1$161 ==.
                           000B7D  3600 	XG$Switch_B1$0$0 ==.
      000B7D 22               [24] 3601 	ret
                                   3602 ;------------------------------------------------------------
                                   3603 ;Allocation info for local variables in function 'Switch_C0'
                                   3604 ;------------------------------------------------------------
                           000B7E  3605 	G$Switch_C0$0$0 ==.
                           000B7E  3606 	C$Lab_2.c$628$1$161 ==.
                                   3607 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:628: int Switch_C0(void)
                                   3608 ;	-----------------------------------------
                                   3609 ;	 function Switch_C0
                                   3610 ;	-----------------------------------------
      000B7E                       3611 _Switch_C0:
                           000B7E  3612 	C$Lab_2.c$630$1$165 ==.
                                   3613 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:630: if (!SWITCHC0)
      000B7E 20 A2 05         [24] 3614 	jb	_SWITCHC0,00102$
                           000B81  3615 	C$Lab_2.c$632$2$166 ==.
                                   3616 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:632: return 1;
      000B81 90 00 01         [24] 3617 	mov	dptr,#0x0001
      000B84 80 03            [24] 3618 	sjmp	00104$
      000B86                       3619 00102$:
                           000B86  3620 	C$Lab_2.c$636$2$167 ==.
                                   3621 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:636: return 0;
      000B86 90 00 00         [24] 3622 	mov	dptr,#0x0000
      000B89                       3623 00104$:
                           000B89  3624 	C$Lab_2.c$638$1$165 ==.
                           000B89  3625 	XG$Switch_C0$0$0 ==.
      000B89 22               [24] 3626 	ret
                                   3627 ;------------------------------------------------------------
                                   3628 ;Allocation info for local variables in function 'Switch_C1'
                                   3629 ;------------------------------------------------------------
                           000B8A  3630 	G$Switch_C1$0$0 ==.
                           000B8A  3631 	C$Lab_2.c$639$1$165 ==.
                                   3632 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:639: int Switch_C1(void)
                                   3633 ;	-----------------------------------------
                                   3634 ;	 function Switch_C1
                                   3635 ;	-----------------------------------------
      000B8A                       3636 _Switch_C1:
                           000B8A  3637 	C$Lab_2.c$641$1$169 ==.
                                   3638 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:641: if (!SWITCHC1)
      000B8A 20 A3 05         [24] 3639 	jb	_SWITCHC1,00102$
                           000B8D  3640 	C$Lab_2.c$643$2$170 ==.
                                   3641 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:643: return 1;
      000B8D 90 00 01         [24] 3642 	mov	dptr,#0x0001
      000B90 80 03            [24] 3643 	sjmp	00104$
      000B92                       3644 00102$:
                           000B92  3645 	C$Lab_2.c$647$2$171 ==.
                                   3646 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:647: return 0;
      000B92 90 00 00         [24] 3647 	mov	dptr,#0x0000
      000B95                       3648 00104$:
                           000B95  3649 	C$Lab_2.c$649$1$169 ==.
                           000B95  3650 	XG$Switch_C1$0$0 ==.
      000B95 22               [24] 3651 	ret
                                   3652 ;------------------------------------------------------------
                                   3653 ;Allocation info for local variables in function 'Debugging'
                                   3654 ;------------------------------------------------------------
                           000B96  3655 	G$Debugging$0$0 ==.
                           000B96  3656 	C$Lab_2.c$651$1$169 ==.
                                   3657 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:651: void Debugging(void)
                                   3658 ;	-----------------------------------------
                                   3659 ;	 function Debugging
                                   3660 ;	-----------------------------------------
      000B96                       3661 _Debugging:
                           000B96  3662 	C$Lab_2.c$653$1$173 ==.
                                   3663 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:653: if(!BUTTON)
      000B96 20 B3 15         [24] 3664 	jb	_BUTTON,00103$
                           000B99  3665 	C$Lab_2.c$655$2$174 ==.
                                   3666 ;	C:\Users\Kathryn\Desktop\LITEC\Lab 2\Lab-2.c:655: printf("\rYou pushed the start button.\n");
      000B99 74r39            [12] 3667 	mov	a,#___str_16
      000B9B C0 E0            [24] 3668 	push	acc
      000B9D 74s01            [12] 3669 	mov	a,#(___str_16 >> 8)
      000B9F C0 E0            [24] 3670 	push	acc
      000BA1 74 80            [12] 3671 	mov	a,#0x80
      000BA3 C0 E0            [24] 3672 	push	acc
      000BA5 12r00r00         [24] 3673 	lcall	_printf
      000BA8 15 81            [12] 3674 	dec	sp
      000BAA 15 81            [12] 3675 	dec	sp
      000BAC 15 81            [12] 3676 	dec	sp
      000BAE                       3677 00103$:
                           000BAE  3678 	C$Lab_2.c$657$1$173 ==.
                           000BAE  3679 	XG$Debugging$0$0 ==.
      000BAE 22               [24] 3680 	ret
                                   3681 	.area CSEG    (CODE)
                                   3682 	.area CONST   (CODE)
                           000000  3683 FLab_2$__str_0$0$0 == .
      000000                       3684 ___str_0:
      000000 0D                    3685 	.db 0x0D
      000001 53 65 74 20 74 68 65  3686 	.ascii "Set the speed pot and press the pushbutton to begin LITEC M"
             20 73 70 65 65 64 20
             70 6F 74 20 61 6E 64
             20 70 72 65 73 73 20
             74 68 65 20 70 75 73
             68 62 75 74 74 6F 6E
             20 74 6F 20 62 65 67
             69 6E 20 4C 49 54 45
             43 20 4D
      00003C 61 73 74 65 72 6D 69  3687 	.ascii "astermind."
             6E 64 2E
      000046 0A                    3688 	.db 0x0A
      000047 00                    3689 	.db 0x00
                           000048  3690 FLab_2$__str_1$0$0 == .
      000048                       3691 ___str_1:
      000048 0D                    3692 	.db 0x0D
      000049 53 74 61 72 74 69 6E  3693 	.ascii "Starting Period: %u"
             67 20 50 65 72 69 6F
             64 3A 20 25 75
      00005C 0A                    3694 	.db 0x0A
      00005D 00                    3695 	.db 0x00
                           00005E  3696 FLab_2$__str_2$0$0 == .
      00005E                       3697 ___str_2:
      00005E 0A                    3698 	.db 0x0A
      00005F 0D                    3699 	.db 0x0D
      000060 41 6D 62 65 72 20 50  3700 	.ascii "Amber Player Turn"
             6C 61 79 65 72 20 54
             75 72 6E
      000071 0A                    3701 	.db 0x0A
      000072 00                    3702 	.db 0x00
                           000073  3703 FLab_2$__str_3$0$0 == .
      000073                       3704 ___str_3:
      000073 0A                    3705 	.db 0x0A
      000074 0D                    3706 	.db 0x0D
      000075 47 72 65 65 6E 20 50  3707 	.ascii "Green Player Turn"
             6C 61 79 65 72 20 54
             75 72 6E
      000086 0A                    3708 	.db 0x0A
      000087 00                    3709 	.db 0x00
                           000088  3710 FLab_2$__str_4$0$0 == .
      000088                       3711 ___str_4:
      000088 0A                    3712 	.db 0x0A
      000089 0D                    3713 	.db 0x0D
      00008A 41 6D 62 65 72 20 50  3714 	.ascii "Amber Points = %u"
             6F 69 6E 74 73 20 3D
             20 25 75
      00009B 00                    3715 	.db 0x00
                           00009C  3716 FLab_2$__str_5$0$0 == .
      00009C                       3717 ___str_5:
      00009C 2C 20 47 72 65 65 6E  3718 	.ascii ", Green Points = %u/n"
             20 50 6F 69 6E 74 73
             20 3D 20 25 75 2F 6E
      0000B1 00                    3719 	.db 0x00
                           0000B2  3720 FLab_2$__str_6$0$0 == .
      0000B2                       3721 ___str_6:
      0000B2 0D                    3722 	.db 0x0D
      0000B3 09                    3723 	.db 0x09
      0000B4 57 69 6E 6E 65 72 20  3724 	.ascii "Winner is Amber!"
             69 73 20 41 6D 62 65
             72 21
      0000C4 0A                    3725 	.db 0x0A
      0000C5 00                    3726 	.db 0x00
                           0000C6  3727 FLab_2$__str_7$0$0 == .
      0000C6                       3728 ___str_7:
      0000C6 0D                    3729 	.db 0x0D
      0000C7 09                    3730 	.db 0x09
      0000C8 57 69 6E 6E 65 72 20  3731 	.ascii "Winner is Green!"
             69 73 20 47 72 65 65
             6E 21
      0000D8 0A                    3732 	.db 0x0A
      0000D9 00                    3733 	.db 0x00
                           0000DA  3734 FLab_2$__str_8$0$0 == .
      0000DA                       3735 ___str_8:
      0000DA 0D                    3736 	.db 0x0D
      0000DB 09                    3737 	.db 0x09
      0000DC 49 74 27 73 20 61 20  3738 	.ascii "It's a tie. FIGHT TO THE DEATH!"
             74 69 65 2E 20 46 49
             47 48 54 20 54 4F 20
             54 48 45 20 44 45 41
             54 48 21
      0000FB 0A                    3739 	.db 0x0A
      0000FC 00                    3740 	.db 0x00
                           0000FD  3741 FLab_2$__str_9$0$0 == .
      0000FD                       3742 ___str_9:
      0000FD 0D                    3743 	.db 0x0D
      0000FE 00                    3744 	.db 0x00
                           0000FF  3745 FLab_2$__str_10$0$0 == .
      0000FF                       3746 ___str_10:
      0000FF 25 64                 3747 	.ascii "%d"
      000101 00                    3748 	.db 0x00
                           000102  3749 FLab_2$__str_11$0$0 == .
      000102                       3750 ___str_11:
      000102 09                    3751 	.db 0x09
      000103 25 75                 3752 	.ascii "%u"
      000105 00                    3753 	.db 0x00
                           000106  3754 FLab_2$__str_12$0$0 == .
      000106                       3755 ___str_12:
      000106 09                    3756 	.db 0x09
      000107 28 4D 61 74 63 68 21  3757 	.ascii "(Match!)"
             29
      00010F 0A                    3758 	.db 0x0A
      000110 00                    3759 	.db 0x00
                           000111  3760 FLab_2$__str_13$0$0 == .
      000111                       3761 ___str_13:
      000111 41 6D 62 65 72 20 50  3762 	.ascii "Amber Points = %u"
             6F 69 6E 74 73 20 3D
             20 25 75
      000122 0A                    3763 	.db 0x0A
      000123 00                    3764 	.db 0x00
                           000124  3765 FLab_2$__str_14$0$0 == .
      000124                       3766 ___str_14:
      000124 0A                    3767 	.db 0x0A
      000125 00                    3768 	.db 0x00
                           000126  3769 FLab_2$__str_15$0$0 == .
      000126                       3770 ___str_15:
      000126 47 72 65 65 6E 20 50  3771 	.ascii "Green Points = %u"
             6F 69 6E 74 73 20 3D
             20 25 75
      000137 0A                    3772 	.db 0x0A
      000138 00                    3773 	.db 0x00
                           000139  3774 FLab_2$__str_16$0$0 == .
      000139                       3775 ___str_16:
      000139 0D                    3776 	.db 0x0D
      00013A 59 6F 75 20 70 75 73  3777 	.ascii "You pushed the start button."
             68 65 64 20 74 68 65
             20 73 74 61 72 74 20
             62 75 74 74 6F 6E 2E
      000156 0A                    3778 	.db 0x0A
      000157 00                    3779 	.db 0x00
                                   3780 	.area XINIT   (CODE)
                                   3781 	.area CABS    (ABS,CODE)
