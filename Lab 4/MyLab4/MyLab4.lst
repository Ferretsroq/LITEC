                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Tue Apr 14 19:23:04 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module MyLab4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _Sys_Init
                                     16 	.globl _UART0_Init
                                     17 	.globl _SYSCLK_Init
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _BUS_SCL
                                     21 	.globl _BUS_TOE
                                     22 	.globl _BUS_FTE
                                     23 	.globl _BUS_AA
                                     24 	.globl _BUS_INT
                                     25 	.globl _BUS_STOP
                                     26 	.globl _BUS_START
                                     27 	.globl _BUS_EN
                                     28 	.globl _BUS_BUSY
                                     29 	.globl _SPIF
                                     30 	.globl _WCOL
                                     31 	.globl _MODF
                                     32 	.globl _RXOVRN
                                     33 	.globl _TXBSY
                                     34 	.globl _SLVSEL
                                     35 	.globl _MSTEN
                                     36 	.globl _SPIEN
                                     37 	.globl _AD0EN
                                     38 	.globl _ADCEN
                                     39 	.globl _AD0TM
                                     40 	.globl _ADCTM
                                     41 	.globl _AD0INT
                                     42 	.globl _ADCINT
                                     43 	.globl _AD0BUSY
                                     44 	.globl _ADBUSY
                                     45 	.globl _AD0CM1
                                     46 	.globl _ADSTM1
                                     47 	.globl _AD0CM0
                                     48 	.globl _ADSTM0
                                     49 	.globl _AD0WINT
                                     50 	.globl _ADWINT
                                     51 	.globl _AD0LJST
                                     52 	.globl _ADLJST
                                     53 	.globl _CF
                                     54 	.globl _CR
                                     55 	.globl _CCF4
                                     56 	.globl _CCF3
                                     57 	.globl _CCF2
                                     58 	.globl _CCF1
                                     59 	.globl _CCF0
                                     60 	.globl _CY
                                     61 	.globl _AC
                                     62 	.globl _F0
                                     63 	.globl _RS1
                                     64 	.globl _RS0
                                     65 	.globl _OV
                                     66 	.globl _F1
                                     67 	.globl _P
                                     68 	.globl _TF2
                                     69 	.globl _EXF2
                                     70 	.globl _RCLK
                                     71 	.globl _TCLK
                                     72 	.globl _EXEN2
                                     73 	.globl _TR2
                                     74 	.globl _CT2
                                     75 	.globl _CPRL2
                                     76 	.globl _BUSY
                                     77 	.globl _ENSMB
                                     78 	.globl _STA
                                     79 	.globl _STO
                                     80 	.globl _SI
                                     81 	.globl _AA
                                     82 	.globl _SMBFTE
                                     83 	.globl _SMBTOE
                                     84 	.globl _PT2
                                     85 	.globl _PS
                                     86 	.globl _PS0
                                     87 	.globl _PT1
                                     88 	.globl _PX1
                                     89 	.globl _PT0
                                     90 	.globl _PX0
                                     91 	.globl _P3_7
                                     92 	.globl _P3_6
                                     93 	.globl _P3_5
                                     94 	.globl _P3_4
                                     95 	.globl _P3_3
                                     96 	.globl _P3_2
                                     97 	.globl _P3_1
                                     98 	.globl _P3_0
                                     99 	.globl _EA
                                    100 	.globl _ET2
                                    101 	.globl _ES
                                    102 	.globl _ES0
                                    103 	.globl _ET1
                                    104 	.globl _EX1
                                    105 	.globl _ET0
                                    106 	.globl _EX0
                                    107 	.globl _P2_7
                                    108 	.globl _P2_6
                                    109 	.globl _P2_5
                                    110 	.globl _P2_4
                                    111 	.globl _P2_3
                                    112 	.globl _P2_2
                                    113 	.globl _P2_1
                                    114 	.globl _P2_0
                                    115 	.globl _S0MODE
                                    116 	.globl _SM00
                                    117 	.globl _SM0
                                    118 	.globl _SM10
                                    119 	.globl _SM1
                                    120 	.globl _MCE0
                                    121 	.globl _SM20
                                    122 	.globl _SM2
                                    123 	.globl _REN0
                                    124 	.globl _REN
                                    125 	.globl _TB80
                                    126 	.globl _TB8
                                    127 	.globl _RB80
                                    128 	.globl _RB8
                                    129 	.globl _TI0
                                    130 	.globl _TI
                                    131 	.globl _RI0
                                    132 	.globl _RI
                                    133 	.globl _P1_7
                                    134 	.globl _P1_6
                                    135 	.globl _P1_5
                                    136 	.globl _P1_4
                                    137 	.globl _P1_3
                                    138 	.globl _P1_2
                                    139 	.globl _P1_1
                                    140 	.globl _P1_0
                                    141 	.globl _TF1
                                    142 	.globl _TR1
                                    143 	.globl _TF0
                                    144 	.globl _TR0
                                    145 	.globl _IE1
                                    146 	.globl _IT1
                                    147 	.globl _IE0
                                    148 	.globl _IT0
                                    149 	.globl _P0_7
                                    150 	.globl _P0_6
                                    151 	.globl _P0_5
                                    152 	.globl _P0_4
                                    153 	.globl _P0_3
                                    154 	.globl _P0_2
                                    155 	.globl _P0_1
                                    156 	.globl _P0_0
                                    157 	.globl _PCA0CP4
                                    158 	.globl _PCA0CP3
                                    159 	.globl _PCA0CP2
                                    160 	.globl _PCA0CP1
                                    161 	.globl _PCA0CP0
                                    162 	.globl _PCA0
                                    163 	.globl _DAC1
                                    164 	.globl _DAC0
                                    165 	.globl _ADC0LT
                                    166 	.globl _ADC0GT
                                    167 	.globl _ADC0
                                    168 	.globl _RCAP4
                                    169 	.globl _TMR4
                                    170 	.globl _TMR3RL
                                    171 	.globl _TMR3
                                    172 	.globl _RCAP2
                                    173 	.globl _TMR2
                                    174 	.globl _TMR1
                                    175 	.globl _TMR0
                                    176 	.globl _WDTCN
                                    177 	.globl _PCA0CPH4
                                    178 	.globl _PCA0CPH3
                                    179 	.globl _PCA0CPH2
                                    180 	.globl _PCA0CPH1
                                    181 	.globl _PCA0CPH0
                                    182 	.globl _PCA0H
                                    183 	.globl _SPI0CN
                                    184 	.globl _EIP2
                                    185 	.globl _EIP1
                                    186 	.globl _TH4
                                    187 	.globl _TL4
                                    188 	.globl _SADDR1
                                    189 	.globl _SBUF1
                                    190 	.globl _SCON1
                                    191 	.globl _B
                                    192 	.globl _RSTSRC
                                    193 	.globl _PCA0CPL4
                                    194 	.globl _PCA0CPL3
                                    195 	.globl _PCA0CPL2
                                    196 	.globl _PCA0CPL1
                                    197 	.globl _PCA0CPL0
                                    198 	.globl _PCA0L
                                    199 	.globl _ADC0CN
                                    200 	.globl _EIE2
                                    201 	.globl _EIE1
                                    202 	.globl _RCAP4H
                                    203 	.globl _RCAP4L
                                    204 	.globl _XBR2
                                    205 	.globl _XBR1
                                    206 	.globl _XBR0
                                    207 	.globl _ACC
                                    208 	.globl _PCA0CPM4
                                    209 	.globl _PCA0CPM3
                                    210 	.globl _PCA0CPM2
                                    211 	.globl _PCA0CPM1
                                    212 	.globl _PCA0CPM0
                                    213 	.globl _PCA0MD
                                    214 	.globl _PCA0CN
                                    215 	.globl _DAC1CN
                                    216 	.globl _DAC1H
                                    217 	.globl _DAC1L
                                    218 	.globl _DAC0CN
                                    219 	.globl _DAC0H
                                    220 	.globl _DAC0L
                                    221 	.globl _REF0CN
                                    222 	.globl _PSW
                                    223 	.globl _SMB0CR
                                    224 	.globl _TH2
                                    225 	.globl _TL2
                                    226 	.globl _RCAP2H
                                    227 	.globl _RCAP2L
                                    228 	.globl _T4CON
                                    229 	.globl _T2CON
                                    230 	.globl _ADC0LTH
                                    231 	.globl _ADC0LTL
                                    232 	.globl _ADC0GTH
                                    233 	.globl _ADC0GTL
                                    234 	.globl _SMB0ADR
                                    235 	.globl _SMB0DAT
                                    236 	.globl _SMB0STA
                                    237 	.globl _SMB0CN
                                    238 	.globl _ADC0H
                                    239 	.globl _ADC0L
                                    240 	.globl _P1MDIN
                                    241 	.globl _ADC0CF
                                    242 	.globl _AMX0SL
                                    243 	.globl _AMX0CF
                                    244 	.globl _SADEN0
                                    245 	.globl _IP
                                    246 	.globl _FLACL
                                    247 	.globl _FLSCL
                                    248 	.globl _P74OUT
                                    249 	.globl _OSCICN
                                    250 	.globl _OSCXCN
                                    251 	.globl _P3
                                    252 	.globl __XPAGE
                                    253 	.globl _EMI0CN
                                    254 	.globl _SADEN1
                                    255 	.globl _P3IF
                                    256 	.globl _AMX1SL
                                    257 	.globl _ADC1CF
                                    258 	.globl _ADC1CN
                                    259 	.globl _SADDR0
                                    260 	.globl _IE
                                    261 	.globl _P3MDOUT
                                    262 	.globl _PRT3CF
                                    263 	.globl _P2MDOUT
                                    264 	.globl _PRT2CF
                                    265 	.globl _P1MDOUT
                                    266 	.globl _PRT1CF
                                    267 	.globl _P0MDOUT
                                    268 	.globl _PRT0CF
                                    269 	.globl _EMI0CF
                                    270 	.globl _EMI0TC
                                    271 	.globl _P2
                                    272 	.globl _CPT1CN
                                    273 	.globl _CPT0CN
                                    274 	.globl _SPI0CKR
                                    275 	.globl _ADC1
                                    276 	.globl _SPI0DAT
                                    277 	.globl _SPI0CFG
                                    278 	.globl _SBUF0
                                    279 	.globl _SBUF
                                    280 	.globl _SCON0
                                    281 	.globl _SCON
                                    282 	.globl _P7
                                    283 	.globl _TMR3H
                                    284 	.globl _TMR3L
                                    285 	.globl _TMR3RLH
                                    286 	.globl _TMR3RLL
                                    287 	.globl _TMR3CN
                                    288 	.globl _P1
                                    289 	.globl _PSCTL
                                    290 	.globl _CKCON
                                    291 	.globl _TH1
                                    292 	.globl _TH0
                                    293 	.globl _TL1
                                    294 	.globl _TL0
                                    295 	.globl _TMOD
                                    296 	.globl _TCON
                                    297 	.globl _PCON
                                    298 	.globl _P6
                                    299 	.globl _P5
                                    300 	.globl _P4
                                    301 	.globl _DPH
                                    302 	.globl _DPL
                                    303 	.globl _SP
                                    304 	.globl _P0
                                    305 	.globl _voltage
                                    306 	.globl _AD_Result
                                    307 	.globl _PW
                                    308 	.globl _heading
                                    309 	.globl _new_range
                                    310 	.globl _new_heading
                                    311 	.globl _delay
                                    312 	.globl _r_count
                                    313 	.globl _h_count
                                    314 	.globl _compass_gain
                                    315 	.globl _desired_heading
                                    316 	.globl _nOverflows
                                    317 	.globl _nCounts
                                    318 	.globl _Counts
                                    319 	.globl _i2c_read_data_PARM_4
                                    320 	.globl _i2c_read_data_PARM_3
                                    321 	.globl _i2c_read_data_PARM_2
                                    322 	.globl _i2c_write_data_PARM_4
                                    323 	.globl _i2c_write_data_PARM_3
                                    324 	.globl _i2c_write_data_PARM_2
                                    325 	.globl _putchar
                                    326 	.globl _getchar
                                    327 	.globl _lcd_print
                                    328 	.globl _lcd_clear
                                    329 	.globl _kpd_input
                                    330 	.globl _delay_time
                                    331 	.globl _i2c_start
                                    332 	.globl _i2c_write
                                    333 	.globl _i2c_write_and_stop
                                    334 	.globl _i2c_read
                                    335 	.globl _i2c_read_and_stop
                                    336 	.globl _i2c_write_data
                                    337 	.globl _i2c_read_data
                                    338 	.globl _Accel_Init
                                    339 	.globl _Port_Init
                                    340 	.globl _Interrupt_Init
                                    341 	.globl _PCA_Init
                                    342 	.globl _SMB0_Init
                                    343 	.globl _PCA_ISR
                                    344 	.globl _Pick_Heading
                                    345 	.globl _Pick_Compass_Gain
                                    346 	.globl _read_compass
                                    347 	.globl _ADC_Init
                                    348 	.globl _read_AD_input
                                    349 ;--------------------------------------------------------
                                    350 ; special function registers
                                    351 ;--------------------------------------------------------
                                    352 	.area RSEG    (ABS,DATA)
      000000                        353 	.org 0x0000
                           000080   354 G$P0$0$0 == 0x0080
                           000080   355 _P0	=	0x0080
                           000081   356 G$SP$0$0 == 0x0081
                           000081   357 _SP	=	0x0081
                           000082   358 G$DPL$0$0 == 0x0082
                           000082   359 _DPL	=	0x0082
                           000083   360 G$DPH$0$0 == 0x0083
                           000083   361 _DPH	=	0x0083
                           000084   362 G$P4$0$0 == 0x0084
                           000084   363 _P4	=	0x0084
                           000085   364 G$P5$0$0 == 0x0085
                           000085   365 _P5	=	0x0085
                           000086   366 G$P6$0$0 == 0x0086
                           000086   367 _P6	=	0x0086
                           000087   368 G$PCON$0$0 == 0x0087
                           000087   369 _PCON	=	0x0087
                           000088   370 G$TCON$0$0 == 0x0088
                           000088   371 _TCON	=	0x0088
                           000089   372 G$TMOD$0$0 == 0x0089
                           000089   373 _TMOD	=	0x0089
                           00008A   374 G$TL0$0$0 == 0x008a
                           00008A   375 _TL0	=	0x008a
                           00008B   376 G$TL1$0$0 == 0x008b
                           00008B   377 _TL1	=	0x008b
                           00008C   378 G$TH0$0$0 == 0x008c
                           00008C   379 _TH0	=	0x008c
                           00008D   380 G$TH1$0$0 == 0x008d
                           00008D   381 _TH1	=	0x008d
                           00008E   382 G$CKCON$0$0 == 0x008e
                           00008E   383 _CKCON	=	0x008e
                           00008F   384 G$PSCTL$0$0 == 0x008f
                           00008F   385 _PSCTL	=	0x008f
                           000090   386 G$P1$0$0 == 0x0090
                           000090   387 _P1	=	0x0090
                           000091   388 G$TMR3CN$0$0 == 0x0091
                           000091   389 _TMR3CN	=	0x0091
                           000092   390 G$TMR3RLL$0$0 == 0x0092
                           000092   391 _TMR3RLL	=	0x0092
                           000093   392 G$TMR3RLH$0$0 == 0x0093
                           000093   393 _TMR3RLH	=	0x0093
                           000094   394 G$TMR3L$0$0 == 0x0094
                           000094   395 _TMR3L	=	0x0094
                           000095   396 G$TMR3H$0$0 == 0x0095
                           000095   397 _TMR3H	=	0x0095
                           000096   398 G$P7$0$0 == 0x0096
                           000096   399 _P7	=	0x0096
                           000098   400 G$SCON$0$0 == 0x0098
                           000098   401 _SCON	=	0x0098
                           000098   402 G$SCON0$0$0 == 0x0098
                           000098   403 _SCON0	=	0x0098
                           000099   404 G$SBUF$0$0 == 0x0099
                           000099   405 _SBUF	=	0x0099
                           000099   406 G$SBUF0$0$0 == 0x0099
                           000099   407 _SBUF0	=	0x0099
                           00009A   408 G$SPI0CFG$0$0 == 0x009a
                           00009A   409 _SPI0CFG	=	0x009a
                           00009B   410 G$SPI0DAT$0$0 == 0x009b
                           00009B   411 _SPI0DAT	=	0x009b
                           00009C   412 G$ADC1$0$0 == 0x009c
                           00009C   413 _ADC1	=	0x009c
                           00009D   414 G$SPI0CKR$0$0 == 0x009d
                           00009D   415 _SPI0CKR	=	0x009d
                           00009E   416 G$CPT0CN$0$0 == 0x009e
                           00009E   417 _CPT0CN	=	0x009e
                           00009F   418 G$CPT1CN$0$0 == 0x009f
                           00009F   419 _CPT1CN	=	0x009f
                           0000A0   420 G$P2$0$0 == 0x00a0
                           0000A0   421 _P2	=	0x00a0
                           0000A1   422 G$EMI0TC$0$0 == 0x00a1
                           0000A1   423 _EMI0TC	=	0x00a1
                           0000A3   424 G$EMI0CF$0$0 == 0x00a3
                           0000A3   425 _EMI0CF	=	0x00a3
                           0000A4   426 G$PRT0CF$0$0 == 0x00a4
                           0000A4   427 _PRT0CF	=	0x00a4
                           0000A4   428 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   429 _P0MDOUT	=	0x00a4
                           0000A5   430 G$PRT1CF$0$0 == 0x00a5
                           0000A5   431 _PRT1CF	=	0x00a5
                           0000A5   432 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   433 _P1MDOUT	=	0x00a5
                           0000A6   434 G$PRT2CF$0$0 == 0x00a6
                           0000A6   435 _PRT2CF	=	0x00a6
                           0000A6   436 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   437 _P2MDOUT	=	0x00a6
                           0000A7   438 G$PRT3CF$0$0 == 0x00a7
                           0000A7   439 _PRT3CF	=	0x00a7
                           0000A7   440 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   441 _P3MDOUT	=	0x00a7
                           0000A8   442 G$IE$0$0 == 0x00a8
                           0000A8   443 _IE	=	0x00a8
                           0000A9   444 G$SADDR0$0$0 == 0x00a9
                           0000A9   445 _SADDR0	=	0x00a9
                           0000AA   446 G$ADC1CN$0$0 == 0x00aa
                           0000AA   447 _ADC1CN	=	0x00aa
                           0000AB   448 G$ADC1CF$0$0 == 0x00ab
                           0000AB   449 _ADC1CF	=	0x00ab
                           0000AC   450 G$AMX1SL$0$0 == 0x00ac
                           0000AC   451 _AMX1SL	=	0x00ac
                           0000AD   452 G$P3IF$0$0 == 0x00ad
                           0000AD   453 _P3IF	=	0x00ad
                           0000AE   454 G$SADEN1$0$0 == 0x00ae
                           0000AE   455 _SADEN1	=	0x00ae
                           0000AF   456 G$EMI0CN$0$0 == 0x00af
                           0000AF   457 _EMI0CN	=	0x00af
                           0000AF   458 G$_XPAGE$0$0 == 0x00af
                           0000AF   459 __XPAGE	=	0x00af
                           0000B0   460 G$P3$0$0 == 0x00b0
                           0000B0   461 _P3	=	0x00b0
                           0000B1   462 G$OSCXCN$0$0 == 0x00b1
                           0000B1   463 _OSCXCN	=	0x00b1
                           0000B2   464 G$OSCICN$0$0 == 0x00b2
                           0000B2   465 _OSCICN	=	0x00b2
                           0000B5   466 G$P74OUT$0$0 == 0x00b5
                           0000B5   467 _P74OUT	=	0x00b5
                           0000B6   468 G$FLSCL$0$0 == 0x00b6
                           0000B6   469 _FLSCL	=	0x00b6
                           0000B7   470 G$FLACL$0$0 == 0x00b7
                           0000B7   471 _FLACL	=	0x00b7
                           0000B8   472 G$IP$0$0 == 0x00b8
                           0000B8   473 _IP	=	0x00b8
                           0000B9   474 G$SADEN0$0$0 == 0x00b9
                           0000B9   475 _SADEN0	=	0x00b9
                           0000BA   476 G$AMX0CF$0$0 == 0x00ba
                           0000BA   477 _AMX0CF	=	0x00ba
                           0000BB   478 G$AMX0SL$0$0 == 0x00bb
                           0000BB   479 _AMX0SL	=	0x00bb
                           0000BC   480 G$ADC0CF$0$0 == 0x00bc
                           0000BC   481 _ADC0CF	=	0x00bc
                           0000BD   482 G$P1MDIN$0$0 == 0x00bd
                           0000BD   483 _P1MDIN	=	0x00bd
                           0000BE   484 G$ADC0L$0$0 == 0x00be
                           0000BE   485 _ADC0L	=	0x00be
                           0000BF   486 G$ADC0H$0$0 == 0x00bf
                           0000BF   487 _ADC0H	=	0x00bf
                           0000C0   488 G$SMB0CN$0$0 == 0x00c0
                           0000C0   489 _SMB0CN	=	0x00c0
                           0000C1   490 G$SMB0STA$0$0 == 0x00c1
                           0000C1   491 _SMB0STA	=	0x00c1
                           0000C2   492 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   493 _SMB0DAT	=	0x00c2
                           0000C3   494 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   495 _SMB0ADR	=	0x00c3
                           0000C4   496 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   497 _ADC0GTL	=	0x00c4
                           0000C5   498 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   499 _ADC0GTH	=	0x00c5
                           0000C6   500 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   501 _ADC0LTL	=	0x00c6
                           0000C7   502 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   503 _ADC0LTH	=	0x00c7
                           0000C8   504 G$T2CON$0$0 == 0x00c8
                           0000C8   505 _T2CON	=	0x00c8
                           0000C9   506 G$T4CON$0$0 == 0x00c9
                           0000C9   507 _T4CON	=	0x00c9
                           0000CA   508 G$RCAP2L$0$0 == 0x00ca
                           0000CA   509 _RCAP2L	=	0x00ca
                           0000CB   510 G$RCAP2H$0$0 == 0x00cb
                           0000CB   511 _RCAP2H	=	0x00cb
                           0000CC   512 G$TL2$0$0 == 0x00cc
                           0000CC   513 _TL2	=	0x00cc
                           0000CD   514 G$TH2$0$0 == 0x00cd
                           0000CD   515 _TH2	=	0x00cd
                           0000CF   516 G$SMB0CR$0$0 == 0x00cf
                           0000CF   517 _SMB0CR	=	0x00cf
                           0000D0   518 G$PSW$0$0 == 0x00d0
                           0000D0   519 _PSW	=	0x00d0
                           0000D1   520 G$REF0CN$0$0 == 0x00d1
                           0000D1   521 _REF0CN	=	0x00d1
                           0000D2   522 G$DAC0L$0$0 == 0x00d2
                           0000D2   523 _DAC0L	=	0x00d2
                           0000D3   524 G$DAC0H$0$0 == 0x00d3
                           0000D3   525 _DAC0H	=	0x00d3
                           0000D4   526 G$DAC0CN$0$0 == 0x00d4
                           0000D4   527 _DAC0CN	=	0x00d4
                           0000D5   528 G$DAC1L$0$0 == 0x00d5
                           0000D5   529 _DAC1L	=	0x00d5
                           0000D6   530 G$DAC1H$0$0 == 0x00d6
                           0000D6   531 _DAC1H	=	0x00d6
                           0000D7   532 G$DAC1CN$0$0 == 0x00d7
                           0000D7   533 _DAC1CN	=	0x00d7
                           0000D8   534 G$PCA0CN$0$0 == 0x00d8
                           0000D8   535 _PCA0CN	=	0x00d8
                           0000D9   536 G$PCA0MD$0$0 == 0x00d9
                           0000D9   537 _PCA0MD	=	0x00d9
                           0000DA   538 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   539 _PCA0CPM0	=	0x00da
                           0000DB   540 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   541 _PCA0CPM1	=	0x00db
                           0000DC   542 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   543 _PCA0CPM2	=	0x00dc
                           0000DD   544 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   545 _PCA0CPM3	=	0x00dd
                           0000DE   546 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   547 _PCA0CPM4	=	0x00de
                           0000E0   548 G$ACC$0$0 == 0x00e0
                           0000E0   549 _ACC	=	0x00e0
                           0000E1   550 G$XBR0$0$0 == 0x00e1
                           0000E1   551 _XBR0	=	0x00e1
                           0000E2   552 G$XBR1$0$0 == 0x00e2
                           0000E2   553 _XBR1	=	0x00e2
                           0000E3   554 G$XBR2$0$0 == 0x00e3
                           0000E3   555 _XBR2	=	0x00e3
                           0000E4   556 G$RCAP4L$0$0 == 0x00e4
                           0000E4   557 _RCAP4L	=	0x00e4
                           0000E5   558 G$RCAP4H$0$0 == 0x00e5
                           0000E5   559 _RCAP4H	=	0x00e5
                           0000E6   560 G$EIE1$0$0 == 0x00e6
                           0000E6   561 _EIE1	=	0x00e6
                           0000E7   562 G$EIE2$0$0 == 0x00e7
                           0000E7   563 _EIE2	=	0x00e7
                           0000E8   564 G$ADC0CN$0$0 == 0x00e8
                           0000E8   565 _ADC0CN	=	0x00e8
                           0000E9   566 G$PCA0L$0$0 == 0x00e9
                           0000E9   567 _PCA0L	=	0x00e9
                           0000EA   568 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   569 _PCA0CPL0	=	0x00ea
                           0000EB   570 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   571 _PCA0CPL1	=	0x00eb
                           0000EC   572 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   573 _PCA0CPL2	=	0x00ec
                           0000ED   574 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   575 _PCA0CPL3	=	0x00ed
                           0000EE   576 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   577 _PCA0CPL4	=	0x00ee
                           0000EF   578 G$RSTSRC$0$0 == 0x00ef
                           0000EF   579 _RSTSRC	=	0x00ef
                           0000F0   580 G$B$0$0 == 0x00f0
                           0000F0   581 _B	=	0x00f0
                           0000F1   582 G$SCON1$0$0 == 0x00f1
                           0000F1   583 _SCON1	=	0x00f1
                           0000F2   584 G$SBUF1$0$0 == 0x00f2
                           0000F2   585 _SBUF1	=	0x00f2
                           0000F3   586 G$SADDR1$0$0 == 0x00f3
                           0000F3   587 _SADDR1	=	0x00f3
                           0000F4   588 G$TL4$0$0 == 0x00f4
                           0000F4   589 _TL4	=	0x00f4
                           0000F5   590 G$TH4$0$0 == 0x00f5
                           0000F5   591 _TH4	=	0x00f5
                           0000F6   592 G$EIP1$0$0 == 0x00f6
                           0000F6   593 _EIP1	=	0x00f6
                           0000F7   594 G$EIP2$0$0 == 0x00f7
                           0000F7   595 _EIP2	=	0x00f7
                           0000F8   596 G$SPI0CN$0$0 == 0x00f8
                           0000F8   597 _SPI0CN	=	0x00f8
                           0000F9   598 G$PCA0H$0$0 == 0x00f9
                           0000F9   599 _PCA0H	=	0x00f9
                           0000FA   600 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   601 _PCA0CPH0	=	0x00fa
                           0000FB   602 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   603 _PCA0CPH1	=	0x00fb
                           0000FC   604 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   605 _PCA0CPH2	=	0x00fc
                           0000FD   606 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   607 _PCA0CPH3	=	0x00fd
                           0000FE   608 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   609 _PCA0CPH4	=	0x00fe
                           0000FF   610 G$WDTCN$0$0 == 0x00ff
                           0000FF   611 _WDTCN	=	0x00ff
                           008C8A   612 G$TMR0$0$0 == 0x8c8a
                           008C8A   613 _TMR0	=	0x8c8a
                           008D8B   614 G$TMR1$0$0 == 0x8d8b
                           008D8B   615 _TMR1	=	0x8d8b
                           00CDCC   616 G$TMR2$0$0 == 0xcdcc
                           00CDCC   617 _TMR2	=	0xcdcc
                           00CBCA   618 G$RCAP2$0$0 == 0xcbca
                           00CBCA   619 _RCAP2	=	0xcbca
                           009594   620 G$TMR3$0$0 == 0x9594
                           009594   621 _TMR3	=	0x9594
                           009392   622 G$TMR3RL$0$0 == 0x9392
                           009392   623 _TMR3RL	=	0x9392
                           00F5F4   624 G$TMR4$0$0 == 0xf5f4
                           00F5F4   625 _TMR4	=	0xf5f4
                           00E5E4   626 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   627 _RCAP4	=	0xe5e4
                           00BFBE   628 G$ADC0$0$0 == 0xbfbe
                           00BFBE   629 _ADC0	=	0xbfbe
                           00C5C4   630 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   631 _ADC0GT	=	0xc5c4
                           00C7C6   632 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   633 _ADC0LT	=	0xc7c6
                           00D3D2   634 G$DAC0$0$0 == 0xd3d2
                           00D3D2   635 _DAC0	=	0xd3d2
                           00D6D5   636 G$DAC1$0$0 == 0xd6d5
                           00D6D5   637 _DAC1	=	0xd6d5
                           00F9E9   638 G$PCA0$0$0 == 0xf9e9
                           00F9E9   639 _PCA0	=	0xf9e9
                           00FAEA   640 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   641 _PCA0CP0	=	0xfaea
                           00FBEB   642 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   643 _PCA0CP1	=	0xfbeb
                           00FCEC   644 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   645 _PCA0CP2	=	0xfcec
                           00FDED   646 G$PCA0CP3$0$0 == 0xfded
                           00FDED   647 _PCA0CP3	=	0xfded
                           00FEEE   648 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   649 _PCA0CP4	=	0xfeee
                                    650 ;--------------------------------------------------------
                                    651 ; special function bits
                                    652 ;--------------------------------------------------------
                                    653 	.area RSEG    (ABS,DATA)
      000000                        654 	.org 0x0000
                           000080   655 G$P0_0$0$0 == 0x0080
                           000080   656 _P0_0	=	0x0080
                           000081   657 G$P0_1$0$0 == 0x0081
                           000081   658 _P0_1	=	0x0081
                           000082   659 G$P0_2$0$0 == 0x0082
                           000082   660 _P0_2	=	0x0082
                           000083   661 G$P0_3$0$0 == 0x0083
                           000083   662 _P0_3	=	0x0083
                           000084   663 G$P0_4$0$0 == 0x0084
                           000084   664 _P0_4	=	0x0084
                           000085   665 G$P0_5$0$0 == 0x0085
                           000085   666 _P0_5	=	0x0085
                           000086   667 G$P0_6$0$0 == 0x0086
                           000086   668 _P0_6	=	0x0086
                           000087   669 G$P0_7$0$0 == 0x0087
                           000087   670 _P0_7	=	0x0087
                           000088   671 G$IT0$0$0 == 0x0088
                           000088   672 _IT0	=	0x0088
                           000089   673 G$IE0$0$0 == 0x0089
                           000089   674 _IE0	=	0x0089
                           00008A   675 G$IT1$0$0 == 0x008a
                           00008A   676 _IT1	=	0x008a
                           00008B   677 G$IE1$0$0 == 0x008b
                           00008B   678 _IE1	=	0x008b
                           00008C   679 G$TR0$0$0 == 0x008c
                           00008C   680 _TR0	=	0x008c
                           00008D   681 G$TF0$0$0 == 0x008d
                           00008D   682 _TF0	=	0x008d
                           00008E   683 G$TR1$0$0 == 0x008e
                           00008E   684 _TR1	=	0x008e
                           00008F   685 G$TF1$0$0 == 0x008f
                           00008F   686 _TF1	=	0x008f
                           000090   687 G$P1_0$0$0 == 0x0090
                           000090   688 _P1_0	=	0x0090
                           000091   689 G$P1_1$0$0 == 0x0091
                           000091   690 _P1_1	=	0x0091
                           000092   691 G$P1_2$0$0 == 0x0092
                           000092   692 _P1_2	=	0x0092
                           000093   693 G$P1_3$0$0 == 0x0093
                           000093   694 _P1_3	=	0x0093
                           000094   695 G$P1_4$0$0 == 0x0094
                           000094   696 _P1_4	=	0x0094
                           000095   697 G$P1_5$0$0 == 0x0095
                           000095   698 _P1_5	=	0x0095
                           000096   699 G$P1_6$0$0 == 0x0096
                           000096   700 _P1_6	=	0x0096
                           000097   701 G$P1_7$0$0 == 0x0097
                           000097   702 _P1_7	=	0x0097
                           000098   703 G$RI$0$0 == 0x0098
                           000098   704 _RI	=	0x0098
                           000098   705 G$RI0$0$0 == 0x0098
                           000098   706 _RI0	=	0x0098
                           000099   707 G$TI$0$0 == 0x0099
                           000099   708 _TI	=	0x0099
                           000099   709 G$TI0$0$0 == 0x0099
                           000099   710 _TI0	=	0x0099
                           00009A   711 G$RB8$0$0 == 0x009a
                           00009A   712 _RB8	=	0x009a
                           00009A   713 G$RB80$0$0 == 0x009a
                           00009A   714 _RB80	=	0x009a
                           00009B   715 G$TB8$0$0 == 0x009b
                           00009B   716 _TB8	=	0x009b
                           00009B   717 G$TB80$0$0 == 0x009b
                           00009B   718 _TB80	=	0x009b
                           00009C   719 G$REN$0$0 == 0x009c
                           00009C   720 _REN	=	0x009c
                           00009C   721 G$REN0$0$0 == 0x009c
                           00009C   722 _REN0	=	0x009c
                           00009D   723 G$SM2$0$0 == 0x009d
                           00009D   724 _SM2	=	0x009d
                           00009D   725 G$SM20$0$0 == 0x009d
                           00009D   726 _SM20	=	0x009d
                           00009D   727 G$MCE0$0$0 == 0x009d
                           00009D   728 _MCE0	=	0x009d
                           00009E   729 G$SM1$0$0 == 0x009e
                           00009E   730 _SM1	=	0x009e
                           00009E   731 G$SM10$0$0 == 0x009e
                           00009E   732 _SM10	=	0x009e
                           00009F   733 G$SM0$0$0 == 0x009f
                           00009F   734 _SM0	=	0x009f
                           00009F   735 G$SM00$0$0 == 0x009f
                           00009F   736 _SM00	=	0x009f
                           00009F   737 G$S0MODE$0$0 == 0x009f
                           00009F   738 _S0MODE	=	0x009f
                           0000A0   739 G$P2_0$0$0 == 0x00a0
                           0000A0   740 _P2_0	=	0x00a0
                           0000A1   741 G$P2_1$0$0 == 0x00a1
                           0000A1   742 _P2_1	=	0x00a1
                           0000A2   743 G$P2_2$0$0 == 0x00a2
                           0000A2   744 _P2_2	=	0x00a2
                           0000A3   745 G$P2_3$0$0 == 0x00a3
                           0000A3   746 _P2_3	=	0x00a3
                           0000A4   747 G$P2_4$0$0 == 0x00a4
                           0000A4   748 _P2_4	=	0x00a4
                           0000A5   749 G$P2_5$0$0 == 0x00a5
                           0000A5   750 _P2_5	=	0x00a5
                           0000A6   751 G$P2_6$0$0 == 0x00a6
                           0000A6   752 _P2_6	=	0x00a6
                           0000A7   753 G$P2_7$0$0 == 0x00a7
                           0000A7   754 _P2_7	=	0x00a7
                           0000A8   755 G$EX0$0$0 == 0x00a8
                           0000A8   756 _EX0	=	0x00a8
                           0000A9   757 G$ET0$0$0 == 0x00a9
                           0000A9   758 _ET0	=	0x00a9
                           0000AA   759 G$EX1$0$0 == 0x00aa
                           0000AA   760 _EX1	=	0x00aa
                           0000AB   761 G$ET1$0$0 == 0x00ab
                           0000AB   762 _ET1	=	0x00ab
                           0000AC   763 G$ES0$0$0 == 0x00ac
                           0000AC   764 _ES0	=	0x00ac
                           0000AC   765 G$ES$0$0 == 0x00ac
                           0000AC   766 _ES	=	0x00ac
                           0000AD   767 G$ET2$0$0 == 0x00ad
                           0000AD   768 _ET2	=	0x00ad
                           0000AF   769 G$EA$0$0 == 0x00af
                           0000AF   770 _EA	=	0x00af
                           0000B0   771 G$P3_0$0$0 == 0x00b0
                           0000B0   772 _P3_0	=	0x00b0
                           0000B1   773 G$P3_1$0$0 == 0x00b1
                           0000B1   774 _P3_1	=	0x00b1
                           0000B2   775 G$P3_2$0$0 == 0x00b2
                           0000B2   776 _P3_2	=	0x00b2
                           0000B3   777 G$P3_3$0$0 == 0x00b3
                           0000B3   778 _P3_3	=	0x00b3
                           0000B4   779 G$P3_4$0$0 == 0x00b4
                           0000B4   780 _P3_4	=	0x00b4
                           0000B5   781 G$P3_5$0$0 == 0x00b5
                           0000B5   782 _P3_5	=	0x00b5
                           0000B6   783 G$P3_6$0$0 == 0x00b6
                           0000B6   784 _P3_6	=	0x00b6
                           0000B7   785 G$P3_7$0$0 == 0x00b7
                           0000B7   786 _P3_7	=	0x00b7
                           0000B8   787 G$PX0$0$0 == 0x00b8
                           0000B8   788 _PX0	=	0x00b8
                           0000B9   789 G$PT0$0$0 == 0x00b9
                           0000B9   790 _PT0	=	0x00b9
                           0000BA   791 G$PX1$0$0 == 0x00ba
                           0000BA   792 _PX1	=	0x00ba
                           0000BB   793 G$PT1$0$0 == 0x00bb
                           0000BB   794 _PT1	=	0x00bb
                           0000BC   795 G$PS0$0$0 == 0x00bc
                           0000BC   796 _PS0	=	0x00bc
                           0000BC   797 G$PS$0$0 == 0x00bc
                           0000BC   798 _PS	=	0x00bc
                           0000BD   799 G$PT2$0$0 == 0x00bd
                           0000BD   800 _PT2	=	0x00bd
                           0000C0   801 G$SMBTOE$0$0 == 0x00c0
                           0000C0   802 _SMBTOE	=	0x00c0
                           0000C1   803 G$SMBFTE$0$0 == 0x00c1
                           0000C1   804 _SMBFTE	=	0x00c1
                           0000C2   805 G$AA$0$0 == 0x00c2
                           0000C2   806 _AA	=	0x00c2
                           0000C3   807 G$SI$0$0 == 0x00c3
                           0000C3   808 _SI	=	0x00c3
                           0000C4   809 G$STO$0$0 == 0x00c4
                           0000C4   810 _STO	=	0x00c4
                           0000C5   811 G$STA$0$0 == 0x00c5
                           0000C5   812 _STA	=	0x00c5
                           0000C6   813 G$ENSMB$0$0 == 0x00c6
                           0000C6   814 _ENSMB	=	0x00c6
                           0000C7   815 G$BUSY$0$0 == 0x00c7
                           0000C7   816 _BUSY	=	0x00c7
                           0000C8   817 G$CPRL2$0$0 == 0x00c8
                           0000C8   818 _CPRL2	=	0x00c8
                           0000C9   819 G$CT2$0$0 == 0x00c9
                           0000C9   820 _CT2	=	0x00c9
                           0000CA   821 G$TR2$0$0 == 0x00ca
                           0000CA   822 _TR2	=	0x00ca
                           0000CB   823 G$EXEN2$0$0 == 0x00cb
                           0000CB   824 _EXEN2	=	0x00cb
                           0000CC   825 G$TCLK$0$0 == 0x00cc
                           0000CC   826 _TCLK	=	0x00cc
                           0000CD   827 G$RCLK$0$0 == 0x00cd
                           0000CD   828 _RCLK	=	0x00cd
                           0000CE   829 G$EXF2$0$0 == 0x00ce
                           0000CE   830 _EXF2	=	0x00ce
                           0000CF   831 G$TF2$0$0 == 0x00cf
                           0000CF   832 _TF2	=	0x00cf
                           0000D0   833 G$P$0$0 == 0x00d0
                           0000D0   834 _P	=	0x00d0
                           0000D1   835 G$F1$0$0 == 0x00d1
                           0000D1   836 _F1	=	0x00d1
                           0000D2   837 G$OV$0$0 == 0x00d2
                           0000D2   838 _OV	=	0x00d2
                           0000D3   839 G$RS0$0$0 == 0x00d3
                           0000D3   840 _RS0	=	0x00d3
                           0000D4   841 G$RS1$0$0 == 0x00d4
                           0000D4   842 _RS1	=	0x00d4
                           0000D5   843 G$F0$0$0 == 0x00d5
                           0000D5   844 _F0	=	0x00d5
                           0000D6   845 G$AC$0$0 == 0x00d6
                           0000D6   846 _AC	=	0x00d6
                           0000D7   847 G$CY$0$0 == 0x00d7
                           0000D7   848 _CY	=	0x00d7
                           0000D8   849 G$CCF0$0$0 == 0x00d8
                           0000D8   850 _CCF0	=	0x00d8
                           0000D9   851 G$CCF1$0$0 == 0x00d9
                           0000D9   852 _CCF1	=	0x00d9
                           0000DA   853 G$CCF2$0$0 == 0x00da
                           0000DA   854 _CCF2	=	0x00da
                           0000DB   855 G$CCF3$0$0 == 0x00db
                           0000DB   856 _CCF3	=	0x00db
                           0000DC   857 G$CCF4$0$0 == 0x00dc
                           0000DC   858 _CCF4	=	0x00dc
                           0000DE   859 G$CR$0$0 == 0x00de
                           0000DE   860 _CR	=	0x00de
                           0000DF   861 G$CF$0$0 == 0x00df
                           0000DF   862 _CF	=	0x00df
                           0000E8   863 G$ADLJST$0$0 == 0x00e8
                           0000E8   864 _ADLJST	=	0x00e8
                           0000E8   865 G$AD0LJST$0$0 == 0x00e8
                           0000E8   866 _AD0LJST	=	0x00e8
                           0000E9   867 G$ADWINT$0$0 == 0x00e9
                           0000E9   868 _ADWINT	=	0x00e9
                           0000E9   869 G$AD0WINT$0$0 == 0x00e9
                           0000E9   870 _AD0WINT	=	0x00e9
                           0000EA   871 G$ADSTM0$0$0 == 0x00ea
                           0000EA   872 _ADSTM0	=	0x00ea
                           0000EA   873 G$AD0CM0$0$0 == 0x00ea
                           0000EA   874 _AD0CM0	=	0x00ea
                           0000EB   875 G$ADSTM1$0$0 == 0x00eb
                           0000EB   876 _ADSTM1	=	0x00eb
                           0000EB   877 G$AD0CM1$0$0 == 0x00eb
                           0000EB   878 _AD0CM1	=	0x00eb
                           0000EC   879 G$ADBUSY$0$0 == 0x00ec
                           0000EC   880 _ADBUSY	=	0x00ec
                           0000EC   881 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   882 _AD0BUSY	=	0x00ec
                           0000ED   883 G$ADCINT$0$0 == 0x00ed
                           0000ED   884 _ADCINT	=	0x00ed
                           0000ED   885 G$AD0INT$0$0 == 0x00ed
                           0000ED   886 _AD0INT	=	0x00ed
                           0000EE   887 G$ADCTM$0$0 == 0x00ee
                           0000EE   888 _ADCTM	=	0x00ee
                           0000EE   889 G$AD0TM$0$0 == 0x00ee
                           0000EE   890 _AD0TM	=	0x00ee
                           0000EF   891 G$ADCEN$0$0 == 0x00ef
                           0000EF   892 _ADCEN	=	0x00ef
                           0000EF   893 G$AD0EN$0$0 == 0x00ef
                           0000EF   894 _AD0EN	=	0x00ef
                           0000F8   895 G$SPIEN$0$0 == 0x00f8
                           0000F8   896 _SPIEN	=	0x00f8
                           0000F9   897 G$MSTEN$0$0 == 0x00f9
                           0000F9   898 _MSTEN	=	0x00f9
                           0000FA   899 G$SLVSEL$0$0 == 0x00fa
                           0000FA   900 _SLVSEL	=	0x00fa
                           0000FB   901 G$TXBSY$0$0 == 0x00fb
                           0000FB   902 _TXBSY	=	0x00fb
                           0000FC   903 G$RXOVRN$0$0 == 0x00fc
                           0000FC   904 _RXOVRN	=	0x00fc
                           0000FD   905 G$MODF$0$0 == 0x00fd
                           0000FD   906 _MODF	=	0x00fd
                           0000FE   907 G$WCOL$0$0 == 0x00fe
                           0000FE   908 _WCOL	=	0x00fe
                           0000FF   909 G$SPIF$0$0 == 0x00ff
                           0000FF   910 _SPIF	=	0x00ff
                           0000C7   911 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   912 _BUS_BUSY	=	0x00c7
                           0000C6   913 G$BUS_EN$0$0 == 0x00c6
                           0000C6   914 _BUS_EN	=	0x00c6
                           0000C5   915 G$BUS_START$0$0 == 0x00c5
                           0000C5   916 _BUS_START	=	0x00c5
                           0000C4   917 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   918 _BUS_STOP	=	0x00c4
                           0000C3   919 G$BUS_INT$0$0 == 0x00c3
                           0000C3   920 _BUS_INT	=	0x00c3
                           0000C2   921 G$BUS_AA$0$0 == 0x00c2
                           0000C2   922 _BUS_AA	=	0x00c2
                           0000C1   923 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   924 _BUS_FTE	=	0x00c1
                           0000C0   925 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   926 _BUS_TOE	=	0x00c0
                           000083   927 G$BUS_SCL$0$0 == 0x0083
                           000083   928 _BUS_SCL	=	0x0083
                                    929 ;--------------------------------------------------------
                                    930 ; overlayable register banks
                                    931 ;--------------------------------------------------------
                                    932 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        933 	.ds 8
                                    934 ;--------------------------------------------------------
                                    935 ; internal ram data
                                    936 ;--------------------------------------------------------
                                    937 	.area DSEG    (DATA)
                           000000   938 LMyLab4.lcd_clear$NumBytes$1$77==.
      000000                        939 _lcd_clear_NumBytes_1_77:
      000000                        940 	.ds 1
                           000001   941 LMyLab4.lcd_clear$Cmd$1$77==.
      000001                        942 _lcd_clear_Cmd_1_77:
      000001                        943 	.ds 2
                           000003   944 LMyLab4.read_keypad$Data$1$78==.
      000003                        945 _read_keypad_Data_1_78:
      000003                        946 	.ds 2
                           000005   947 LMyLab4.i2c_write_data$start_reg$1$97==.
      000005                        948 _i2c_write_data_PARM_2:
      000005                        949 	.ds 1
                           000006   950 LMyLab4.i2c_write_data$buffer$1$97==.
      000006                        951 _i2c_write_data_PARM_3:
      000006                        952 	.ds 3
                           000009   953 LMyLab4.i2c_write_data$num_bytes$1$97==.
      000009                        954 _i2c_write_data_PARM_4:
      000009                        955 	.ds 1
                           00000A   956 LMyLab4.i2c_read_data$start_reg$1$99==.
      00000A                        957 _i2c_read_data_PARM_2:
      00000A                        958 	.ds 1
                           00000B   959 LMyLab4.i2c_read_data$buffer$1$99==.
      00000B                        960 _i2c_read_data_PARM_3:
      00000B                        961 	.ds 3
                           00000E   962 LMyLab4.i2c_read_data$num_bytes$1$99==.
      00000E                        963 _i2c_read_data_PARM_4:
      00000E                        964 	.ds 1
                           00000F   965 LMyLab4.Accel_Init$Data2$1$103==.
      00000F                        966 _Accel_Init_Data2_1_103:
      00000F                        967 	.ds 1
                           000010   968 G$Counts$0$0==.
      000010                        969 _Counts::
      000010                        970 	.ds 2
                           000012   971 G$nCounts$0$0==.
      000012                        972 _nCounts::
      000012                        973 	.ds 2
                           000014   974 G$nOverflows$0$0==.
      000014                        975 _nOverflows::
      000014                        976 	.ds 2
                           000016   977 G$desired_heading$0$0==.
      000016                        978 _desired_heading::
      000016                        979 	.ds 2
                           000018   980 G$compass_gain$0$0==.
      000018                        981 _compass_gain::
      000018                        982 	.ds 4
                           00001C   983 G$h_count$0$0==.
      00001C                        984 _h_count::
      00001C                        985 	.ds 1
                           00001D   986 G$r_count$0$0==.
      00001D                        987 _r_count::
      00001D                        988 	.ds 1
                           00001E   989 G$delay$0$0==.
      00001E                        990 _delay::
      00001E                        991 	.ds 1
                           00001F   992 G$new_heading$0$0==.
      00001F                        993 _new_heading::
      00001F                        994 	.ds 1
                           000020   995 G$new_range$0$0==.
      000020                        996 _new_range::
      000020                        997 	.ds 1
                           000021   998 G$heading$0$0==.
      000021                        999 _heading::
      000021                       1000 	.ds 2
                           000023  1001 G$PW$0$0==.
      000023                       1002 _PW::
      000023                       1003 	.ds 2
                           000025  1004 G$AD_Result$0$0==.
      000025                       1005 _AD_Result::
      000025                       1006 	.ds 1
                           000026  1007 G$voltage$0$0==.
      000026                       1008 _voltage::
      000026                       1009 	.ds 1
                           000027  1010 LMyLab4.read_compass$Data$1$140==.
      000027                       1011 _read_compass_Data_1_140:
      000027                       1012 	.ds 2
                                   1013 ;--------------------------------------------------------
                                   1014 ; overlayable items in internal ram 
                                   1015 ;--------------------------------------------------------
                                   1016 	.area	OSEG    (OVR,DATA)
                                   1017 	.area	OSEG    (OVR,DATA)
                                   1018 	.area	OSEG    (OVR,DATA)
                                   1019 	.area	OSEG    (OVR,DATA)
                                   1020 	.area	OSEG    (OVR,DATA)
                                   1021 	.area	OSEG    (OVR,DATA)
                                   1022 	.area	OSEG    (OVR,DATA)
                                   1023 	.area	OSEG    (OVR,DATA)
                                   1024 ;--------------------------------------------------------
                                   1025 ; Stack segment in internal ram 
                                   1026 ;--------------------------------------------------------
                                   1027 	.area	SSEG
      000000                       1028 __start__stack:
      000000                       1029 	.ds	1
                                   1030 
                                   1031 ;--------------------------------------------------------
                                   1032 ; indirectly addressable internal ram data
                                   1033 ;--------------------------------------------------------
                                   1034 	.area ISEG    (DATA)
                                   1035 ;--------------------------------------------------------
                                   1036 ; absolute internal ram data
                                   1037 ;--------------------------------------------------------
                                   1038 	.area IABS    (ABS,DATA)
                                   1039 	.area IABS    (ABS,DATA)
                                   1040 ;--------------------------------------------------------
                                   1041 ; bit data
                                   1042 ;--------------------------------------------------------
                                   1043 	.area BSEG    (BIT)
                                   1044 ;--------------------------------------------------------
                                   1045 ; paged external ram data
                                   1046 ;--------------------------------------------------------
                                   1047 	.area PSEG    (PAG,XDATA)
                                   1048 ;--------------------------------------------------------
                                   1049 ; external ram data
                                   1050 ;--------------------------------------------------------
                                   1051 	.area XSEG    (XDATA)
                           000000  1052 LMyLab4.lcd_print$text$1$73==.
      000000                       1053 _lcd_print_text_1_73:
      000000                       1054 	.ds 80
                                   1055 ;--------------------------------------------------------
                                   1056 ; absolute external ram data
                                   1057 ;--------------------------------------------------------
                                   1058 	.area XABS    (ABS,XDATA)
                                   1059 ;--------------------------------------------------------
                                   1060 ; external initialized ram data
                                   1061 ;--------------------------------------------------------
                                   1062 	.area XISEG   (XDATA)
                                   1063 	.area HOME    (CODE)
                                   1064 	.area GSINIT0 (CODE)
                                   1065 	.area GSINIT1 (CODE)
                                   1066 	.area GSINIT2 (CODE)
                                   1067 	.area GSINIT3 (CODE)
                                   1068 	.area GSINIT4 (CODE)
                                   1069 	.area GSINIT5 (CODE)
                                   1070 	.area GSINIT  (CODE)
                                   1071 	.area GSFINAL (CODE)
                                   1072 	.area CSEG    (CODE)
                                   1073 ;--------------------------------------------------------
                                   1074 ; interrupt vector 
                                   1075 ;--------------------------------------------------------
                                   1076 	.area HOME    (CODE)
      000000                       1077 __interrupt_vect:
      000000 02r00r00         [24] 1078 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1079 	reti
      000004                       1080 	.ds	7
      00000B 32               [24] 1081 	reti
      00000C                       1082 	.ds	7
      000013 32               [24] 1083 	reti
      000014                       1084 	.ds	7
      00001B 32               [24] 1085 	reti
      00001C                       1086 	.ds	7
      000023 32               [24] 1087 	reti
      000024                       1088 	.ds	7
      00002B 32               [24] 1089 	reti
      00002C                       1090 	.ds	7
      000033 32               [24] 1091 	reti
      000034                       1092 	.ds	7
      00003B 32               [24] 1093 	reti
      00003C                       1094 	.ds	7
      000043 32               [24] 1095 	reti
      000044                       1096 	.ds	7
      00004B 02r06r32         [24] 1097 	ljmp	_PCA_ISR
                                   1098 ;--------------------------------------------------------
                                   1099 ; global & static initialisations
                                   1100 ;--------------------------------------------------------
                                   1101 	.area HOME    (CODE)
                                   1102 	.area GSINIT  (CODE)
                                   1103 	.area GSFINAL (CODE)
                                   1104 	.area GSINIT  (CODE)
                                   1105 	.globl __sdcc_gsinit_startup
                                   1106 	.globl __sdcc_program_startup
                                   1107 	.globl __start__stack
                                   1108 	.globl __mcs51_genXINIT
                                   1109 	.globl __mcs51_genXRAMCLEAR
                                   1110 	.globl __mcs51_genRAMCLEAR
                           000000  1111 	C$MyLab4.c$23$1$144 ==.
                                   1112 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:23: float compass_gain = 0;
      000000 E4               [12] 1113 	clr	a
      000001 F5*18            [12] 1114 	mov	_compass_gain,a
      000003 F5*19            [12] 1115 	mov	(_compass_gain + 1),a
      000005 F5*1A            [12] 1116 	mov	(_compass_gain + 2),a
      000007 F5*1B            [12] 1117 	mov	(_compass_gain + 3),a
                                   1118 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1119 	ljmp	__sdcc_program_startup
                                   1120 ;--------------------------------------------------------
                                   1121 ; Home
                                   1122 ;--------------------------------------------------------
                                   1123 	.area HOME    (CODE)
                                   1124 	.area HOME    (CODE)
      00004E                       1125 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1126 	ljmp	_main
                                   1127 ;	return from main will return to caller
                                   1128 ;--------------------------------------------------------
                                   1129 ; code
                                   1130 ;--------------------------------------------------------
                                   1131 	.area CSEG    (CODE)
                                   1132 ;------------------------------------------------------------
                                   1133 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1134 ;------------------------------------------------------------
                                   1135 ;i                         Allocated to registers 
                                   1136 ;------------------------------------------------------------
                           000000  1137 	G$SYSCLK_Init$0$0 ==.
                           000000  1138 	C$c8051_SDCC.h$42$0$0 ==.
                                   1139 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1140 ;	-----------------------------------------
                                   1141 ;	 function SYSCLK_Init
                                   1142 ;	-----------------------------------------
      000000                       1143 _SYSCLK_Init:
                           000007  1144 	ar7 = 0x07
                           000006  1145 	ar6 = 0x06
                           000005  1146 	ar5 = 0x05
                           000004  1147 	ar4 = 0x04
                           000003  1148 	ar3 = 0x03
                           000002  1149 	ar2 = 0x02
                           000001  1150 	ar1 = 0x01
                           000000  1151 	ar0 = 0x00
                           000000  1152 	C$c8051_SDCC.h$46$1$31 ==.
                                   1153 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1154 	mov	_OSCXCN,#0x67
                           000003  1155 	C$c8051_SDCC.h$49$1$31 ==.
                                   1156 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1157 	mov	r6,#0x00
      000005 7F 01            [12] 1158 	mov	r7,#0x01
      000007                       1159 00107$:
      000007 1E               [12] 1160 	dec	r6
      000008 BE FF 01         [24] 1161 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1162 	dec	r7
      00000C                       1163 00121$:
      00000C EE               [12] 1164 	mov	a,r6
      00000D 4F               [12] 1165 	orl	a,r7
      00000E 70 F7            [24] 1166 	jnz	00107$
                           000010  1167 	C$c8051_SDCC.h$51$1$31 ==.
                                   1168 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1169 00102$:
      000010 E5 B1            [12] 1170 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1171 	jnb	acc.7,00102$
                           000015  1172 	C$c8051_SDCC.h$53$1$31 ==.
                                   1173 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1174 	mov	_OSCICN,#0x88
                           000018  1175 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1176 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1177 	ret
                                   1178 ;------------------------------------------------------------
                                   1179 ;Allocation info for local variables in function 'UART0_Init'
                                   1180 ;------------------------------------------------------------
                           000019  1181 	G$UART0_Init$0$0 ==.
                           000019  1182 	C$c8051_SDCC.h$64$1$31 ==.
                                   1183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1184 ;	-----------------------------------------
                                   1185 ;	 function UART0_Init
                                   1186 ;	-----------------------------------------
      000019                       1187 _UART0_Init:
                           000019  1188 	C$c8051_SDCC.h$66$1$33 ==.
                                   1189 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1190 	mov	_SCON0,#0x50
                           00001C  1191 	C$c8051_SDCC.h$67$1$33 ==.
                                   1192 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1193 	mov	_TMOD,#0x20
                           00001F  1194 	C$c8051_SDCC.h$68$1$33 ==.
                                   1195 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1196 	mov	_TH1,#0xDC
                           000022  1197 	C$c8051_SDCC.h$69$1$33 ==.
                                   1198 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1199 	setb	_TR1
                           000024  1200 	C$c8051_SDCC.h$70$1$33 ==.
                                   1201 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1202 	orl	_CKCON,#0x10
                           000027  1203 	C$c8051_SDCC.h$71$1$33 ==.
                                   1204 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1205 	orl	_PCON,#0x80
                           00002A  1206 	C$c8051_SDCC.h$73$1$33 ==.
                                   1207 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1208 	setb	_TI0
                           00002C  1209 	C$c8051_SDCC.h$74$1$33 ==.
                                   1210 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1211 	orl	_P0MDOUT,#0x01
                           00002F  1212 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1213 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1214 	ret
                                   1215 ;------------------------------------------------------------
                                   1216 ;Allocation info for local variables in function 'Sys_Init'
                                   1217 ;------------------------------------------------------------
                           000030  1218 	G$Sys_Init$0$0 ==.
                           000030  1219 	C$c8051_SDCC.h$83$1$33 ==.
                                   1220 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1221 ;	-----------------------------------------
                                   1222 ;	 function Sys_Init
                                   1223 ;	-----------------------------------------
      000030                       1224 _Sys_Init:
                           000030  1225 	C$c8051_SDCC.h$85$1$35 ==.
                                   1226 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1227 	mov	_WDTCN,#0xDE
                           000033  1228 	C$c8051_SDCC.h$86$1$35 ==.
                                   1229 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1230 	mov	_WDTCN,#0xAD
                           000036  1231 	C$c8051_SDCC.h$88$1$35 ==.
                                   1232 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1233 	lcall	_SYSCLK_Init
                           000039  1234 	C$c8051_SDCC.h$89$1$35 ==.
                                   1235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1236 	lcall	_UART0_Init
                           00003C  1237 	C$c8051_SDCC.h$91$1$35 ==.
                                   1238 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1239 	orl	_XBR0,#0x04
                           00003F  1240 	C$c8051_SDCC.h$92$1$35 ==.
                                   1241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1242 	orl	_XBR2,#0x40
                           000042  1243 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1244 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1245 	ret
                                   1246 ;------------------------------------------------------------
                                   1247 ;Allocation info for local variables in function 'putchar'
                                   1248 ;------------------------------------------------------------
                                   1249 ;c                         Allocated to registers r7 
                                   1250 ;------------------------------------------------------------
                           000043  1251 	G$putchar$0$0 ==.
                           000043  1252 	C$c8051_SDCC.h$98$1$35 ==.
                                   1253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1254 ;	-----------------------------------------
                                   1255 ;	 function putchar
                                   1256 ;	-----------------------------------------
      000043                       1257 _putchar:
      000043 AF 82            [24] 1258 	mov	r7,dpl
                           000045  1259 	C$c8051_SDCC.h$100$1$37 ==.
                                   1260 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1261 00101$:
                           000045  1262 	C$c8051_SDCC.h$101$1$37 ==.
                                   1263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1264 	jbc	_TI0,00112$
      000048 80 FB            [24] 1265 	sjmp	00101$
      00004A                       1266 00112$:
                           00004A  1267 	C$c8051_SDCC.h$102$1$37 ==.
                                   1268 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1269 	mov	_SBUF0,r7
                           00004C  1270 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1271 	XG$putchar$0$0 ==.
      00004C 22               [24] 1272 	ret
                                   1273 ;------------------------------------------------------------
                                   1274 ;Allocation info for local variables in function 'getchar'
                                   1275 ;------------------------------------------------------------
                                   1276 ;c                         Allocated to registers 
                                   1277 ;------------------------------------------------------------
                           00004D  1278 	G$getchar$0$0 ==.
                           00004D  1279 	C$c8051_SDCC.h$108$1$37 ==.
                                   1280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1281 ;	-----------------------------------------
                                   1282 ;	 function getchar
                                   1283 ;	-----------------------------------------
      00004D                       1284 _getchar:
                           00004D  1285 	C$c8051_SDCC.h$111$1$39 ==.
                                   1286 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1287 00101$:
                           00004D  1288 	C$c8051_SDCC.h$112$1$39 ==.
                                   1289 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1290 	jbc	_RI0,00112$
      000050 80 FB            [24] 1291 	sjmp	00101$
      000052                       1292 00112$:
                           000052  1293 	C$c8051_SDCC.h$113$1$39 ==.
                                   1294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1295 	mov	dpl,_SBUF0
                           000055  1296 	C$c8051_SDCC.h$114$1$39 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1298 	lcall	_putchar
                           000058  1299 	C$c8051_SDCC.h$115$1$39 ==.
                                   1300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1301 	mov	dpl,_SBUF0
                           00005B  1302 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1303 	XG$getchar$0$0 ==.
      00005B 22               [24] 1304 	ret
                                   1305 ;------------------------------------------------------------
                                   1306 ;Allocation info for local variables in function 'lcd_print'
                                   1307 ;------------------------------------------------------------
                                   1308 ;fmt                       Allocated to stack - _bp -5
                                   1309 ;len                       Allocated to registers r6 
                                   1310 ;i                         Allocated to registers 
                                   1311 ;ap                        Allocated to registers 
                                   1312 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1313 ;------------------------------------------------------------
                           00005C  1314 	G$lcd_print$0$0 ==.
                           00005C  1315 	C$i2c.h$81$1$39 ==.
                                   1316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function lcd_print
                                   1319 ;	-----------------------------------------
      00005C                       1320 _lcd_print:
      00005C C0*00            [24] 1321 	push	_bp
      00005E 85 81*00         [24] 1322 	mov	_bp,sp
                           000061  1323 	C$i2c.h$87$1$73 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1325 	mov	a,_bp
      000063 24 FB            [12] 1326 	add	a,#0xfb
      000065 F8               [12] 1327 	mov	r0,a
      000066 86 82            [24] 1328 	mov	dpl,@r0
      000068 08               [12] 1329 	inc	r0
      000069 86 83            [24] 1330 	mov	dph,@r0
      00006B 08               [12] 1331 	inc	r0
      00006C 86 F0            [24] 1332 	mov	b,@r0
      00006E 12r00r00         [24] 1333 	lcall	_strlen
      000071 E5 82            [12] 1334 	mov	a,dpl
      000073 85 83 F0         [24] 1335 	mov	b,dph
      000076 45 F0            [12] 1336 	orl	a,b
      000078 70 02            [24] 1337 	jnz	00102$
      00007A 80 62            [24] 1338 	sjmp	00109$
      00007C                       1339 00102$:
                           00007C  1340 	C$i2c.h$89$2$74 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1342 	mov	a,_bp
      00007E 24 FB            [12] 1343 	add	a,#0xFB
      000080 FF               [12] 1344 	mov	r7,a
      000081 8F*00            [24] 1345 	mov	_vsprintf_PARM_3,r7
                           000083  1346 	C$i2c.h$90$1$73 ==.
                                   1347 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1348 	mov	a,_bp
      000085 24 FB            [12] 1349 	add	a,#0xfb
      000087 F8               [12] 1350 	mov	r0,a
      000088 86*00            [24] 1351 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1352 	inc	r0
      00008B 86*01            [24] 1353 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1354 	inc	r0
      00008E 86*02            [24] 1355 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1356 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1357 	mov	b,#0x00
      000096 12r00r00         [24] 1358 	lcall	_vsprintf
                           000099  1359 	C$i2c.h$93$1$73 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1361 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1362 	mov	b,#0x00
      00009F 12r00r00         [24] 1363 	lcall	_strlen
      0000A2 AE 82            [24] 1364 	mov	r6,dpl
                           0000A4  1365 	C$i2c.h$94$1$73 ==.
                                   1366 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1367 	mov	r7,#0x00
      0000A6                       1368 00107$:
      0000A6 C3               [12] 1369 	clr	c
      0000A7 EF               [12] 1370 	mov	a,r7
      0000A8 9E               [12] 1371 	subb	a,r6
      0000A9 50 1F            [24] 1372 	jnc	00105$
                           0000AB  1373 	C$i2c.h$96$2$76 ==.
                                   1374 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1375 	mov	a,r7
      0000AC 24r00            [12] 1376 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1377 	mov	dpl,a
      0000B0 E4               [12] 1378 	clr	a
      0000B1 34s00            [12] 1379 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1380 	mov	dph,a
      0000B5 E0               [24] 1381 	movx	a,@dptr
      0000B6 FD               [12] 1382 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1383 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1384 	mov	a,r7
      0000BB 24r00            [12] 1385 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1386 	mov	dpl,a
      0000BF E4               [12] 1387 	clr	a
      0000C0 34s00            [12] 1388 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1389 	mov	dph,a
      0000C4 74 0D            [12] 1390 	mov	a,#0x0D
      0000C6 F0               [24] 1391 	movx	@dptr,a
      0000C7                       1392 00108$:
                           0000C7  1393 	C$i2c.h$94$1$73 ==.
                                   1394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1395 	inc	r7
      0000C8 80 DC            [24] 1396 	sjmp	00107$
      0000CA                       1397 00105$:
                           0000CA  1398 	C$i2c.h$99$1$73 ==.
                                   1399 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1400 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1401 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1402 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1403 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1404 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1405 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1406 	lcall	_i2c_write_data
      0000DE                       1407 00109$:
      0000DE D0*00            [24] 1408 	pop	_bp
                           0000E0  1409 	C$i2c.h$100$1$73 ==.
                           0000E0  1410 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1411 	ret
                                   1412 ;------------------------------------------------------------
                                   1413 ;Allocation info for local variables in function 'lcd_clear'
                                   1414 ;------------------------------------------------------------
                                   1415 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1416 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1417 ;------------------------------------------------------------
                           0000E1  1418 	G$lcd_clear$0$0 ==.
                           0000E1  1419 	C$i2c.h$103$1$73 ==.
                                   1420 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1421 ;	-----------------------------------------
                                   1422 ;	 function lcd_clear
                                   1423 ;	-----------------------------------------
      0000E1                       1424 _lcd_clear:
                           0000E1  1425 	C$i2c.h$105$1$73 ==.
                                   1426 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1427 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1428 	C$i2c.h$107$1$77 ==.
                                   1429 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1430 00101$:
      0000E4 74 C0            [12] 1431 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1432 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1433 	jc	00103$
      0000EA 75*0Br00         [24] 1434 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1435 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1436 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1437 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1438 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1439 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1440 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1441 	sjmp	00101$
      000101                       1442 00103$:
                           000101  1443 	C$i2c.h$109$1$77 ==.
                                   1444 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1445 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1446 	C$i2c.h$110$1$77 ==.
                                   1447 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1448 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1449 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1450 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1451 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1452 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1453 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1454 	lcall	_i2c_write_data
                           000119  1455 	C$i2c.h$111$1$77 ==.
                           000119  1456 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1457 	ret
                                   1458 ;------------------------------------------------------------
                                   1459 ;Allocation info for local variables in function 'read_keypad'
                                   1460 ;------------------------------------------------------------
                                   1461 ;i                         Allocated to registers r7 
                                   1462 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1463 ;------------------------------------------------------------
                           00011A  1464 	G$read_keypad$0$0 ==.
                           00011A  1465 	C$i2c.h$114$1$77 ==.
                                   1466 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1467 ;	-----------------------------------------
                                   1468 ;	 function read_keypad
                                   1469 ;	-----------------------------------------
      00011A                       1470 _read_keypad:
                           00011A  1471 	C$i2c.h$118$1$78 ==.
                                   1472 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1473 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1474 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1475 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1476 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1477 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1478 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1479 	lcall	_i2c_read_data
                           00012F  1480 	C$i2c.h$119$1$78 ==.
                                   1481 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1482 	mov	a,#0xFF
      000131 B5*03 05         [24] 1483 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1484 	mov	dpl,#0x00
      000137 80 5F            [24] 1485 	sjmp	00116$
      000139                       1486 00102$:
                           000139  1487 	C$i2c.h$121$1$78 ==.
                                   1488 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1489 	mov	r7,#0x00
      00013B 8F 06            [24] 1490 	mov	ar6,r7
      00013D                       1491 00114$:
                           00013D  1492 	C$i2c.h$123$2$79 ==.
                                   1493 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1494 	mov	b,r6
      00013F 05 F0            [12] 1495 	inc	b
      000141 7C 01            [12] 1496 	mov	r4,#0x01
      000143 7D 00            [12] 1497 	mov	r5,#0x00
      000145 80 06            [24] 1498 	sjmp	00145$
      000147                       1499 00144$:
      000147 EC               [12] 1500 	mov	a,r4
      000148 2C               [12] 1501 	add	a,r4
      000149 FC               [12] 1502 	mov	r4,a
      00014A ED               [12] 1503 	mov	a,r5
      00014B 33               [12] 1504 	rlc	a
      00014C FD               [12] 1505 	mov	r5,a
      00014D                       1506 00145$:
      00014D D5 F0 F7         [24] 1507 	djnz	b,00144$
      000150 AA*03            [24] 1508 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1509 	mov	r3,#0x00
      000154 EA               [12] 1510 	mov	a,r2
      000155 52 04            [12] 1511 	anl	ar4,a
      000157 EB               [12] 1512 	mov	a,r3
      000158 52 05            [12] 1513 	anl	ar5,a
      00015A EC               [12] 1514 	mov	a,r4
      00015B 4D               [12] 1515 	orl	a,r5
      00015C 60 07            [24] 1516 	jz	00115$
                           00015E  1517 	C$i2c.h$124$2$79 ==.
                                   1518 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1519 	mov	a,#0x31
      000160 2F               [12] 1520 	add	a,r7
      000161 F5 82            [12] 1521 	mov	dpl,a
      000163 80 33            [24] 1522 	sjmp	00116$
      000165                       1523 00115$:
                           000165  1524 	C$i2c.h$121$1$78 ==.
                                   1525 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1526 	inc	r6
      000166 8E 07            [24] 1527 	mov	ar7,r6
      000168 BE 08 00         [24] 1528 	cjne	r6,#0x08,00147$
      00016B                       1529 00147$:
      00016B 40 D0            [24] 1530 	jc	00114$
                           00016D  1531 	C$i2c.h$127$1$78 ==.
                                   1532 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1533 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1534 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1535 	mov	dpl,#0x39
      000175 80 21            [24] 1536 	sjmp	00116$
      000177                       1537 00107$:
                           000177  1538 	C$i2c.h$129$1$78 ==.
                                   1539 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1540 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1541 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1542 	mov	dpl,#0x2A
      00017F 80 17            [24] 1543 	sjmp	00116$
      000181                       1544 00109$:
                           000181  1545 	C$i2c.h$131$1$78 ==.
                                   1546 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1547 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1548 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1549 	mov	dpl,#0x30
      000189 80 0D            [24] 1550 	sjmp	00116$
      00018B                       1551 00111$:
                           00018B  1552 	C$i2c.h$133$1$78 ==.
                                   1553 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1554 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1555 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1556 	mov	dpl,#0x23
      000193 80 03            [24] 1557 	sjmp	00116$
      000195                       1558 00113$:
                           000195  1559 	C$i2c.h$135$1$78 ==.
                                   1560 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1561 	mov	dpl,#0xFF
      000198                       1562 00116$:
                           000198  1563 	C$i2c.h$136$1$78 ==.
                           000198  1564 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1565 	ret
                                   1566 ;------------------------------------------------------------
                                   1567 ;Allocation info for local variables in function 'kpd_input'
                                   1568 ;------------------------------------------------------------
                                   1569 ;mode                      Allocated to registers r7 
                                   1570 ;sum                       Allocated to registers r5 r6 
                                   1571 ;key                       Allocated to registers r3 
                                   1572 ;i                         Allocated to registers 
                                   1573 ;------------------------------------------------------------
                           000199  1574 	G$kpd_input$0$0 ==.
                           000199  1575 	C$i2c.h$148$1$78 ==.
                                   1576 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1577 ;	-----------------------------------------
                                   1578 ;	 function kpd_input
                                   1579 ;	-----------------------------------------
      000199                       1580 _kpd_input:
      000199 AF 82            [24] 1581 	mov	r7,dpl
                           00019B  1582 	C$i2c.h$153$1$81 ==.
                                   1583 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1584 	C$i2c.h$156$1$81 ==.
                                   1585 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1586 	clr	a
      00019C FD               [12] 1587 	mov	r5,a
      00019D FE               [12] 1588 	mov	r6,a
      00019E EF               [12] 1589 	mov	a,r7
      00019F 70 1D            [24] 1590 	jnz	00102$
      0001A1 C0 06            [24] 1591 	push	ar6
      0001A3 C0 05            [24] 1592 	push	ar5
      0001A5 74r00            [12] 1593 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1594 	push	acc
      0001A9 74s00            [12] 1595 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1596 	push	acc
      0001AD 74 80            [12] 1597 	mov	a,#0x80
      0001AF C0 E0            [24] 1598 	push	acc
      0001B1 12r00r5C         [24] 1599 	lcall	_lcd_print
      0001B4 15 81            [12] 1600 	dec	sp
      0001B6 15 81            [12] 1601 	dec	sp
      0001B8 15 81            [12] 1602 	dec	sp
      0001BA D0 05            [24] 1603 	pop	ar5
      0001BC D0 06            [24] 1604 	pop	ar6
      0001BE                       1605 00102$:
                           0001BE  1606 	C$i2c.h$158$1$81 ==.
                                   1607 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1608 	push	ar6
      0001C0 C0 05            [24] 1609 	push	ar5
      0001C2 74 08            [12] 1610 	mov	a,#0x08
      0001C4 C0 E0            [24] 1611 	push	acc
      0001C6 E4               [12] 1612 	clr	a
      0001C7 C0 E0            [24] 1613 	push	acc
      0001C9 74 08            [12] 1614 	mov	a,#0x08
      0001CB C0 E0            [24] 1615 	push	acc
      0001CD E4               [12] 1616 	clr	a
      0001CE C0 E0            [24] 1617 	push	acc
      0001D0 74 08            [12] 1618 	mov	a,#0x08
      0001D2 C0 E0            [24] 1619 	push	acc
      0001D4 E4               [12] 1620 	clr	a
      0001D5 C0 E0            [24] 1621 	push	acc
      0001D7 74 08            [12] 1622 	mov	a,#0x08
      0001D9 C0 E0            [24] 1623 	push	acc
      0001DB E4               [12] 1624 	clr	a
      0001DC C0 E0            [24] 1625 	push	acc
      0001DE 74 08            [12] 1626 	mov	a,#0x08
      0001E0 C0 E0            [24] 1627 	push	acc
      0001E2 E4               [12] 1628 	clr	a
      0001E3 C0 E0            [24] 1629 	push	acc
      0001E5 74r16            [12] 1630 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1631 	push	acc
      0001E9 74s00            [12] 1632 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1633 	push	acc
      0001ED 74 80            [12] 1634 	mov	a,#0x80
      0001EF C0 E0            [24] 1635 	push	acc
      0001F1 12r00r5C         [24] 1636 	lcall	_lcd_print
      0001F4 E5 81            [12] 1637 	mov	a,sp
      0001F6 24 F3            [12] 1638 	add	a,#0xf3
      0001F8 F5 81            [12] 1639 	mov	sp,a
                           0001FA  1640 	C$i2c.h$160$1$81 ==.
                                   1641 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1642 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1643 	mov	b,#0x07
      000200 E4               [12] 1644 	clr	a
      000201 12r03r0D         [24] 1645 	lcall	_delay_time
      000204 D0 05            [24] 1646 	pop	ar5
      000206 D0 06            [24] 1647 	pop	ar6
                           000208  1648 	C$i2c.h$164$1$81 ==.
                                   1649 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1650 	mov	r7,#0x00
                           00020A  1651 	C$i2c.h$166$3$84 ==.
                                   1652 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1653 00104$:
      00020A C0 07            [24] 1654 	push	ar7
      00020C C0 06            [24] 1655 	push	ar6
      00020E C0 05            [24] 1656 	push	ar5
      000210 12r01r1A         [24] 1657 	lcall	_read_keypad
      000213 AC 82            [24] 1658 	mov	r4,dpl
      000215 D0 05            [24] 1659 	pop	ar5
      000217 D0 06            [24] 1660 	pop	ar6
      000219 D0 07            [24] 1661 	pop	ar7
      00021B 8C 03            [24] 1662 	mov	ar3,r4
      00021D BC FF 02         [24] 1663 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1664 	sjmp	00105$
      000222                       1665 00146$:
      000222 BB 2A 17         [24] 1666 	cjne	r3,#0x2A,00106$
      000225                       1667 00105$:
      000225 90 27 10         [24] 1668 	mov	dptr,#0x2710
      000228 E4               [12] 1669 	clr	a
      000229 F5 F0            [12] 1670 	mov	b,a
      00022B C0 07            [24] 1671 	push	ar7
      00022D C0 06            [24] 1672 	push	ar6
      00022F C0 05            [24] 1673 	push	ar5
      000231 12r03r0D         [24] 1674 	lcall	_delay_time
      000234 D0 05            [24] 1675 	pop	ar5
      000236 D0 06            [24] 1676 	pop	ar6
      000238 D0 07            [24] 1677 	pop	ar7
      00023A 80 CE            [24] 1678 	sjmp	00104$
      00023C                       1679 00106$:
                           00023C  1680 	C$i2c.h$167$2$82 ==.
                                   1681 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1682 	cjne	r3,#0x23,00114$
                           00023F  1683 	C$i2c.h$169$3$83 ==.
                                   1684 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1685 00107$:
      00023F C0 06            [24] 1686 	push	ar6
      000241 C0 05            [24] 1687 	push	ar5
      000243 12r01r1A         [24] 1688 	lcall	_read_keypad
      000246 AC 82            [24] 1689 	mov	r4,dpl
      000248 D0 05            [24] 1690 	pop	ar5
      00024A D0 06            [24] 1691 	pop	ar6
      00024C BC 23 13         [24] 1692 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1693 	mov	dptr,#0x2710
      000252 E4               [12] 1694 	clr	a
      000253 F5 F0            [12] 1695 	mov	b,a
      000255 C0 06            [24] 1696 	push	ar6
      000257 C0 05            [24] 1697 	push	ar5
      000259 12r03r0D         [24] 1698 	lcall	_delay_time
      00025C D0 05            [24] 1699 	pop	ar5
      00025E D0 06            [24] 1700 	pop	ar6
      000260 80 DD            [24] 1701 	sjmp	00107$
      000262                       1702 00109$:
                           000262  1703 	C$i2c.h$170$3$83 ==.
                                   1704 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1705 	mov	dpl,r5
      000264 8E 83            [24] 1706 	mov	dph,r6
      000266 02r03r0C         [24] 1707 	ljmp	00119$
      000269                       1708 00114$:
                           000269  1709 	C$i2c.h$174$3$84 ==.
                                   1710 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1711 	mov	a,r3
      00026A FA               [12] 1712 	mov	r2,a
      00026B 33               [12] 1713 	rlc	a
      00026C 95 E0            [12] 1714 	subb	a,acc
      00026E FC               [12] 1715 	mov	r4,a
      00026F C0 07            [24] 1716 	push	ar7
      000271 C0 06            [24] 1717 	push	ar6
      000273 C0 05            [24] 1718 	push	ar5
      000275 C0 04            [24] 1719 	push	ar4
      000277 C0 03            [24] 1720 	push	ar3
      000279 C0 02            [24] 1721 	push	ar2
      00027B C0 02            [24] 1722 	push	ar2
      00027D C0 04            [24] 1723 	push	ar4
      00027F 74r26            [12] 1724 	mov	a,#___str_2
      000281 C0 E0            [24] 1725 	push	acc
      000283 74s00            [12] 1726 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1727 	push	acc
      000287 74 80            [12] 1728 	mov	a,#0x80
      000289 C0 E0            [24] 1729 	push	acc
      00028B 12r00r5C         [24] 1730 	lcall	_lcd_print
      00028E E5 81            [12] 1731 	mov	a,sp
      000290 24 FB            [12] 1732 	add	a,#0xfb
      000292 F5 81            [12] 1733 	mov	sp,a
      000294 D0 02            [24] 1734 	pop	ar2
      000296 D0 03            [24] 1735 	pop	ar3
      000298 D0 04            [24] 1736 	pop	ar4
      00029A D0 05            [24] 1737 	pop	ar5
      00029C D0 06            [24] 1738 	pop	ar6
                           00029E  1739 	C$i2c.h$175$1$81 ==.
                                   1740 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1741 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1742 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1743 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1744 	push	ar4
      0002A7 C0 03            [24] 1745 	push	ar3
      0002A9 C0 02            [24] 1746 	push	ar2
      0002AB 12r00r00         [24] 1747 	lcall	__mulint
      0002AE A8 82            [24] 1748 	mov	r0,dpl
      0002B0 A9 83            [24] 1749 	mov	r1,dph
      0002B2 D0 02            [24] 1750 	pop	ar2
      0002B4 D0 03            [24] 1751 	pop	ar3
      0002B6 D0 04            [24] 1752 	pop	ar4
      0002B8 D0 07            [24] 1753 	pop	ar7
      0002BA EA               [12] 1754 	mov	a,r2
      0002BB 28               [12] 1755 	add	a,r0
      0002BC F8               [12] 1756 	mov	r0,a
      0002BD EC               [12] 1757 	mov	a,r4
      0002BE 39               [12] 1758 	addc	a,r1
      0002BF F9               [12] 1759 	mov	r1,a
      0002C0 E8               [12] 1760 	mov	a,r0
      0002C1 24 D0            [12] 1761 	add	a,#0xD0
      0002C3 FD               [12] 1762 	mov	r5,a
      0002C4 E9               [12] 1763 	mov	a,r1
      0002C5 34 FF            [12] 1764 	addc	a,#0xFF
      0002C7 FE               [12] 1765 	mov	r6,a
                           0002C8  1766 	C$i2c.h$176$3$84 ==.
                                   1767 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1768 00110$:
      0002C8 C0 07            [24] 1769 	push	ar7
      0002CA C0 06            [24] 1770 	push	ar6
      0002CC C0 05            [24] 1771 	push	ar5
      0002CE C0 03            [24] 1772 	push	ar3
      0002D0 12r01r1A         [24] 1773 	lcall	_read_keypad
      0002D3 AC 82            [24] 1774 	mov	r4,dpl
      0002D5 D0 03            [24] 1775 	pop	ar3
      0002D7 D0 05            [24] 1776 	pop	ar5
      0002D9 D0 06            [24] 1777 	pop	ar6
      0002DB D0 07            [24] 1778 	pop	ar7
      0002DD EC               [12] 1779 	mov	a,r4
      0002DE B5 03 1B         [24] 1780 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1781 	mov	dptr,#0x2710
      0002E4 E4               [12] 1782 	clr	a
      0002E5 F5 F0            [12] 1783 	mov	b,a
      0002E7 C0 07            [24] 1784 	push	ar7
      0002E9 C0 06            [24] 1785 	push	ar6
      0002EB C0 05            [24] 1786 	push	ar5
      0002ED C0 03            [24] 1787 	push	ar3
      0002EF 12r03r0D         [24] 1788 	lcall	_delay_time
      0002F2 D0 03            [24] 1789 	pop	ar3
      0002F4 D0 05            [24] 1790 	pop	ar5
      0002F6 D0 06            [24] 1791 	pop	ar6
      0002F8 D0 07            [24] 1792 	pop	ar7
      0002FA 80 CC            [24] 1793 	sjmp	00110$
      0002FC                       1794 00118$:
                           0002FC  1795 	C$i2c.h$164$1$81 ==.
                                   1796 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1797 	inc	r7
      0002FD C3               [12] 1798 	clr	c
      0002FE EF               [12] 1799 	mov	a,r7
      0002FF 64 80            [12] 1800 	xrl	a,#0x80
      000301 94 85            [12] 1801 	subb	a,#0x85
      000303 50 03            [24] 1802 	jnc	00155$
      000305 02r02r0A         [24] 1803 	ljmp	00104$
      000308                       1804 00155$:
                           000308  1805 	C$i2c.h$179$1$81 ==.
                                   1806 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1807 	mov	dpl,r5
      00030A 8E 83            [24] 1808 	mov	dph,r6
      00030C                       1809 00119$:
                           00030C  1810 	C$i2c.h$180$1$81 ==.
                           00030C  1811 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1812 	ret
                                   1813 ;------------------------------------------------------------
                                   1814 ;Allocation info for local variables in function 'delay_time'
                                   1815 ;------------------------------------------------------------
                                   1816 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1817 ;index                     Allocated to registers 
                                   1818 ;------------------------------------------------------------
                           00030D  1819 	G$delay_time$0$0 ==.
                           00030D  1820 	C$i2c.h$189$1$81 ==.
                                   1821 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1822 ;	-----------------------------------------
                                   1823 ;	 function delay_time
                                   1824 ;	-----------------------------------------
      00030D                       1825 _delay_time:
      00030D AC 82            [24] 1826 	mov	r4,dpl
      00030F AD 83            [24] 1827 	mov	r5,dph
      000311 AE F0            [24] 1828 	mov	r6,b
      000313 FF               [12] 1829 	mov	r7,a
                           000314  1830 	C$i2c.h$192$1$86 ==.
                                   1831 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1832 	mov	r0,#0x00
      000316 79 00            [12] 1833 	mov	r1,#0x00
      000318 7A 00            [12] 1834 	mov	r2,#0x00
      00031A 7B 00            [12] 1835 	mov	r3,#0x00
      00031C                       1836 00103$:
      00031C C3               [12] 1837 	clr	c
      00031D E8               [12] 1838 	mov	a,r0
      00031E 9C               [12] 1839 	subb	a,r4
      00031F E9               [12] 1840 	mov	a,r1
      000320 9D               [12] 1841 	subb	a,r5
      000321 EA               [12] 1842 	mov	a,r2
      000322 9E               [12] 1843 	subb	a,r6
      000323 EB               [12] 1844 	mov	a,r3
      000324 9F               [12] 1845 	subb	a,r7
      000325 50 0F            [24] 1846 	jnc	00105$
      000327 08               [12] 1847 	inc	r0
      000328 B8 00 09         [24] 1848 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1849 	inc	r1
      00032C B9 00 05         [24] 1850 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1851 	inc	r2
      000330 BA 00 E9         [24] 1852 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1853 	inc	r3
      000334                       1854 00115$:
      000334 80 E6            [24] 1855 	sjmp	00103$
      000336                       1856 00105$:
                           000336  1857 	C$i2c.h$193$1$86 ==.
                           000336  1858 	XG$delay_time$0$0 ==.
      000336 22               [24] 1859 	ret
                                   1860 ;------------------------------------------------------------
                                   1861 ;Allocation info for local variables in function 'i2c_start'
                                   1862 ;------------------------------------------------------------
                           000337  1863 	G$i2c_start$0$0 ==.
                           000337  1864 	C$i2c.h$196$1$86 ==.
                                   1865 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1866 ;	-----------------------------------------
                                   1867 ;	 function i2c_start
                                   1868 ;	-----------------------------------------
      000337                       1869 _i2c_start:
                           000337  1870 	C$i2c.h$198$1$88 ==.
                                   1871 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1872 00101$:
      000337 20 C7 FD         [24] 1873 	jb	_BUSY,00101$
                           00033A  1874 	C$i2c.h$199$1$88 ==.
                                   1875 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1876 	setb	_STA
                           00033C  1877 	C$i2c.h$200$1$88 ==.
                                   1878 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1879 00104$:
      00033C 30 C3 FD         [24] 1880 	jnb	_SI,00104$
                           00033F  1881 	C$i2c.h$201$1$88 ==.
                                   1882 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1883 	clr	_STA
                           000341  1884 	C$i2c.h$202$1$88 ==.
                                   1885 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1886 	clr	_SI
                           000343  1887 	C$i2c.h$203$1$88 ==.
                           000343  1888 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1889 	ret
                                   1890 ;------------------------------------------------------------
                                   1891 ;Allocation info for local variables in function 'i2c_write'
                                   1892 ;------------------------------------------------------------
                                   1893 ;output_data               Allocated to registers 
                                   1894 ;------------------------------------------------------------
                           000344  1895 	G$i2c_write$0$0 ==.
                           000344  1896 	C$i2c.h$206$1$88 ==.
                                   1897 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1898 ;	-----------------------------------------
                                   1899 ;	 function i2c_write
                                   1900 ;	-----------------------------------------
      000344                       1901 _i2c_write:
      000344 85 82 C2         [24] 1902 	mov	_SMB0DAT,dpl
                           000347  1903 	C$i2c.h$209$1$90 ==.
                                   1904 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1905 00101$:
                           000347  1906 	C$i2c.h$210$1$90 ==.
                                   1907 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1908 	jbc	_SI,00112$
      00034A 80 FB            [24] 1909 	sjmp	00101$
      00034C                       1910 00112$:
                           00034C  1911 	C$i2c.h$211$1$90 ==.
                           00034C  1912 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1913 	ret
                                   1914 ;------------------------------------------------------------
                                   1915 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1916 ;------------------------------------------------------------
                                   1917 ;output_data               Allocated to registers 
                                   1918 ;------------------------------------------------------------
                           00034D  1919 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1920 	C$i2c.h$214$1$90 ==.
                                   1921 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1922 ;	-----------------------------------------
                                   1923 ;	 function i2c_write_and_stop
                                   1924 ;	-----------------------------------------
      00034D                       1925 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1926 	mov	_SMB0DAT,dpl
                           000350  1927 	C$i2c.h$217$1$92 ==.
                                   1928 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1929 	setb	_STO
                           000352  1930 	C$i2c.h$218$1$92 ==.
                                   1931 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1932 00101$:
                           000352  1933 	C$i2c.h$219$1$92 ==.
                                   1934 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1935 	jbc	_SI,00112$
      000355 80 FB            [24] 1936 	sjmp	00101$
      000357                       1937 00112$:
                           000357  1938 	C$i2c.h$220$1$92 ==.
                           000357  1939 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1940 	ret
                                   1941 ;------------------------------------------------------------
                                   1942 ;Allocation info for local variables in function 'i2c_read'
                                   1943 ;------------------------------------------------------------
                                   1944 ;input_data                Allocated to registers 
                                   1945 ;------------------------------------------------------------
                           000358  1946 	G$i2c_read$0$0 ==.
                           000358  1947 	C$i2c.h$223$1$92 ==.
                                   1948 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   1949 ;	-----------------------------------------
                                   1950 ;	 function i2c_read
                                   1951 ;	-----------------------------------------
      000358                       1952 _i2c_read:
                           000358  1953 	C$i2c.h$226$1$94 ==.
                                   1954 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       1955 00101$:
      000358 30 C3 FD         [24] 1956 	jnb	_SI,00101$
                           00035B  1957 	C$i2c.h$227$1$94 ==.
                                   1958 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 1959 	mov	dpl,_SMB0DAT
                           00035E  1960 	C$i2c.h$228$1$94 ==.
                                   1961 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 1962 	clr	_SI
                           000360  1963 	C$i2c.h$229$1$94 ==.
                                   1964 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  1965 	C$i2c.h$230$1$94 ==.
                           000360  1966 	XG$i2c_read$0$0 ==.
      000360 22               [24] 1967 	ret
                                   1968 ;------------------------------------------------------------
                                   1969 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1970 ;------------------------------------------------------------
                                   1971 ;input_data                Allocated to registers r7 
                                   1972 ;------------------------------------------------------------
                           000361  1973 	G$i2c_read_and_stop$0$0 ==.
                           000361  1974 	C$i2c.h$233$1$94 ==.
                                   1975 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   1976 ;	-----------------------------------------
                                   1977 ;	 function i2c_read_and_stop
                                   1978 ;	-----------------------------------------
      000361                       1979 _i2c_read_and_stop:
                           000361  1980 	C$i2c.h$236$1$96 ==.
                                   1981 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       1982 00101$:
      000361 30 C3 FD         [24] 1983 	jnb	_SI,00101$
                           000364  1984 	C$i2c.h$237$1$96 ==.
                                   1985 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 1986 	mov	r7,_SMB0DAT
                           000366  1987 	C$i2c.h$238$1$96 ==.
                                   1988 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 1989 	clr	_SI
                           000368  1990 	C$i2c.h$239$1$96 ==.
                                   1991 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 1992 	setb	_STO
                           00036A  1993 	C$i2c.h$240$1$96 ==.
                                   1994 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       1995 00104$:
                           00036A  1996 	C$i2c.h$241$1$96 ==.
                                   1997 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 1998 	jbc	_SI,00122$
      00036D 80 FB            [24] 1999 	sjmp	00104$
      00036F                       2000 00122$:
                           00036F  2001 	C$i2c.h$242$1$96 ==.
                                   2002 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2003 	mov	dpl,r7
                           000371  2004 	C$i2c.h$243$1$96 ==.
                           000371  2005 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2006 	ret
                                   2007 ;------------------------------------------------------------
                                   2008 ;Allocation info for local variables in function 'i2c_write_data'
                                   2009 ;------------------------------------------------------------
                                   2010 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2011 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2012 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2013 ;addr                      Allocated to registers r7 
                                   2014 ;i                         Allocated to registers 
                                   2015 ;------------------------------------------------------------
                           000372  2016 	G$i2c_write_data$0$0 ==.
                           000372  2017 	C$i2c.h$246$1$96 ==.
                                   2018 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2019 ;	-----------------------------------------
                                   2020 ;	 function i2c_write_data
                                   2021 ;	-----------------------------------------
      000372                       2022 _i2c_write_data:
      000372 AF 82            [24] 2023 	mov	r7,dpl
                           000374  2024 	C$i2c.h$250$1$98 ==.
                                   2025 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2026 	push	ar7
      000376 12r03r37         [24] 2027 	lcall	_i2c_start
      000379 D0 07            [24] 2028 	pop	ar7
                           00037B  2029 	C$i2c.h$251$1$98 ==.
                                   2030 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2031 	mov	a,#0xFE
      00037D 5F               [12] 2032 	anl	a,r7
      00037E F5 82            [12] 2033 	mov	dpl,a
      000380 12r03r44         [24] 2034 	lcall	_i2c_write
                           000383  2035 	C$i2c.h$252$1$98 ==.
                                   2036 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2037 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2038 	lcall	_i2c_write
                           000389  2039 	C$i2c.h$253$1$98 ==.
                                   2040 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2041 	mov	r7,#0x00
      00038B                       2042 00103$:
      00038B AD*09            [24] 2043 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2044 	mov	r6,#0x00
      00038F 1D               [12] 2045 	dec	r5
      000390 BD FF 01         [24] 2046 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2047 	dec	r6
      000394                       2048 00114$:
      000394 8F 03            [24] 2049 	mov	ar3,r7
      000396 7C 00            [12] 2050 	mov	r4,#0x00
      000398 C3               [12] 2051 	clr	c
      000399 EB               [12] 2052 	mov	a,r3
      00039A 9D               [12] 2053 	subb	a,r5
      00039B EC               [12] 2054 	mov	a,r4
      00039C 64 80            [12] 2055 	xrl	a,#0x80
      00039E 8E F0            [24] 2056 	mov	b,r6
      0003A0 63 F0 80         [24] 2057 	xrl	b,#0x80
      0003A3 95 F0            [12] 2058 	subb	a,b
      0003A5 50 1F            [24] 2059 	jnc	00101$
                           0003A7  2060 	C$i2c.h$254$1$98 ==.
                                   2061 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2062 	mov	a,r7
      0003A8 25*06            [12] 2063 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2064 	mov	r4,a
      0003AB E4               [12] 2065 	clr	a
      0003AC 35*07            [12] 2066 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2067 	mov	r5,a
      0003AF AE*08            [24] 2068 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2069 	mov	dpl,r4
      0003B3 8D 83            [24] 2070 	mov	dph,r5
      0003B5 8E F0            [24] 2071 	mov	b,r6
      0003B7 12r00r00         [24] 2072 	lcall	__gptrget
      0003BA F5 82            [12] 2073 	mov	dpl,a
      0003BC C0 07            [24] 2074 	push	ar7
      0003BE 12r03r44         [24] 2075 	lcall	_i2c_write
      0003C1 D0 07            [24] 2076 	pop	ar7
                           0003C3  2077 	C$i2c.h$253$1$98 ==.
                                   2078 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2079 	inc	r7
      0003C4 80 C5            [24] 2080 	sjmp	00103$
      0003C6                       2081 00101$:
                           0003C6  2082 	C$i2c.h$255$1$98 ==.
                                   2083 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2084 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2085 	mov	r7,#0x00
      0003CA 1E               [12] 2086 	dec	r6
      0003CB BE FF 01         [24] 2087 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2088 	dec	r7
      0003CF                       2089 00116$:
      0003CF EE               [12] 2090 	mov	a,r6
      0003D0 25*06            [12] 2091 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2092 	mov	r6,a
      0003D3 EF               [12] 2093 	mov	a,r7
      0003D4 35*07            [12] 2094 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2095 	mov	r7,a
      0003D7 AD*08            [24] 2096 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2097 	mov	dpl,r6
      0003DB 8F 83            [24] 2098 	mov	dph,r7
      0003DD 8D F0            [24] 2099 	mov	b,r5
      0003DF 12r00r00         [24] 2100 	lcall	__gptrget
      0003E2 F5 82            [12] 2101 	mov	dpl,a
      0003E4 12r03r4D         [24] 2102 	lcall	_i2c_write_and_stop
                           0003E7  2103 	C$i2c.h$256$1$98 ==.
                           0003E7  2104 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2105 	ret
                                   2106 ;------------------------------------------------------------
                                   2107 ;Allocation info for local variables in function 'i2c_read_data'
                                   2108 ;------------------------------------------------------------
                                   2109 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2110 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2111 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2112 ;addr                      Allocated to registers r7 
                                   2113 ;j                         Allocated to registers 
                                   2114 ;------------------------------------------------------------
                           0003E8  2115 	G$i2c_read_data$0$0 ==.
                           0003E8  2116 	C$i2c.h$259$1$98 ==.
                                   2117 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2118 ;	-----------------------------------------
                                   2119 ;	 function i2c_read_data
                                   2120 ;	-----------------------------------------
      0003E8                       2121 _i2c_read_data:
      0003E8 AF 82            [24] 2122 	mov	r7,dpl
                           0003EA  2123 	C$i2c.h$262$1$100 ==.
                                   2124 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2125 	push	ar7
      0003EC 12r03r37         [24] 2126 	lcall	_i2c_start
      0003EF D0 07            [24] 2127 	pop	ar7
                           0003F1  2128 	C$i2c.h$263$1$100 ==.
                                   2129 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2130 	mov	ar6,r7
      0003F3 74 FE            [12] 2131 	mov	a,#0xFE
      0003F5 5E               [12] 2132 	anl	a,r6
      0003F6 F5 82            [12] 2133 	mov	dpl,a
      0003F8 C0 07            [24] 2134 	push	ar7
      0003FA 12r03r44         [24] 2135 	lcall	_i2c_write
                           0003FD  2136 	C$i2c.h$264$1$100 ==.
                                   2137 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2138 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2139 	lcall	_i2c_write_and_stop
                           000403  2140 	C$i2c.h$265$1$100 ==.
                                   2141 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2142 	lcall	_i2c_start
      000406 D0 07            [24] 2143 	pop	ar7
                           000408  2144 	C$i2c.h$266$1$100 ==.
                                   2145 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2146 	mov	a,#0x01
      00040A 4F               [12] 2147 	orl	a,r7
      00040B F5 82            [12] 2148 	mov	dpl,a
      00040D 12r03r44         [24] 2149 	lcall	_i2c_write
                           000410  2150 	C$i2c.h$267$1$100 ==.
                                   2151 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2152 	mov	r7,#0x00
      000412                       2153 00103$:
      000412 AD*0E            [24] 2154 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2155 	mov	r6,#0x00
      000416 1D               [12] 2156 	dec	r5
      000417 BD FF 01         [24] 2157 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2158 	dec	r6
      00041B                       2159 00114$:
      00041B 8F 03            [24] 2160 	mov	ar3,r7
      00041D 7C 00            [12] 2161 	mov	r4,#0x00
      00041F C3               [12] 2162 	clr	c
      000420 EB               [12] 2163 	mov	a,r3
      000421 9D               [12] 2164 	subb	a,r5
      000422 EC               [12] 2165 	mov	a,r4
      000423 64 80            [12] 2166 	xrl	a,#0x80
      000425 8E F0            [24] 2167 	mov	b,r6
      000427 63 F0 80         [24] 2168 	xrl	b,#0x80
      00042A 95 F0            [12] 2169 	subb	a,b
      00042C 50 2E            [24] 2170 	jnc	00101$
                           00042E  2171 	C$i2c.h$269$2$101 ==.
                                   2172 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2173 	setb	_AA
                           000430  2174 	C$i2c.h$270$2$101 ==.
                                   2175 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2176 	mov	a,r7
      000431 25*0B            [12] 2177 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2178 	mov	r4,a
      000434 E4               [12] 2179 	clr	a
      000435 35*0C            [12] 2180 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2181 	mov	r5,a
      000438 AE*0D            [24] 2182 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2183 	push	ar7
      00043C C0 06            [24] 2184 	push	ar6
      00043E C0 05            [24] 2185 	push	ar5
      000440 C0 04            [24] 2186 	push	ar4
      000442 12r03r58         [24] 2187 	lcall	_i2c_read
      000445 AB 82            [24] 2188 	mov	r3,dpl
      000447 D0 04            [24] 2189 	pop	ar4
      000449 D0 05            [24] 2190 	pop	ar5
      00044B D0 06            [24] 2191 	pop	ar6
      00044D D0 07            [24] 2192 	pop	ar7
      00044F 8C 82            [24] 2193 	mov	dpl,r4
      000451 8D 83            [24] 2194 	mov	dph,r5
      000453 8E F0            [24] 2195 	mov	b,r6
      000455 EB               [12] 2196 	mov	a,r3
      000456 12r00r00         [24] 2197 	lcall	__gptrput
                           000459  2198 	C$i2c.h$267$1$100 ==.
                                   2199 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2200 	inc	r7
      00045A 80 B6            [24] 2201 	sjmp	00103$
      00045C                       2202 00101$:
                           00045C  2203 	C$i2c.h$272$1$100 ==.
                                   2204 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2205 	clr	_AA
                           00045E  2206 	C$i2c.h$273$1$100 ==.
                                   2207 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2208 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2209 	mov	r7,#0x00
      000462 1E               [12] 2210 	dec	r6
      000463 BE FF 01         [24] 2211 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2212 	dec	r7
      000467                       2213 00116$:
      000467 EE               [12] 2214 	mov	a,r6
      000468 25*0B            [12] 2215 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2216 	mov	r6,a
      00046B EF               [12] 2217 	mov	a,r7
      00046C 35*0C            [12] 2218 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2219 	mov	r7,a
      00046F AD*0D            [24] 2220 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2221 	push	ar7
      000473 C0 06            [24] 2222 	push	ar6
      000475 C0 05            [24] 2223 	push	ar5
      000477 12r03r61         [24] 2224 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2225 	mov	r4,dpl
      00047C D0 05            [24] 2226 	pop	ar5
      00047E D0 06            [24] 2227 	pop	ar6
      000480 D0 07            [24] 2228 	pop	ar7
      000482 8E 82            [24] 2229 	mov	dpl,r6
      000484 8F 83            [24] 2230 	mov	dph,r7
      000486 8D F0            [24] 2231 	mov	b,r5
      000488 EC               [12] 2232 	mov	a,r4
      000489 12r00r00         [24] 2233 	lcall	__gptrput
                           00048C  2234 	C$i2c.h$274$1$100 ==.
                           00048C  2235 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2236 	ret
                                   2237 ;------------------------------------------------------------
                                   2238 ;Allocation info for local variables in function 'Accel_Init'
                                   2239 ;------------------------------------------------------------
                                   2240 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2241 ;------------------------------------------------------------
                           00048D  2242 	G$Accel_Init$0$0 ==.
                           00048D  2243 	C$i2c.h$283$1$100 ==.
                                   2244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2245 ;	-----------------------------------------
                                   2246 ;	 function Accel_Init
                                   2247 ;	-----------------------------------------
      00048D                       2248 _Accel_Init:
                           00048D  2249 	C$i2c.h$287$1$103 ==.
                                   2250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2251 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2252 	C$i2c.h$289$1$103 ==.
                                   2253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2254 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2255 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2256 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2257 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2258 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2259 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2260 	lcall	_i2c_write_data
                           0004A5  2261 	C$i2c.h$290$1$103 ==.
                                   2262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2263 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2264 	C$i2c.h$292$1$103 ==.
                                   2265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2266 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2267 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2268 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2269 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2270 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2271 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2272 	lcall	_i2c_write_data
                           0004BD  2273 	C$i2c.h$293$1$103 ==.
                                   2274 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2275 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2276 	C$i2c.h$294$1$103 ==.
                                   2277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2278 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2279 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2280 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2281 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2282 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2283 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2284 	lcall	_i2c_write_data
                           0004D5  2285 	C$i2c.h$298$1$103 ==.
                           0004D5  2286 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2287 	ret
                                   2288 ;------------------------------------------------------------
                                   2289 ;Allocation info for local variables in function 'main'
                                   2290 ;------------------------------------------------------------
                           0004D6  2291 	G$main$0$0 ==.
                           0004D6  2292 	C$MyLab4.c$35$1$103 ==.
                                   2293 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:35: void main(void)
                                   2294 ;	-----------------------------------------
                                   2295 ;	 function main
                                   2296 ;	-----------------------------------------
      0004D6                       2297 _main:
                           0004D6  2298 	C$MyLab4.c$37$1$115 ==.
                                   2299 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:37: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2300 	lcall	_Sys_Init
                           0004D9  2301 	C$MyLab4.c$38$1$115 ==.
                                   2302 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:38: Port_Init();    // Initialize ports 2 and 3 - XBR0 set to 0x05, UART0 & SMB
      0004D9 12r05rF8         [24] 2303 	lcall	_Port_Init
                           0004DC  2304 	C$MyLab4.c$39$1$115 ==.
                                   2305 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:39: Interrupt_Init();   // You may want to change XBR0 to match your SMB wiring
      0004DC 12r06r16         [24] 2306 	lcall	_Interrupt_Init
                           0004DF  2307 	C$MyLab4.c$40$1$115 ==.
                                   2308 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:40: PCA_Init();
      0004DF 12r06r1F         [24] 2309 	lcall	_PCA_Init
                           0004E2  2310 	C$MyLab4.c$41$1$115 ==.
                                   2311 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:41: SMB0_Init();
      0004E2 12r06r2C         [24] 2312 	lcall	_SMB0_Init
                           0004E5  2313 	C$MyLab4.c$42$1$115 ==.
                                   2314 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:42: ADC_Init();
      0004E5 12r07r81         [24] 2315 	lcall	_ADC_Init
                           0004E8  2316 	C$MyLab4.c$43$1$115 ==.
                                   2317 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:43: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2318 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2319 	lcall	_putchar
                           0004EE  2320 	C$MyLab4.c$44$1$115 ==.
                                   2321 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:44: printf("\nStart\r\n");
      0004EE 74r29            [12] 2322 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2323 	push	acc
      0004F2 74s00            [12] 2324 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2325 	push	acc
      0004F6 74 80            [12] 2326 	mov	a,#0x80
      0004F8 C0 E0            [24] 2327 	push	acc
      0004FA 12r00r00         [24] 2328 	lcall	_printf
      0004FD 15 81            [12] 2329 	dec	sp
      0004FF 15 81            [12] 2330 	dec	sp
      000501 15 81            [12] 2331 	dec	sp
                           000503  2332 	C$MyLab4.c$45$1$115 ==.
                                   2333 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:45: lcd_clear();
      000503 12r00rE1         [24] 2334 	lcall	_lcd_clear
                           000506  2335 	C$MyLab4.c$46$1$115 ==.
                                   2336 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:46: Counts = 0;
      000506 E4               [12] 2337 	clr	a
      000507 F5*10            [12] 2338 	mov	_Counts,a
      000509 F5*11            [12] 2339 	mov	(_Counts + 1),a
                           00050B  2340 	C$MyLab4.c$47$1$115 ==.
                                   2341 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:47: while (Counts < 1) printf("\r%u\n", nCounts); // Wait a long time (1s) for keypad & LCD to initialize
      00050B                       2342 00101$:
      00050B C3               [12] 2343 	clr	c
      00050C E5*10            [12] 2344 	mov	a,_Counts
      00050E 94 01            [12] 2345 	subb	a,#0x01
      000510 E5*11            [12] 2346 	mov	a,(_Counts + 1)
      000512 94 00            [12] 2347 	subb	a,#0x00
      000514 50 1B            [24] 2348 	jnc	00103$
      000516 C0*12            [24] 2349 	push	_nCounts
      000518 C0*13            [24] 2350 	push	(_nCounts + 1)
      00051A 74r32            [12] 2351 	mov	a,#___str_4
      00051C C0 E0            [24] 2352 	push	acc
      00051E 74s00            [12] 2353 	mov	a,#(___str_4 >> 8)
      000520 C0 E0            [24] 2354 	push	acc
      000522 74 80            [12] 2355 	mov	a,#0x80
      000524 C0 E0            [24] 2356 	push	acc
      000526 12r00r00         [24] 2357 	lcall	_printf
      000529 E5 81            [12] 2358 	mov	a,sp
      00052B 24 FB            [12] 2359 	add	a,#0xfb
      00052D F5 81            [12] 2360 	mov	sp,a
      00052F 80 DA            [24] 2361 	sjmp	00101$
      000531                       2362 00103$:
                           000531  2363 	C$MyLab4.c$48$1$115 ==.
                                   2364 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:48: lcd_clear();
      000531 12r00rE1         [24] 2365 	lcall	_lcd_clear
                           000534  2366 	C$MyLab4.c$49$1$115 ==.
                                   2367 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:49: printf("\rWe get this far\n");
      000534 74r37            [12] 2368 	mov	a,#___str_5
      000536 C0 E0            [24] 2369 	push	acc
      000538 74s00            [12] 2370 	mov	a,#(___str_5 >> 8)
      00053A C0 E0            [24] 2371 	push	acc
      00053C 74 80            [12] 2372 	mov	a,#0x80
      00053E C0 E0            [24] 2373 	push	acc
      000540 12r00r00         [24] 2374 	lcall	_printf
      000543 15 81            [12] 2375 	dec	sp
      000545 15 81            [12] 2376 	dec	sp
      000547 15 81            [12] 2377 	dec	sp
                           000549  2378 	C$MyLab4.c$50$1$115 ==.
                                   2379 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:50: Pick_Heading();
      000549 12r06rA9         [24] 2380 	lcall	_Pick_Heading
                           00054C  2381 	C$MyLab4.c$51$1$115 ==.
                                   2382 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:51: Pick_Compass_Gain();
      00054C 12r07r12         [24] 2383 	lcall	_Pick_Compass_Gain
                           00054F  2384 	C$MyLab4.c$52$1$115 ==.
                                   2385 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:52: while (1)
      00054F                       2386 00110$:
                           00054F  2387 	C$MyLab4.c$54$2$116 ==.
                                   2388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:54: AD_Result = read_AD_input(4);
      00054F 75 82 04         [24] 2389 	mov	dpl,#0x04
      000552 12r07r8B         [24] 2390 	lcall	_read_AD_input
                           000555  2391 	C$MyLab4.c$55$1$115 ==.
                                   2392 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:55: voltage = ((14.4/255)*AD_Result);
      000555 85 82*25         [24] 2393 	mov  _AD_Result,dpl
      000558 12r00r00         [24] 2394 	lcall	___uchar2fs
      00055B AC 82            [24] 2395 	mov	r4,dpl
      00055D AD 83            [24] 2396 	mov	r5,dph
      00055F AE F0            [24] 2397 	mov	r6,b
      000561 FF               [12] 2398 	mov	r7,a
      000562 C0 04            [24] 2399 	push	ar4
      000564 C0 05            [24] 2400 	push	ar5
      000566 C0 06            [24] 2401 	push	ar6
      000568 C0 07            [24] 2402 	push	ar7
      00056A 90 4D B4         [24] 2403 	mov	dptr,#0x4DB4
      00056D 75 F0 67         [24] 2404 	mov	b,#0x67
      000570 74 3D            [12] 2405 	mov	a,#0x3D
      000572 12r00r00         [24] 2406 	lcall	___fsmul
      000575 AC 82            [24] 2407 	mov	r4,dpl
      000577 AD 83            [24] 2408 	mov	r5,dph
      000579 AE F0            [24] 2409 	mov	r6,b
      00057B FF               [12] 2410 	mov	r7,a
      00057C E5 81            [12] 2411 	mov	a,sp
      00057E 24 FC            [12] 2412 	add	a,#0xfc
      000580 F5 81            [12] 2413 	mov	sp,a
      000582 8C 82            [24] 2414 	mov	dpl,r4
      000584 8D 83            [24] 2415 	mov	dph,r5
      000586 8E F0            [24] 2416 	mov	b,r6
      000588 EF               [12] 2417 	mov	a,r7
      000589 12r00r00         [24] 2418 	lcall	___fs2uchar
      00058C 85 82*26         [24] 2419 	mov	_voltage,dpl
                           00058F  2420 	C$MyLab4.c$56$2$116 ==.
                                   2421 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:56: if(delay>=5) 
      00058F C3               [12] 2422 	clr	c
      000590 E5*1E            [12] 2423 	mov	a,_delay
      000592 64 80            [12] 2424 	xrl	a,#0x80
      000594 94 85            [12] 2425 	subb	a,#0x85
      000596 40 1D            [24] 2426 	jc	00105$
                           000598  2427 	C$MyLab4.c$58$3$117 ==.
                                   2428 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:58: printf("\rBattery Voltage is %u\n", voltage);
      000598 AE*26            [24] 2429 	mov	r6,_voltage
      00059A 7F 00            [12] 2430 	mov	r7,#0x00
      00059C C0 06            [24] 2431 	push	ar6
      00059E C0 07            [24] 2432 	push	ar7
      0005A0 74r49            [12] 2433 	mov	a,#___str_6
      0005A2 C0 E0            [24] 2434 	push	acc
      0005A4 74s00            [12] 2435 	mov	a,#(___str_6 >> 8)
      0005A6 C0 E0            [24] 2436 	push	acc
      0005A8 74 80            [12] 2437 	mov	a,#0x80
      0005AA C0 E0            [24] 2438 	push	acc
      0005AC 12r00r00         [24] 2439 	lcall	_printf
      0005AF E5 81            [12] 2440 	mov	a,sp
      0005B1 24 FB            [12] 2441 	add	a,#0xfb
      0005B3 F5 81            [12] 2442 	mov	sp,a
      0005B5                       2443 00105$:
                           0005B5  2444 	C$MyLab4.c$60$2$116 ==.
                                   2445 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:60: if(new_heading && (delay >= 5))
      0005B5 E5*1F            [12] 2446 	mov	a,_new_heading
      0005B7 60 96            [24] 2447 	jz	00110$
      0005B9 C3               [12] 2448 	clr	c
      0005BA E5*1E            [12] 2449 	mov	a,_delay
      0005BC 64 80            [12] 2450 	xrl	a,#0x80
      0005BE 94 85            [12] 2451 	subb	a,#0x85
      0005C0 40 8D            [24] 2452 	jc	00110$
                           0005C2  2453 	C$MyLab4.c$62$3$118 ==.
                                   2454 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:62: heading = read_compass();
      0005C2 12r07r5B         [24] 2455 	lcall	_read_compass
                           0005C5  2456 	C$MyLab4.c$63$1$115 ==.
                                   2457 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:63: printf("\rThe current direction is %u\n", heading/10);
      0005C5 85 82*21         [24] 2458 	mov	_heading,dpl
      0005C8 85 83*22         [24] 2459 	mov	(_heading + 1),dph
      0005CB 75*00 0A         [24] 2460 	mov	__divsint_PARM_2,#0x0A
      0005CE 75*01 00         [24] 2461 	mov	(__divsint_PARM_2 + 1),#0x00
      0005D1 12r00r00         [24] 2462 	lcall	__divsint
      0005D4 AE 82            [24] 2463 	mov	r6,dpl
      0005D6 AF 83            [24] 2464 	mov	r7,dph
      0005D8 C0 06            [24] 2465 	push	ar6
      0005DA C0 07            [24] 2466 	push	ar7
      0005DC 74r61            [12] 2467 	mov	a,#___str_7
      0005DE C0 E0            [24] 2468 	push	acc
      0005E0 74s00            [12] 2469 	mov	a,#(___str_7 >> 8)
      0005E2 C0 E0            [24] 2470 	push	acc
      0005E4 74 80            [12] 2471 	mov	a,#0x80
      0005E6 C0 E0            [24] 2472 	push	acc
      0005E8 12r00r00         [24] 2473 	lcall	_printf
      0005EB E5 81            [12] 2474 	mov	a,sp
      0005ED 24 FB            [12] 2475 	add	a,#0xfb
      0005EF F5 81            [12] 2476 	mov	sp,a
                           0005F1  2477 	C$MyLab4.c$66$3$118 ==.
                                   2478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:66: new_heading = 0;
      0005F1 75*1F 00         [24] 2479 	mov	_new_heading,#0x00
      0005F4 02r05r4F         [24] 2480 	ljmp	00110$
                           0005F7  2481 	C$MyLab4.c$70$1$115 ==.
                           0005F7  2482 	XG$main$0$0 ==.
      0005F7 22               [24] 2483 	ret
                                   2484 ;------------------------------------------------------------
                                   2485 ;Allocation info for local variables in function 'Port_Init'
                                   2486 ;------------------------------------------------------------
                           0005F8  2487 	G$Port_Init$0$0 ==.
                           0005F8  2488 	C$MyLab4.c$73$1$115 ==.
                                   2489 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:73: void Port_Init(void)	
                                   2490 ;	-----------------------------------------
                                   2491 ;	 function Port_Init
                                   2492 ;	-----------------------------------------
      0005F8                       2493 _Port_Init:
                           0005F8  2494 	C$MyLab4.c$75$1$120 ==.
                                   2495 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:75: XBR0 = 0x27;    
      0005F8 75 E1 27         [24] 2496 	mov	_XBR0,#0x27
                           0005FB  2497 	C$MyLab4.c$76$1$120 ==.
                                   2498 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:76: P1MDOUT |= 0x01; //set output pin for CEX0 in push-pull mode
      0005FB 43 A5 01         [24] 2499 	orl	_P1MDOUT,#0x01
                           0005FE  2500 	C$MyLab4.c$77$1$120 ==.
                                   2501 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:77: P3MDOUT &= 0x7F; // set input pin for 3.7 to open-drain
      0005FE 53 A7 7F         [24] 2502 	anl	_P3MDOUT,#0x7F
                           000601  2503 	C$MyLab4.c$78$1$120 ==.
                                   2504 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:78: P3		|= ~0x7F;// set input pin for 3.7 to high impedence
      000601 AF B0            [24] 2505 	mov	r7,_P3
      000603 74 80            [12] 2506 	mov	a,#0x80
      000605 4F               [12] 2507 	orl	a,r7
      000606 F5 B0            [12] 2508 	mov	_P3,a
                           000608  2509 	C$MyLab4.c$79$1$120 ==.
                                   2510 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:79: P1MDIN 	&= 0xEF;// set pin 1.4 for analog input
      000608 53 BD EF         [24] 2511 	anl	_P1MDIN,#0xEF
                           00060B  2512 	C$MyLab4.c$80$1$120 ==.
                                   2513 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:80: P1MDOUT &= 0xEF;// set input pin for 1.3 to open-drain
      00060B 53 A5 EF         [24] 2514 	anl	_P1MDOUT,#0xEF
                           00060E  2515 	C$MyLab4.c$81$1$120 ==.
                                   2516 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:81: P1		|= ~0xEF;// set input pin for 1.3 to high impedence
      00060E AF 90            [24] 2517 	mov	r7,_P1
      000610 74 10            [12] 2518 	mov	a,#0x10
      000612 4F               [12] 2519 	orl	a,r7
      000613 F5 90            [12] 2520 	mov	_P1,a
                           000615  2521 	C$MyLab4.c$84$1$120 ==.
                           000615  2522 	XG$Port_Init$0$0 ==.
      000615 22               [24] 2523 	ret
                                   2524 ;------------------------------------------------------------
                                   2525 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2526 ;------------------------------------------------------------
                           000616  2527 	G$Interrupt_Init$0$0 ==.
                           000616  2528 	C$MyLab4.c$86$1$120 ==.
                                   2529 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:86: void Interrupt_Init(void)
                                   2530 ;	-----------------------------------------
                                   2531 ;	 function Interrupt_Init
                                   2532 ;	-----------------------------------------
      000616                       2533 _Interrupt_Init:
                           000616  2534 	C$MyLab4.c$88$1$122 ==.
                                   2535 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:88: IE |= 0x02;
      000616 43 A8 02         [24] 2536 	orl	_IE,#0x02
                           000619  2537 	C$MyLab4.c$89$1$122 ==.
                                   2538 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:89: EIE1 |= 0x08;
      000619 43 E6 08         [24] 2539 	orl	_EIE1,#0x08
                           00061C  2540 	C$MyLab4.c$90$1$122 ==.
                                   2541 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:90: EA = 1;
      00061C D2 AF            [12] 2542 	setb	_EA
                           00061E  2543 	C$MyLab4.c$91$1$122 ==.
                           00061E  2544 	XG$Interrupt_Init$0$0 ==.
      00061E 22               [24] 2545 	ret
                                   2546 ;------------------------------------------------------------
                                   2547 ;Allocation info for local variables in function 'PCA_Init'
                                   2548 ;------------------------------------------------------------
                           00061F  2549 	G$PCA_Init$0$0 ==.
                           00061F  2550 	C$MyLab4.c$93$1$122 ==.
                                   2551 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:93: void PCA_Init(void)
                                   2552 ;	-----------------------------------------
                                   2553 ;	 function PCA_Init
                                   2554 ;	-----------------------------------------
      00061F                       2555 _PCA_Init:
                           00061F  2556 	C$MyLab4.c$95$1$124 ==.
                                   2557 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:95: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      00061F 75 D9 81         [24] 2558 	mov	_PCA0MD,#0x81
                           000622  2559 	C$MyLab4.c$96$1$124 ==.
                                   2560 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:96: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      000622 75 DA C2         [24] 2561 	mov	_PCA0CPM0,#0xC2
                           000625  2562 	C$MyLab4.c$97$1$124 ==.
                                   2563 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:97: PCA0CPM2 = 0xC2;
      000625 75 DC C2         [24] 2564 	mov	_PCA0CPM2,#0xC2
                           000628  2565 	C$MyLab4.c$98$1$124 ==.
                                   2566 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:98: PCA0CN |= 0x40;     // enable PCA
      000628 43 D8 40         [24] 2567 	orl	_PCA0CN,#0x40
                           00062B  2568 	C$MyLab4.c$99$1$124 ==.
                           00062B  2569 	XG$PCA_Init$0$0 ==.
      00062B 22               [24] 2570 	ret
                                   2571 ;------------------------------------------------------------
                                   2572 ;Allocation info for local variables in function 'SMB0_Init'
                                   2573 ;------------------------------------------------------------
                           00062C  2574 	G$SMB0_Init$0$0 ==.
                           00062C  2575 	C$MyLab4.c$101$1$124 ==.
                                   2576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:101: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2577 ;	-----------------------------------------
                                   2578 ;	 function SMB0_Init
                                   2579 ;	-----------------------------------------
      00062C                       2580 _SMB0_Init:
                           00062C  2581 	C$MyLab4.c$103$1$126 ==.
                                   2582 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:103: SMB0CR = 0x93;      // Set SCL to 100KHz
      00062C 75 CF 93         [24] 2583 	mov	_SMB0CR,#0x93
                           00062F  2584 	C$MyLab4.c$104$1$126 ==.
                                   2585 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:104: ENSMB = 1;          // Enable SMBUS0
      00062F D2 C6            [12] 2586 	setb	_ENSMB
                           000631  2587 	C$MyLab4.c$105$1$126 ==.
                           000631  2588 	XG$SMB0_Init$0$0 ==.
      000631 22               [24] 2589 	ret
                                   2590 ;------------------------------------------------------------
                                   2591 ;Allocation info for local variables in function 'PCA_ISR'
                                   2592 ;------------------------------------------------------------
                           000632  2593 	G$PCA_ISR$0$0 ==.
                           000632  2594 	C$MyLab4.c$107$1$126 ==.
                                   2595 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:107: void PCA_ISR(void) __interrupt 9
                                   2596 ;	-----------------------------------------
                                   2597 ;	 function PCA_ISR
                                   2598 ;	-----------------------------------------
      000632                       2599 _PCA_ISR:
      000632 C0 E0            [24] 2600 	push	acc
      000634 C0 F0            [24] 2601 	push	b
      000636 C0 D0            [24] 2602 	push	psw
                           000638  2603 	C$MyLab4.c$109$1$128 ==.
                                   2604 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:109: if (CF)
                           000638  2605 	C$MyLab4.c$111$2$129 ==.
                                   2606 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:111: CF = 0;                     // clear the interrupt flag
      000638 10 DF 02         [24] 2607 	jbc	_CF,00129$
      00063B 80 62            [24] 2608 	sjmp	00110$
      00063D                       2609 00129$:
                           00063D  2610 	C$MyLab4.c$112$2$129 ==.
                                   2611 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:112: nOverflows++;               // continuous overflow counter
      00063D 05*14            [12] 2612 	inc	_nOverflows
      00063F E4               [12] 2613 	clr	a
      000640 B5*14 02         [24] 2614 	cjne	a,_nOverflows,00130$
      000643 05*15            [12] 2615 	inc	(_nOverflows + 1)
      000645                       2616 00130$:
                           000645  2617 	C$MyLab4.c$113$2$129 ==.
                                   2618 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:113: nCounts++;
      000645 05*12            [12] 2619 	inc	_nCounts
      000647 E4               [12] 2620 	clr	a
      000648 B5*12 02         [24] 2621 	cjne	a,_nCounts,00131$
      00064B 05*13            [12] 2622 	inc	(_nCounts + 1)
      00064D                       2623 00131$:
                           00064D  2624 	C$MyLab4.c$114$2$129 ==.
                                   2625 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:114: PCA0 = PCA_START;
      00064D 75 E9 00         [24] 2626 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000650 75 F9 70         [24] 2627 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000653  2628 	C$MyLab4.c$115$2$129 ==.
                                   2629 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:115: if (nCounts > 50)
      000653 C3               [12] 2630 	clr	c
      000654 74 32            [12] 2631 	mov	a,#0x32
      000656 95*12            [12] 2632 	subb	a,_nCounts
      000658 E4               [12] 2633 	clr	a
      000659 95*13            [12] 2634 	subb	a,(_nCounts + 1)
      00065B 50 0C            [24] 2635 	jnc	00102$
                           00065D  2636 	C$MyLab4.c$117$3$130 ==.
                                   2637 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:117: nCounts = 0;
      00065D E4               [12] 2638 	clr	a
      00065E F5*12            [12] 2639 	mov	_nCounts,a
      000660 F5*13            [12] 2640 	mov	(_nCounts + 1),a
                           000662  2641 	C$MyLab4.c$118$3$130 ==.
                                   2642 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:118: Counts++;               // seconds counter
      000662 05*10            [12] 2643 	inc	_Counts
                                   2644 ;	genFromRTrack removed	clr	a
      000664 B5*10 02         [24] 2645 	cjne	a,_Counts,00133$
      000667 05*11            [12] 2646 	inc	(_Counts + 1)
      000669                       2647 00133$:
      000669                       2648 00102$:
                           000669  2649 	C$MyLab4.c$120$2$129 ==.
                                   2650 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:120: h_count++;
      000669 05*1C            [12] 2651 	inc	_h_count
                           00066B  2652 	C$MyLab4.c$121$2$129 ==.
                                   2653 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:121: if (h_count>=2)
      00066B C3               [12] 2654 	clr	c
      00066C E5*1C            [12] 2655 	mov	a,_h_count
      00066E 64 80            [12] 2656 	xrl	a,#0x80
      000670 94 82            [12] 2657 	subb	a,#0x82
      000672 40 06            [24] 2658 	jc	00104$
                           000674  2659 	C$MyLab4.c$123$3$131 ==.
                                   2660 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:123: new_heading=1;
      000674 75*1F 01         [24] 2661 	mov	_new_heading,#0x01
                           000677  2662 	C$MyLab4.c$124$3$131 ==.
                                   2663 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:124: h_count = 0;
      000677 75*1C 00         [24] 2664 	mov	_h_count,#0x00
      00067A                       2665 00104$:
                           00067A  2666 	C$MyLab4.c$126$2$129 ==.
                                   2667 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:126: delay++;
      00067A 05*1E            [12] 2668 	inc	_delay
                           00067C  2669 	C$MyLab4.c$127$2$129 ==.
                                   2670 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:127: if(delay>5) delay=0;
      00067C C3               [12] 2671 	clr	c
      00067D 74 85            [12] 2672 	mov	a,#(0x05 ^ 0x80)
      00067F 85*1E F0         [24] 2673 	mov	b,_delay
      000682 63 F0 80         [24] 2674 	xrl	b,#0x80
      000685 95 F0            [12] 2675 	subb	a,b
      000687 50 03            [24] 2676 	jnc	00106$
      000689 75*1E 00         [24] 2677 	mov	_delay,#0x00
      00068C                       2678 00106$:
                           00068C  2679 	C$MyLab4.c$128$2$129 ==.
                                   2680 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:128: r_count++;
      00068C 05*1D            [12] 2681 	inc	_r_count
                           00068E  2682 	C$MyLab4.c$129$2$129 ==.
                                   2683 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:129: if (r_count>=4)
      00068E C3               [12] 2684 	clr	c
      00068F E5*1D            [12] 2685 	mov	a,_r_count
      000691 64 80            [12] 2686 	xrl	a,#0x80
      000693 94 84            [12] 2687 	subb	a,#0x84
      000695 40 0B            [24] 2688 	jc	00112$
                           000697  2689 	C$MyLab4.c$131$3$132 ==.
                                   2690 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:131: new_range = 1;
      000697 75*20 01         [24] 2691 	mov	_new_range,#0x01
                           00069A  2692 	C$MyLab4.c$132$3$132 ==.
                                   2693 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:132: r_count = 0;
      00069A 75*1D 00         [24] 2694 	mov	_r_count,#0x00
      00069D 80 03            [24] 2695 	sjmp	00112$
      00069F                       2696 00110$:
                           00069F  2697 	C$MyLab4.c$135$1$128 ==.
                                   2698 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:135: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      00069F 53 D8 C0         [24] 2699 	anl	_PCA0CN,#0xC0
      0006A2                       2700 00112$:
      0006A2 D0 D0            [24] 2701 	pop	psw
      0006A4 D0 F0            [24] 2702 	pop	b
      0006A6 D0 E0            [24] 2703 	pop	acc
                           0006A8  2704 	C$MyLab4.c$136$1$128 ==.
                           0006A8  2705 	XG$PCA_ISR$0$0 ==.
      0006A8 32               [24] 2706 	reti
                                   2707 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2708 ;	eliminated unneeded push/pop dpl
                                   2709 ;	eliminated unneeded push/pop dph
                                   2710 ;------------------------------------------------------------
                                   2711 ;Allocation info for local variables in function 'Pick_Heading'
                                   2712 ;------------------------------------------------------------
                                   2713 ;user_heading              Allocated to registers r6 r7 
                                   2714 ;------------------------------------------------------------
                           0006A9  2715 	G$Pick_Heading$0$0 ==.
                           0006A9  2716 	C$MyLab4.c$138$1$128 ==.
                                   2717 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:138: void Pick_Heading(void)
                                   2718 ;	-----------------------------------------
                                   2719 ;	 function Pick_Heading
                                   2720 ;	-----------------------------------------
      0006A9                       2721 _Pick_Heading:
                           0006A9  2722 	C$MyLab4.c$141$1$134 ==.
                                   2723 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:141: lcd_clear();
      0006A9 12r00rE1         [24] 2724 	lcall	_lcd_clear
                           0006AC  2725 	C$MyLab4.c$142$1$134 ==.
                                   2726 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:142: lcd_print("\rEnter desired heading for the compass.\n");
      0006AC 74r7F            [12] 2727 	mov	a,#___str_8
      0006AE C0 E0            [24] 2728 	push	acc
      0006B0 74s00            [12] 2729 	mov	a,#(___str_8 >> 8)
      0006B2 C0 E0            [24] 2730 	push	acc
      0006B4 74 80            [12] 2731 	mov	a,#0x80
      0006B6 C0 E0            [24] 2732 	push	acc
      0006B8 12r00r5C         [24] 2733 	lcall	_lcd_print
      0006BB 15 81            [12] 2734 	dec	sp
      0006BD 15 81            [12] 2735 	dec	sp
      0006BF 15 81            [12] 2736 	dec	sp
                           0006C1  2737 	C$MyLab4.c$143$1$134 ==.
                                   2738 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:143: user_heading = kpd_input(1);
      0006C1 75 82 01         [24] 2739 	mov	dpl,#0x01
      0006C4 12r01r99         [24] 2740 	lcall	_kpd_input
      0006C7 AE 82            [24] 2741 	mov	r6,dpl
      0006C9 AF 83            [24] 2742 	mov	r7,dph
                           0006CB  2743 	C$MyLab4.c$144$1$134 ==.
                                   2744 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:144: while(user_heading > 3600) //Headings must be between 0 and 3600
      0006CB 8E 04            [24] 2745 	mov	ar4,r6
      0006CD 8F 05            [24] 2746 	mov	ar5,r7
      0006CF                       2747 00101$:
      0006CF C3               [12] 2748 	clr	c
      0006D0 74 10            [12] 2749 	mov	a,#0x10
      0006D2 9C               [12] 2750 	subb	a,r4
      0006D3 74 8E            [12] 2751 	mov	a,#(0x0E ^ 0x80)
      0006D5 8D F0            [24] 2752 	mov	b,r5
      0006D7 63 F0 80         [24] 2753 	xrl	b,#0x80
      0006DA 95 F0            [12] 2754 	subb	a,b
      0006DC 50 0A            [24] 2755 	jnc	00113$
                           0006DE  2756 	C$MyLab4.c$146$2$135 ==.
                                   2757 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:146: user_heading -= 3600;
      0006DE EC               [12] 2758 	mov	a,r4
      0006DF 24 F0            [12] 2759 	add	a,#0xF0
      0006E1 FC               [12] 2760 	mov	r4,a
      0006E2 ED               [12] 2761 	mov	a,r5
      0006E3 34 F1            [12] 2762 	addc	a,#0xF1
      0006E5 FD               [12] 2763 	mov	r5,a
                           0006E6  2764 	C$MyLab4.c$148$1$134 ==.
                                   2765 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:148: while(user_heading < 0)
      0006E6 80 E7            [24] 2766 	sjmp	00101$
      0006E8                       2767 00113$:
      0006E8 8C 06            [24] 2768 	mov	ar6,r4
      0006EA 8D 07            [24] 2769 	mov	ar7,r5
      0006EC 8E 04            [24] 2770 	mov	ar4,r6
      0006EE 8F 05            [24] 2771 	mov	ar5,r7
      0006F0                       2772 00104$:
      0006F0 ED               [12] 2773 	mov	a,r5
      0006F1 30 E7 0A         [24] 2774 	jnb	acc.7,00114$
                           0006F4  2775 	C$MyLab4.c$150$2$136 ==.
                                   2776 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:150: user_heading += 3600;
      0006F4 74 10            [12] 2777 	mov	a,#0x10
      0006F6 2C               [12] 2778 	add	a,r4
      0006F7 FC               [12] 2779 	mov	r4,a
      0006F8 74 0E            [12] 2780 	mov	a,#0x0E
      0006FA 3D               [12] 2781 	addc	a,r5
      0006FB FD               [12] 2782 	mov	r5,a
      0006FC 80 F2            [24] 2783 	sjmp	00104$
      0006FE                       2784 00114$:
      0006FE 8C 06            [24] 2785 	mov	ar6,r4
      000700 8D 07            [24] 2786 	mov	ar7,r5
                           000702  2787 	C$MyLab4.c$152$1$134 ==.
                                   2788 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:152: lcd_clear();
      000702 C0 07            [24] 2789 	push	ar7
      000704 C0 06            [24] 2790 	push	ar6
      000706 12r00rE1         [24] 2791 	lcall	_lcd_clear
      000709 D0 06            [24] 2792 	pop	ar6
      00070B D0 07            [24] 2793 	pop	ar7
                           00070D  2794 	C$MyLab4.c$153$1$134 ==.
                                   2795 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:153: desired_heading = user_heading;
      00070D 8E*16            [24] 2796 	mov	_desired_heading,r6
      00070F 8F*17            [24] 2797 	mov	(_desired_heading + 1),r7
                           000711  2798 	C$MyLab4.c$154$1$134 ==.
                           000711  2799 	XG$Pick_Heading$0$0 ==.
      000711 22               [24] 2800 	ret
                                   2801 ;------------------------------------------------------------
                                   2802 ;Allocation info for local variables in function 'Pick_Compass_Gain'
                                   2803 ;------------------------------------------------------------
                                   2804 ;user_gain                 Allocated to registers r6 r7 
                                   2805 ;------------------------------------------------------------
                           000712  2806 	G$Pick_Compass_Gain$0$0 ==.
                           000712  2807 	C$MyLab4.c$156$1$134 ==.
                                   2808 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:156: void Pick_Compass_Gain(void)
                                   2809 ;	-----------------------------------------
                                   2810 ;	 function Pick_Compass_Gain
                                   2811 ;	-----------------------------------------
      000712                       2812 _Pick_Compass_Gain:
                           000712  2813 	C$MyLab4.c$159$1$138 ==.
                                   2814 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:159: lcd_clear();
      000712 12r00rE1         [24] 2815 	lcall	_lcd_clear
                           000715  2816 	C$MyLab4.c$160$1$138 ==.
                                   2817 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:160: lcd_print("\rEnter desired gain for the compass.\n");
      000715 74rA8            [12] 2818 	mov	a,#___str_9
      000717 C0 E0            [24] 2819 	push	acc
      000719 74s00            [12] 2820 	mov	a,#(___str_9 >> 8)
      00071B C0 E0            [24] 2821 	push	acc
      00071D 74 80            [12] 2822 	mov	a,#0x80
      00071F C0 E0            [24] 2823 	push	acc
      000721 12r00r5C         [24] 2824 	lcall	_lcd_print
      000724 15 81            [12] 2825 	dec	sp
      000726 15 81            [12] 2826 	dec	sp
      000728 15 81            [12] 2827 	dec	sp
                           00072A  2828 	C$MyLab4.c$161$1$138 ==.
                                   2829 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:161: user_gain = kpd_input(1);
      00072A 75 82 01         [24] 2830 	mov	dpl,#0x01
      00072D 12r01r99         [24] 2831 	lcall	_kpd_input
      000730 AE 82            [24] 2832 	mov	r6,dpl
      000732 AF 83            [24] 2833 	mov	r7,dph
                           000734  2834 	C$MyLab4.c$162$1$138 ==.
                                   2835 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:162: lcd_clear();
      000734 C0 07            [24] 2836 	push	ar7
      000736 C0 06            [24] 2837 	push	ar6
      000738 12r00rE1         [24] 2838 	lcall	_lcd_clear
      00073B D0 06            [24] 2839 	pop	ar6
      00073D D0 07            [24] 2840 	pop	ar7
                           00073F  2841 	C$MyLab4.c$163$1$138 ==.
                                   2842 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:163: compass_gain = ((user_gain)/1000);
      00073F 75*00 E8         [24] 2843 	mov	__divsint_PARM_2,#0xE8
      000742 75*01 03         [24] 2844 	mov	(__divsint_PARM_2 + 1),#0x03
      000745 8E 82            [24] 2845 	mov	dpl,r6
      000747 8F 83            [24] 2846 	mov	dph,r7
      000749 12r00r00         [24] 2847 	lcall	__divsint
      00074C 12r00r00         [24] 2848 	lcall	___sint2fs
      00074F 85 82*18         [24] 2849 	mov	_compass_gain,dpl
      000752 85 83*19         [24] 2850 	mov	(_compass_gain + 1),dph
      000755 85 F0*1A         [24] 2851 	mov	(_compass_gain + 2),b
      000758 F5*1B            [12] 2852 	mov	(_compass_gain + 3),a
                           00075A  2853 	C$MyLab4.c$164$1$138 ==.
                           00075A  2854 	XG$Pick_Compass_Gain$0$0 ==.
      00075A 22               [24] 2855 	ret
                                   2856 ;------------------------------------------------------------
                                   2857 ;Allocation info for local variables in function 'read_compass'
                                   2858 ;------------------------------------------------------------
                                   2859 ;addr                      Allocated to registers 
                                   2860 ;Data                      Allocated with name '_read_compass_Data_1_140'
                                   2861 ;read_heading              Allocated to registers 
                                   2862 ;------------------------------------------------------------
                           00075B  2863 	G$read_compass$0$0 ==.
                           00075B  2864 	C$MyLab4.c$168$1$138 ==.
                                   2865 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:168: int read_compass(void)
                                   2866 ;	-----------------------------------------
                                   2867 ;	 function read_compass
                                   2868 ;	-----------------------------------------
      00075B                       2869 _read_compass:
                           00075B  2870 	C$MyLab4.c$173$1$140 ==.
                                   2871 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:173: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      00075B 75*0Br27         [24] 2872 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_140
      00075E 75*0C 00         [24] 2873 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000761 75*0D 40         [24] 2874 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000764 75*0A 02         [24] 2875 	mov	_i2c_read_data_PARM_2,#0x02
      000767 75*0E 02         [24] 2876 	mov	_i2c_read_data_PARM_4,#0x02
      00076A 75 82 C0         [24] 2877 	mov	dpl,#0xC0
      00076D 12r03rE8         [24] 2878 	lcall	_i2c_read_data
                           000770  2879 	C$MyLab4.c$174$1$140 ==.
                                   2880 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:174: read_heading =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      000770 AF*27            [24] 2881 	mov	r7,_read_compass_Data_1_140
      000772 7E 00            [12] 2882 	mov	r6,#0x00
      000774 AC*28            [24] 2883 	mov	r4,(_read_compass_Data_1_140 + 0x0001)
      000776 7D 00            [12] 2884 	mov	r5,#0x00
      000778 EC               [12] 2885 	mov	a,r4
      000779 4E               [12] 2886 	orl	a,r6
      00077A F5 82            [12] 2887 	mov	dpl,a
      00077C ED               [12] 2888 	mov	a,r5
      00077D 4F               [12] 2889 	orl	a,r7
      00077E F5 83            [12] 2890 	mov	dph,a
                           000780  2891 	C$MyLab4.c$175$1$140 ==.
                                   2892 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:175: return read_heading; // the heading returned in degrees between 0 and 3599
                           000780  2893 	C$MyLab4.c$176$1$140 ==.
                           000780  2894 	XG$read_compass$0$0 ==.
      000780 22               [24] 2895 	ret
                                   2896 ;------------------------------------------------------------
                                   2897 ;Allocation info for local variables in function 'ADC_Init'
                                   2898 ;------------------------------------------------------------
                           000781  2899 	G$ADC_Init$0$0 ==.
                           000781  2900 	C$MyLab4.c$181$1$140 ==.
                                   2901 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:181: void ADC_Init(void)
                                   2902 ;	-----------------------------------------
                                   2903 ;	 function ADC_Init
                                   2904 ;	-----------------------------------------
      000781                       2905 _ADC_Init:
                           000781  2906 	C$MyLab4.c$183$1$142 ==.
                                   2907 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:183: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000781 75 D1 03         [24] 2908 	mov	_REF0CN,#0x03
                           000784  2909 	C$MyLab4.c$184$1$142 ==.
                                   2910 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:184: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      000784 75 AA 80         [24] 2911 	mov	_ADC1CN,#0x80
                           000787  2912 	C$MyLab4.c$185$1$142 ==.
                                   2913 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:185: ADC1CF |= 0x01; // Set A/D converter gain to 1
      000787 43 AB 01         [24] 2914 	orl	_ADC1CF,#0x01
                           00078A  2915 	C$MyLab4.c$186$1$142 ==.
                           00078A  2916 	XG$ADC_Init$0$0 ==.
      00078A 22               [24] 2917 	ret
                                   2918 ;------------------------------------------------------------
                                   2919 ;Allocation info for local variables in function 'read_AD_input'
                                   2920 ;------------------------------------------------------------
                                   2921 ;n                         Allocated to registers 
                                   2922 ;------------------------------------------------------------
                           00078B  2923 	G$read_AD_input$0$0 ==.
                           00078B  2924 	C$MyLab4.c$190$1$142 ==.
                                   2925 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:190: unsigned char read_AD_input(unsigned char n)
                                   2926 ;	-----------------------------------------
                                   2927 ;	 function read_AD_input
                                   2928 ;	-----------------------------------------
      00078B                       2929 _read_AD_input:
      00078B 85 82 AC         [24] 2930 	mov	_AMX1SL,dpl
                           00078E  2931 	C$MyLab4.c$193$1$144 ==.
                                   2932 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:193: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      00078E AF AA            [24] 2933 	mov	r7,_ADC1CN
      000790 74 DF            [12] 2934 	mov	a,#0xDF
      000792 5F               [12] 2935 	anl	a,r7
      000793 F5 AA            [12] 2936 	mov	_ADC1CN,a
                           000795  2937 	C$MyLab4.c$194$1$144 ==.
                                   2938 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:194: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      000795 43 AA 10         [24] 2939 	orl	_ADC1CN,#0x10
                           000798  2940 	C$MyLab4.c$196$1$144 ==.
                                   2941 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:196: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      000798                       2942 00101$:
      000798 E5 AA            [12] 2943 	mov	a,_ADC1CN
      00079A 30 E5 FB         [24] 2944 	jnb	acc.5,00101$
                           00079D  2945 	C$MyLab4.c$198$1$144 ==.
                                   2946 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\MyLab4\MyLab4.c:198: return ADC1; // Return digital value in ADC1 register
      00079D 85 9C 82         [24] 2947 	mov	dpl,_ADC1
                           0007A0  2948 	C$MyLab4.c$199$1$144 ==.
                           0007A0  2949 	XG$read_AD_input$0$0 ==.
      0007A0 22               [24] 2950 	ret
                                   2951 	.area CSEG    (CODE)
                                   2952 	.area CONST   (CODE)
                           000000  2953 FMyLab4$__str_0$0$0 == .
      000000                       2954 ___str_0:
      000000 0A                    2955 	.db 0x0A
      000001 54 79 70 65 20 64 69  2956 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2957 	.db 0x00
                           000016  2958 FMyLab4$__str_1$0$0 == .
      000016                       2959 ___str_1:
      000016 20 20 20 20 20 25 63  2960 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2961 	.db 0x00
                           000026  2962 FMyLab4$__str_2$0$0 == .
      000026                       2963 ___str_2:
      000026 25 63                 2964 	.ascii "%c"
      000028 00                    2965 	.db 0x00
                           000029  2966 FMyLab4$__str_3$0$0 == .
      000029                       2967 ___str_3:
      000029 0A                    2968 	.db 0x0A
      00002A 53 74 61 72 74        2969 	.ascii "Start"
      00002F 0D                    2970 	.db 0x0D
      000030 0A                    2971 	.db 0x0A
      000031 00                    2972 	.db 0x00
                           000032  2973 FMyLab4$__str_4$0$0 == .
      000032                       2974 ___str_4:
      000032 0D                    2975 	.db 0x0D
      000033 25 75                 2976 	.ascii "%u"
      000035 0A                    2977 	.db 0x0A
      000036 00                    2978 	.db 0x00
                           000037  2979 FMyLab4$__str_5$0$0 == .
      000037                       2980 ___str_5:
      000037 0D                    2981 	.db 0x0D
      000038 57 65 20 67 65 74 20  2982 	.ascii "We get this far"
             74 68 69 73 20 66 61
             72
      000047 0A                    2983 	.db 0x0A
      000048 00                    2984 	.db 0x00
                           000049  2985 FMyLab4$__str_6$0$0 == .
      000049                       2986 ___str_6:
      000049 0D                    2987 	.db 0x0D
      00004A 42 61 74 74 65 72 79  2988 	.ascii "Battery Voltage is %u"
             20 56 6F 6C 74 61 67
             65 20 69 73 20 25 75
      00005F 0A                    2989 	.db 0x0A
      000060 00                    2990 	.db 0x00
                           000061  2991 FMyLab4$__str_7$0$0 == .
      000061                       2992 ___str_7:
      000061 0D                    2993 	.db 0x0D
      000062 54 68 65 20 63 75 72  2994 	.ascii "The current direction is %u"
             72 65 6E 74 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 20 25 75
      00007D 0A                    2995 	.db 0x0A
      00007E 00                    2996 	.db 0x00
                           00007F  2997 FMyLab4$__str_8$0$0 == .
      00007F                       2998 ___str_8:
      00007F 0D                    2999 	.db 0x0D
      000080 45 6E 74 65 72 20 64  3000 	.ascii "Enter desired heading for the compass."
             65 73 69 72 65 64 20
             68 65 61 64 69 6E 67
             20 66 6F 72 20 74 68
             65 20 63 6F 6D 70 61
             73 73 2E
      0000A6 0A                    3001 	.db 0x0A
      0000A7 00                    3002 	.db 0x00
                           0000A8  3003 FMyLab4$__str_9$0$0 == .
      0000A8                       3004 ___str_9:
      0000A8 0D                    3005 	.db 0x0D
      0000A9 45 6E 74 65 72 20 64  3006 	.ascii "Enter desired gain for the compass."
             65 73 69 72 65 64 20
             67 61 69 6E 20 66 6F
             72 20 74 68 65 20 63
             6F 6D 70 61 73 73 2E
      0000CC 0A                    3007 	.db 0x0A
      0000CD 00                    3008 	.db 0x00
                                   3009 	.area XINIT   (CODE)
                                   3010 	.area CABS    (ABS,CODE)
