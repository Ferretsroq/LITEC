                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri Apr 10 13:14:32 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab_4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _vsprintf
                                     16 	.globl _printf
                                     17 	.globl _Sys_Init
                                     18 	.globl _UART0_Init
                                     19 	.globl _SYSCLK_Init
                                     20 	.globl _RANGER_SWITCH
                                     21 	.globl _COMPASS_SWITCH
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _RANGER_PW
                                    308 	.globl _COMPASS_PW
                                    309 	.globl _heading_delay
                                    310 	.globl _desired_range
                                    311 	.globl _desired_heading
                                    312 	.globl _h_count
                                    313 	.globl _r_count
                                    314 	.globl _range
                                    315 	.globl _heading
                                    316 	.globl _new_range
                                    317 	.globl _new_heading
                                    318 	.globl _PCA_START
                                    319 	.globl _RANGER_MIN
                                    320 	.globl _RANGER_MAX
                                    321 	.globl _RANGER_CENTER
                                    322 	.globl _COMPASS_MIN
                                    323 	.globl _COMPASS_MAX
                                    324 	.globl _COMPASS_CENTER
                                    325 	.globl _i2c_read_data_PARM_4
                                    326 	.globl _i2c_read_data_PARM_3
                                    327 	.globl _i2c_read_data_PARM_2
                                    328 	.globl _i2c_write_data_PARM_4
                                    329 	.globl _i2c_write_data_PARM_3
                                    330 	.globl _i2c_write_data_PARM_2
                                    331 	.globl _lcd_print
                                    332 	.globl _lcd_clear
                                    333 	.globl _kpd_input
                                    334 	.globl _delay_time
                                    335 	.globl _i2c_start
                                    336 	.globl _i2c_write
                                    337 	.globl _i2c_write_and_stop
                                    338 	.globl _i2c_read
                                    339 	.globl _i2c_read_and_stop
                                    340 	.globl _i2c_write_data
                                    341 	.globl _i2c_read_data
                                    342 	.globl _Accel_Init
                                    343 	.globl _Port_Init
                                    344 	.globl _PCA_Init
                                    345 	.globl _PCA_ISR
                                    346 	.globl _SMB_Init
                                    347 	.globl _ADC_Init
                                    348 	.globl _Interrupt_Init
                                    349 	.globl _read_compass
                                    350 	.globl _set_servo_PWM
                                    351 	.globl _read_ranger
                                    352 	.globl _set_drive_PWM
                                    353 	.globl _pick_heading
                                    354 	.globl _servo_error
                                    355 	.globl _motor_error
                                    356 ;--------------------------------------------------------
                                    357 ; special function registers
                                    358 ;--------------------------------------------------------
                                    359 	.area RSEG    (ABS,DATA)
      000000                        360 	.org 0x0000
                           000080   361 G$P0$0$0 == 0x0080
                           000080   362 _P0	=	0x0080
                           000081   363 G$SP$0$0 == 0x0081
                           000081   364 _SP	=	0x0081
                           000082   365 G$DPL$0$0 == 0x0082
                           000082   366 _DPL	=	0x0082
                           000083   367 G$DPH$0$0 == 0x0083
                           000083   368 _DPH	=	0x0083
                           000084   369 G$P4$0$0 == 0x0084
                           000084   370 _P4	=	0x0084
                           000085   371 G$P5$0$0 == 0x0085
                           000085   372 _P5	=	0x0085
                           000086   373 G$P6$0$0 == 0x0086
                           000086   374 _P6	=	0x0086
                           000087   375 G$PCON$0$0 == 0x0087
                           000087   376 _PCON	=	0x0087
                           000088   377 G$TCON$0$0 == 0x0088
                           000088   378 _TCON	=	0x0088
                           000089   379 G$TMOD$0$0 == 0x0089
                           000089   380 _TMOD	=	0x0089
                           00008A   381 G$TL0$0$0 == 0x008a
                           00008A   382 _TL0	=	0x008a
                           00008B   383 G$TL1$0$0 == 0x008b
                           00008B   384 _TL1	=	0x008b
                           00008C   385 G$TH0$0$0 == 0x008c
                           00008C   386 _TH0	=	0x008c
                           00008D   387 G$TH1$0$0 == 0x008d
                           00008D   388 _TH1	=	0x008d
                           00008E   389 G$CKCON$0$0 == 0x008e
                           00008E   390 _CKCON	=	0x008e
                           00008F   391 G$PSCTL$0$0 == 0x008f
                           00008F   392 _PSCTL	=	0x008f
                           000090   393 G$P1$0$0 == 0x0090
                           000090   394 _P1	=	0x0090
                           000091   395 G$TMR3CN$0$0 == 0x0091
                           000091   396 _TMR3CN	=	0x0091
                           000092   397 G$TMR3RLL$0$0 == 0x0092
                           000092   398 _TMR3RLL	=	0x0092
                           000093   399 G$TMR3RLH$0$0 == 0x0093
                           000093   400 _TMR3RLH	=	0x0093
                           000094   401 G$TMR3L$0$0 == 0x0094
                           000094   402 _TMR3L	=	0x0094
                           000095   403 G$TMR3H$0$0 == 0x0095
                           000095   404 _TMR3H	=	0x0095
                           000096   405 G$P7$0$0 == 0x0096
                           000096   406 _P7	=	0x0096
                           000098   407 G$SCON$0$0 == 0x0098
                           000098   408 _SCON	=	0x0098
                           000098   409 G$SCON0$0$0 == 0x0098
                           000098   410 _SCON0	=	0x0098
                           000099   411 G$SBUF$0$0 == 0x0099
                           000099   412 _SBUF	=	0x0099
                           000099   413 G$SBUF0$0$0 == 0x0099
                           000099   414 _SBUF0	=	0x0099
                           00009A   415 G$SPI0CFG$0$0 == 0x009a
                           00009A   416 _SPI0CFG	=	0x009a
                           00009B   417 G$SPI0DAT$0$0 == 0x009b
                           00009B   418 _SPI0DAT	=	0x009b
                           00009C   419 G$ADC1$0$0 == 0x009c
                           00009C   420 _ADC1	=	0x009c
                           00009D   421 G$SPI0CKR$0$0 == 0x009d
                           00009D   422 _SPI0CKR	=	0x009d
                           00009E   423 G$CPT0CN$0$0 == 0x009e
                           00009E   424 _CPT0CN	=	0x009e
                           00009F   425 G$CPT1CN$0$0 == 0x009f
                           00009F   426 _CPT1CN	=	0x009f
                           0000A0   427 G$P2$0$0 == 0x00a0
                           0000A0   428 _P2	=	0x00a0
                           0000A1   429 G$EMI0TC$0$0 == 0x00a1
                           0000A1   430 _EMI0TC	=	0x00a1
                           0000A3   431 G$EMI0CF$0$0 == 0x00a3
                           0000A3   432 _EMI0CF	=	0x00a3
                           0000A4   433 G$PRT0CF$0$0 == 0x00a4
                           0000A4   434 _PRT0CF	=	0x00a4
                           0000A4   435 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   436 _P0MDOUT	=	0x00a4
                           0000A5   437 G$PRT1CF$0$0 == 0x00a5
                           0000A5   438 _PRT1CF	=	0x00a5
                           0000A5   439 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   440 _P1MDOUT	=	0x00a5
                           0000A6   441 G$PRT2CF$0$0 == 0x00a6
                           0000A6   442 _PRT2CF	=	0x00a6
                           0000A6   443 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   444 _P2MDOUT	=	0x00a6
                           0000A7   445 G$PRT3CF$0$0 == 0x00a7
                           0000A7   446 _PRT3CF	=	0x00a7
                           0000A7   447 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   448 _P3MDOUT	=	0x00a7
                           0000A8   449 G$IE$0$0 == 0x00a8
                           0000A8   450 _IE	=	0x00a8
                           0000A9   451 G$SADDR0$0$0 == 0x00a9
                           0000A9   452 _SADDR0	=	0x00a9
                           0000AA   453 G$ADC1CN$0$0 == 0x00aa
                           0000AA   454 _ADC1CN	=	0x00aa
                           0000AB   455 G$ADC1CF$0$0 == 0x00ab
                           0000AB   456 _ADC1CF	=	0x00ab
                           0000AC   457 G$AMX1SL$0$0 == 0x00ac
                           0000AC   458 _AMX1SL	=	0x00ac
                           0000AD   459 G$P3IF$0$0 == 0x00ad
                           0000AD   460 _P3IF	=	0x00ad
                           0000AE   461 G$SADEN1$0$0 == 0x00ae
                           0000AE   462 _SADEN1	=	0x00ae
                           0000AF   463 G$EMI0CN$0$0 == 0x00af
                           0000AF   464 _EMI0CN	=	0x00af
                           0000AF   465 G$_XPAGE$0$0 == 0x00af
                           0000AF   466 __XPAGE	=	0x00af
                           0000B0   467 G$P3$0$0 == 0x00b0
                           0000B0   468 _P3	=	0x00b0
                           0000B1   469 G$OSCXCN$0$0 == 0x00b1
                           0000B1   470 _OSCXCN	=	0x00b1
                           0000B2   471 G$OSCICN$0$0 == 0x00b2
                           0000B2   472 _OSCICN	=	0x00b2
                           0000B5   473 G$P74OUT$0$0 == 0x00b5
                           0000B5   474 _P74OUT	=	0x00b5
                           0000B6   475 G$FLSCL$0$0 == 0x00b6
                           0000B6   476 _FLSCL	=	0x00b6
                           0000B7   477 G$FLACL$0$0 == 0x00b7
                           0000B7   478 _FLACL	=	0x00b7
                           0000B8   479 G$IP$0$0 == 0x00b8
                           0000B8   480 _IP	=	0x00b8
                           0000B9   481 G$SADEN0$0$0 == 0x00b9
                           0000B9   482 _SADEN0	=	0x00b9
                           0000BA   483 G$AMX0CF$0$0 == 0x00ba
                           0000BA   484 _AMX0CF	=	0x00ba
                           0000BB   485 G$AMX0SL$0$0 == 0x00bb
                           0000BB   486 _AMX0SL	=	0x00bb
                           0000BC   487 G$ADC0CF$0$0 == 0x00bc
                           0000BC   488 _ADC0CF	=	0x00bc
                           0000BD   489 G$P1MDIN$0$0 == 0x00bd
                           0000BD   490 _P1MDIN	=	0x00bd
                           0000BE   491 G$ADC0L$0$0 == 0x00be
                           0000BE   492 _ADC0L	=	0x00be
                           0000BF   493 G$ADC0H$0$0 == 0x00bf
                           0000BF   494 _ADC0H	=	0x00bf
                           0000C0   495 G$SMB0CN$0$0 == 0x00c0
                           0000C0   496 _SMB0CN	=	0x00c0
                           0000C1   497 G$SMB0STA$0$0 == 0x00c1
                           0000C1   498 _SMB0STA	=	0x00c1
                           0000C2   499 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   500 _SMB0DAT	=	0x00c2
                           0000C3   501 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   502 _SMB0ADR	=	0x00c3
                           0000C4   503 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   504 _ADC0GTL	=	0x00c4
                           0000C5   505 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   506 _ADC0GTH	=	0x00c5
                           0000C6   507 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   508 _ADC0LTL	=	0x00c6
                           0000C7   509 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   510 _ADC0LTH	=	0x00c7
                           0000C8   511 G$T2CON$0$0 == 0x00c8
                           0000C8   512 _T2CON	=	0x00c8
                           0000C9   513 G$T4CON$0$0 == 0x00c9
                           0000C9   514 _T4CON	=	0x00c9
                           0000CA   515 G$RCAP2L$0$0 == 0x00ca
                           0000CA   516 _RCAP2L	=	0x00ca
                           0000CB   517 G$RCAP2H$0$0 == 0x00cb
                           0000CB   518 _RCAP2H	=	0x00cb
                           0000CC   519 G$TL2$0$0 == 0x00cc
                           0000CC   520 _TL2	=	0x00cc
                           0000CD   521 G$TH2$0$0 == 0x00cd
                           0000CD   522 _TH2	=	0x00cd
                           0000CF   523 G$SMB0CR$0$0 == 0x00cf
                           0000CF   524 _SMB0CR	=	0x00cf
                           0000D0   525 G$PSW$0$0 == 0x00d0
                           0000D0   526 _PSW	=	0x00d0
                           0000D1   527 G$REF0CN$0$0 == 0x00d1
                           0000D1   528 _REF0CN	=	0x00d1
                           0000D2   529 G$DAC0L$0$0 == 0x00d2
                           0000D2   530 _DAC0L	=	0x00d2
                           0000D3   531 G$DAC0H$0$0 == 0x00d3
                           0000D3   532 _DAC0H	=	0x00d3
                           0000D4   533 G$DAC0CN$0$0 == 0x00d4
                           0000D4   534 _DAC0CN	=	0x00d4
                           0000D5   535 G$DAC1L$0$0 == 0x00d5
                           0000D5   536 _DAC1L	=	0x00d5
                           0000D6   537 G$DAC1H$0$0 == 0x00d6
                           0000D6   538 _DAC1H	=	0x00d6
                           0000D7   539 G$DAC1CN$0$0 == 0x00d7
                           0000D7   540 _DAC1CN	=	0x00d7
                           0000D8   541 G$PCA0CN$0$0 == 0x00d8
                           0000D8   542 _PCA0CN	=	0x00d8
                           0000D9   543 G$PCA0MD$0$0 == 0x00d9
                           0000D9   544 _PCA0MD	=	0x00d9
                           0000DA   545 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   546 _PCA0CPM0	=	0x00da
                           0000DB   547 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   548 _PCA0CPM1	=	0x00db
                           0000DC   549 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   550 _PCA0CPM2	=	0x00dc
                           0000DD   551 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   552 _PCA0CPM3	=	0x00dd
                           0000DE   553 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   554 _PCA0CPM4	=	0x00de
                           0000E0   555 G$ACC$0$0 == 0x00e0
                           0000E0   556 _ACC	=	0x00e0
                           0000E1   557 G$XBR0$0$0 == 0x00e1
                           0000E1   558 _XBR0	=	0x00e1
                           0000E2   559 G$XBR1$0$0 == 0x00e2
                           0000E2   560 _XBR1	=	0x00e2
                           0000E3   561 G$XBR2$0$0 == 0x00e3
                           0000E3   562 _XBR2	=	0x00e3
                           0000E4   563 G$RCAP4L$0$0 == 0x00e4
                           0000E4   564 _RCAP4L	=	0x00e4
                           0000E5   565 G$RCAP4H$0$0 == 0x00e5
                           0000E5   566 _RCAP4H	=	0x00e5
                           0000E6   567 G$EIE1$0$0 == 0x00e6
                           0000E6   568 _EIE1	=	0x00e6
                           0000E7   569 G$EIE2$0$0 == 0x00e7
                           0000E7   570 _EIE2	=	0x00e7
                           0000E8   571 G$ADC0CN$0$0 == 0x00e8
                           0000E8   572 _ADC0CN	=	0x00e8
                           0000E9   573 G$PCA0L$0$0 == 0x00e9
                           0000E9   574 _PCA0L	=	0x00e9
                           0000EA   575 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   576 _PCA0CPL0	=	0x00ea
                           0000EB   577 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   578 _PCA0CPL1	=	0x00eb
                           0000EC   579 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   580 _PCA0CPL2	=	0x00ec
                           0000ED   581 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   582 _PCA0CPL3	=	0x00ed
                           0000EE   583 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   584 _PCA0CPL4	=	0x00ee
                           0000EF   585 G$RSTSRC$0$0 == 0x00ef
                           0000EF   586 _RSTSRC	=	0x00ef
                           0000F0   587 G$B$0$0 == 0x00f0
                           0000F0   588 _B	=	0x00f0
                           0000F1   589 G$SCON1$0$0 == 0x00f1
                           0000F1   590 _SCON1	=	0x00f1
                           0000F2   591 G$SBUF1$0$0 == 0x00f2
                           0000F2   592 _SBUF1	=	0x00f2
                           0000F3   593 G$SADDR1$0$0 == 0x00f3
                           0000F3   594 _SADDR1	=	0x00f3
                           0000F4   595 G$TL4$0$0 == 0x00f4
                           0000F4   596 _TL4	=	0x00f4
                           0000F5   597 G$TH4$0$0 == 0x00f5
                           0000F5   598 _TH4	=	0x00f5
                           0000F6   599 G$EIP1$0$0 == 0x00f6
                           0000F6   600 _EIP1	=	0x00f6
                           0000F7   601 G$EIP2$0$0 == 0x00f7
                           0000F7   602 _EIP2	=	0x00f7
                           0000F8   603 G$SPI0CN$0$0 == 0x00f8
                           0000F8   604 _SPI0CN	=	0x00f8
                           0000F9   605 G$PCA0H$0$0 == 0x00f9
                           0000F9   606 _PCA0H	=	0x00f9
                           0000FA   607 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   608 _PCA0CPH0	=	0x00fa
                           0000FB   609 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   610 _PCA0CPH1	=	0x00fb
                           0000FC   611 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   612 _PCA0CPH2	=	0x00fc
                           0000FD   613 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   614 _PCA0CPH3	=	0x00fd
                           0000FE   615 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   616 _PCA0CPH4	=	0x00fe
                           0000FF   617 G$WDTCN$0$0 == 0x00ff
                           0000FF   618 _WDTCN	=	0x00ff
                           008C8A   619 G$TMR0$0$0 == 0x8c8a
                           008C8A   620 _TMR0	=	0x8c8a
                           008D8B   621 G$TMR1$0$0 == 0x8d8b
                           008D8B   622 _TMR1	=	0x8d8b
                           00CDCC   623 G$TMR2$0$0 == 0xcdcc
                           00CDCC   624 _TMR2	=	0xcdcc
                           00CBCA   625 G$RCAP2$0$0 == 0xcbca
                           00CBCA   626 _RCAP2	=	0xcbca
                           009594   627 G$TMR3$0$0 == 0x9594
                           009594   628 _TMR3	=	0x9594
                           009392   629 G$TMR3RL$0$0 == 0x9392
                           009392   630 _TMR3RL	=	0x9392
                           00F5F4   631 G$TMR4$0$0 == 0xf5f4
                           00F5F4   632 _TMR4	=	0xf5f4
                           00E5E4   633 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   634 _RCAP4	=	0xe5e4
                           00BFBE   635 G$ADC0$0$0 == 0xbfbe
                           00BFBE   636 _ADC0	=	0xbfbe
                           00C5C4   637 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   638 _ADC0GT	=	0xc5c4
                           00C7C6   639 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   640 _ADC0LT	=	0xc7c6
                           00D3D2   641 G$DAC0$0$0 == 0xd3d2
                           00D3D2   642 _DAC0	=	0xd3d2
                           00D6D5   643 G$DAC1$0$0 == 0xd6d5
                           00D6D5   644 _DAC1	=	0xd6d5
                           00F9E9   645 G$PCA0$0$0 == 0xf9e9
                           00F9E9   646 _PCA0	=	0xf9e9
                           00FAEA   647 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   648 _PCA0CP0	=	0xfaea
                           00FBEB   649 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   650 _PCA0CP1	=	0xfbeb
                           00FCEC   651 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   652 _PCA0CP2	=	0xfcec
                           00FDED   653 G$PCA0CP3$0$0 == 0xfded
                           00FDED   654 _PCA0CP3	=	0xfded
                           00FEEE   655 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   656 _PCA0CP4	=	0xfeee
                                    657 ;--------------------------------------------------------
                                    658 ; special function bits
                                    659 ;--------------------------------------------------------
                                    660 	.area RSEG    (ABS,DATA)
      000000                        661 	.org 0x0000
                           000080   662 G$P0_0$0$0 == 0x0080
                           000080   663 _P0_0	=	0x0080
                           000081   664 G$P0_1$0$0 == 0x0081
                           000081   665 _P0_1	=	0x0081
                           000082   666 G$P0_2$0$0 == 0x0082
                           000082   667 _P0_2	=	0x0082
                           000083   668 G$P0_3$0$0 == 0x0083
                           000083   669 _P0_3	=	0x0083
                           000084   670 G$P0_4$0$0 == 0x0084
                           000084   671 _P0_4	=	0x0084
                           000085   672 G$P0_5$0$0 == 0x0085
                           000085   673 _P0_5	=	0x0085
                           000086   674 G$P0_6$0$0 == 0x0086
                           000086   675 _P0_6	=	0x0086
                           000087   676 G$P0_7$0$0 == 0x0087
                           000087   677 _P0_7	=	0x0087
                           000088   678 G$IT0$0$0 == 0x0088
                           000088   679 _IT0	=	0x0088
                           000089   680 G$IE0$0$0 == 0x0089
                           000089   681 _IE0	=	0x0089
                           00008A   682 G$IT1$0$0 == 0x008a
                           00008A   683 _IT1	=	0x008a
                           00008B   684 G$IE1$0$0 == 0x008b
                           00008B   685 _IE1	=	0x008b
                           00008C   686 G$TR0$0$0 == 0x008c
                           00008C   687 _TR0	=	0x008c
                           00008D   688 G$TF0$0$0 == 0x008d
                           00008D   689 _TF0	=	0x008d
                           00008E   690 G$TR1$0$0 == 0x008e
                           00008E   691 _TR1	=	0x008e
                           00008F   692 G$TF1$0$0 == 0x008f
                           00008F   693 _TF1	=	0x008f
                           000090   694 G$P1_0$0$0 == 0x0090
                           000090   695 _P1_0	=	0x0090
                           000091   696 G$P1_1$0$0 == 0x0091
                           000091   697 _P1_1	=	0x0091
                           000092   698 G$P1_2$0$0 == 0x0092
                           000092   699 _P1_2	=	0x0092
                           000093   700 G$P1_3$0$0 == 0x0093
                           000093   701 _P1_3	=	0x0093
                           000094   702 G$P1_4$0$0 == 0x0094
                           000094   703 _P1_4	=	0x0094
                           000095   704 G$P1_5$0$0 == 0x0095
                           000095   705 _P1_5	=	0x0095
                           000096   706 G$P1_6$0$0 == 0x0096
                           000096   707 _P1_6	=	0x0096
                           000097   708 G$P1_7$0$0 == 0x0097
                           000097   709 _P1_7	=	0x0097
                           000098   710 G$RI$0$0 == 0x0098
                           000098   711 _RI	=	0x0098
                           000098   712 G$RI0$0$0 == 0x0098
                           000098   713 _RI0	=	0x0098
                           000099   714 G$TI$0$0 == 0x0099
                           000099   715 _TI	=	0x0099
                           000099   716 G$TI0$0$0 == 0x0099
                           000099   717 _TI0	=	0x0099
                           00009A   718 G$RB8$0$0 == 0x009a
                           00009A   719 _RB8	=	0x009a
                           00009A   720 G$RB80$0$0 == 0x009a
                           00009A   721 _RB80	=	0x009a
                           00009B   722 G$TB8$0$0 == 0x009b
                           00009B   723 _TB8	=	0x009b
                           00009B   724 G$TB80$0$0 == 0x009b
                           00009B   725 _TB80	=	0x009b
                           00009C   726 G$REN$0$0 == 0x009c
                           00009C   727 _REN	=	0x009c
                           00009C   728 G$REN0$0$0 == 0x009c
                           00009C   729 _REN0	=	0x009c
                           00009D   730 G$SM2$0$0 == 0x009d
                           00009D   731 _SM2	=	0x009d
                           00009D   732 G$SM20$0$0 == 0x009d
                           00009D   733 _SM20	=	0x009d
                           00009D   734 G$MCE0$0$0 == 0x009d
                           00009D   735 _MCE0	=	0x009d
                           00009E   736 G$SM1$0$0 == 0x009e
                           00009E   737 _SM1	=	0x009e
                           00009E   738 G$SM10$0$0 == 0x009e
                           00009E   739 _SM10	=	0x009e
                           00009F   740 G$SM0$0$0 == 0x009f
                           00009F   741 _SM0	=	0x009f
                           00009F   742 G$SM00$0$0 == 0x009f
                           00009F   743 _SM00	=	0x009f
                           00009F   744 G$S0MODE$0$0 == 0x009f
                           00009F   745 _S0MODE	=	0x009f
                           0000A0   746 G$P2_0$0$0 == 0x00a0
                           0000A0   747 _P2_0	=	0x00a0
                           0000A1   748 G$P2_1$0$0 == 0x00a1
                           0000A1   749 _P2_1	=	0x00a1
                           0000A2   750 G$P2_2$0$0 == 0x00a2
                           0000A2   751 _P2_2	=	0x00a2
                           0000A3   752 G$P2_3$0$0 == 0x00a3
                           0000A3   753 _P2_3	=	0x00a3
                           0000A4   754 G$P2_4$0$0 == 0x00a4
                           0000A4   755 _P2_4	=	0x00a4
                           0000A5   756 G$P2_5$0$0 == 0x00a5
                           0000A5   757 _P2_5	=	0x00a5
                           0000A6   758 G$P2_6$0$0 == 0x00a6
                           0000A6   759 _P2_6	=	0x00a6
                           0000A7   760 G$P2_7$0$0 == 0x00a7
                           0000A7   761 _P2_7	=	0x00a7
                           0000A8   762 G$EX0$0$0 == 0x00a8
                           0000A8   763 _EX0	=	0x00a8
                           0000A9   764 G$ET0$0$0 == 0x00a9
                           0000A9   765 _ET0	=	0x00a9
                           0000AA   766 G$EX1$0$0 == 0x00aa
                           0000AA   767 _EX1	=	0x00aa
                           0000AB   768 G$ET1$0$0 == 0x00ab
                           0000AB   769 _ET1	=	0x00ab
                           0000AC   770 G$ES0$0$0 == 0x00ac
                           0000AC   771 _ES0	=	0x00ac
                           0000AC   772 G$ES$0$0 == 0x00ac
                           0000AC   773 _ES	=	0x00ac
                           0000AD   774 G$ET2$0$0 == 0x00ad
                           0000AD   775 _ET2	=	0x00ad
                           0000AF   776 G$EA$0$0 == 0x00af
                           0000AF   777 _EA	=	0x00af
                           0000B0   778 G$P3_0$0$0 == 0x00b0
                           0000B0   779 _P3_0	=	0x00b0
                           0000B1   780 G$P3_1$0$0 == 0x00b1
                           0000B1   781 _P3_1	=	0x00b1
                           0000B2   782 G$P3_2$0$0 == 0x00b2
                           0000B2   783 _P3_2	=	0x00b2
                           0000B3   784 G$P3_3$0$0 == 0x00b3
                           0000B3   785 _P3_3	=	0x00b3
                           0000B4   786 G$P3_4$0$0 == 0x00b4
                           0000B4   787 _P3_4	=	0x00b4
                           0000B5   788 G$P3_5$0$0 == 0x00b5
                           0000B5   789 _P3_5	=	0x00b5
                           0000B6   790 G$P3_6$0$0 == 0x00b6
                           0000B6   791 _P3_6	=	0x00b6
                           0000B7   792 G$P3_7$0$0 == 0x00b7
                           0000B7   793 _P3_7	=	0x00b7
                           0000B8   794 G$PX0$0$0 == 0x00b8
                           0000B8   795 _PX0	=	0x00b8
                           0000B9   796 G$PT0$0$0 == 0x00b9
                           0000B9   797 _PT0	=	0x00b9
                           0000BA   798 G$PX1$0$0 == 0x00ba
                           0000BA   799 _PX1	=	0x00ba
                           0000BB   800 G$PT1$0$0 == 0x00bb
                           0000BB   801 _PT1	=	0x00bb
                           0000BC   802 G$PS0$0$0 == 0x00bc
                           0000BC   803 _PS0	=	0x00bc
                           0000BC   804 G$PS$0$0 == 0x00bc
                           0000BC   805 _PS	=	0x00bc
                           0000BD   806 G$PT2$0$0 == 0x00bd
                           0000BD   807 _PT2	=	0x00bd
                           0000C0   808 G$SMBTOE$0$0 == 0x00c0
                           0000C0   809 _SMBTOE	=	0x00c0
                           0000C1   810 G$SMBFTE$0$0 == 0x00c1
                           0000C1   811 _SMBFTE	=	0x00c1
                           0000C2   812 G$AA$0$0 == 0x00c2
                           0000C2   813 _AA	=	0x00c2
                           0000C3   814 G$SI$0$0 == 0x00c3
                           0000C3   815 _SI	=	0x00c3
                           0000C4   816 G$STO$0$0 == 0x00c4
                           0000C4   817 _STO	=	0x00c4
                           0000C5   818 G$STA$0$0 == 0x00c5
                           0000C5   819 _STA	=	0x00c5
                           0000C6   820 G$ENSMB$0$0 == 0x00c6
                           0000C6   821 _ENSMB	=	0x00c6
                           0000C7   822 G$BUSY$0$0 == 0x00c7
                           0000C7   823 _BUSY	=	0x00c7
                           0000C8   824 G$CPRL2$0$0 == 0x00c8
                           0000C8   825 _CPRL2	=	0x00c8
                           0000C9   826 G$CT2$0$0 == 0x00c9
                           0000C9   827 _CT2	=	0x00c9
                           0000CA   828 G$TR2$0$0 == 0x00ca
                           0000CA   829 _TR2	=	0x00ca
                           0000CB   830 G$EXEN2$0$0 == 0x00cb
                           0000CB   831 _EXEN2	=	0x00cb
                           0000CC   832 G$TCLK$0$0 == 0x00cc
                           0000CC   833 _TCLK	=	0x00cc
                           0000CD   834 G$RCLK$0$0 == 0x00cd
                           0000CD   835 _RCLK	=	0x00cd
                           0000CE   836 G$EXF2$0$0 == 0x00ce
                           0000CE   837 _EXF2	=	0x00ce
                           0000CF   838 G$TF2$0$0 == 0x00cf
                           0000CF   839 _TF2	=	0x00cf
                           0000D0   840 G$P$0$0 == 0x00d0
                           0000D0   841 _P	=	0x00d0
                           0000D1   842 G$F1$0$0 == 0x00d1
                           0000D1   843 _F1	=	0x00d1
                           0000D2   844 G$OV$0$0 == 0x00d2
                           0000D2   845 _OV	=	0x00d2
                           0000D3   846 G$RS0$0$0 == 0x00d3
                           0000D3   847 _RS0	=	0x00d3
                           0000D4   848 G$RS1$0$0 == 0x00d4
                           0000D4   849 _RS1	=	0x00d4
                           0000D5   850 G$F0$0$0 == 0x00d5
                           0000D5   851 _F0	=	0x00d5
                           0000D6   852 G$AC$0$0 == 0x00d6
                           0000D6   853 _AC	=	0x00d6
                           0000D7   854 G$CY$0$0 == 0x00d7
                           0000D7   855 _CY	=	0x00d7
                           0000D8   856 G$CCF0$0$0 == 0x00d8
                           0000D8   857 _CCF0	=	0x00d8
                           0000D9   858 G$CCF1$0$0 == 0x00d9
                           0000D9   859 _CCF1	=	0x00d9
                           0000DA   860 G$CCF2$0$0 == 0x00da
                           0000DA   861 _CCF2	=	0x00da
                           0000DB   862 G$CCF3$0$0 == 0x00db
                           0000DB   863 _CCF3	=	0x00db
                           0000DC   864 G$CCF4$0$0 == 0x00dc
                           0000DC   865 _CCF4	=	0x00dc
                           0000DE   866 G$CR$0$0 == 0x00de
                           0000DE   867 _CR	=	0x00de
                           0000DF   868 G$CF$0$0 == 0x00df
                           0000DF   869 _CF	=	0x00df
                           0000E8   870 G$ADLJST$0$0 == 0x00e8
                           0000E8   871 _ADLJST	=	0x00e8
                           0000E8   872 G$AD0LJST$0$0 == 0x00e8
                           0000E8   873 _AD0LJST	=	0x00e8
                           0000E9   874 G$ADWINT$0$0 == 0x00e9
                           0000E9   875 _ADWINT	=	0x00e9
                           0000E9   876 G$AD0WINT$0$0 == 0x00e9
                           0000E9   877 _AD0WINT	=	0x00e9
                           0000EA   878 G$ADSTM0$0$0 == 0x00ea
                           0000EA   879 _ADSTM0	=	0x00ea
                           0000EA   880 G$AD0CM0$0$0 == 0x00ea
                           0000EA   881 _AD0CM0	=	0x00ea
                           0000EB   882 G$ADSTM1$0$0 == 0x00eb
                           0000EB   883 _ADSTM1	=	0x00eb
                           0000EB   884 G$AD0CM1$0$0 == 0x00eb
                           0000EB   885 _AD0CM1	=	0x00eb
                           0000EC   886 G$ADBUSY$0$0 == 0x00ec
                           0000EC   887 _ADBUSY	=	0x00ec
                           0000EC   888 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   889 _AD0BUSY	=	0x00ec
                           0000ED   890 G$ADCINT$0$0 == 0x00ed
                           0000ED   891 _ADCINT	=	0x00ed
                           0000ED   892 G$AD0INT$0$0 == 0x00ed
                           0000ED   893 _AD0INT	=	0x00ed
                           0000EE   894 G$ADCTM$0$0 == 0x00ee
                           0000EE   895 _ADCTM	=	0x00ee
                           0000EE   896 G$AD0TM$0$0 == 0x00ee
                           0000EE   897 _AD0TM	=	0x00ee
                           0000EF   898 G$ADCEN$0$0 == 0x00ef
                           0000EF   899 _ADCEN	=	0x00ef
                           0000EF   900 G$AD0EN$0$0 == 0x00ef
                           0000EF   901 _AD0EN	=	0x00ef
                           0000F8   902 G$SPIEN$0$0 == 0x00f8
                           0000F8   903 _SPIEN	=	0x00f8
                           0000F9   904 G$MSTEN$0$0 == 0x00f9
                           0000F9   905 _MSTEN	=	0x00f9
                           0000FA   906 G$SLVSEL$0$0 == 0x00fa
                           0000FA   907 _SLVSEL	=	0x00fa
                           0000FB   908 G$TXBSY$0$0 == 0x00fb
                           0000FB   909 _TXBSY	=	0x00fb
                           0000FC   910 G$RXOVRN$0$0 == 0x00fc
                           0000FC   911 _RXOVRN	=	0x00fc
                           0000FD   912 G$MODF$0$0 == 0x00fd
                           0000FD   913 _MODF	=	0x00fd
                           0000FE   914 G$WCOL$0$0 == 0x00fe
                           0000FE   915 _WCOL	=	0x00fe
                           0000FF   916 G$SPIF$0$0 == 0x00ff
                           0000FF   917 _SPIF	=	0x00ff
                           0000C7   918 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   919 _BUS_BUSY	=	0x00c7
                           0000C6   920 G$BUS_EN$0$0 == 0x00c6
                           0000C6   921 _BUS_EN	=	0x00c6
                           0000C5   922 G$BUS_START$0$0 == 0x00c5
                           0000C5   923 _BUS_START	=	0x00c5
                           0000C4   924 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   925 _BUS_STOP	=	0x00c4
                           0000C3   926 G$BUS_INT$0$0 == 0x00c3
                           0000C3   927 _BUS_INT	=	0x00c3
                           0000C2   928 G$BUS_AA$0$0 == 0x00c2
                           0000C2   929 _BUS_AA	=	0x00c2
                           0000C1   930 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   931 _BUS_FTE	=	0x00c1
                           0000C0   932 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   933 _BUS_TOE	=	0x00c0
                           000083   934 G$BUS_SCL$0$0 == 0x0083
                           000083   935 _BUS_SCL	=	0x0083
                           0000B7   936 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   937 _COMPASS_SWITCH	=	0x00b7
                           0000B6   938 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   939 _RANGER_SWITCH	=	0x00b6
                                    940 ;--------------------------------------------------------
                                    941 ; overlayable register banks
                                    942 ;--------------------------------------------------------
                                    943 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        944 	.ds 8
                                    945 ;--------------------------------------------------------
                                    946 ; internal ram data
                                    947 ;--------------------------------------------------------
                                    948 	.area DSEG    (DATA)
                           000000   949 LLab_4.lcd_clear$NumBytes$1$77==.
      000000                        950 _lcd_clear_NumBytes_1_77:
      000000                        951 	.ds 1
                           000001   952 LLab_4.lcd_clear$Cmd$1$77==.
      000001                        953 _lcd_clear_Cmd_1_77:
      000001                        954 	.ds 2
                           000003   955 LLab_4.read_keypad$Data$1$78==.
      000003                        956 _read_keypad_Data_1_78:
      000003                        957 	.ds 2
                           000005   958 LLab_4.i2c_write_data$start_reg$1$97==.
      000005                        959 _i2c_write_data_PARM_2:
      000005                        960 	.ds 1
                           000006   961 LLab_4.i2c_write_data$buffer$1$97==.
      000006                        962 _i2c_write_data_PARM_3:
      000006                        963 	.ds 3
                           000009   964 LLab_4.i2c_write_data$num_bytes$1$97==.
      000009                        965 _i2c_write_data_PARM_4:
      000009                        966 	.ds 1
                           00000A   967 LLab_4.i2c_read_data$start_reg$1$99==.
      00000A                        968 _i2c_read_data_PARM_2:
      00000A                        969 	.ds 1
                           00000B   970 LLab_4.i2c_read_data$buffer$1$99==.
      00000B                        971 _i2c_read_data_PARM_3:
      00000B                        972 	.ds 3
                           00000E   973 LLab_4.i2c_read_data$num_bytes$1$99==.
      00000E                        974 _i2c_read_data_PARM_4:
      00000E                        975 	.ds 1
                           00000F   976 LLab_4.Accel_Init$Data2$1$103==.
      00000F                        977 _Accel_Init_Data2_1_103:
      00000F                        978 	.ds 1
                           000010   979 G$COMPASS_CENTER$0$0==.
      000010                        980 _COMPASS_CENTER::
      000010                        981 	.ds 2
                           000012   982 G$COMPASS_MAX$0$0==.
      000012                        983 _COMPASS_MAX::
      000012                        984 	.ds 2
                           000014   985 G$COMPASS_MIN$0$0==.
      000014                        986 _COMPASS_MIN::
      000014                        987 	.ds 2
                           000016   988 G$RANGER_CENTER$0$0==.
      000016                        989 _RANGER_CENTER::
      000016                        990 	.ds 2
                           000018   991 G$RANGER_MAX$0$0==.
      000018                        992 _RANGER_MAX::
      000018                        993 	.ds 2
                           00001A   994 G$RANGER_MIN$0$0==.
      00001A                        995 _RANGER_MIN::
      00001A                        996 	.ds 2
                           00001C   997 G$PCA_START$0$0==.
      00001C                        998 _PCA_START::
      00001C                        999 	.ds 2
                           00001E  1000 G$new_heading$0$0==.
      00001E                       1001 _new_heading::
      00001E                       1002 	.ds 1
                           00001F  1003 G$new_range$0$0==.
      00001F                       1004 _new_range::
      00001F                       1005 	.ds 1
                           000020  1006 G$heading$0$0==.
      000020                       1007 _heading::
      000020                       1008 	.ds 2
                           000022  1009 G$range$0$0==.
      000022                       1010 _range::
      000022                       1011 	.ds 2
                           000024  1012 G$r_count$0$0==.
      000024                       1013 _r_count::
      000024                       1014 	.ds 1
                           000025  1015 G$h_count$0$0==.
      000025                       1016 _h_count::
      000025                       1017 	.ds 1
                           000026  1018 G$desired_heading$0$0==.
      000026                       1019 _desired_heading::
      000026                       1020 	.ds 2
                           000028  1021 G$desired_range$0$0==.
      000028                       1022 _desired_range::
      000028                       1023 	.ds 2
                           00002A  1024 G$heading_delay$0$0==.
      00002A                       1025 _heading_delay::
      00002A                       1026 	.ds 1
                           00002B  1027 G$COMPASS_PW$0$0==.
      00002B                       1028 _COMPASS_PW::
      00002B                       1029 	.ds 2
                           00002D  1030 G$RANGER_PW$0$0==.
      00002D                       1031 _RANGER_PW::
      00002D                       1032 	.ds 2
                           00002F  1033 LLab_4.read_compass$Data$1$139==.
      00002F                       1034 _read_compass_Data_1_139:
      00002F                       1035 	.ds 2
                           000031  1036 LLab_4.read_ranger$Data$1$144==.
      000031                       1037 _read_ranger_Data_1_144:
      000031                       1038 	.ds 2
                                   1039 ;--------------------------------------------------------
                                   1040 ; overlayable items in internal ram 
                                   1041 ;--------------------------------------------------------
                                   1042 	.area	OSEG    (OVR,DATA)
                                   1043 	.area	OSEG    (OVR,DATA)
                                   1044 	.area	OSEG    (OVR,DATA)
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 	.area	OSEG    (OVR,DATA)
                                   1049 ;--------------------------------------------------------
                                   1050 ; Stack segment in internal ram 
                                   1051 ;--------------------------------------------------------
                                   1052 	.area	SSEG
      000000                       1053 __start__stack:
      000000                       1054 	.ds	1
                                   1055 
                                   1056 ;--------------------------------------------------------
                                   1057 ; indirectly addressable internal ram data
                                   1058 ;--------------------------------------------------------
                                   1059 	.area ISEG    (DATA)
                                   1060 ;--------------------------------------------------------
                                   1061 ; absolute internal ram data
                                   1062 ;--------------------------------------------------------
                                   1063 	.area IABS    (ABS,DATA)
                                   1064 	.area IABS    (ABS,DATA)
                                   1065 ;--------------------------------------------------------
                                   1066 ; bit data
                                   1067 ;--------------------------------------------------------
                                   1068 	.area BSEG    (BIT)
                                   1069 ;--------------------------------------------------------
                                   1070 ; paged external ram data
                                   1071 ;--------------------------------------------------------
                                   1072 	.area PSEG    (PAG,XDATA)
                                   1073 ;--------------------------------------------------------
                                   1074 ; external ram data
                                   1075 ;--------------------------------------------------------
                                   1076 	.area XSEG    (XDATA)
                           000000  1077 LLab_4.lcd_print$text$1$73==.
      000000                       1078 _lcd_print_text_1_73:
      000000                       1079 	.ds 80
                                   1080 ;--------------------------------------------------------
                                   1081 ; absolute external ram data
                                   1082 ;--------------------------------------------------------
                                   1083 	.area XABS    (ABS,XDATA)
                                   1084 ;--------------------------------------------------------
                                   1085 ; external initialized ram data
                                   1086 ;--------------------------------------------------------
                                   1087 	.area XISEG   (XDATA)
                                   1088 	.area HOME    (CODE)
                                   1089 	.area GSINIT0 (CODE)
                                   1090 	.area GSINIT1 (CODE)
                                   1091 	.area GSINIT2 (CODE)
                                   1092 	.area GSINIT3 (CODE)
                                   1093 	.area GSINIT4 (CODE)
                                   1094 	.area GSINIT5 (CODE)
                                   1095 	.area GSINIT  (CODE)
                                   1096 	.area GSFINAL (CODE)
                                   1097 	.area CSEG    (CODE)
                                   1098 ;--------------------------------------------------------
                                   1099 ; interrupt vector 
                                   1100 ;--------------------------------------------------------
                                   1101 	.area HOME    (CODE)
      000000                       1102 __interrupt_vect:
      000000 02r00r00         [24] 1103 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1104 	reti
      000004                       1105 	.ds	7
      00000B 32               [24] 1106 	reti
      00000C                       1107 	.ds	7
      000013 32               [24] 1108 	reti
      000014                       1109 	.ds	7
      00001B 32               [24] 1110 	reti
      00001C                       1111 	.ds	7
      000023 32               [24] 1112 	reti
      000024                       1113 	.ds	7
      00002B 32               [24] 1114 	reti
      00002C                       1115 	.ds	7
      000033 32               [24] 1116 	reti
      000034                       1117 	.ds	7
      00003B 32               [24] 1118 	reti
      00003C                       1119 	.ds	7
      000043 32               [24] 1120 	reti
      000044                       1121 	.ds	7
      00004B 02r05r52         [24] 1122 	ljmp	_PCA_ISR
                                   1123 ;--------------------------------------------------------
                                   1124 ; global & static initialisations
                                   1125 ;--------------------------------------------------------
                                   1126 	.area HOME    (CODE)
                                   1127 	.area GSINIT  (CODE)
                                   1128 	.area GSFINAL (CODE)
                                   1129 	.area GSINIT  (CODE)
                                   1130 	.globl __sdcc_gsinit_startup
                                   1131 	.globl __sdcc_program_startup
                                   1132 	.globl __start__stack
                                   1133 	.globl __mcs51_genXINIT
                                   1134 	.globl __mcs51_genXRAMCLEAR
                                   1135 	.globl __mcs51_genRAMCLEAR
                           000000  1136 	C$Lab_4.c$36$1$153 ==.
                                   1137 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:36: unsigned int COMPASS_CENTER = 2760;
      000000 75*10 C8         [24] 1138 	mov	_COMPASS_CENTER,#0xC8
      000003 75*11 0A         [24] 1139 	mov	(_COMPASS_CENTER + 1),#0x0A
                           000006  1140 	C$Lab_4.c$37$1$153 ==.
                                   1141 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:37: unsigned int COMPASS_MAX = 3500;
      000006 75*12 AC         [24] 1142 	mov	_COMPASS_MAX,#0xAC
      000009 75*13 0D         [24] 1143 	mov	(_COMPASS_MAX + 1),#0x0D
                           00000C  1144 	C$Lab_4.c$38$1$153 ==.
                                   1145 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:38: unsigned int COMPASS_MIN = 2030;
      00000C 75*14 EE         [24] 1146 	mov	_COMPASS_MIN,#0xEE
      00000F 75*15 07         [24] 1147 	mov	(_COMPASS_MIN + 1),#0x07
                           000012  1148 	C$Lab_4.c$39$1$153 ==.
                                   1149 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:39: unsigned int RANGER_CENTER = 2760;
      000012 75*16 C8         [24] 1150 	mov	_RANGER_CENTER,#0xC8
      000015 75*17 0A         [24] 1151 	mov	(_RANGER_CENTER + 1),#0x0A
                           000018  1152 	C$Lab_4.c$40$1$153 ==.
                                   1153 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:40: unsigned int RANGER_MAX = 3500;
      000018 75*18 AC         [24] 1154 	mov	_RANGER_MAX,#0xAC
      00001B 75*19 0D         [24] 1155 	mov	(_RANGER_MAX + 1),#0x0D
                           00001E  1156 	C$Lab_4.c$41$1$153 ==.
                                   1157 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:41: unsigned int RANGER_MIN = 2030;
      00001E 75*1A EE         [24] 1158 	mov	_RANGER_MIN,#0xEE
      000021 75*1B 07         [24] 1159 	mov	(_RANGER_MIN + 1),#0x07
                           000024  1160 	C$Lab_4.c$42$1$153 ==.
                                   1161 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:42: unsigned int PCA_START = 28672;
      000024 75*1C 00         [24] 1162 	mov	_PCA_START,#0x00
      000027 75*1D 70         [24] 1163 	mov	(_PCA_START + 1),#0x70
                           00002A  1164 	C$Lab_4.c$43$1$153 ==.
                                   1165 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:43: unsigned char new_heading = 0; // flag for count of compass timing
      00002A 75*1E 00         [24] 1166 	mov	_new_heading,#0x00
                           00002D  1167 	C$Lab_4.c$44$1$153 ==.
                                   1168 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:44: unsigned char new_range = 0; // flag for count of ranger timing
      00002D 75*1F 00         [24] 1169 	mov	_new_range,#0x00
                                   1170 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1171 	ljmp	__sdcc_program_startup
                                   1172 ;--------------------------------------------------------
                                   1173 ; Home
                                   1174 ;--------------------------------------------------------
                                   1175 	.area HOME    (CODE)
                                   1176 	.area HOME    (CODE)
      00004E                       1177 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1178 	ljmp	_main
                                   1179 ;	return from main will return to caller
                                   1180 ;--------------------------------------------------------
                                   1181 ; code
                                   1182 ;--------------------------------------------------------
                                   1183 	.area CSEG    (CODE)
                                   1184 ;------------------------------------------------------------
                                   1185 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1186 ;------------------------------------------------------------
                                   1187 ;i                         Allocated to registers 
                                   1188 ;------------------------------------------------------------
                           000000  1189 	G$SYSCLK_Init$0$0 ==.
                           000000  1190 	C$c8051_SDCC.h$42$0$0 ==.
                                   1191 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1192 ;	-----------------------------------------
                                   1193 ;	 function SYSCLK_Init
                                   1194 ;	-----------------------------------------
      000000                       1195 _SYSCLK_Init:
                           000007  1196 	ar7 = 0x07
                           000006  1197 	ar6 = 0x06
                           000005  1198 	ar5 = 0x05
                           000004  1199 	ar4 = 0x04
                           000003  1200 	ar3 = 0x03
                           000002  1201 	ar2 = 0x02
                           000001  1202 	ar1 = 0x01
                           000000  1203 	ar0 = 0x00
                           000000  1204 	C$c8051_SDCC.h$46$1$2 ==.
                                   1205 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1206 	mov	_OSCXCN,#0x67
                           000003  1207 	C$c8051_SDCC.h$49$1$2 ==.
                                   1208 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1209 	mov	r6,#0x00
      000005 7F 01            [12] 1210 	mov	r7,#0x01
      000007                       1211 00107$:
      000007 1E               [12] 1212 	dec	r6
      000008 BE FF 01         [24] 1213 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1214 	dec	r7
      00000C                       1215 00121$:
      00000C EE               [12] 1216 	mov	a,r6
      00000D 4F               [12] 1217 	orl	a,r7
      00000E 70 F7            [24] 1218 	jnz	00107$
                           000010  1219 	C$c8051_SDCC.h$51$1$2 ==.
                                   1220 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1221 00102$:
      000010 E5 B1            [12] 1222 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1223 	jnb	acc.7,00102$
                           000015  1224 	C$c8051_SDCC.h$53$1$2 ==.
                                   1225 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1226 	mov	_OSCICN,#0x88
                           000018  1227 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1228 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1229 	ret
                                   1230 ;------------------------------------------------------------
                                   1231 ;Allocation info for local variables in function 'UART0_Init'
                                   1232 ;------------------------------------------------------------
                           000019  1233 	G$UART0_Init$0$0 ==.
                           000019  1234 	C$c8051_SDCC.h$64$1$2 ==.
                                   1235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function UART0_Init
                                   1238 ;	-----------------------------------------
      000019                       1239 _UART0_Init:
                           000019  1240 	C$c8051_SDCC.h$66$1$4 ==.
                                   1241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1242 	mov	_SCON0,#0x50
                           00001C  1243 	C$c8051_SDCC.h$67$1$4 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1245 	mov	_TMOD,#0x20
                           00001F  1246 	C$c8051_SDCC.h$68$1$4 ==.
                                   1247 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1248 	mov	_TH1,#0xDC
                           000022  1249 	C$c8051_SDCC.h$69$1$4 ==.
                                   1250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1251 	setb	_TR1
                           000024  1252 	C$c8051_SDCC.h$70$1$4 ==.
                                   1253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1254 	orl	_CKCON,#0x10
                           000027  1255 	C$c8051_SDCC.h$71$1$4 ==.
                                   1256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1257 	orl	_PCON,#0x80
                           00002A  1258 	C$c8051_SDCC.h$73$1$4 ==.
                                   1259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1260 	setb	_TI0
                           00002C  1261 	C$c8051_SDCC.h$74$1$4 ==.
                                   1262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1263 	orl	_P0MDOUT,#0x01
                           00002F  1264 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1265 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1266 	ret
                                   1267 ;------------------------------------------------------------
                                   1268 ;Allocation info for local variables in function 'Sys_Init'
                                   1269 ;------------------------------------------------------------
                           000030  1270 	G$Sys_Init$0$0 ==.
                           000030  1271 	C$c8051_SDCC.h$83$1$4 ==.
                                   1272 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function Sys_Init
                                   1275 ;	-----------------------------------------
      000030                       1276 _Sys_Init:
                           000030  1277 	C$c8051_SDCC.h$85$1$6 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1279 	mov	_WDTCN,#0xDE
                           000033  1280 	C$c8051_SDCC.h$86$1$6 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1282 	mov	_WDTCN,#0xAD
                           000036  1283 	C$c8051_SDCC.h$88$1$6 ==.
                                   1284 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1285 	lcall	_SYSCLK_Init
                           000039  1286 	C$c8051_SDCC.h$89$1$6 ==.
                                   1287 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1288 	lcall	_UART0_Init
                           00003C  1289 	C$c8051_SDCC.h$91$1$6 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1291 	orl	_XBR0,#0x04
                           00003F  1292 	C$c8051_SDCC.h$92$1$6 ==.
                                   1293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1294 	orl	_XBR2,#0x40
                           000042  1295 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1296 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1297 	ret
                                   1298 ;------------------------------------------------------------
                                   1299 ;Allocation info for local variables in function 'putchar'
                                   1300 ;------------------------------------------------------------
                                   1301 ;c                         Allocated to registers r7 
                                   1302 ;------------------------------------------------------------
                           000043  1303 	G$putchar$0$0 ==.
                           000043  1304 	C$c8051_SDCC.h$98$1$6 ==.
                                   1305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1306 ;	-----------------------------------------
                                   1307 ;	 function putchar
                                   1308 ;	-----------------------------------------
      000043                       1309 _putchar:
      000043 AF 82            [24] 1310 	mov	r7,dpl
                           000045  1311 	C$c8051_SDCC.h$100$1$8 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1313 00101$:
                           000045  1314 	C$c8051_SDCC.h$101$1$8 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1316 	jbc	_TI0,00112$
      000048 80 FB            [24] 1317 	sjmp	00101$
      00004A                       1318 00112$:
                           00004A  1319 	C$c8051_SDCC.h$102$1$8 ==.
                                   1320 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1321 	mov	_SBUF0,r7
                           00004C  1322 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1323 	XG$putchar$0$0 ==.
      00004C 22               [24] 1324 	ret
                                   1325 ;------------------------------------------------------------
                                   1326 ;Allocation info for local variables in function 'getchar'
                                   1327 ;------------------------------------------------------------
                                   1328 ;c                         Allocated to registers 
                                   1329 ;------------------------------------------------------------
                           00004D  1330 	G$getchar$0$0 ==.
                           00004D  1331 	C$c8051_SDCC.h$108$1$8 ==.
                                   1332 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1333 ;	-----------------------------------------
                                   1334 ;	 function getchar
                                   1335 ;	-----------------------------------------
      00004D                       1336 _getchar:
                           00004D  1337 	C$c8051_SDCC.h$111$1$10 ==.
                                   1338 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1339 00101$:
                           00004D  1340 	C$c8051_SDCC.h$112$1$10 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1342 	jbc	_RI0,00112$
      000050 80 FB            [24] 1343 	sjmp	00101$
      000052                       1344 00112$:
                           000052  1345 	C$c8051_SDCC.h$113$1$10 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1347 	mov	dpl,_SBUF0
                           000055  1348 	C$c8051_SDCC.h$114$1$10 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1350 	lcall	_putchar
                           000058  1351 	C$c8051_SDCC.h$115$1$10 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1353 	mov	dpl,_SBUF0
                           00005B  1354 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1355 	XG$getchar$0$0 ==.
      00005B 22               [24] 1356 	ret
                                   1357 ;------------------------------------------------------------
                                   1358 ;Allocation info for local variables in function 'lcd_print'
                                   1359 ;------------------------------------------------------------
                                   1360 ;fmt                       Allocated to stack - _bp -5
                                   1361 ;len                       Allocated to registers r6 
                                   1362 ;i                         Allocated to registers 
                                   1363 ;ap                        Allocated to registers 
                                   1364 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1365 ;------------------------------------------------------------
                           00005C  1366 	G$lcd_print$0$0 ==.
                           00005C  1367 	C$i2c.h$81$1$10 ==.
                                   1368 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1369 ;	-----------------------------------------
                                   1370 ;	 function lcd_print
                                   1371 ;	-----------------------------------------
      00005C                       1372 _lcd_print:
      00005C C0*00            [24] 1373 	push	_bp
      00005E 85 81*00         [24] 1374 	mov	_bp,sp
                           000061  1375 	C$i2c.h$87$1$73 ==.
                                   1376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1377 	mov	a,_bp
      000063 24 FB            [12] 1378 	add	a,#0xfb
      000065 F8               [12] 1379 	mov	r0,a
      000066 86 82            [24] 1380 	mov	dpl,@r0
      000068 08               [12] 1381 	inc	r0
      000069 86 83            [24] 1382 	mov	dph,@r0
      00006B 08               [12] 1383 	inc	r0
      00006C 86 F0            [24] 1384 	mov	b,@r0
      00006E 12r00r00         [24] 1385 	lcall	_strlen
      000071 E5 82            [12] 1386 	mov	a,dpl
      000073 85 83 F0         [24] 1387 	mov	b,dph
      000076 45 F0            [12] 1388 	orl	a,b
      000078 70 02            [24] 1389 	jnz	00102$
      00007A 80 62            [24] 1390 	sjmp	00109$
      00007C                       1391 00102$:
                           00007C  1392 	C$i2c.h$89$2$74 ==.
                                   1393 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1394 	mov	a,_bp
      00007E 24 FB            [12] 1395 	add	a,#0xFB
      000080 FF               [12] 1396 	mov	r7,a
      000081 8F*00            [24] 1397 	mov	_vsprintf_PARM_3,r7
                           000083  1398 	C$i2c.h$90$1$73 ==.
                                   1399 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1400 	mov	a,_bp
      000085 24 FB            [12] 1401 	add	a,#0xfb
      000087 F8               [12] 1402 	mov	r0,a
      000088 86*00            [24] 1403 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1404 	inc	r0
      00008B 86*01            [24] 1405 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1406 	inc	r0
      00008E 86*02            [24] 1407 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1408 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1409 	mov	b,#0x00
      000096 12r00r00         [24] 1410 	lcall	_vsprintf
                           000099  1411 	C$i2c.h$93$1$73 ==.
                                   1412 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1413 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1414 	mov	b,#0x00
      00009F 12r00r00         [24] 1415 	lcall	_strlen
      0000A2 AE 82            [24] 1416 	mov	r6,dpl
                           0000A4  1417 	C$i2c.h$94$1$73 ==.
                                   1418 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1419 	mov	r7,#0x00
      0000A6                       1420 00107$:
      0000A6 C3               [12] 1421 	clr	c
      0000A7 EF               [12] 1422 	mov	a,r7
      0000A8 9E               [12] 1423 	subb	a,r6
      0000A9 50 1F            [24] 1424 	jnc	00105$
                           0000AB  1425 	C$i2c.h$96$2$76 ==.
                                   1426 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1427 	mov	a,r7
      0000AC 24r00            [12] 1428 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1429 	mov	dpl,a
      0000B0 E4               [12] 1430 	clr	a
      0000B1 34s00            [12] 1431 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1432 	mov	dph,a
      0000B5 E0               [24] 1433 	movx	a,@dptr
      0000B6 FD               [12] 1434 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1435 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1436 	mov	a,r7
      0000BB 24r00            [12] 1437 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1438 	mov	dpl,a
      0000BF E4               [12] 1439 	clr	a
      0000C0 34s00            [12] 1440 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1441 	mov	dph,a
      0000C4 74 0D            [12] 1442 	mov	a,#0x0D
      0000C6 F0               [24] 1443 	movx	@dptr,a
      0000C7                       1444 00108$:
                           0000C7  1445 	C$i2c.h$94$1$73 ==.
                                   1446 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1447 	inc	r7
      0000C8 80 DC            [24] 1448 	sjmp	00107$
      0000CA                       1449 00105$:
                           0000CA  1450 	C$i2c.h$99$1$73 ==.
                                   1451 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1452 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1453 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1454 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1455 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1456 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1457 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1458 	lcall	_i2c_write_data
      0000DE                       1459 00109$:
      0000DE D0*00            [24] 1460 	pop	_bp
                           0000E0  1461 	C$i2c.h$100$1$73 ==.
                           0000E0  1462 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1463 	ret
                                   1464 ;------------------------------------------------------------
                                   1465 ;Allocation info for local variables in function 'lcd_clear'
                                   1466 ;------------------------------------------------------------
                                   1467 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1468 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1469 ;------------------------------------------------------------
                           0000E1  1470 	G$lcd_clear$0$0 ==.
                           0000E1  1471 	C$i2c.h$103$1$73 ==.
                                   1472 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1473 ;	-----------------------------------------
                                   1474 ;	 function lcd_clear
                                   1475 ;	-----------------------------------------
      0000E1                       1476 _lcd_clear:
                           0000E1  1477 	C$i2c.h$105$1$73 ==.
                                   1478 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1479 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1480 	C$i2c.h$107$1$77 ==.
                                   1481 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1482 00101$:
      0000E4 74 C0            [12] 1483 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1484 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1485 	jc	00103$
      0000EA 75*0Br00         [24] 1486 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1487 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1488 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1489 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1490 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1491 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1492 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1493 	sjmp	00101$
      000101                       1494 00103$:
                           000101  1495 	C$i2c.h$109$1$77 ==.
                                   1496 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1497 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1498 	C$i2c.h$110$1$77 ==.
                                   1499 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1500 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1501 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1502 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1503 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1504 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1505 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1506 	lcall	_i2c_write_data
                           000119  1507 	C$i2c.h$111$1$77 ==.
                           000119  1508 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1509 	ret
                                   1510 ;------------------------------------------------------------
                                   1511 ;Allocation info for local variables in function 'read_keypad'
                                   1512 ;------------------------------------------------------------
                                   1513 ;i                         Allocated to registers r7 
                                   1514 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1515 ;------------------------------------------------------------
                           00011A  1516 	G$read_keypad$0$0 ==.
                           00011A  1517 	C$i2c.h$114$1$77 ==.
                                   1518 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1519 ;	-----------------------------------------
                                   1520 ;	 function read_keypad
                                   1521 ;	-----------------------------------------
      00011A                       1522 _read_keypad:
                           00011A  1523 	C$i2c.h$118$1$78 ==.
                                   1524 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1525 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1526 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1527 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1528 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1529 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1530 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1531 	lcall	_i2c_read_data
                           00012F  1532 	C$i2c.h$119$1$78 ==.
                                   1533 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1534 	mov	a,#0xFF
      000131 B5*03 05         [24] 1535 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1536 	mov	dpl,#0x00
      000137 80 5F            [24] 1537 	sjmp	00116$
      000139                       1538 00102$:
                           000139  1539 	C$i2c.h$121$1$78 ==.
                                   1540 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1541 	mov	r7,#0x00
      00013B 8F 06            [24] 1542 	mov	ar6,r7
      00013D                       1543 00114$:
                           00013D  1544 	C$i2c.h$123$2$79 ==.
                                   1545 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1546 	mov	b,r6
      00013F 05 F0            [12] 1547 	inc	b
      000141 7C 01            [12] 1548 	mov	r4,#0x01
      000143 7D 00            [12] 1549 	mov	r5,#0x00
      000145 80 06            [24] 1550 	sjmp	00145$
      000147                       1551 00144$:
      000147 EC               [12] 1552 	mov	a,r4
      000148 2C               [12] 1553 	add	a,r4
      000149 FC               [12] 1554 	mov	r4,a
      00014A ED               [12] 1555 	mov	a,r5
      00014B 33               [12] 1556 	rlc	a
      00014C FD               [12] 1557 	mov	r5,a
      00014D                       1558 00145$:
      00014D D5 F0 F7         [24] 1559 	djnz	b,00144$
      000150 AA*03            [24] 1560 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1561 	mov	r3,#0x00
      000154 EA               [12] 1562 	mov	a,r2
      000155 52 04            [12] 1563 	anl	ar4,a
      000157 EB               [12] 1564 	mov	a,r3
      000158 52 05            [12] 1565 	anl	ar5,a
      00015A EC               [12] 1566 	mov	a,r4
      00015B 4D               [12] 1567 	orl	a,r5
      00015C 60 07            [24] 1568 	jz	00115$
                           00015E  1569 	C$i2c.h$124$2$79 ==.
                                   1570 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1571 	mov	a,#0x31
      000160 2F               [12] 1572 	add	a,r7
      000161 F5 82            [12] 1573 	mov	dpl,a
      000163 80 33            [24] 1574 	sjmp	00116$
      000165                       1575 00115$:
                           000165  1576 	C$i2c.h$121$1$78 ==.
                                   1577 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1578 	inc	r6
      000166 8E 07            [24] 1579 	mov	ar7,r6
      000168 BE 08 00         [24] 1580 	cjne	r6,#0x08,00147$
      00016B                       1581 00147$:
      00016B 40 D0            [24] 1582 	jc	00114$
                           00016D  1583 	C$i2c.h$127$1$78 ==.
                                   1584 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1585 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1586 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1587 	mov	dpl,#0x39
      000175 80 21            [24] 1588 	sjmp	00116$
      000177                       1589 00107$:
                           000177  1590 	C$i2c.h$129$1$78 ==.
                                   1591 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1592 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1593 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1594 	mov	dpl,#0x2A
      00017F 80 17            [24] 1595 	sjmp	00116$
      000181                       1596 00109$:
                           000181  1597 	C$i2c.h$131$1$78 ==.
                                   1598 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1599 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1600 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1601 	mov	dpl,#0x30
      000189 80 0D            [24] 1602 	sjmp	00116$
      00018B                       1603 00111$:
                           00018B  1604 	C$i2c.h$133$1$78 ==.
                                   1605 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1606 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1607 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1608 	mov	dpl,#0x23
      000193 80 03            [24] 1609 	sjmp	00116$
      000195                       1610 00113$:
                           000195  1611 	C$i2c.h$135$1$78 ==.
                                   1612 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1613 	mov	dpl,#0xFF
      000198                       1614 00116$:
                           000198  1615 	C$i2c.h$136$1$78 ==.
                           000198  1616 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1617 	ret
                                   1618 ;------------------------------------------------------------
                                   1619 ;Allocation info for local variables in function 'kpd_input'
                                   1620 ;------------------------------------------------------------
                                   1621 ;mode                      Allocated to registers r7 
                                   1622 ;sum                       Allocated to registers r5 r6 
                                   1623 ;key                       Allocated to registers r3 
                                   1624 ;i                         Allocated to registers 
                                   1625 ;------------------------------------------------------------
                           000199  1626 	G$kpd_input$0$0 ==.
                           000199  1627 	C$i2c.h$148$1$78 ==.
                                   1628 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1629 ;	-----------------------------------------
                                   1630 ;	 function kpd_input
                                   1631 ;	-----------------------------------------
      000199                       1632 _kpd_input:
      000199 AF 82            [24] 1633 	mov	r7,dpl
                           00019B  1634 	C$i2c.h$153$1$81 ==.
                                   1635 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1636 	C$i2c.h$156$1$81 ==.
                                   1637 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1638 	clr	a
      00019C FD               [12] 1639 	mov	r5,a
      00019D FE               [12] 1640 	mov	r6,a
      00019E EF               [12] 1641 	mov	a,r7
      00019F 70 1D            [24] 1642 	jnz	00102$
      0001A1 C0 06            [24] 1643 	push	ar6
      0001A3 C0 05            [24] 1644 	push	ar5
      0001A5 74r00            [12] 1645 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1646 	push	acc
      0001A9 74s00            [12] 1647 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1648 	push	acc
      0001AD 74 80            [12] 1649 	mov	a,#0x80
      0001AF C0 E0            [24] 1650 	push	acc
      0001B1 12r00r5C         [24] 1651 	lcall	_lcd_print
      0001B4 15 81            [12] 1652 	dec	sp
      0001B6 15 81            [12] 1653 	dec	sp
      0001B8 15 81            [12] 1654 	dec	sp
      0001BA D0 05            [24] 1655 	pop	ar5
      0001BC D0 06            [24] 1656 	pop	ar6
      0001BE                       1657 00102$:
                           0001BE  1658 	C$i2c.h$158$1$81 ==.
                                   1659 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1660 	push	ar6
      0001C0 C0 05            [24] 1661 	push	ar5
      0001C2 74 08            [12] 1662 	mov	a,#0x08
      0001C4 C0 E0            [24] 1663 	push	acc
      0001C6 E4               [12] 1664 	clr	a
      0001C7 C0 E0            [24] 1665 	push	acc
      0001C9 74 08            [12] 1666 	mov	a,#0x08
      0001CB C0 E0            [24] 1667 	push	acc
      0001CD E4               [12] 1668 	clr	a
      0001CE C0 E0            [24] 1669 	push	acc
      0001D0 74 08            [12] 1670 	mov	a,#0x08
      0001D2 C0 E0            [24] 1671 	push	acc
      0001D4 E4               [12] 1672 	clr	a
      0001D5 C0 E0            [24] 1673 	push	acc
      0001D7 74 08            [12] 1674 	mov	a,#0x08
      0001D9 C0 E0            [24] 1675 	push	acc
      0001DB E4               [12] 1676 	clr	a
      0001DC C0 E0            [24] 1677 	push	acc
      0001DE 74 08            [12] 1678 	mov	a,#0x08
      0001E0 C0 E0            [24] 1679 	push	acc
      0001E2 E4               [12] 1680 	clr	a
      0001E3 C0 E0            [24] 1681 	push	acc
      0001E5 74r16            [12] 1682 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1683 	push	acc
      0001E9 74s00            [12] 1684 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1685 	push	acc
      0001ED 74 80            [12] 1686 	mov	a,#0x80
      0001EF C0 E0            [24] 1687 	push	acc
      0001F1 12r00r5C         [24] 1688 	lcall	_lcd_print
      0001F4 E5 81            [12] 1689 	mov	a,sp
      0001F6 24 F3            [12] 1690 	add	a,#0xf3
      0001F8 F5 81            [12] 1691 	mov	sp,a
                           0001FA  1692 	C$i2c.h$160$1$81 ==.
                                   1693 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1694 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1695 	mov	b,#0x07
      000200 E4               [12] 1696 	clr	a
      000201 12r03r0D         [24] 1697 	lcall	_delay_time
      000204 D0 05            [24] 1698 	pop	ar5
      000206 D0 06            [24] 1699 	pop	ar6
                           000208  1700 	C$i2c.h$164$1$81 ==.
                                   1701 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1702 	mov	r7,#0x00
                           00020A  1703 	C$i2c.h$166$3$84 ==.
                                   1704 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1705 00104$:
      00020A C0 07            [24] 1706 	push	ar7
      00020C C0 06            [24] 1707 	push	ar6
      00020E C0 05            [24] 1708 	push	ar5
      000210 12r01r1A         [24] 1709 	lcall	_read_keypad
      000213 AC 82            [24] 1710 	mov	r4,dpl
      000215 D0 05            [24] 1711 	pop	ar5
      000217 D0 06            [24] 1712 	pop	ar6
      000219 D0 07            [24] 1713 	pop	ar7
      00021B 8C 03            [24] 1714 	mov	ar3,r4
      00021D BC FF 02         [24] 1715 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1716 	sjmp	00105$
      000222                       1717 00146$:
      000222 BB 2A 17         [24] 1718 	cjne	r3,#0x2A,00106$
      000225                       1719 00105$:
      000225 90 27 10         [24] 1720 	mov	dptr,#0x2710
      000228 E4               [12] 1721 	clr	a
      000229 F5 F0            [12] 1722 	mov	b,a
      00022B C0 07            [24] 1723 	push	ar7
      00022D C0 06            [24] 1724 	push	ar6
      00022F C0 05            [24] 1725 	push	ar5
      000231 12r03r0D         [24] 1726 	lcall	_delay_time
      000234 D0 05            [24] 1727 	pop	ar5
      000236 D0 06            [24] 1728 	pop	ar6
      000238 D0 07            [24] 1729 	pop	ar7
      00023A 80 CE            [24] 1730 	sjmp	00104$
      00023C                       1731 00106$:
                           00023C  1732 	C$i2c.h$167$2$82 ==.
                                   1733 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1734 	cjne	r3,#0x23,00114$
                           00023F  1735 	C$i2c.h$169$3$83 ==.
                                   1736 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1737 00107$:
      00023F C0 06            [24] 1738 	push	ar6
      000241 C0 05            [24] 1739 	push	ar5
      000243 12r01r1A         [24] 1740 	lcall	_read_keypad
      000246 AC 82            [24] 1741 	mov	r4,dpl
      000248 D0 05            [24] 1742 	pop	ar5
      00024A D0 06            [24] 1743 	pop	ar6
      00024C BC 23 13         [24] 1744 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1745 	mov	dptr,#0x2710
      000252 E4               [12] 1746 	clr	a
      000253 F5 F0            [12] 1747 	mov	b,a
      000255 C0 06            [24] 1748 	push	ar6
      000257 C0 05            [24] 1749 	push	ar5
      000259 12r03r0D         [24] 1750 	lcall	_delay_time
      00025C D0 05            [24] 1751 	pop	ar5
      00025E D0 06            [24] 1752 	pop	ar6
      000260 80 DD            [24] 1753 	sjmp	00107$
      000262                       1754 00109$:
                           000262  1755 	C$i2c.h$170$3$83 ==.
                                   1756 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1757 	mov	dpl,r5
      000264 8E 83            [24] 1758 	mov	dph,r6
      000266 02r03r0C         [24] 1759 	ljmp	00119$
      000269                       1760 00114$:
                           000269  1761 	C$i2c.h$174$3$84 ==.
                                   1762 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1763 	mov	a,r3
      00026A FA               [12] 1764 	mov	r2,a
      00026B 33               [12] 1765 	rlc	a
      00026C 95 E0            [12] 1766 	subb	a,acc
      00026E FC               [12] 1767 	mov	r4,a
      00026F C0 07            [24] 1768 	push	ar7
      000271 C0 06            [24] 1769 	push	ar6
      000273 C0 05            [24] 1770 	push	ar5
      000275 C0 04            [24] 1771 	push	ar4
      000277 C0 03            [24] 1772 	push	ar3
      000279 C0 02            [24] 1773 	push	ar2
      00027B C0 02            [24] 1774 	push	ar2
      00027D C0 04            [24] 1775 	push	ar4
      00027F 74r26            [12] 1776 	mov	a,#___str_2
      000281 C0 E0            [24] 1777 	push	acc
      000283 74s00            [12] 1778 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1779 	push	acc
      000287 74 80            [12] 1780 	mov	a,#0x80
      000289 C0 E0            [24] 1781 	push	acc
      00028B 12r00r5C         [24] 1782 	lcall	_lcd_print
      00028E E5 81            [12] 1783 	mov	a,sp
      000290 24 FB            [12] 1784 	add	a,#0xfb
      000292 F5 81            [12] 1785 	mov	sp,a
      000294 D0 02            [24] 1786 	pop	ar2
      000296 D0 03            [24] 1787 	pop	ar3
      000298 D0 04            [24] 1788 	pop	ar4
      00029A D0 05            [24] 1789 	pop	ar5
      00029C D0 06            [24] 1790 	pop	ar6
                           00029E  1791 	C$i2c.h$175$1$81 ==.
                                   1792 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1793 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1794 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1795 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1796 	push	ar4
      0002A7 C0 03            [24] 1797 	push	ar3
      0002A9 C0 02            [24] 1798 	push	ar2
      0002AB 12r00r00         [24] 1799 	lcall	__mulint
      0002AE A8 82            [24] 1800 	mov	r0,dpl
      0002B0 A9 83            [24] 1801 	mov	r1,dph
      0002B2 D0 02            [24] 1802 	pop	ar2
      0002B4 D0 03            [24] 1803 	pop	ar3
      0002B6 D0 04            [24] 1804 	pop	ar4
      0002B8 D0 07            [24] 1805 	pop	ar7
      0002BA EA               [12] 1806 	mov	a,r2
      0002BB 28               [12] 1807 	add	a,r0
      0002BC F8               [12] 1808 	mov	r0,a
      0002BD EC               [12] 1809 	mov	a,r4
      0002BE 39               [12] 1810 	addc	a,r1
      0002BF F9               [12] 1811 	mov	r1,a
      0002C0 E8               [12] 1812 	mov	a,r0
      0002C1 24 D0            [12] 1813 	add	a,#0xD0
      0002C3 FD               [12] 1814 	mov	r5,a
      0002C4 E9               [12] 1815 	mov	a,r1
      0002C5 34 FF            [12] 1816 	addc	a,#0xFF
      0002C7 FE               [12] 1817 	mov	r6,a
                           0002C8  1818 	C$i2c.h$176$3$84 ==.
                                   1819 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1820 00110$:
      0002C8 C0 07            [24] 1821 	push	ar7
      0002CA C0 06            [24] 1822 	push	ar6
      0002CC C0 05            [24] 1823 	push	ar5
      0002CE C0 03            [24] 1824 	push	ar3
      0002D0 12r01r1A         [24] 1825 	lcall	_read_keypad
      0002D3 AC 82            [24] 1826 	mov	r4,dpl
      0002D5 D0 03            [24] 1827 	pop	ar3
      0002D7 D0 05            [24] 1828 	pop	ar5
      0002D9 D0 06            [24] 1829 	pop	ar6
      0002DB D0 07            [24] 1830 	pop	ar7
      0002DD EC               [12] 1831 	mov	a,r4
      0002DE B5 03 1B         [24] 1832 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1833 	mov	dptr,#0x2710
      0002E4 E4               [12] 1834 	clr	a
      0002E5 F5 F0            [12] 1835 	mov	b,a
      0002E7 C0 07            [24] 1836 	push	ar7
      0002E9 C0 06            [24] 1837 	push	ar6
      0002EB C0 05            [24] 1838 	push	ar5
      0002ED C0 03            [24] 1839 	push	ar3
      0002EF 12r03r0D         [24] 1840 	lcall	_delay_time
      0002F2 D0 03            [24] 1841 	pop	ar3
      0002F4 D0 05            [24] 1842 	pop	ar5
      0002F6 D0 06            [24] 1843 	pop	ar6
      0002F8 D0 07            [24] 1844 	pop	ar7
      0002FA 80 CC            [24] 1845 	sjmp	00110$
      0002FC                       1846 00118$:
                           0002FC  1847 	C$i2c.h$164$1$81 ==.
                                   1848 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1849 	inc	r7
      0002FD C3               [12] 1850 	clr	c
      0002FE EF               [12] 1851 	mov	a,r7
      0002FF 64 80            [12] 1852 	xrl	a,#0x80
      000301 94 85            [12] 1853 	subb	a,#0x85
      000303 50 03            [24] 1854 	jnc	00155$
      000305 02r02r0A         [24] 1855 	ljmp	00104$
      000308                       1856 00155$:
                           000308  1857 	C$i2c.h$179$1$81 ==.
                                   1858 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1859 	mov	dpl,r5
      00030A 8E 83            [24] 1860 	mov	dph,r6
      00030C                       1861 00119$:
                           00030C  1862 	C$i2c.h$180$1$81 ==.
                           00030C  1863 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1864 	ret
                                   1865 ;------------------------------------------------------------
                                   1866 ;Allocation info for local variables in function 'delay_time'
                                   1867 ;------------------------------------------------------------
                                   1868 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1869 ;index                     Allocated to registers 
                                   1870 ;------------------------------------------------------------
                           00030D  1871 	G$delay_time$0$0 ==.
                           00030D  1872 	C$i2c.h$189$1$81 ==.
                                   1873 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1874 ;	-----------------------------------------
                                   1875 ;	 function delay_time
                                   1876 ;	-----------------------------------------
      00030D                       1877 _delay_time:
      00030D AC 82            [24] 1878 	mov	r4,dpl
      00030F AD 83            [24] 1879 	mov	r5,dph
      000311 AE F0            [24] 1880 	mov	r6,b
      000313 FF               [12] 1881 	mov	r7,a
                           000314  1882 	C$i2c.h$192$1$86 ==.
                                   1883 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1884 	mov	r0,#0x00
      000316 79 00            [12] 1885 	mov	r1,#0x00
      000318 7A 00            [12] 1886 	mov	r2,#0x00
      00031A 7B 00            [12] 1887 	mov	r3,#0x00
      00031C                       1888 00103$:
      00031C C3               [12] 1889 	clr	c
      00031D E8               [12] 1890 	mov	a,r0
      00031E 9C               [12] 1891 	subb	a,r4
      00031F E9               [12] 1892 	mov	a,r1
      000320 9D               [12] 1893 	subb	a,r5
      000321 EA               [12] 1894 	mov	a,r2
      000322 9E               [12] 1895 	subb	a,r6
      000323 EB               [12] 1896 	mov	a,r3
      000324 9F               [12] 1897 	subb	a,r7
      000325 50 0F            [24] 1898 	jnc	00105$
      000327 08               [12] 1899 	inc	r0
      000328 B8 00 09         [24] 1900 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1901 	inc	r1
      00032C B9 00 05         [24] 1902 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1903 	inc	r2
      000330 BA 00 E9         [24] 1904 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1905 	inc	r3
      000334                       1906 00115$:
      000334 80 E6            [24] 1907 	sjmp	00103$
      000336                       1908 00105$:
                           000336  1909 	C$i2c.h$193$1$86 ==.
                           000336  1910 	XG$delay_time$0$0 ==.
      000336 22               [24] 1911 	ret
                                   1912 ;------------------------------------------------------------
                                   1913 ;Allocation info for local variables in function 'i2c_start'
                                   1914 ;------------------------------------------------------------
                           000337  1915 	G$i2c_start$0$0 ==.
                           000337  1916 	C$i2c.h$196$1$86 ==.
                                   1917 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1918 ;	-----------------------------------------
                                   1919 ;	 function i2c_start
                                   1920 ;	-----------------------------------------
      000337                       1921 _i2c_start:
                           000337  1922 	C$i2c.h$198$1$88 ==.
                                   1923 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1924 00101$:
      000337 20 C7 FD         [24] 1925 	jb	_BUSY,00101$
                           00033A  1926 	C$i2c.h$199$1$88 ==.
                                   1927 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1928 	setb	_STA
                           00033C  1929 	C$i2c.h$200$1$88 ==.
                                   1930 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1931 00104$:
      00033C 30 C3 FD         [24] 1932 	jnb	_SI,00104$
                           00033F  1933 	C$i2c.h$201$1$88 ==.
                                   1934 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1935 	clr	_STA
                           000341  1936 	C$i2c.h$202$1$88 ==.
                                   1937 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1938 	clr	_SI
                           000343  1939 	C$i2c.h$203$1$88 ==.
                           000343  1940 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'i2c_write'
                                   1944 ;------------------------------------------------------------
                                   1945 ;output_data               Allocated to registers 
                                   1946 ;------------------------------------------------------------
                           000344  1947 	G$i2c_write$0$0 ==.
                           000344  1948 	C$i2c.h$206$1$88 ==.
                                   1949 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1950 ;	-----------------------------------------
                                   1951 ;	 function i2c_write
                                   1952 ;	-----------------------------------------
      000344                       1953 _i2c_write:
      000344 85 82 C2         [24] 1954 	mov	_SMB0DAT,dpl
                           000347  1955 	C$i2c.h$209$1$90 ==.
                                   1956 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1957 00101$:
                           000347  1958 	C$i2c.h$210$1$90 ==.
                                   1959 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1960 	jbc	_SI,00112$
      00034A 80 FB            [24] 1961 	sjmp	00101$
      00034C                       1962 00112$:
                           00034C  1963 	C$i2c.h$211$1$90 ==.
                           00034C  1964 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1965 	ret
                                   1966 ;------------------------------------------------------------
                                   1967 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1968 ;------------------------------------------------------------
                                   1969 ;output_data               Allocated to registers 
                                   1970 ;------------------------------------------------------------
                           00034D  1971 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1972 	C$i2c.h$214$1$90 ==.
                                   1973 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1974 ;	-----------------------------------------
                                   1975 ;	 function i2c_write_and_stop
                                   1976 ;	-----------------------------------------
      00034D                       1977 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1978 	mov	_SMB0DAT,dpl
                           000350  1979 	C$i2c.h$217$1$92 ==.
                                   1980 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1981 	setb	_STO
                           000352  1982 	C$i2c.h$218$1$92 ==.
                                   1983 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1984 00101$:
                           000352  1985 	C$i2c.h$219$1$92 ==.
                                   1986 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1987 	jbc	_SI,00112$
      000355 80 FB            [24] 1988 	sjmp	00101$
      000357                       1989 00112$:
                           000357  1990 	C$i2c.h$220$1$92 ==.
                           000357  1991 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1992 	ret
                                   1993 ;------------------------------------------------------------
                                   1994 ;Allocation info for local variables in function 'i2c_read'
                                   1995 ;------------------------------------------------------------
                                   1996 ;input_data                Allocated to registers 
                                   1997 ;------------------------------------------------------------
                           000358  1998 	G$i2c_read$0$0 ==.
                           000358  1999 	C$i2c.h$223$1$92 ==.
                                   2000 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2001 ;	-----------------------------------------
                                   2002 ;	 function i2c_read
                                   2003 ;	-----------------------------------------
      000358                       2004 _i2c_read:
                           000358  2005 	C$i2c.h$226$1$94 ==.
                                   2006 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2007 00101$:
      000358 30 C3 FD         [24] 2008 	jnb	_SI,00101$
                           00035B  2009 	C$i2c.h$227$1$94 ==.
                                   2010 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2011 	mov	dpl,_SMB0DAT
                           00035E  2012 	C$i2c.h$228$1$94 ==.
                                   2013 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2014 	clr	_SI
                           000360  2015 	C$i2c.h$229$1$94 ==.
                                   2016 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2017 	C$i2c.h$230$1$94 ==.
                           000360  2018 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2019 	ret
                                   2020 ;------------------------------------------------------------
                                   2021 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2022 ;------------------------------------------------------------
                                   2023 ;input_data                Allocated to registers r7 
                                   2024 ;------------------------------------------------------------
                           000361  2025 	G$i2c_read_and_stop$0$0 ==.
                           000361  2026 	C$i2c.h$233$1$94 ==.
                                   2027 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2028 ;	-----------------------------------------
                                   2029 ;	 function i2c_read_and_stop
                                   2030 ;	-----------------------------------------
      000361                       2031 _i2c_read_and_stop:
                           000361  2032 	C$i2c.h$236$1$96 ==.
                                   2033 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2034 00101$:
      000361 30 C3 FD         [24] 2035 	jnb	_SI,00101$
                           000364  2036 	C$i2c.h$237$1$96 ==.
                                   2037 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2038 	mov	r7,_SMB0DAT
                           000366  2039 	C$i2c.h$238$1$96 ==.
                                   2040 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2041 	clr	_SI
                           000368  2042 	C$i2c.h$239$1$96 ==.
                                   2043 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2044 	setb	_STO
                           00036A  2045 	C$i2c.h$240$1$96 ==.
                                   2046 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2047 00104$:
                           00036A  2048 	C$i2c.h$241$1$96 ==.
                                   2049 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2050 	jbc	_SI,00122$
      00036D 80 FB            [24] 2051 	sjmp	00104$
      00036F                       2052 00122$:
                           00036F  2053 	C$i2c.h$242$1$96 ==.
                                   2054 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2055 	mov	dpl,r7
                           000371  2056 	C$i2c.h$243$1$96 ==.
                           000371  2057 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2058 	ret
                                   2059 ;------------------------------------------------------------
                                   2060 ;Allocation info for local variables in function 'i2c_write_data'
                                   2061 ;------------------------------------------------------------
                                   2062 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2063 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2064 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2065 ;addr                      Allocated to registers r7 
                                   2066 ;i                         Allocated to registers 
                                   2067 ;------------------------------------------------------------
                           000372  2068 	G$i2c_write_data$0$0 ==.
                           000372  2069 	C$i2c.h$246$1$96 ==.
                                   2070 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2071 ;	-----------------------------------------
                                   2072 ;	 function i2c_write_data
                                   2073 ;	-----------------------------------------
      000372                       2074 _i2c_write_data:
      000372 AF 82            [24] 2075 	mov	r7,dpl
                           000374  2076 	C$i2c.h$250$1$98 ==.
                                   2077 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2078 	push	ar7
      000376 12r03r37         [24] 2079 	lcall	_i2c_start
      000379 D0 07            [24] 2080 	pop	ar7
                           00037B  2081 	C$i2c.h$251$1$98 ==.
                                   2082 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2083 	mov	a,#0xFE
      00037D 5F               [12] 2084 	anl	a,r7
      00037E F5 82            [12] 2085 	mov	dpl,a
      000380 12r03r44         [24] 2086 	lcall	_i2c_write
                           000383  2087 	C$i2c.h$252$1$98 ==.
                                   2088 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2089 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2090 	lcall	_i2c_write
                           000389  2091 	C$i2c.h$253$1$98 ==.
                                   2092 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2093 	mov	r7,#0x00
      00038B                       2094 00103$:
      00038B AD*09            [24] 2095 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2096 	mov	r6,#0x00
      00038F 1D               [12] 2097 	dec	r5
      000390 BD FF 01         [24] 2098 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2099 	dec	r6
      000394                       2100 00114$:
      000394 8F 03            [24] 2101 	mov	ar3,r7
      000396 7C 00            [12] 2102 	mov	r4,#0x00
      000398 C3               [12] 2103 	clr	c
      000399 EB               [12] 2104 	mov	a,r3
      00039A 9D               [12] 2105 	subb	a,r5
      00039B EC               [12] 2106 	mov	a,r4
      00039C 64 80            [12] 2107 	xrl	a,#0x80
      00039E 8E F0            [24] 2108 	mov	b,r6
      0003A0 63 F0 80         [24] 2109 	xrl	b,#0x80
      0003A3 95 F0            [12] 2110 	subb	a,b
      0003A5 50 1F            [24] 2111 	jnc	00101$
                           0003A7  2112 	C$i2c.h$254$1$98 ==.
                                   2113 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2114 	mov	a,r7
      0003A8 25*06            [12] 2115 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2116 	mov	r4,a
      0003AB E4               [12] 2117 	clr	a
      0003AC 35*07            [12] 2118 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2119 	mov	r5,a
      0003AF AE*08            [24] 2120 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2121 	mov	dpl,r4
      0003B3 8D 83            [24] 2122 	mov	dph,r5
      0003B5 8E F0            [24] 2123 	mov	b,r6
      0003B7 12r00r00         [24] 2124 	lcall	__gptrget
      0003BA F5 82            [12] 2125 	mov	dpl,a
      0003BC C0 07            [24] 2126 	push	ar7
      0003BE 12r03r44         [24] 2127 	lcall	_i2c_write
      0003C1 D0 07            [24] 2128 	pop	ar7
                           0003C3  2129 	C$i2c.h$253$1$98 ==.
                                   2130 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2131 	inc	r7
      0003C4 80 C5            [24] 2132 	sjmp	00103$
      0003C6                       2133 00101$:
                           0003C6  2134 	C$i2c.h$255$1$98 ==.
                                   2135 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2136 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2137 	mov	r7,#0x00
      0003CA 1E               [12] 2138 	dec	r6
      0003CB BE FF 01         [24] 2139 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2140 	dec	r7
      0003CF                       2141 00116$:
      0003CF EE               [12] 2142 	mov	a,r6
      0003D0 25*06            [12] 2143 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2144 	mov	r6,a
      0003D3 EF               [12] 2145 	mov	a,r7
      0003D4 35*07            [12] 2146 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2147 	mov	r7,a
      0003D7 AD*08            [24] 2148 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2149 	mov	dpl,r6
      0003DB 8F 83            [24] 2150 	mov	dph,r7
      0003DD 8D F0            [24] 2151 	mov	b,r5
      0003DF 12r00r00         [24] 2152 	lcall	__gptrget
      0003E2 F5 82            [12] 2153 	mov	dpl,a
      0003E4 12r03r4D         [24] 2154 	lcall	_i2c_write_and_stop
                           0003E7  2155 	C$i2c.h$256$1$98 ==.
                           0003E7  2156 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2157 	ret
                                   2158 ;------------------------------------------------------------
                                   2159 ;Allocation info for local variables in function 'i2c_read_data'
                                   2160 ;------------------------------------------------------------
                                   2161 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2162 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2163 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2164 ;addr                      Allocated to registers r7 
                                   2165 ;j                         Allocated to registers 
                                   2166 ;------------------------------------------------------------
                           0003E8  2167 	G$i2c_read_data$0$0 ==.
                           0003E8  2168 	C$i2c.h$259$1$98 ==.
                                   2169 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2170 ;	-----------------------------------------
                                   2171 ;	 function i2c_read_data
                                   2172 ;	-----------------------------------------
      0003E8                       2173 _i2c_read_data:
      0003E8 AF 82            [24] 2174 	mov	r7,dpl
                           0003EA  2175 	C$i2c.h$262$1$100 ==.
                                   2176 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2177 	push	ar7
      0003EC 12r03r37         [24] 2178 	lcall	_i2c_start
      0003EF D0 07            [24] 2179 	pop	ar7
                           0003F1  2180 	C$i2c.h$263$1$100 ==.
                                   2181 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2182 	mov	ar6,r7
      0003F3 74 FE            [12] 2183 	mov	a,#0xFE
      0003F5 5E               [12] 2184 	anl	a,r6
      0003F6 F5 82            [12] 2185 	mov	dpl,a
      0003F8 C0 07            [24] 2186 	push	ar7
      0003FA 12r03r44         [24] 2187 	lcall	_i2c_write
                           0003FD  2188 	C$i2c.h$264$1$100 ==.
                                   2189 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2190 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2191 	lcall	_i2c_write_and_stop
                           000403  2192 	C$i2c.h$265$1$100 ==.
                                   2193 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2194 	lcall	_i2c_start
      000406 D0 07            [24] 2195 	pop	ar7
                           000408  2196 	C$i2c.h$266$1$100 ==.
                                   2197 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2198 	mov	a,#0x01
      00040A 4F               [12] 2199 	orl	a,r7
      00040B F5 82            [12] 2200 	mov	dpl,a
      00040D 12r03r44         [24] 2201 	lcall	_i2c_write
                           000410  2202 	C$i2c.h$267$1$100 ==.
                                   2203 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2204 	mov	r7,#0x00
      000412                       2205 00103$:
      000412 AD*0E            [24] 2206 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2207 	mov	r6,#0x00
      000416 1D               [12] 2208 	dec	r5
      000417 BD FF 01         [24] 2209 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2210 	dec	r6
      00041B                       2211 00114$:
      00041B 8F 03            [24] 2212 	mov	ar3,r7
      00041D 7C 00            [12] 2213 	mov	r4,#0x00
      00041F C3               [12] 2214 	clr	c
      000420 EB               [12] 2215 	mov	a,r3
      000421 9D               [12] 2216 	subb	a,r5
      000422 EC               [12] 2217 	mov	a,r4
      000423 64 80            [12] 2218 	xrl	a,#0x80
      000425 8E F0            [24] 2219 	mov	b,r6
      000427 63 F0 80         [24] 2220 	xrl	b,#0x80
      00042A 95 F0            [12] 2221 	subb	a,b
      00042C 50 2E            [24] 2222 	jnc	00101$
                           00042E  2223 	C$i2c.h$269$2$101 ==.
                                   2224 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2225 	setb	_AA
                           000430  2226 	C$i2c.h$270$2$101 ==.
                                   2227 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2228 	mov	a,r7
      000431 25*0B            [12] 2229 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2230 	mov	r4,a
      000434 E4               [12] 2231 	clr	a
      000435 35*0C            [12] 2232 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2233 	mov	r5,a
      000438 AE*0D            [24] 2234 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2235 	push	ar7
      00043C C0 06            [24] 2236 	push	ar6
      00043E C0 05            [24] 2237 	push	ar5
      000440 C0 04            [24] 2238 	push	ar4
      000442 12r03r58         [24] 2239 	lcall	_i2c_read
      000445 AB 82            [24] 2240 	mov	r3,dpl
      000447 D0 04            [24] 2241 	pop	ar4
      000449 D0 05            [24] 2242 	pop	ar5
      00044B D0 06            [24] 2243 	pop	ar6
      00044D D0 07            [24] 2244 	pop	ar7
      00044F 8C 82            [24] 2245 	mov	dpl,r4
      000451 8D 83            [24] 2246 	mov	dph,r5
      000453 8E F0            [24] 2247 	mov	b,r6
      000455 EB               [12] 2248 	mov	a,r3
      000456 12r00r00         [24] 2249 	lcall	__gptrput
                           000459  2250 	C$i2c.h$267$1$100 ==.
                                   2251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2252 	inc	r7
      00045A 80 B6            [24] 2253 	sjmp	00103$
      00045C                       2254 00101$:
                           00045C  2255 	C$i2c.h$272$1$100 ==.
                                   2256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2257 	clr	_AA
                           00045E  2258 	C$i2c.h$273$1$100 ==.
                                   2259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2260 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2261 	mov	r7,#0x00
      000462 1E               [12] 2262 	dec	r6
      000463 BE FF 01         [24] 2263 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2264 	dec	r7
      000467                       2265 00116$:
      000467 EE               [12] 2266 	mov	a,r6
      000468 25*0B            [12] 2267 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2268 	mov	r6,a
      00046B EF               [12] 2269 	mov	a,r7
      00046C 35*0C            [12] 2270 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2271 	mov	r7,a
      00046F AD*0D            [24] 2272 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2273 	push	ar7
      000473 C0 06            [24] 2274 	push	ar6
      000475 C0 05            [24] 2275 	push	ar5
      000477 12r03r61         [24] 2276 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2277 	mov	r4,dpl
      00047C D0 05            [24] 2278 	pop	ar5
      00047E D0 06            [24] 2279 	pop	ar6
      000480 D0 07            [24] 2280 	pop	ar7
      000482 8E 82            [24] 2281 	mov	dpl,r6
      000484 8F 83            [24] 2282 	mov	dph,r7
      000486 8D F0            [24] 2283 	mov	b,r5
      000488 EC               [12] 2284 	mov	a,r4
      000489 12r00r00         [24] 2285 	lcall	__gptrput
                           00048C  2286 	C$i2c.h$274$1$100 ==.
                           00048C  2287 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2288 	ret
                                   2289 ;------------------------------------------------------------
                                   2290 ;Allocation info for local variables in function 'Accel_Init'
                                   2291 ;------------------------------------------------------------
                                   2292 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2293 ;------------------------------------------------------------
                           00048D  2294 	G$Accel_Init$0$0 ==.
                           00048D  2295 	C$i2c.h$283$1$100 ==.
                                   2296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2297 ;	-----------------------------------------
                                   2298 ;	 function Accel_Init
                                   2299 ;	-----------------------------------------
      00048D                       2300 _Accel_Init:
                           00048D  2301 	C$i2c.h$287$1$103 ==.
                                   2302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2303 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2304 	C$i2c.h$289$1$103 ==.
                                   2305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2306 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2307 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2308 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2309 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2310 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2311 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2312 	lcall	_i2c_write_data
                           0004A5  2313 	C$i2c.h$290$1$103 ==.
                                   2314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2315 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2316 	C$i2c.h$292$1$103 ==.
                                   2317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2318 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2319 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2320 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2321 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2322 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2323 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2324 	lcall	_i2c_write_data
                           0004BD  2325 	C$i2c.h$293$1$103 ==.
                                   2326 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2327 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2328 	C$i2c.h$294$1$103 ==.
                                   2329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2330 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2331 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2332 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2333 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2334 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2335 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2336 	lcall	_i2c_write_data
                           0004D5  2337 	C$i2c.h$298$1$103 ==.
                           0004D5  2338 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2339 	ret
                                   2340 ;------------------------------------------------------------
                                   2341 ;Allocation info for local variables in function 'main'
                                   2342 ;------------------------------------------------------------
                                   2343 ;run_stop                  Allocated to registers r7 
                                   2344 ;------------------------------------------------------------
                           0004D6  2345 	G$main$0$0 ==.
                           0004D6  2346 	C$Lab_4.c$60$1$103 ==.
                                   2347 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:60: void main(void)
                                   2348 ;	-----------------------------------------
                                   2349 ;	 function main
                                   2350 ;	-----------------------------------------
      0004D6                       2351 _main:
                           0004D6  2352 	C$Lab_4.c$63$1$118 ==.
                                   2353 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:63: Sys_Init(); // initialize board
      0004D6 12r00r30         [24] 2354 	lcall	_Sys_Init
                           0004D9  2355 	C$Lab_4.c$64$1$118 ==.
                                   2356 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:64: Port_Init();
      0004D9 12r05r35         [24] 2357 	lcall	_Port_Init
                           0004DC  2358 	C$Lab_4.c$65$1$118 ==.
                                   2359 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:65: PCA_Init();
      0004DC 12r05r43         [24] 2360 	lcall	_PCA_Init
                           0004DF  2361 	C$Lab_4.c$67$1$118 ==.
                                   2362 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:67: r_count = 0;
      0004DF 75*24 00         [24] 2363 	mov	_r_count,#0x00
                           0004E2  2364 	C$Lab_4.c$68$1$118 ==.
                                   2365 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:68: h_count = 0;
      0004E2 75*25 00         [24] 2366 	mov	_h_count,#0x00
                           0004E5  2367 	C$Lab_4.c$69$1$118 ==.
                                   2368 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:69: while (1)
      0004E5                       2369 00112$:
                           0004E5  2370 	C$Lab_4.c$71$2$119 ==.
                                   2371 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:71: run_stop = 0;
      0004E5 7F 00            [12] 2372 	mov	r7,#0x00
                           0004E7  2373 	C$Lab_4.c$72$2$119 ==.
                                   2374 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:72: while ((!COMPASS_SWITCH)&&(!RANGER_SWITCH)) // make run an sbit for the run/stop switch
      0004E7                       2375 00104$:
      0004E7 20 B7 1C         [24] 2376 	jb	_COMPASS_SWITCH,00106$
      0004EA 20 B6 19         [24] 2377 	jb	_RANGER_SWITCH,00106$
                           0004ED  2378 	C$Lab_4.c$74$3$120 ==.
                                   2379 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:74: if (run_stop == 0)
      0004ED EF               [12] 2380 	mov	a,r7
      0004EE 70 F7            [24] 2381 	jnz	00104$
                           0004F0  2382 	C$Lab_4.c$76$4$121 ==.
                                   2383 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:76: desired_heading = pick_heading();
      0004F0 12r06rEE         [24] 2384 	lcall	_pick_heading
      0004F3 85 82*26         [24] 2385 	mov	_desired_heading,dpl
      0004F6 85 83*27         [24] 2386 	mov	(_desired_heading + 1),dph
                           0004F9  2387 	C$Lab_4.c$77$4$121 ==.
                                   2388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:77: desired_range = pick_range();
      0004F9 12r00r00         [24] 2389 	lcall	_pick_range
      0004FC 85 82*28         [24] 2390 	mov	_desired_range,dpl
      0004FF 85 83*29         [24] 2391 	mov	(_desired_range + 1),dph
                           000502  2392 	C$Lab_4.c$78$4$121 ==.
                                   2393 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:78: run_stop = 1; // only try to update desired heading once
      000502 7F 01            [12] 2394 	mov	r7,#0x01
      000504 80 E1            [24] 2395 	sjmp	00104$
      000506                       2396 00106$:
                           000506  2397 	C$Lab_4.c$81$2$119 ==.
                                   2398 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:81: if (new_heading) // enough overflows for a new heading
      000506 E5*1E            [12] 2399 	mov	a,_new_heading
      000508 60 12            [24] 2400 	jz	00108$
                           00050A  2401 	C$Lab_4.c$83$3$122 ==.
                                   2402 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:83: heading = read_compass();
      00050A 12r05rA6         [24] 2403 	lcall	_read_compass
      00050D 85 82*20         [24] 2404 	mov	_heading,dpl
      000510 85 83*21         [24] 2405 	mov	(_heading + 1),dph
                           000513  2406 	C$Lab_4.c$84$3$122 ==.
                                   2407 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:84: set_servo_PWM(); // if new data, adjust servo PWM for compass & ranger
      000513 12r05rCC         [24] 2408 	lcall	_set_servo_PWM
                           000516  2409 	C$Lab_4.c$85$3$122 ==.
                                   2410 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:85: new_heading = 0;
      000516 75*1E 00         [24] 2411 	mov	_new_heading,#0x00
                           000519  2412 	C$Lab_4.c$86$3$122 ==.
                                   2413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:86: h_count = 0;
      000519 75*25 00         [24] 2414 	mov	_h_count,#0x00
      00051C                       2415 00108$:
                           00051C  2416 	C$Lab_4.c$88$2$119 ==.
                                   2417 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:88: if (new_range) // enough overflow for a new range
      00051C E5*1F            [12] 2418 	mov	a,_new_range
      00051E 60 C5            [24] 2419 	jz	00112$
                           000520  2420 	C$Lab_4.c$90$3$123 ==.
                                   2421 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:90: range = read_ranger(); // get range
      000520 12r06r25         [24] 2422 	lcall	_read_ranger
      000523 85 82*22         [24] 2423 	mov	_range,dpl
      000526 85 83*23         [24] 2424 	mov	(_range + 1),dph
                           000529  2425 	C$Lab_4.c$92$3$123 ==.
                                   2426 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:92: set_range_adj(); // if new data, set value to adjust steering PWM
      000529 12r00r00         [24] 2427 	lcall	_set_range_adj
                           00052C  2428 	C$Lab_4.c$93$3$123 ==.
                                   2429 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:93: new_range = 0;
      00052C 75*1F 00         [24] 2430 	mov	_new_range,#0x00
                           00052F  2431 	C$Lab_4.c$94$3$123 ==.
                                   2432 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:94: r_count = 0;
      00052F 75*24 00         [24] 2433 	mov	_r_count,#0x00
      000532 80 B1            [24] 2434 	sjmp	00112$
                           000534  2435 	C$Lab_4.c$97$1$118 ==.
                           000534  2436 	XG$main$0$0 ==.
      000534 22               [24] 2437 	ret
                                   2438 ;------------------------------------------------------------
                                   2439 ;Allocation info for local variables in function 'Port_Init'
                                   2440 ;------------------------------------------------------------
                           000535  2441 	G$Port_Init$0$0 ==.
                           000535  2442 	C$Lab_4.c$102$1$118 ==.
                                   2443 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:102: void Port_Init()
                                   2444 ;	-----------------------------------------
                                   2445 ;	 function Port_Init
                                   2446 ;	-----------------------------------------
      000535                       2447 _Port_Init:
                           000535  2448 	C$Lab_4.c$104$1$124 ==.
                                   2449 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:104: P1MDOUT |= 0x01; //set output pin for CEX0 in push-pull mode
      000535 43 A5 01         [24] 2450 	orl	_P1MDOUT,#0x01
                           000538  2451 	C$Lab_4.c$105$1$124 ==.
                                   2452 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:105: P3MDOUT &= 0x7F; // set input pin for 3.7 to open-drain
      000538 53 A7 7F         [24] 2453 	anl	_P3MDOUT,#0x7F
                           00053B  2454 	C$Lab_4.c$106$1$124 ==.
                                   2455 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:106: P3		|= ~0x7F;// set input pin for 3.7 to high impedence
      00053B AF B0            [24] 2456 	mov	r7,_P3
      00053D 74 80            [12] 2457 	mov	a,#0x80
      00053F 4F               [12] 2458 	orl	a,r7
      000540 F5 B0            [12] 2459 	mov	_P3,a
                           000542  2460 	C$Lab_4.c$107$1$124 ==.
                           000542  2461 	XG$Port_Init$0$0 ==.
      000542 22               [24] 2462 	ret
                                   2463 ;------------------------------------------------------------
                                   2464 ;Allocation info for local variables in function 'PCA_Init'
                                   2465 ;------------------------------------------------------------
                           000543  2466 	G$PCA_Init$0$0 ==.
                           000543  2467 	C$Lab_4.c$111$1$124 ==.
                                   2468 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:111: void PCA_Init(void)
                                   2469 ;	-----------------------------------------
                                   2470 ;	 function PCA_Init
                                   2471 ;	-----------------------------------------
      000543                       2472 _PCA_Init:
                           000543  2473 	C$Lab_4.c$113$1$126 ==.
                                   2474 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:113: PCA0CPM0 = 0xC2;	// CCM0 in 16-bit compare mode
      000543 75 DA C2         [24] 2475 	mov	_PCA0CPM0,#0xC2
                           000546  2476 	C$Lab_4.c$114$1$126 ==.
                                   2477 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:114: PCA0CN = 0x40;		// Enable PCA Counter
      000546 75 D8 40         [24] 2478 	mov	_PCA0CN,#0x40
                           000549  2479 	C$Lab_4.c$115$1$126 ==.
                                   2480 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:115: PCA0MD = 0x81;		// Enable CF Interrupt and SYSCLK/12
      000549 75 D9 81         [24] 2481 	mov	_PCA0MD,#0x81
                           00054C  2482 	C$Lab_4.c$116$1$126 ==.
                                   2483 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:116: EA = 1;				// Enable Global Interrupts
      00054C D2 AF            [12] 2484 	setb	_EA
                           00054E  2485 	C$Lab_4.c$117$1$126 ==.
                                   2486 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:117: EIE1 |= 0x08;		// Enable PCA Interrupt
      00054E 43 E6 08         [24] 2487 	orl	_EIE1,#0x08
                           000551  2488 	C$Lab_4.c$118$1$126 ==.
                           000551  2489 	XG$PCA_Init$0$0 ==.
      000551 22               [24] 2490 	ret
                                   2491 ;------------------------------------------------------------
                                   2492 ;Allocation info for local variables in function 'PCA_ISR'
                                   2493 ;------------------------------------------------------------
                           000552  2494 	G$PCA_ISR$0$0 ==.
                           000552  2495 	C$Lab_4.c$122$1$126 ==.
                                   2496 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:122: void PCA_ISR(void) __interrupt 9
                                   2497 ;	-----------------------------------------
                                   2498 ;	 function PCA_ISR
                                   2499 ;	-----------------------------------------
      000552                       2500 _PCA_ISR:
      000552 C0 E0            [24] 2501 	push	acc
      000554 C0 D0            [24] 2502 	push	psw
                           000556  2503 	C$Lab_4.c$124$1$128 ==.
                                   2504 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:124: if (CF)
                           000556  2505 	C$Lab_4.c$126$2$129 ==.
                                   2506 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:126: CF = 0; // clear overflow indicator
      000556 10 DF 02         [24] 2507 	jbc	_CF,00123$
      000559 80 2D            [24] 2508 	sjmp	00108$
      00055B                       2509 00123$:
                           00055B  2510 	C$Lab_4.c$127$2$129 ==.
                                   2511 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:127: h_count++;
      00055B 05*25            [12] 2512 	inc	_h_count
                           00055D  2513 	C$Lab_4.c$128$2$129 ==.
                                   2514 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:128: if (h_count>=2)
      00055D 74 FE            [12] 2515 	mov	a,#0x100 - 0x02
      00055F 25*25            [12] 2516 	add	a,_h_count
      000561 50 06            [24] 2517 	jnc	00102$
                           000563  2518 	C$Lab_4.c$130$3$130 ==.
                                   2519 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:130: new_heading=1;
      000563 75*1E 01         [24] 2520 	mov	_new_heading,#0x01
                           000566  2521 	C$Lab_4.c$131$3$130 ==.
                                   2522 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:131: h_count = 0;
      000566 75*25 00         [24] 2523 	mov	_h_count,#0x00
      000569                       2524 00102$:
                           000569  2525 	C$Lab_4.c$133$2$129 ==.
                                   2526 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:133: heading_delay++;
      000569 05*2A            [12] 2527 	inc	_heading_delay
                           00056B  2528 	C$Lab_4.c$134$2$129 ==.
                                   2529 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:134: if(heading_delay>5) heading_delay=0;
      00056B E5*2A            [12] 2530 	mov	a,_heading_delay
      00056D 24 FA            [12] 2531 	add	a,#0xff - 0x05
      00056F 50 03            [24] 2532 	jnc	00104$
      000571 75*2A 00         [24] 2533 	mov	_heading_delay,#0x00
      000574                       2534 00104$:
                           000574  2535 	C$Lab_4.c$135$2$129 ==.
                                   2536 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:135: r_count++;
      000574 05*24            [12] 2537 	inc	_r_count
                           000576  2538 	C$Lab_4.c$136$2$129 ==.
                                   2539 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:136: if (r_count>=4)
      000576 74 FC            [12] 2540 	mov	a,#0x100 - 0x04
      000578 25*24            [12] 2541 	add	a,_r_count
      00057A 50 06            [24] 2542 	jnc	00106$
                           00057C  2543 	C$Lab_4.c$138$3$131 ==.
                                   2544 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:138: new_range = 1;
      00057C 75*1F 01         [24] 2545 	mov	_new_range,#0x01
                           00057F  2546 	C$Lab_4.c$139$3$131 ==.
                                   2547 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:139: r_count = 0;
      00057F 75*24 00         [24] 2548 	mov	_r_count,#0x00
      000582                       2549 00106$:
                           000582  2550 	C$Lab_4.c$141$2$129 ==.
                                   2551 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:141: PCA0 = PCA_START;
      000582 85*1C E9         [24] 2552 	mov	((_PCA0 >> 0) & 0xFF),_PCA_START
      000585 85*1D F9         [24] 2553 	mov	((_PCA0 >> 8) & 0xFF),(_PCA_START + 1)
      000588                       2554 00108$:
                           000588  2555 	C$Lab_4.c$144$1$128 ==.
                                   2556 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:144: PCA0CN &= 0xC0;
      000588 53 D8 C0         [24] 2557 	anl	_PCA0CN,#0xC0
      00058B D0 D0            [24] 2558 	pop	psw
      00058D D0 E0            [24] 2559 	pop	acc
                           00058F  2560 	C$Lab_4.c$145$1$128 ==.
                           00058F  2561 	XG$PCA_ISR$0$0 ==.
      00058F 32               [24] 2562 	reti
                                   2563 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2564 ;	eliminated unneeded push/pop dpl
                                   2565 ;	eliminated unneeded push/pop dph
                                   2566 ;	eliminated unneeded push/pop b
                                   2567 ;------------------------------------------------------------
                                   2568 ;Allocation info for local variables in function 'SMB_Init'
                                   2569 ;------------------------------------------------------------
                           000590  2570 	G$SMB_Init$0$0 ==.
                           000590  2571 	C$Lab_4.c$149$1$128 ==.
                                   2572 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:149: void SMB_Init(void)
                                   2573 ;	-----------------------------------------
                                   2574 ;	 function SMB_Init
                                   2575 ;	-----------------------------------------
      000590                       2576 _SMB_Init:
                           000590  2577 	C$Lab_4.c$151$1$133 ==.
                                   2578 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:151: SMB0CR=0x93;	//Set SCL to 100KHz
      000590 75 CF 93         [24] 2579 	mov	_SMB0CR,#0x93
                           000593  2580 	C$Lab_4.c$152$1$133 ==.
                                   2581 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:152: ENSMB=1; 		//Bit 6 of SMB0CN, enable the SMBus
      000593 D2 C6            [12] 2582 	setb	_ENSMB
                           000595  2583 	C$Lab_4.c$153$1$133 ==.
                           000595  2584 	XG$SMB_Init$0$0 ==.
      000595 22               [24] 2585 	ret
                                   2586 ;------------------------------------------------------------
                                   2587 ;Allocation info for local variables in function 'ADC_Init'
                                   2588 ;------------------------------------------------------------
                           000596  2589 	G$ADC_Init$0$0 ==.
                           000596  2590 	C$Lab_4.c$156$1$133 ==.
                                   2591 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:156: void ADC_Init(void)
                                   2592 ;	-----------------------------------------
                                   2593 ;	 function ADC_Init
                                   2594 ;	-----------------------------------------
      000596                       2595 _ADC_Init:
                           000596  2596 	C$Lab_4.c$158$1$135 ==.
                                   2597 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:158: REF0CN = 0x03;	// Set Vref to use internal reference voltage (2.4 V)
      000596 75 D1 03         [24] 2598 	mov	_REF0CN,#0x03
                           000599  2599 	C$Lab_4.c$159$1$135 ==.
                                   2600 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:159: ADC1CN = 0x80;	// Enable A/D converter (ADC1)
      000599 75 AA 80         [24] 2601 	mov	_ADC1CN,#0x80
                           00059C  2602 	C$Lab_4.c$160$1$135 ==.
                                   2603 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:160: ADC1CF |= 0x01; // Set A/D converter gain to 1
      00059C 43 AB 01         [24] 2604 	orl	_ADC1CF,#0x01
                           00059F  2605 	C$Lab_4.c$161$1$135 ==.
                           00059F  2606 	XG$ADC_Init$0$0 ==.
      00059F 22               [24] 2607 	ret
                                   2608 ;------------------------------------------------------------
                                   2609 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2610 ;------------------------------------------------------------
                           0005A0  2611 	G$Interrupt_Init$0$0 ==.
                           0005A0  2612 	C$Lab_4.c$165$1$135 ==.
                                   2613 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:165: void Interrupt_Init(void)
                                   2614 ;	-----------------------------------------
                                   2615 ;	 function Interrupt_Init
                                   2616 ;	-----------------------------------------
      0005A0                       2617 _Interrupt_Init:
                           0005A0  2618 	C$Lab_4.c$167$1$137 ==.
                                   2619 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:167: EIE1 |= 0x08;	//Enable PCA0 Interrupt (bit 3) 
      0005A0 43 E6 08         [24] 2620 	orl	_EIE1,#0x08
                           0005A3  2621 	C$Lab_4.c$168$1$137 ==.
                                   2622 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:168: EA = 1;			//Enable global interrupts
      0005A3 D2 AF            [12] 2623 	setb	_EA
                           0005A5  2624 	C$Lab_4.c$169$1$137 ==.
                           0005A5  2625 	XG$Interrupt_Init$0$0 ==.
      0005A5 22               [24] 2626 	ret
                                   2627 ;------------------------------------------------------------
                                   2628 ;Allocation info for local variables in function 'read_compass'
                                   2629 ;------------------------------------------------------------
                                   2630 ;addr                      Allocated to registers 
                                   2631 ;Data                      Allocated with name '_read_compass_Data_1_139'
                                   2632 ;read_heading              Allocated to registers 
                                   2633 ;------------------------------------------------------------
                           0005A6  2634 	G$read_compass$0$0 ==.
                           0005A6  2635 	C$Lab_4.c$173$1$137 ==.
                                   2636 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:173: int read_compass(void)
                                   2637 ;	-----------------------------------------
                                   2638 ;	 function read_compass
                                   2639 ;	-----------------------------------------
      0005A6                       2640 _read_compass:
                           0005A6  2641 	C$Lab_4.c$178$1$139 ==.
                                   2642 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:178: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0005A6 75*0Br2F         [24] 2643 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_139
      0005A9 75*0C 00         [24] 2644 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005AC 75*0D 40         [24] 2645 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005AF 75*0A 02         [24] 2646 	mov	_i2c_read_data_PARM_2,#0x02
      0005B2 75*0E 02         [24] 2647 	mov	_i2c_read_data_PARM_4,#0x02
      0005B5 75 82 C0         [24] 2648 	mov	dpl,#0xC0
      0005B8 12r03rE8         [24] 2649 	lcall	_i2c_read_data
                           0005BB  2650 	C$Lab_4.c$179$1$139 ==.
                                   2651 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:179: read_heading =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0005BB AF*2F            [24] 2652 	mov	r7,_read_compass_Data_1_139
      0005BD 7E 00            [12] 2653 	mov	r6,#0x00
      0005BF AC*30            [24] 2654 	mov	r4,(_read_compass_Data_1_139 + 0x0001)
      0005C1 7D 00            [12] 2655 	mov	r5,#0x00
      0005C3 EC               [12] 2656 	mov	a,r4
      0005C4 4E               [12] 2657 	orl	a,r6
      0005C5 F5 82            [12] 2658 	mov	dpl,a
      0005C7 ED               [12] 2659 	mov	a,r5
      0005C8 4F               [12] 2660 	orl	a,r7
      0005C9 F5 83            [12] 2661 	mov	dph,a
                           0005CB  2662 	C$Lab_4.c$180$1$139 ==.
                                   2663 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:180: return read_heading; // the heading returned in degrees between 0 and 3599
                           0005CB  2664 	C$Lab_4.c$181$1$139 ==.
                           0005CB  2665 	XG$read_compass$0$0 ==.
      0005CB 22               [24] 2666 	ret
                                   2667 ;------------------------------------------------------------
                                   2668 ;Allocation info for local variables in function 'set_servo_PWM'
                                   2669 ;------------------------------------------------------------
                           0005CC  2670 	G$set_servo_PWM$0$0 ==.
                           0005CC  2671 	C$Lab_4.c$184$1$139 ==.
                                   2672 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:184: void set_servo_PWM(void)
                                   2673 ;	-----------------------------------------
                                   2674 ;	 function set_servo_PWM
                                   2675 ;	-----------------------------------------
      0005CC                       2676 _set_servo_PWM:
                           0005CC  2677 	C$Lab_4.c$186$1$141 ==.
                                   2678 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:186: if(new_heading && (heading_delay>=5))
      0005CC E5*1E            [12] 2679 	mov	a,_new_heading
      0005CE 60 54            [24] 2680 	jz	00104$
      0005D0 74 FB            [12] 2681 	mov	a,#0x100 - 0x05
      0005D2 25*2A            [12] 2682 	add	a,_heading_delay
      0005D4 50 4E            [24] 2683 	jnc	00104$
                           0005D6  2684 	C$Lab_4.c$188$2$142 ==.
                                   2685 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:188: heading = read_compass();
      0005D6 12r05rA6         [24] 2686 	lcall	_read_compass
                           0005D9  2687 	C$Lab_4.c$189$1$141 ==.
                                   2688 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:189: printf("\rThe current direction is %u\n", heading/10);
      0005D9 85 82*20         [24] 2689 	mov	_heading,dpl
      0005DC 85 83*21         [24] 2690 	mov	(_heading + 1),dph
      0005DF 75*00 0A         [24] 2691 	mov	__divuint_PARM_2,#0x0A
      0005E2 75*01 00         [24] 2692 	mov	(__divuint_PARM_2 + 1),#0x00
      0005E5 12r00r00         [24] 2693 	lcall	__divuint
      0005E8 AE 82            [24] 2694 	mov	r6,dpl
      0005EA AF 83            [24] 2695 	mov	r7,dph
      0005EC C0 06            [24] 2696 	push	ar6
      0005EE C0 07            [24] 2697 	push	ar7
      0005F0 74r29            [12] 2698 	mov	a,#___str_3
      0005F2 C0 E0            [24] 2699 	push	acc
      0005F4 74s00            [12] 2700 	mov	a,#(___str_3 >> 8)
      0005F6 C0 E0            [24] 2701 	push	acc
      0005F8 74 80            [12] 2702 	mov	a,#0x80
      0005FA C0 E0            [24] 2703 	push	acc
      0005FC 12r00r00         [24] 2704 	lcall	_printf
      0005FF E5 81            [12] 2705 	mov	a,sp
      000601 24 FB            [12] 2706 	add	a,#0xfb
      000603 F5 81            [12] 2707 	mov	sp,a
                           000605  2708 	C$Lab_4.c$190$2$142 ==.
                                   2709 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:190: COMPASS_PW = servo_error(heading); // Adjust pulsewidth based on error function
      000605 85*20 82         [24] 2710 	mov	dpl,_heading
      000608 85*21 83         [24] 2711 	mov	dph,(_heading + 1)
      00060B 12r07r49         [24] 2712 	lcall	_servo_error
      00060E 85 82*2B         [24] 2713 	mov	_COMPASS_PW,dpl
      000611 85 83*2C         [24] 2714 	mov	(_COMPASS_PW + 1),dph
                           000614  2715 	C$Lab_4.c$191$2$142 ==.
                                   2716 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:191: PCA0CP0 = 0xFFFF - COMPASS_PW; // Change pulse width
      000614 74 FF            [12] 2717 	mov	a,#0xFF
      000616 C3               [12] 2718 	clr	c
      000617 95*2B            [12] 2719 	subb	a,_COMPASS_PW
      000619 F5 EA            [12] 2720 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      00061B 74 FF            [12] 2721 	mov	a,#0xFF
      00061D 95*2C            [12] 2722 	subb	a,(_COMPASS_PW + 1)
      00061F F5 FA            [12] 2723 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000621  2724 	C$Lab_4.c$192$2$142 ==.
                                   2725 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:192: new_heading = 0;
      000621 75*1E 00         [24] 2726 	mov	_new_heading,#0x00
      000624                       2727 00104$:
                           000624  2728 	C$Lab_4.c$194$1$141 ==.
                           000624  2729 	XG$set_servo_PWM$0$0 ==.
      000624 22               [24] 2730 	ret
                                   2731 ;------------------------------------------------------------
                                   2732 ;Allocation info for local variables in function 'read_ranger'
                                   2733 ;------------------------------------------------------------
                                   2734 ;addr                      Allocated to registers 
                                   2735 ;Data                      Allocated with name '_read_ranger_Data_1_144'
                                   2736 ;range                     Allocated to registers r6 r7 
                                   2737 ;------------------------------------------------------------
                           000625  2738 	G$read_ranger$0$0 ==.
                           000625  2739 	C$Lab_4.c$198$1$141 ==.
                                   2740 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:198: int read_ranger(void)
                                   2741 ;	-----------------------------------------
                                   2742 ;	 function read_ranger
                                   2743 ;	-----------------------------------------
      000625                       2744 _read_ranger:
                           000625  2745 	C$Lab_4.c$203$1$144 ==.
                                   2746 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:203: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      000625 75*0Br31         [24] 2747 	mov	_i2c_read_data_PARM_3,#_read_ranger_Data_1_144
      000628 75*0C 00         [24] 2748 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00062B 75*0D 40         [24] 2749 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00062E 75*0A 02         [24] 2750 	mov	_i2c_read_data_PARM_2,#0x02
      000631 75*0E 02         [24] 2751 	mov	_i2c_read_data_PARM_4,#0x02
      000634 75 82 E0         [24] 2752 	mov	dpl,#0xE0
      000637 12r03rE8         [24] 2753 	lcall	_i2c_read_data
                           00063A  2754 	C$Lab_4.c$204$1$144 ==.
                                   2755 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:204: range =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values	
      00063A AF*31            [24] 2756 	mov	r7,_read_ranger_Data_1_144
      00063C 7E 00            [12] 2757 	mov	r6,#0x00
      00063E AC*32            [24] 2758 	mov	r4,(_read_ranger_Data_1_144 + 0x0001)
      000640 7D 00            [12] 2759 	mov	r5,#0x00
      000642 EC               [12] 2760 	mov	a,r4
      000643 42 06            [12] 2761 	orl	ar6,a
      000645 ED               [12] 2762 	mov	a,r5
      000646 42 07            [12] 2763 	orl	ar7,a
                           000648  2764 	C$Lab_4.c$205$1$144 ==.
                                   2765 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:205: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      000648 75*31 51         [24] 2766 	mov	_read_ranger_Data_1_144,#0x51
                           00064B  2767 	C$Lab_4.c$206$1$144 ==.
                                   2768 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:206: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      00064B 75*06r31         [24] 2769 	mov	_i2c_write_data_PARM_3,#_read_ranger_Data_1_144
      00064E 75*07 00         [24] 2770 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000651 75*08 40         [24] 2771 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000654 75*05 00         [24] 2772 	mov	_i2c_write_data_PARM_2,#0x00
      000657 75*09 01         [24] 2773 	mov	_i2c_write_data_PARM_4,#0x01
      00065A 75 82 E0         [24] 2774 	mov	dpl,#0xE0
      00065D C0 07            [24] 2775 	push	ar7
      00065F C0 06            [24] 2776 	push	ar6
      000661 12r03r72         [24] 2777 	lcall	_i2c_write_data
      000664 D0 06            [24] 2778 	pop	ar6
      000666 D0 07            [24] 2779 	pop	ar7
                           000668  2780 	C$Lab_4.c$207$1$144 ==.
                                   2781 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:207: return range;
      000668 8E 82            [24] 2782 	mov	dpl,r6
      00066A 8F 83            [24] 2783 	mov	dph,r7
                           00066C  2784 	C$Lab_4.c$208$1$144 ==.
                           00066C  2785 	XG$read_ranger$0$0 ==.
      00066C 22               [24] 2786 	ret
                                   2787 ;------------------------------------------------------------
                                   2788 ;Allocation info for local variables in function 'set_drive_PWM'
                                   2789 ;------------------------------------------------------------
                           00066D  2790 	G$set_drive_PWM$0$0 ==.
                           00066D  2791 	C$Lab_4.c$211$1$144 ==.
                                   2792 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:211: void set_drive_PWM(void)
                                   2793 ;	-----------------------------------------
                                   2794 ;	 function set_drive_PWM
                                   2795 ;	-----------------------------------------
      00066D                       2796 _set_drive_PWM:
                           00066D  2797 	C$Lab_4.c$213$1$146 ==.
                                   2798 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:213: if(new_range)
      00066D E5*1F            [12] 2799 	mov	a,_new_range
      00066F 60 3E            [24] 2800 	jz	00102$
                           000671  2801 	C$Lab_4.c$215$2$147 ==.
                                   2802 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:215: range = read_ranger();
      000671 12r06r25         [24] 2803 	lcall	_read_ranger
      000674 85 82*22         [24] 2804 	mov	_range,dpl
      000677 85 83*23         [24] 2805 	mov	(_range + 1),dph
                           00067A  2806 	C$Lab_4.c$216$2$147 ==.
                                   2807 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:216: new_range = 0;
      00067A 75*1F 00         [24] 2808 	mov	_new_range,#0x00
                           00067D  2809 	C$Lab_4.c$217$2$147 ==.
                                   2810 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:217: printf("\rThe range is %u cm\n",range);
      00067D C0*22            [24] 2811 	push	_range
      00067F C0*23            [24] 2812 	push	(_range + 1)
      000681 74r47            [12] 2813 	mov	a,#___str_4
      000683 C0 E0            [24] 2814 	push	acc
      000685 74s00            [12] 2815 	mov	a,#(___str_4 >> 8)
      000687 C0 E0            [24] 2816 	push	acc
      000689 74 80            [12] 2817 	mov	a,#0x80
      00068B C0 E0            [24] 2818 	push	acc
      00068D 12r00r00         [24] 2819 	lcall	_printf
      000690 E5 81            [12] 2820 	mov	a,sp
      000692 24 FB            [12] 2821 	add	a,#0xfb
      000694 F5 81            [12] 2822 	mov	sp,a
                           000696  2823 	C$Lab_4.c$218$2$147 ==.
                                   2824 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:218: printf("\rPW is %u\n", RANGER_PW);
      000696 C0*2D            [24] 2825 	push	_RANGER_PW
      000698 C0*2E            [24] 2826 	push	(_RANGER_PW + 1)
      00069A 74r5C            [12] 2827 	mov	a,#___str_5
      00069C C0 E0            [24] 2828 	push	acc
      00069E 74s00            [12] 2829 	mov	a,#(___str_5 >> 8)
      0006A0 C0 E0            [24] 2830 	push	acc
      0006A2 74 80            [12] 2831 	mov	a,#0x80
      0006A4 C0 E0            [24] 2832 	push	acc
      0006A6 12r00r00         [24] 2833 	lcall	_printf
      0006A9 E5 81            [12] 2834 	mov	a,sp
      0006AB 24 FB            [12] 2835 	add	a,#0xfb
      0006AD F5 81            [12] 2836 	mov	sp,a
      0006AF                       2837 00102$:
                           0006AF  2838 	C$Lab_4.c$220$1$146 ==.
                                   2839 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:220: RANGER_PW = motor_error(range);	//Adjust Pulsewidth for motor control
      0006AF 85*22 82         [24] 2840 	mov	dpl,_range
      0006B2 85*23 83         [24] 2841 	mov	dph,(_range + 1)
      0006B5 12r07rBA         [24] 2842 	lcall	_motor_error
      0006B8 85 82*2D         [24] 2843 	mov	_RANGER_PW,dpl
      0006BB 85 83*2E         [24] 2844 	mov	(_RANGER_PW + 1),dph
                           0006BE  2845 	C$Lab_4.c$221$1$146 ==.
                                   2846 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:221: if(RANGER_PW > RANGER_MAX) RANGER_PW = RANGER_MAX;
      0006BE C3               [12] 2847 	clr	c
      0006BF E5*18            [12] 2848 	mov	a,_RANGER_MAX
      0006C1 95*2D            [12] 2849 	subb	a,_RANGER_PW
      0006C3 E5*19            [12] 2850 	mov	a,(_RANGER_MAX + 1)
      0006C5 95*2E            [12] 2851 	subb	a,(_RANGER_PW + 1)
      0006C7 50 06            [24] 2852 	jnc	00104$
      0006C9 85*18*2D         [24] 2853 	mov	_RANGER_PW,_RANGER_MAX
      0006CC 85*19*2E         [24] 2854 	mov	(_RANGER_PW + 1),(_RANGER_MAX + 1)
      0006CF                       2855 00104$:
                           0006CF  2856 	C$Lab_4.c$222$1$146 ==.
                                   2857 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:222: if(RANGER_PW < RANGER_MIN) RANGER_PW = RANGER_MIN;
      0006CF C3               [12] 2858 	clr	c
      0006D0 E5*2D            [12] 2859 	mov	a,_RANGER_PW
      0006D2 95*1A            [12] 2860 	subb	a,_RANGER_MIN
      0006D4 E5*2E            [12] 2861 	mov	a,(_RANGER_PW + 1)
      0006D6 95*1B            [12] 2862 	subb	a,(_RANGER_MIN + 1)
      0006D8 50 06            [24] 2863 	jnc	00106$
      0006DA 85*1A*2D         [24] 2864 	mov	_RANGER_PW,_RANGER_MIN
      0006DD 85*1B*2E         [24] 2865 	mov	(_RANGER_PW + 1),(_RANGER_MIN + 1)
      0006E0                       2866 00106$:
                           0006E0  2867 	C$Lab_4.c$223$1$146 ==.
                                   2868 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:223: PCA0CP2 = 0xFFFF - RANGER_PW;	
      0006E0 74 FF            [12] 2869 	mov	a,#0xFF
      0006E2 C3               [12] 2870 	clr	c
      0006E3 95*2D            [12] 2871 	subb	a,_RANGER_PW
      0006E5 F5 EC            [12] 2872 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      0006E7 74 FF            [12] 2873 	mov	a,#0xFF
      0006E9 95*2E            [12] 2874 	subb	a,(_RANGER_PW + 1)
      0006EB F5 FC            [12] 2875 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0006ED  2876 	C$Lab_4.c$224$1$146 ==.
                           0006ED  2877 	XG$set_drive_PWM$0$0 ==.
      0006ED 22               [24] 2878 	ret
                                   2879 ;------------------------------------------------------------
                                   2880 ;Allocation info for local variables in function 'pick_heading'
                                   2881 ;------------------------------------------------------------
                                   2882 ;input_heading             Allocated to registers r6 r7 
                                   2883 ;------------------------------------------------------------
                           0006EE  2884 	G$pick_heading$0$0 ==.
                           0006EE  2885 	C$Lab_4.c$228$1$146 ==.
                                   2886 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:228: int pick_heading(void)
                                   2887 ;	-----------------------------------------
                                   2888 ;	 function pick_heading
                                   2889 ;	-----------------------------------------
      0006EE                       2890 _pick_heading:
                           0006EE  2891 	C$Lab_4.c$231$1$149 ==.
                                   2892 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:231: printf("\rInput desired heading on keypad, in degrees.\n");
      0006EE 74r67            [12] 2893 	mov	a,#___str_6
      0006F0 C0 E0            [24] 2894 	push	acc
      0006F2 74s00            [12] 2895 	mov	a,#(___str_6 >> 8)
      0006F4 C0 E0            [24] 2896 	push	acc
      0006F6 74 80            [12] 2897 	mov	a,#0x80
      0006F8 C0 E0            [24] 2898 	push	acc
      0006FA 12r00r00         [24] 2899 	lcall	_printf
      0006FD 15 81            [12] 2900 	dec	sp
      0006FF 15 81            [12] 2901 	dec	sp
      000701 15 81            [12] 2902 	dec	sp
                           000703  2903 	C$Lab_4.c$232$1$149 ==.
                                   2904 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:232: printf("\rAny number above 360 will be interpreted as 360.\n");
      000703 74r96            [12] 2905 	mov	a,#___str_7
      000705 C0 E0            [24] 2906 	push	acc
      000707 74s00            [12] 2907 	mov	a,#(___str_7 >> 8)
      000709 C0 E0            [24] 2908 	push	acc
      00070B 74 80            [12] 2909 	mov	a,#0x80
      00070D C0 E0            [24] 2910 	push	acc
      00070F 12r00r00         [24] 2911 	lcall	_printf
      000712 15 81            [12] 2912 	dec	sp
      000714 15 81            [12] 2913 	dec	sp
      000716 15 81            [12] 2914 	dec	sp
                           000718  2915 	C$Lab_4.c$233$1$149 ==.
                                   2916 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:233: input_heading = kpd_input(1);
      000718 75 82 01         [24] 2917 	mov	dpl,#0x01
      00071B 12r01r99         [24] 2918 	lcall	_kpd_input
      00071E AE 82            [24] 2919 	mov	r6,dpl
      000720 AF 83            [24] 2920 	mov	r7,dph
                           000722  2921 	C$Lab_4.c$234$1$149 ==.
                                   2922 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:234: if(input_heading >= 360) input_heading = 0;
      000722 C3               [12] 2923 	clr	c
      000723 EE               [12] 2924 	mov	a,r6
      000724 94 68            [12] 2925 	subb	a,#0x68
      000726 EF               [12] 2926 	mov	a,r7
      000727 94 01            [12] 2927 	subb	a,#0x01
      000729 40 04            [24] 2928 	jc	00102$
      00072B 7E 00            [12] 2929 	mov	r6,#0x00
      00072D 7F 00            [12] 2930 	mov	r7,#0x00
      00072F                       2931 00102$:
                           00072F  2932 	C$Lab_4.c$235$1$149 ==.
                                   2933 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:235: printf("\rDesired heading is %u degrees", input_heading);
      00072F C0 06            [24] 2934 	push	ar6
      000731 C0 07            [24] 2935 	push	ar7
      000733 74rC9            [12] 2936 	mov	a,#___str_8
      000735 C0 E0            [24] 2937 	push	acc
      000737 74s00            [12] 2938 	mov	a,#(___str_8 >> 8)
      000739 C0 E0            [24] 2939 	push	acc
      00073B 74 80            [12] 2940 	mov	a,#0x80
      00073D C0 E0            [24] 2941 	push	acc
      00073F 12r00r00         [24] 2942 	lcall	_printf
      000742 E5 81            [12] 2943 	mov	a,sp
      000744 24 FB            [12] 2944 	add	a,#0xfb
      000746 F5 81            [12] 2945 	mov	sp,a
                           000748  2946 	C$Lab_4.c$236$1$149 ==.
                           000748  2947 	XG$pick_heading$0$0 ==.
      000748 22               [24] 2948 	ret
                                   2949 ;------------------------------------------------------------
                                   2950 ;Allocation info for local variables in function 'servo_error'
                                   2951 ;------------------------------------------------------------
                                   2952 ;heading                   Allocated to registers r6 r7 
                                   2953 ;Error                     Allocated to registers r6 r7 
                                   2954 ;PWMe                      Allocated to registers r6 r7 
                                   2955 ;k                         Allocated to registers r5 
                                   2956 ;------------------------------------------------------------
                           000749  2957 	G$servo_error$0$0 ==.
                           000749  2958 	C$Lab_4.c$238$1$149 ==.
                                   2959 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:238: signed int servo_error(unsigned int heading)
                                   2960 ;	-----------------------------------------
                                   2961 ;	 function servo_error
                                   2962 ;	-----------------------------------------
      000749                       2963 _servo_error:
      000749 AE 82            [24] 2964 	mov	r6,dpl
      00074B AF 83            [24] 2965 	mov	r7,dph
                           00074D  2966 	C$Lab_4.c$242$1$149 ==.
                                   2967 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:242: unsigned char k = 1;				//Gain constant. Higher numbers turn more, lower numbers turn less.
      00074D 7D 01            [12] 2968 	mov	r5,#0x01
                           00074F  2969 	C$Lab_4.c$243$1$151 ==.
                                   2970 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:243: Error = (desired_heading) - heading;	//Calculate the error
      00074F E5*26            [12] 2971 	mov	a,_desired_heading
      000751 C3               [12] 2972 	clr	c
      000752 9E               [12] 2973 	subb	a,r6
      000753 FE               [12] 2974 	mov	r6,a
      000754 E5*27            [12] 2975 	mov	a,(_desired_heading + 1)
      000756 9F               [12] 2976 	subb	a,r7
      000757 FF               [12] 2977 	mov	r7,a
                           000758  2978 	C$Lab_4.c$244$1$151 ==.
                                   2979 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:244: if(Error < 1800) Error = Error + 3600;	//Adjust the Error for +/- 180 degrees
      000758 C3               [12] 2980 	clr	c
      000759 EE               [12] 2981 	mov	a,r6
      00075A 94 08            [12] 2982 	subb	a,#0x08
      00075C EF               [12] 2983 	mov	a,r7
      00075D 64 80            [12] 2984 	xrl	a,#0x80
      00075F 94 87            [12] 2985 	subb	a,#0x87
      000761 50 08            [24] 2986 	jnc	00102$
      000763 74 10            [12] 2987 	mov	a,#0x10
      000765 2E               [12] 2988 	add	a,r6
      000766 FE               [12] 2989 	mov	r6,a
      000767 74 0E            [12] 2990 	mov	a,#0x0E
      000769 3F               [12] 2991 	addc	a,r7
      00076A FF               [12] 2992 	mov	r7,a
      00076B                       2993 00102$:
                           00076B  2994 	C$Lab_4.c$245$1$151 ==.
                                   2995 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:245: if(Error > 1800) Error = Error - 3600;
      00076B C3               [12] 2996 	clr	c
      00076C 74 08            [12] 2997 	mov	a,#0x08
      00076E 9E               [12] 2998 	subb	a,r6
      00076F 74 87            [12] 2999 	mov	a,#(0x07 ^ 0x80)
      000771 8F F0            [24] 3000 	mov	b,r7
      000773 63 F0 80         [24] 3001 	xrl	b,#0x80
      000776 95 F0            [12] 3002 	subb	a,b
      000778 50 08            [24] 3003 	jnc	00104$
      00077A EE               [12] 3004 	mov	a,r6
      00077B 24 F0            [12] 3005 	add	a,#0xF0
      00077D FE               [12] 3006 	mov	r6,a
      00077E EF               [12] 3007 	mov	a,r7
      00077F 34 F1            [12] 3008 	addc	a,#0xF1
      000781 FF               [12] 3009 	mov	r7,a
      000782                       3010 00104$:
                           000782  3011 	C$Lab_4.c$246$1$151 ==.
                                   3012 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:246: PWMe = COMPASS_CENTER + (k*Error);
      000782 7C 00            [12] 3013 	mov	r4,#0x00
      000784 8E*00            [24] 3014 	mov	__mulint_PARM_2,r6
      000786 8F*01            [24] 3015 	mov	(__mulint_PARM_2 + 1),r7
      000788 8D 82            [24] 3016 	mov	dpl,r5
      00078A 8C 83            [24] 3017 	mov	dph,r4
      00078C 12r00r00         [24] 3018 	lcall	__mulint
      00078F AE 82            [24] 3019 	mov	r6,dpl
      000791 AF 83            [24] 3020 	mov	r7,dph
      000793 EE               [12] 3021 	mov	a,r6
      000794 25*10            [12] 3022 	add	a,_COMPASS_CENTER
      000796 FE               [12] 3023 	mov	r6,a
      000797 EF               [12] 3024 	mov	a,r7
      000798 35*11            [12] 3025 	addc	a,(_COMPASS_CENTER + 1)
      00079A FF               [12] 3026 	mov	r7,a
                           00079B  3027 	C$Lab_4.c$247$1$151 ==.
                                   3028 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:247: if(PWMe < COMPASS_MIN) PWMe = COMPASS_MIN;
      00079B C3               [12] 3029 	clr	c
      00079C EE               [12] 3030 	mov	a,r6
      00079D 95*14            [12] 3031 	subb	a,_COMPASS_MIN
      00079F EF               [12] 3032 	mov	a,r7
      0007A0 95*15            [12] 3033 	subb	a,(_COMPASS_MIN + 1)
      0007A2 50 04            [24] 3034 	jnc	00106$
      0007A4 AE*14            [24] 3035 	mov	r6,_COMPASS_MIN
      0007A6 AF*15            [24] 3036 	mov	r7,(_COMPASS_MIN + 1)
      0007A8                       3037 00106$:
                           0007A8  3038 	C$Lab_4.c$248$1$151 ==.
                                   3039 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:248: if(PWMe > COMPASS_MAX) PWMe = COMPASS_MAX;
      0007A8 C3               [12] 3040 	clr	c
      0007A9 E5*12            [12] 3041 	mov	a,_COMPASS_MAX
      0007AB 9E               [12] 3042 	subb	a,r6
      0007AC E5*13            [12] 3043 	mov	a,(_COMPASS_MAX + 1)
      0007AE 9F               [12] 3044 	subb	a,r7
      0007AF 50 04            [24] 3045 	jnc	00108$
      0007B1 AE*12            [24] 3046 	mov	r6,_COMPASS_MAX
      0007B3 AF*13            [24] 3047 	mov	r7,(_COMPASS_MAX + 1)
      0007B5                       3048 00108$:
                           0007B5  3049 	C$Lab_4.c$249$1$151 ==.
                                   3050 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:249: return PWMe;
      0007B5 8E 82            [24] 3051 	mov	dpl,r6
      0007B7 8F 83            [24] 3052 	mov	dph,r7
                           0007B9  3053 	C$Lab_4.c$250$1$151 ==.
                           0007B9  3054 	XG$servo_error$0$0 ==.
      0007B9 22               [24] 3055 	ret
                                   3056 ;------------------------------------------------------------
                                   3057 ;Allocation info for local variables in function 'motor_error'
                                   3058 ;------------------------------------------------------------
                                   3059 ;range                     Allocated to registers r6 r7 
                                   3060 ;Error                     Allocated to registers r6 r7 
                                   3061 ;PWMe                      Allocated to registers r4 r5 
                                   3062 ;k                         Allocated to registers 
                                   3063 ;------------------------------------------------------------
                           0007BA  3064 	G$motor_error$0$0 ==.
                           0007BA  3065 	C$Lab_4.c$252$1$151 ==.
                                   3066 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:252: signed int motor_error(unsigned int range)
                                   3067 ;	-----------------------------------------
                                   3068 ;	 function motor_error
                                   3069 ;	-----------------------------------------
      0007BA                       3070 _motor_error:
      0007BA AE 82            [24] 3071 	mov	r6,dpl
      0007BC AF 83            [24] 3072 	mov	r7,dph
                           0007BE  3073 	C$Lab_4.c$257$1$153 ==.
                                   3074 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:257: Error = (desired_range) - range;	// Calculate the error
      0007BE E5*28            [12] 3075 	mov	a,_desired_range
      0007C0 C3               [12] 3076 	clr	c
      0007C1 9E               [12] 3077 	subb	a,r6
      0007C2 FE               [12] 3078 	mov	r6,a
      0007C3 E5*29            [12] 3079 	mov	a,(_desired_range + 1)
      0007C5 9F               [12] 3080 	subb	a,r7
      0007C6 FF               [12] 3081 	mov	r7,a
                           0007C7  3082 	C$Lab_4.c$258$1$153 ==.
                                   3083 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:258: PWMe = RANGER_CENTER + (k*Error);
      0007C7 8E*00            [24] 3084 	mov	__mulint_PARM_2,r6
      0007C9 8F*01            [24] 3085 	mov	(__mulint_PARM_2 + 1),r7
      0007CB 90 00 14         [24] 3086 	mov	dptr,#0x0014
      0007CE C0 07            [24] 3087 	push	ar7
      0007D0 C0 06            [24] 3088 	push	ar6
      0007D2 12r00r00         [24] 3089 	lcall	__mulint
      0007D5 AC 82            [24] 3090 	mov	r4,dpl
      0007D7 AD 83            [24] 3091 	mov	r5,dph
      0007D9 D0 06            [24] 3092 	pop	ar6
      0007DB D0 07            [24] 3093 	pop	ar7
      0007DD EC               [12] 3094 	mov	a,r4
      0007DE 25*16            [12] 3095 	add	a,_RANGER_CENTER
      0007E0 FC               [12] 3096 	mov	r4,a
      0007E1 ED               [12] 3097 	mov	a,r5
      0007E2 35*17            [12] 3098 	addc	a,(_RANGER_CENTER + 1)
      0007E4 FD               [12] 3099 	mov	r5,a
                           0007E5  3100 	C$Lab_4.c$259$1$153 ==.
                                   3101 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:259: if(PWMe < RANGER_MIN) PWMe = RANGER_MIN;
      0007E5 C3               [12] 3102 	clr	c
      0007E6 EC               [12] 3103 	mov	a,r4
      0007E7 95*1A            [12] 3104 	subb	a,_RANGER_MIN
      0007E9 ED               [12] 3105 	mov	a,r5
      0007EA 95*1B            [12] 3106 	subb	a,(_RANGER_MIN + 1)
      0007EC 50 04            [24] 3107 	jnc	00102$
      0007EE AC*1A            [24] 3108 	mov	r4,_RANGER_MIN
      0007F0 AD*1B            [24] 3109 	mov	r5,(_RANGER_MIN + 1)
      0007F2                       3110 00102$:
                           0007F2  3111 	C$Lab_4.c$260$1$153 ==.
                                   3112 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:260: if(PWMe > RANGER_MAX) PWMe = RANGER_MAX;
      0007F2 C3               [12] 3113 	clr	c
      0007F3 E5*18            [12] 3114 	mov	a,_RANGER_MAX
      0007F5 9C               [12] 3115 	subb	a,r4
      0007F6 E5*19            [12] 3116 	mov	a,(_RANGER_MAX + 1)
      0007F8 9D               [12] 3117 	subb	a,r5
      0007F9 50 04            [24] 3118 	jnc	00104$
      0007FB AC*18            [24] 3119 	mov	r4,_RANGER_MAX
      0007FD AD*19            [24] 3120 	mov	r5,(_RANGER_MAX + 1)
      0007FF                       3121 00104$:
                           0007FF  3122 	C$Lab_4.c$261$1$153 ==.
                                   3123 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:261: if((-5<Error) && (Error<5)) PWMe = RANGER_CENTER;
      0007FF C3               [12] 3124 	clr	c
      000800 74 FB            [12] 3125 	mov	a,#0xFB
      000802 9E               [12] 3126 	subb	a,r6
      000803 74 7F            [12] 3127 	mov	a,#(0xFF ^ 0x80)
      000805 8F F0            [24] 3128 	mov	b,r7
      000807 63 F0 80         [24] 3129 	xrl	b,#0x80
      00080A 95 F0            [12] 3130 	subb	a,b
      00080C 50 0F            [24] 3131 	jnc	00106$
      00080E C3               [12] 3132 	clr	c
      00080F EE               [12] 3133 	mov	a,r6
      000810 94 05            [12] 3134 	subb	a,#0x05
      000812 EF               [12] 3135 	mov	a,r7
      000813 64 80            [12] 3136 	xrl	a,#0x80
      000815 94 80            [12] 3137 	subb	a,#0x80
      000817 50 04            [24] 3138 	jnc	00106$
      000819 AC*16            [24] 3139 	mov	r4,_RANGER_CENTER
      00081B AD*17            [24] 3140 	mov	r5,(_RANGER_CENTER + 1)
      00081D                       3141 00106$:
                           00081D  3142 	C$Lab_4.c$264$1$153 ==.
                                   3143 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Lab 4 Code\Lab_4.c:264: return PWMe;
      00081D 8C 82            [24] 3144 	mov	dpl,r4
      00081F 8D 83            [24] 3145 	mov	dph,r5
                           000821  3146 	C$Lab_4.c$265$1$153 ==.
                           000821  3147 	XG$motor_error$0$0 ==.
      000821 22               [24] 3148 	ret
                                   3149 	.area CSEG    (CODE)
                                   3150 	.area CONST   (CODE)
                           000000  3151 FLab_4$__str_0$0$0 == .
      000000                       3152 ___str_0:
      000000 0A                    3153 	.db 0x0A
      000001 54 79 70 65 20 64 69  3154 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3155 	.db 0x00
                           000016  3156 FLab_4$__str_1$0$0 == .
      000016                       3157 ___str_1:
      000016 20 20 20 20 20 25 63  3158 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3159 	.db 0x00
                           000026  3160 FLab_4$__str_2$0$0 == .
      000026                       3161 ___str_2:
      000026 25 63                 3162 	.ascii "%c"
      000028 00                    3163 	.db 0x00
                           000029  3164 FLab_4$__str_3$0$0 == .
      000029                       3165 ___str_3:
      000029 0D                    3166 	.db 0x0D
      00002A 54 68 65 20 63 75 72  3167 	.ascii "The current direction is %u"
             72 65 6E 74 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 20 25 75
      000045 0A                    3168 	.db 0x0A
      000046 00                    3169 	.db 0x00
                           000047  3170 FLab_4$__str_4$0$0 == .
      000047                       3171 ___str_4:
      000047 0D                    3172 	.db 0x0D
      000048 54 68 65 20 72 61 6E  3173 	.ascii "The range is %u cm"
             67 65 20 69 73 20 25
             75 20 63 6D
      00005A 0A                    3174 	.db 0x0A
      00005B 00                    3175 	.db 0x00
                           00005C  3176 FLab_4$__str_5$0$0 == .
      00005C                       3177 ___str_5:
      00005C 0D                    3178 	.db 0x0D
      00005D 50 57 20 69 73 20 25  3179 	.ascii "PW is %u"
             75
      000065 0A                    3180 	.db 0x0A
      000066 00                    3181 	.db 0x00
                           000067  3182 FLab_4$__str_6$0$0 == .
      000067                       3183 ___str_6:
      000067 0D                    3184 	.db 0x0D
      000068 49 6E 70 75 74 20 64  3185 	.ascii "Input desired heading on keypad, in degrees."
             65 73 69 72 65 64 20
             68 65 61 64 69 6E 67
             20 6F 6E 20 6B 65 79
             70 61 64 2C 20 69 6E
             20 64 65 67 72 65 65
             73 2E
      000094 0A                    3186 	.db 0x0A
      000095 00                    3187 	.db 0x00
                           000096  3188 FLab_4$__str_7$0$0 == .
      000096                       3189 ___str_7:
      000096 0D                    3190 	.db 0x0D
      000097 41 6E 79 20 6E 75 6D  3191 	.ascii "Any number above 360 will be interpreted as 360."
             62 65 72 20 61 62 6F
             76 65 20 33 36 30 20
             77 69 6C 6C 20 62 65
             20 69 6E 74 65 72 70
             72 65 74 65 64 20 61
             73 20 33 36 30 2E
      0000C7 0A                    3192 	.db 0x0A
      0000C8 00                    3193 	.db 0x00
                           0000C9  3194 FLab_4$__str_8$0$0 == .
      0000C9                       3195 ___str_8:
      0000C9 0D                    3196 	.db 0x0D
      0000CA 44 65 73 69 72 65 64  3197 	.ascii "Desired heading is %u degrees"
             20 68 65 61 64 69 6E
             67 20 69 73 20 25 75
             20 64 65 67 72 65 65
             73
      0000E7 00                    3198 	.db 0x00
                                   3199 	.area XINIT   (CODE)
                                   3200 	.area CABS    (ABS,CODE)
