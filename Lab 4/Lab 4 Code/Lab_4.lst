                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Apr 16 19:11:53 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab_4
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _steering_gain
                                     13 	.globl _main
                                     14 	.globl _heading_gain
                                     15 	.globl _read_keypad
                                     16 	.globl _strlen
                                     17 	.globl _vsprintf
                                     18 	.globl _printf
                                     19 	.globl _Sys_Init
                                     20 	.globl _UART0_Init
                                     21 	.globl _SYSCLK_Init
                                     22 	.globl _RANGER_SWITCH
                                     23 	.globl _COMPASS_SWITCH
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _speed
                                    310 	.globl _compass_gain
                                    311 	.globl _RANGER_PW
                                    312 	.globl _COMPASS_PW
                                    313 	.globl _heading_delay
                                    314 	.globl _desired_range
                                    315 	.globl _desired_heading
                                    316 	.globl _h_count
                                    317 	.globl _r_count
                                    318 	.globl _range
                                    319 	.globl _heading
                                    320 	.globl _new_range
                                    321 	.globl _new_heading
                                    322 	.globl _PCA_START
                                    323 	.globl _RANGER_MIN
                                    324 	.globl _RANGER_MAX
                                    325 	.globl _RANGER_CENTER
                                    326 	.globl _COMPASS_MIN
                                    327 	.globl _COMPASS_MAX
                                    328 	.globl _COMPASS_CENTER
                                    329 	.globl _i2c_read_data_PARM_4
                                    330 	.globl _i2c_read_data_PARM_3
                                    331 	.globl _i2c_read_data_PARM_2
                                    332 	.globl _i2c_write_data_PARM_4
                                    333 	.globl _i2c_write_data_PARM_3
                                    334 	.globl _i2c_write_data_PARM_2
                                    335 	.globl _lcd_print
                                    336 	.globl _lcd_clear
                                    337 	.globl _kpd_input
                                    338 	.globl _delay_time
                                    339 	.globl _i2c_start
                                    340 	.globl _i2c_write
                                    341 	.globl _i2c_write_and_stop
                                    342 	.globl _i2c_read
                                    343 	.globl _i2c_read_and_stop
                                    344 	.globl _i2c_write_data
                                    345 	.globl _i2c_read_data
                                    346 	.globl _Accel_Init
                                    347 	.globl _Port_Init
                                    348 	.globl _PCA_Init
                                    349 	.globl _PCA_ISR
                                    350 	.globl _SMB_Init
                                    351 	.globl _ADC_Init
                                    352 	.globl _Interrupt_Init
                                    353 	.globl _read_compass
                                    354 	.globl _set_servo_PWM
                                    355 	.globl _read_ranger
                                    356 	.globl _set_drive_PWM
                                    357 	.globl _pick_heading
                                    358 	.globl _servo_error
                                    359 	.globl _motor_error
                                    360 	.globl _input_speed
                                    361 ;--------------------------------------------------------
                                    362 ; special function registers
                                    363 ;--------------------------------------------------------
                                    364 	.area RSEG    (ABS,DATA)
      000000                        365 	.org 0x0000
                           000080   366 G$P0$0$0 == 0x0080
                           000080   367 _P0	=	0x0080
                           000081   368 G$SP$0$0 == 0x0081
                           000081   369 _SP	=	0x0081
                           000082   370 G$DPL$0$0 == 0x0082
                           000082   371 _DPL	=	0x0082
                           000083   372 G$DPH$0$0 == 0x0083
                           000083   373 _DPH	=	0x0083
                           000084   374 G$P4$0$0 == 0x0084
                           000084   375 _P4	=	0x0084
                           000085   376 G$P5$0$0 == 0x0085
                           000085   377 _P5	=	0x0085
                           000086   378 G$P6$0$0 == 0x0086
                           000086   379 _P6	=	0x0086
                           000087   380 G$PCON$0$0 == 0x0087
                           000087   381 _PCON	=	0x0087
                           000088   382 G$TCON$0$0 == 0x0088
                           000088   383 _TCON	=	0x0088
                           000089   384 G$TMOD$0$0 == 0x0089
                           000089   385 _TMOD	=	0x0089
                           00008A   386 G$TL0$0$0 == 0x008a
                           00008A   387 _TL0	=	0x008a
                           00008B   388 G$TL1$0$0 == 0x008b
                           00008B   389 _TL1	=	0x008b
                           00008C   390 G$TH0$0$0 == 0x008c
                           00008C   391 _TH0	=	0x008c
                           00008D   392 G$TH1$0$0 == 0x008d
                           00008D   393 _TH1	=	0x008d
                           00008E   394 G$CKCON$0$0 == 0x008e
                           00008E   395 _CKCON	=	0x008e
                           00008F   396 G$PSCTL$0$0 == 0x008f
                           00008F   397 _PSCTL	=	0x008f
                           000090   398 G$P1$0$0 == 0x0090
                           000090   399 _P1	=	0x0090
                           000091   400 G$TMR3CN$0$0 == 0x0091
                           000091   401 _TMR3CN	=	0x0091
                           000092   402 G$TMR3RLL$0$0 == 0x0092
                           000092   403 _TMR3RLL	=	0x0092
                           000093   404 G$TMR3RLH$0$0 == 0x0093
                           000093   405 _TMR3RLH	=	0x0093
                           000094   406 G$TMR3L$0$0 == 0x0094
                           000094   407 _TMR3L	=	0x0094
                           000095   408 G$TMR3H$0$0 == 0x0095
                           000095   409 _TMR3H	=	0x0095
                           000096   410 G$P7$0$0 == 0x0096
                           000096   411 _P7	=	0x0096
                           000098   412 G$SCON$0$0 == 0x0098
                           000098   413 _SCON	=	0x0098
                           000098   414 G$SCON0$0$0 == 0x0098
                           000098   415 _SCON0	=	0x0098
                           000099   416 G$SBUF$0$0 == 0x0099
                           000099   417 _SBUF	=	0x0099
                           000099   418 G$SBUF0$0$0 == 0x0099
                           000099   419 _SBUF0	=	0x0099
                           00009A   420 G$SPI0CFG$0$0 == 0x009a
                           00009A   421 _SPI0CFG	=	0x009a
                           00009B   422 G$SPI0DAT$0$0 == 0x009b
                           00009B   423 _SPI0DAT	=	0x009b
                           00009C   424 G$ADC1$0$0 == 0x009c
                           00009C   425 _ADC1	=	0x009c
                           00009D   426 G$SPI0CKR$0$0 == 0x009d
                           00009D   427 _SPI0CKR	=	0x009d
                           00009E   428 G$CPT0CN$0$0 == 0x009e
                           00009E   429 _CPT0CN	=	0x009e
                           00009F   430 G$CPT1CN$0$0 == 0x009f
                           00009F   431 _CPT1CN	=	0x009f
                           0000A0   432 G$P2$0$0 == 0x00a0
                           0000A0   433 _P2	=	0x00a0
                           0000A1   434 G$EMI0TC$0$0 == 0x00a1
                           0000A1   435 _EMI0TC	=	0x00a1
                           0000A3   436 G$EMI0CF$0$0 == 0x00a3
                           0000A3   437 _EMI0CF	=	0x00a3
                           0000A4   438 G$PRT0CF$0$0 == 0x00a4
                           0000A4   439 _PRT0CF	=	0x00a4
                           0000A4   440 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   441 _P0MDOUT	=	0x00a4
                           0000A5   442 G$PRT1CF$0$0 == 0x00a5
                           0000A5   443 _PRT1CF	=	0x00a5
                           0000A5   444 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   445 _P1MDOUT	=	0x00a5
                           0000A6   446 G$PRT2CF$0$0 == 0x00a6
                           0000A6   447 _PRT2CF	=	0x00a6
                           0000A6   448 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   449 _P2MDOUT	=	0x00a6
                           0000A7   450 G$PRT3CF$0$0 == 0x00a7
                           0000A7   451 _PRT3CF	=	0x00a7
                           0000A7   452 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   453 _P3MDOUT	=	0x00a7
                           0000A8   454 G$IE$0$0 == 0x00a8
                           0000A8   455 _IE	=	0x00a8
                           0000A9   456 G$SADDR0$0$0 == 0x00a9
                           0000A9   457 _SADDR0	=	0x00a9
                           0000AA   458 G$ADC1CN$0$0 == 0x00aa
                           0000AA   459 _ADC1CN	=	0x00aa
                           0000AB   460 G$ADC1CF$0$0 == 0x00ab
                           0000AB   461 _ADC1CF	=	0x00ab
                           0000AC   462 G$AMX1SL$0$0 == 0x00ac
                           0000AC   463 _AMX1SL	=	0x00ac
                           0000AD   464 G$P3IF$0$0 == 0x00ad
                           0000AD   465 _P3IF	=	0x00ad
                           0000AE   466 G$SADEN1$0$0 == 0x00ae
                           0000AE   467 _SADEN1	=	0x00ae
                           0000AF   468 G$EMI0CN$0$0 == 0x00af
                           0000AF   469 _EMI0CN	=	0x00af
                           0000AF   470 G$_XPAGE$0$0 == 0x00af
                           0000AF   471 __XPAGE	=	0x00af
                           0000B0   472 G$P3$0$0 == 0x00b0
                           0000B0   473 _P3	=	0x00b0
                           0000B1   474 G$OSCXCN$0$0 == 0x00b1
                           0000B1   475 _OSCXCN	=	0x00b1
                           0000B2   476 G$OSCICN$0$0 == 0x00b2
                           0000B2   477 _OSCICN	=	0x00b2
                           0000B5   478 G$P74OUT$0$0 == 0x00b5
                           0000B5   479 _P74OUT	=	0x00b5
                           0000B6   480 G$FLSCL$0$0 == 0x00b6
                           0000B6   481 _FLSCL	=	0x00b6
                           0000B7   482 G$FLACL$0$0 == 0x00b7
                           0000B7   483 _FLACL	=	0x00b7
                           0000B8   484 G$IP$0$0 == 0x00b8
                           0000B8   485 _IP	=	0x00b8
                           0000B9   486 G$SADEN0$0$0 == 0x00b9
                           0000B9   487 _SADEN0	=	0x00b9
                           0000BA   488 G$AMX0CF$0$0 == 0x00ba
                           0000BA   489 _AMX0CF	=	0x00ba
                           0000BB   490 G$AMX0SL$0$0 == 0x00bb
                           0000BB   491 _AMX0SL	=	0x00bb
                           0000BC   492 G$ADC0CF$0$0 == 0x00bc
                           0000BC   493 _ADC0CF	=	0x00bc
                           0000BD   494 G$P1MDIN$0$0 == 0x00bd
                           0000BD   495 _P1MDIN	=	0x00bd
                           0000BE   496 G$ADC0L$0$0 == 0x00be
                           0000BE   497 _ADC0L	=	0x00be
                           0000BF   498 G$ADC0H$0$0 == 0x00bf
                           0000BF   499 _ADC0H	=	0x00bf
                           0000C0   500 G$SMB0CN$0$0 == 0x00c0
                           0000C0   501 _SMB0CN	=	0x00c0
                           0000C1   502 G$SMB0STA$0$0 == 0x00c1
                           0000C1   503 _SMB0STA	=	0x00c1
                           0000C2   504 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   505 _SMB0DAT	=	0x00c2
                           0000C3   506 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   507 _SMB0ADR	=	0x00c3
                           0000C4   508 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   509 _ADC0GTL	=	0x00c4
                           0000C5   510 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   511 _ADC0GTH	=	0x00c5
                           0000C6   512 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   513 _ADC0LTL	=	0x00c6
                           0000C7   514 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   515 _ADC0LTH	=	0x00c7
                           0000C8   516 G$T2CON$0$0 == 0x00c8
                           0000C8   517 _T2CON	=	0x00c8
                           0000C9   518 G$T4CON$0$0 == 0x00c9
                           0000C9   519 _T4CON	=	0x00c9
                           0000CA   520 G$RCAP2L$0$0 == 0x00ca
                           0000CA   521 _RCAP2L	=	0x00ca
                           0000CB   522 G$RCAP2H$0$0 == 0x00cb
                           0000CB   523 _RCAP2H	=	0x00cb
                           0000CC   524 G$TL2$0$0 == 0x00cc
                           0000CC   525 _TL2	=	0x00cc
                           0000CD   526 G$TH2$0$0 == 0x00cd
                           0000CD   527 _TH2	=	0x00cd
                           0000CF   528 G$SMB0CR$0$0 == 0x00cf
                           0000CF   529 _SMB0CR	=	0x00cf
                           0000D0   530 G$PSW$0$0 == 0x00d0
                           0000D0   531 _PSW	=	0x00d0
                           0000D1   532 G$REF0CN$0$0 == 0x00d1
                           0000D1   533 _REF0CN	=	0x00d1
                           0000D2   534 G$DAC0L$0$0 == 0x00d2
                           0000D2   535 _DAC0L	=	0x00d2
                           0000D3   536 G$DAC0H$0$0 == 0x00d3
                           0000D3   537 _DAC0H	=	0x00d3
                           0000D4   538 G$DAC0CN$0$0 == 0x00d4
                           0000D4   539 _DAC0CN	=	0x00d4
                           0000D5   540 G$DAC1L$0$0 == 0x00d5
                           0000D5   541 _DAC1L	=	0x00d5
                           0000D6   542 G$DAC1H$0$0 == 0x00d6
                           0000D6   543 _DAC1H	=	0x00d6
                           0000D7   544 G$DAC1CN$0$0 == 0x00d7
                           0000D7   545 _DAC1CN	=	0x00d7
                           0000D8   546 G$PCA0CN$0$0 == 0x00d8
                           0000D8   547 _PCA0CN	=	0x00d8
                           0000D9   548 G$PCA0MD$0$0 == 0x00d9
                           0000D9   549 _PCA0MD	=	0x00d9
                           0000DA   550 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   551 _PCA0CPM0	=	0x00da
                           0000DB   552 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   553 _PCA0CPM1	=	0x00db
                           0000DC   554 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   555 _PCA0CPM2	=	0x00dc
                           0000DD   556 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   557 _PCA0CPM3	=	0x00dd
                           0000DE   558 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   559 _PCA0CPM4	=	0x00de
                           0000E0   560 G$ACC$0$0 == 0x00e0
                           0000E0   561 _ACC	=	0x00e0
                           0000E1   562 G$XBR0$0$0 == 0x00e1
                           0000E1   563 _XBR0	=	0x00e1
                           0000E2   564 G$XBR1$0$0 == 0x00e2
                           0000E2   565 _XBR1	=	0x00e2
                           0000E3   566 G$XBR2$0$0 == 0x00e3
                           0000E3   567 _XBR2	=	0x00e3
                           0000E4   568 G$RCAP4L$0$0 == 0x00e4
                           0000E4   569 _RCAP4L	=	0x00e4
                           0000E5   570 G$RCAP4H$0$0 == 0x00e5
                           0000E5   571 _RCAP4H	=	0x00e5
                           0000E6   572 G$EIE1$0$0 == 0x00e6
                           0000E6   573 _EIE1	=	0x00e6
                           0000E7   574 G$EIE2$0$0 == 0x00e7
                           0000E7   575 _EIE2	=	0x00e7
                           0000E8   576 G$ADC0CN$0$0 == 0x00e8
                           0000E8   577 _ADC0CN	=	0x00e8
                           0000E9   578 G$PCA0L$0$0 == 0x00e9
                           0000E9   579 _PCA0L	=	0x00e9
                           0000EA   580 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   581 _PCA0CPL0	=	0x00ea
                           0000EB   582 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   583 _PCA0CPL1	=	0x00eb
                           0000EC   584 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   585 _PCA0CPL2	=	0x00ec
                           0000ED   586 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   587 _PCA0CPL3	=	0x00ed
                           0000EE   588 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   589 _PCA0CPL4	=	0x00ee
                           0000EF   590 G$RSTSRC$0$0 == 0x00ef
                           0000EF   591 _RSTSRC	=	0x00ef
                           0000F0   592 G$B$0$0 == 0x00f0
                           0000F0   593 _B	=	0x00f0
                           0000F1   594 G$SCON1$0$0 == 0x00f1
                           0000F1   595 _SCON1	=	0x00f1
                           0000F2   596 G$SBUF1$0$0 == 0x00f2
                           0000F2   597 _SBUF1	=	0x00f2
                           0000F3   598 G$SADDR1$0$0 == 0x00f3
                           0000F3   599 _SADDR1	=	0x00f3
                           0000F4   600 G$TL4$0$0 == 0x00f4
                           0000F4   601 _TL4	=	0x00f4
                           0000F5   602 G$TH4$0$0 == 0x00f5
                           0000F5   603 _TH4	=	0x00f5
                           0000F6   604 G$EIP1$0$0 == 0x00f6
                           0000F6   605 _EIP1	=	0x00f6
                           0000F7   606 G$EIP2$0$0 == 0x00f7
                           0000F7   607 _EIP2	=	0x00f7
                           0000F8   608 G$SPI0CN$0$0 == 0x00f8
                           0000F8   609 _SPI0CN	=	0x00f8
                           0000F9   610 G$PCA0H$0$0 == 0x00f9
                           0000F9   611 _PCA0H	=	0x00f9
                           0000FA   612 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   613 _PCA0CPH0	=	0x00fa
                           0000FB   614 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   615 _PCA0CPH1	=	0x00fb
                           0000FC   616 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   617 _PCA0CPH2	=	0x00fc
                           0000FD   618 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   619 _PCA0CPH3	=	0x00fd
                           0000FE   620 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   621 _PCA0CPH4	=	0x00fe
                           0000FF   622 G$WDTCN$0$0 == 0x00ff
                           0000FF   623 _WDTCN	=	0x00ff
                           008C8A   624 G$TMR0$0$0 == 0x8c8a
                           008C8A   625 _TMR0	=	0x8c8a
                           008D8B   626 G$TMR1$0$0 == 0x8d8b
                           008D8B   627 _TMR1	=	0x8d8b
                           00CDCC   628 G$TMR2$0$0 == 0xcdcc
                           00CDCC   629 _TMR2	=	0xcdcc
                           00CBCA   630 G$RCAP2$0$0 == 0xcbca
                           00CBCA   631 _RCAP2	=	0xcbca
                           009594   632 G$TMR3$0$0 == 0x9594
                           009594   633 _TMR3	=	0x9594
                           009392   634 G$TMR3RL$0$0 == 0x9392
                           009392   635 _TMR3RL	=	0x9392
                           00F5F4   636 G$TMR4$0$0 == 0xf5f4
                           00F5F4   637 _TMR4	=	0xf5f4
                           00E5E4   638 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   639 _RCAP4	=	0xe5e4
                           00BFBE   640 G$ADC0$0$0 == 0xbfbe
                           00BFBE   641 _ADC0	=	0xbfbe
                           00C5C4   642 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   643 _ADC0GT	=	0xc5c4
                           00C7C6   644 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   645 _ADC0LT	=	0xc7c6
                           00D3D2   646 G$DAC0$0$0 == 0xd3d2
                           00D3D2   647 _DAC0	=	0xd3d2
                           00D6D5   648 G$DAC1$0$0 == 0xd6d5
                           00D6D5   649 _DAC1	=	0xd6d5
                           00F9E9   650 G$PCA0$0$0 == 0xf9e9
                           00F9E9   651 _PCA0	=	0xf9e9
                           00FAEA   652 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   653 _PCA0CP0	=	0xfaea
                           00FBEB   654 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   655 _PCA0CP1	=	0xfbeb
                           00FCEC   656 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   657 _PCA0CP2	=	0xfcec
                           00FDED   658 G$PCA0CP3$0$0 == 0xfded
                           00FDED   659 _PCA0CP3	=	0xfded
                           00FEEE   660 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   661 _PCA0CP4	=	0xfeee
                                    662 ;--------------------------------------------------------
                                    663 ; special function bits
                                    664 ;--------------------------------------------------------
                                    665 	.area RSEG    (ABS,DATA)
      000000                        666 	.org 0x0000
                           000080   667 G$P0_0$0$0 == 0x0080
                           000080   668 _P0_0	=	0x0080
                           000081   669 G$P0_1$0$0 == 0x0081
                           000081   670 _P0_1	=	0x0081
                           000082   671 G$P0_2$0$0 == 0x0082
                           000082   672 _P0_2	=	0x0082
                           000083   673 G$P0_3$0$0 == 0x0083
                           000083   674 _P0_3	=	0x0083
                           000084   675 G$P0_4$0$0 == 0x0084
                           000084   676 _P0_4	=	0x0084
                           000085   677 G$P0_5$0$0 == 0x0085
                           000085   678 _P0_5	=	0x0085
                           000086   679 G$P0_6$0$0 == 0x0086
                           000086   680 _P0_6	=	0x0086
                           000087   681 G$P0_7$0$0 == 0x0087
                           000087   682 _P0_7	=	0x0087
                           000088   683 G$IT0$0$0 == 0x0088
                           000088   684 _IT0	=	0x0088
                           000089   685 G$IE0$0$0 == 0x0089
                           000089   686 _IE0	=	0x0089
                           00008A   687 G$IT1$0$0 == 0x008a
                           00008A   688 _IT1	=	0x008a
                           00008B   689 G$IE1$0$0 == 0x008b
                           00008B   690 _IE1	=	0x008b
                           00008C   691 G$TR0$0$0 == 0x008c
                           00008C   692 _TR0	=	0x008c
                           00008D   693 G$TF0$0$0 == 0x008d
                           00008D   694 _TF0	=	0x008d
                           00008E   695 G$TR1$0$0 == 0x008e
                           00008E   696 _TR1	=	0x008e
                           00008F   697 G$TF1$0$0 == 0x008f
                           00008F   698 _TF1	=	0x008f
                           000090   699 G$P1_0$0$0 == 0x0090
                           000090   700 _P1_0	=	0x0090
                           000091   701 G$P1_1$0$0 == 0x0091
                           000091   702 _P1_1	=	0x0091
                           000092   703 G$P1_2$0$0 == 0x0092
                           000092   704 _P1_2	=	0x0092
                           000093   705 G$P1_3$0$0 == 0x0093
                           000093   706 _P1_3	=	0x0093
                           000094   707 G$P1_4$0$0 == 0x0094
                           000094   708 _P1_4	=	0x0094
                           000095   709 G$P1_5$0$0 == 0x0095
                           000095   710 _P1_5	=	0x0095
                           000096   711 G$P1_6$0$0 == 0x0096
                           000096   712 _P1_6	=	0x0096
                           000097   713 G$P1_7$0$0 == 0x0097
                           000097   714 _P1_7	=	0x0097
                           000098   715 G$RI$0$0 == 0x0098
                           000098   716 _RI	=	0x0098
                           000098   717 G$RI0$0$0 == 0x0098
                           000098   718 _RI0	=	0x0098
                           000099   719 G$TI$0$0 == 0x0099
                           000099   720 _TI	=	0x0099
                           000099   721 G$TI0$0$0 == 0x0099
                           000099   722 _TI0	=	0x0099
                           00009A   723 G$RB8$0$0 == 0x009a
                           00009A   724 _RB8	=	0x009a
                           00009A   725 G$RB80$0$0 == 0x009a
                           00009A   726 _RB80	=	0x009a
                           00009B   727 G$TB8$0$0 == 0x009b
                           00009B   728 _TB8	=	0x009b
                           00009B   729 G$TB80$0$0 == 0x009b
                           00009B   730 _TB80	=	0x009b
                           00009C   731 G$REN$0$0 == 0x009c
                           00009C   732 _REN	=	0x009c
                           00009C   733 G$REN0$0$0 == 0x009c
                           00009C   734 _REN0	=	0x009c
                           00009D   735 G$SM2$0$0 == 0x009d
                           00009D   736 _SM2	=	0x009d
                           00009D   737 G$SM20$0$0 == 0x009d
                           00009D   738 _SM20	=	0x009d
                           00009D   739 G$MCE0$0$0 == 0x009d
                           00009D   740 _MCE0	=	0x009d
                           00009E   741 G$SM1$0$0 == 0x009e
                           00009E   742 _SM1	=	0x009e
                           00009E   743 G$SM10$0$0 == 0x009e
                           00009E   744 _SM10	=	0x009e
                           00009F   745 G$SM0$0$0 == 0x009f
                           00009F   746 _SM0	=	0x009f
                           00009F   747 G$SM00$0$0 == 0x009f
                           00009F   748 _SM00	=	0x009f
                           00009F   749 G$S0MODE$0$0 == 0x009f
                           00009F   750 _S0MODE	=	0x009f
                           0000A0   751 G$P2_0$0$0 == 0x00a0
                           0000A0   752 _P2_0	=	0x00a0
                           0000A1   753 G$P2_1$0$0 == 0x00a1
                           0000A1   754 _P2_1	=	0x00a1
                           0000A2   755 G$P2_2$0$0 == 0x00a2
                           0000A2   756 _P2_2	=	0x00a2
                           0000A3   757 G$P2_3$0$0 == 0x00a3
                           0000A3   758 _P2_3	=	0x00a3
                           0000A4   759 G$P2_4$0$0 == 0x00a4
                           0000A4   760 _P2_4	=	0x00a4
                           0000A5   761 G$P2_5$0$0 == 0x00a5
                           0000A5   762 _P2_5	=	0x00a5
                           0000A6   763 G$P2_6$0$0 == 0x00a6
                           0000A6   764 _P2_6	=	0x00a6
                           0000A7   765 G$P2_7$0$0 == 0x00a7
                           0000A7   766 _P2_7	=	0x00a7
                           0000A8   767 G$EX0$0$0 == 0x00a8
                           0000A8   768 _EX0	=	0x00a8
                           0000A9   769 G$ET0$0$0 == 0x00a9
                           0000A9   770 _ET0	=	0x00a9
                           0000AA   771 G$EX1$0$0 == 0x00aa
                           0000AA   772 _EX1	=	0x00aa
                           0000AB   773 G$ET1$0$0 == 0x00ab
                           0000AB   774 _ET1	=	0x00ab
                           0000AC   775 G$ES0$0$0 == 0x00ac
                           0000AC   776 _ES0	=	0x00ac
                           0000AC   777 G$ES$0$0 == 0x00ac
                           0000AC   778 _ES	=	0x00ac
                           0000AD   779 G$ET2$0$0 == 0x00ad
                           0000AD   780 _ET2	=	0x00ad
                           0000AF   781 G$EA$0$0 == 0x00af
                           0000AF   782 _EA	=	0x00af
                           0000B0   783 G$P3_0$0$0 == 0x00b0
                           0000B0   784 _P3_0	=	0x00b0
                           0000B1   785 G$P3_1$0$0 == 0x00b1
                           0000B1   786 _P3_1	=	0x00b1
                           0000B2   787 G$P3_2$0$0 == 0x00b2
                           0000B2   788 _P3_2	=	0x00b2
                           0000B3   789 G$P3_3$0$0 == 0x00b3
                           0000B3   790 _P3_3	=	0x00b3
                           0000B4   791 G$P3_4$0$0 == 0x00b4
                           0000B4   792 _P3_4	=	0x00b4
                           0000B5   793 G$P3_5$0$0 == 0x00b5
                           0000B5   794 _P3_5	=	0x00b5
                           0000B6   795 G$P3_6$0$0 == 0x00b6
                           0000B6   796 _P3_6	=	0x00b6
                           0000B7   797 G$P3_7$0$0 == 0x00b7
                           0000B7   798 _P3_7	=	0x00b7
                           0000B8   799 G$PX0$0$0 == 0x00b8
                           0000B8   800 _PX0	=	0x00b8
                           0000B9   801 G$PT0$0$0 == 0x00b9
                           0000B9   802 _PT0	=	0x00b9
                           0000BA   803 G$PX1$0$0 == 0x00ba
                           0000BA   804 _PX1	=	0x00ba
                           0000BB   805 G$PT1$0$0 == 0x00bb
                           0000BB   806 _PT1	=	0x00bb
                           0000BC   807 G$PS0$0$0 == 0x00bc
                           0000BC   808 _PS0	=	0x00bc
                           0000BC   809 G$PS$0$0 == 0x00bc
                           0000BC   810 _PS	=	0x00bc
                           0000BD   811 G$PT2$0$0 == 0x00bd
                           0000BD   812 _PT2	=	0x00bd
                           0000C0   813 G$SMBTOE$0$0 == 0x00c0
                           0000C0   814 _SMBTOE	=	0x00c0
                           0000C1   815 G$SMBFTE$0$0 == 0x00c1
                           0000C1   816 _SMBFTE	=	0x00c1
                           0000C2   817 G$AA$0$0 == 0x00c2
                           0000C2   818 _AA	=	0x00c2
                           0000C3   819 G$SI$0$0 == 0x00c3
                           0000C3   820 _SI	=	0x00c3
                           0000C4   821 G$STO$0$0 == 0x00c4
                           0000C4   822 _STO	=	0x00c4
                           0000C5   823 G$STA$0$0 == 0x00c5
                           0000C5   824 _STA	=	0x00c5
                           0000C6   825 G$ENSMB$0$0 == 0x00c6
                           0000C6   826 _ENSMB	=	0x00c6
                           0000C7   827 G$BUSY$0$0 == 0x00c7
                           0000C7   828 _BUSY	=	0x00c7
                           0000C8   829 G$CPRL2$0$0 == 0x00c8
                           0000C8   830 _CPRL2	=	0x00c8
                           0000C9   831 G$CT2$0$0 == 0x00c9
                           0000C9   832 _CT2	=	0x00c9
                           0000CA   833 G$TR2$0$0 == 0x00ca
                           0000CA   834 _TR2	=	0x00ca
                           0000CB   835 G$EXEN2$0$0 == 0x00cb
                           0000CB   836 _EXEN2	=	0x00cb
                           0000CC   837 G$TCLK$0$0 == 0x00cc
                           0000CC   838 _TCLK	=	0x00cc
                           0000CD   839 G$RCLK$0$0 == 0x00cd
                           0000CD   840 _RCLK	=	0x00cd
                           0000CE   841 G$EXF2$0$0 == 0x00ce
                           0000CE   842 _EXF2	=	0x00ce
                           0000CF   843 G$TF2$0$0 == 0x00cf
                           0000CF   844 _TF2	=	0x00cf
                           0000D0   845 G$P$0$0 == 0x00d0
                           0000D0   846 _P	=	0x00d0
                           0000D1   847 G$F1$0$0 == 0x00d1
                           0000D1   848 _F1	=	0x00d1
                           0000D2   849 G$OV$0$0 == 0x00d2
                           0000D2   850 _OV	=	0x00d2
                           0000D3   851 G$RS0$0$0 == 0x00d3
                           0000D3   852 _RS0	=	0x00d3
                           0000D4   853 G$RS1$0$0 == 0x00d4
                           0000D4   854 _RS1	=	0x00d4
                           0000D5   855 G$F0$0$0 == 0x00d5
                           0000D5   856 _F0	=	0x00d5
                           0000D6   857 G$AC$0$0 == 0x00d6
                           0000D6   858 _AC	=	0x00d6
                           0000D7   859 G$CY$0$0 == 0x00d7
                           0000D7   860 _CY	=	0x00d7
                           0000D8   861 G$CCF0$0$0 == 0x00d8
                           0000D8   862 _CCF0	=	0x00d8
                           0000D9   863 G$CCF1$0$0 == 0x00d9
                           0000D9   864 _CCF1	=	0x00d9
                           0000DA   865 G$CCF2$0$0 == 0x00da
                           0000DA   866 _CCF2	=	0x00da
                           0000DB   867 G$CCF3$0$0 == 0x00db
                           0000DB   868 _CCF3	=	0x00db
                           0000DC   869 G$CCF4$0$0 == 0x00dc
                           0000DC   870 _CCF4	=	0x00dc
                           0000DE   871 G$CR$0$0 == 0x00de
                           0000DE   872 _CR	=	0x00de
                           0000DF   873 G$CF$0$0 == 0x00df
                           0000DF   874 _CF	=	0x00df
                           0000E8   875 G$ADLJST$0$0 == 0x00e8
                           0000E8   876 _ADLJST	=	0x00e8
                           0000E8   877 G$AD0LJST$0$0 == 0x00e8
                           0000E8   878 _AD0LJST	=	0x00e8
                           0000E9   879 G$ADWINT$0$0 == 0x00e9
                           0000E9   880 _ADWINT	=	0x00e9
                           0000E9   881 G$AD0WINT$0$0 == 0x00e9
                           0000E9   882 _AD0WINT	=	0x00e9
                           0000EA   883 G$ADSTM0$0$0 == 0x00ea
                           0000EA   884 _ADSTM0	=	0x00ea
                           0000EA   885 G$AD0CM0$0$0 == 0x00ea
                           0000EA   886 _AD0CM0	=	0x00ea
                           0000EB   887 G$ADSTM1$0$0 == 0x00eb
                           0000EB   888 _ADSTM1	=	0x00eb
                           0000EB   889 G$AD0CM1$0$0 == 0x00eb
                           0000EB   890 _AD0CM1	=	0x00eb
                           0000EC   891 G$ADBUSY$0$0 == 0x00ec
                           0000EC   892 _ADBUSY	=	0x00ec
                           0000EC   893 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   894 _AD0BUSY	=	0x00ec
                           0000ED   895 G$ADCINT$0$0 == 0x00ed
                           0000ED   896 _ADCINT	=	0x00ed
                           0000ED   897 G$AD0INT$0$0 == 0x00ed
                           0000ED   898 _AD0INT	=	0x00ed
                           0000EE   899 G$ADCTM$0$0 == 0x00ee
                           0000EE   900 _ADCTM	=	0x00ee
                           0000EE   901 G$AD0TM$0$0 == 0x00ee
                           0000EE   902 _AD0TM	=	0x00ee
                           0000EF   903 G$ADCEN$0$0 == 0x00ef
                           0000EF   904 _ADCEN	=	0x00ef
                           0000EF   905 G$AD0EN$0$0 == 0x00ef
                           0000EF   906 _AD0EN	=	0x00ef
                           0000F8   907 G$SPIEN$0$0 == 0x00f8
                           0000F8   908 _SPIEN	=	0x00f8
                           0000F9   909 G$MSTEN$0$0 == 0x00f9
                           0000F9   910 _MSTEN	=	0x00f9
                           0000FA   911 G$SLVSEL$0$0 == 0x00fa
                           0000FA   912 _SLVSEL	=	0x00fa
                           0000FB   913 G$TXBSY$0$0 == 0x00fb
                           0000FB   914 _TXBSY	=	0x00fb
                           0000FC   915 G$RXOVRN$0$0 == 0x00fc
                           0000FC   916 _RXOVRN	=	0x00fc
                           0000FD   917 G$MODF$0$0 == 0x00fd
                           0000FD   918 _MODF	=	0x00fd
                           0000FE   919 G$WCOL$0$0 == 0x00fe
                           0000FE   920 _WCOL	=	0x00fe
                           0000FF   921 G$SPIF$0$0 == 0x00ff
                           0000FF   922 _SPIF	=	0x00ff
                           0000C7   923 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   924 _BUS_BUSY	=	0x00c7
                           0000C6   925 G$BUS_EN$0$0 == 0x00c6
                           0000C6   926 _BUS_EN	=	0x00c6
                           0000C5   927 G$BUS_START$0$0 == 0x00c5
                           0000C5   928 _BUS_START	=	0x00c5
                           0000C4   929 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   930 _BUS_STOP	=	0x00c4
                           0000C3   931 G$BUS_INT$0$0 == 0x00c3
                           0000C3   932 _BUS_INT	=	0x00c3
                           0000C2   933 G$BUS_AA$0$0 == 0x00c2
                           0000C2   934 _BUS_AA	=	0x00c2
                           0000C1   935 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   936 _BUS_FTE	=	0x00c1
                           0000C0   937 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   938 _BUS_TOE	=	0x00c0
                           000083   939 G$BUS_SCL$0$0 == 0x0083
                           000083   940 _BUS_SCL	=	0x0083
                           0000B7   941 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   942 _COMPASS_SWITCH	=	0x00b7
                           0000B6   943 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   944 _RANGER_SWITCH	=	0x00b6
                                    945 ;--------------------------------------------------------
                                    946 ; overlayable register banks
                                    947 ;--------------------------------------------------------
                                    948 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        949 	.ds 8
                                    950 ;--------------------------------------------------------
                                    951 ; internal ram data
                                    952 ;--------------------------------------------------------
                                    953 	.area DSEG    (DATA)
                           000000   954 LLab_4.lcd_clear$NumBytes$1$77==.
      000000                        955 _lcd_clear_NumBytes_1_77:
      000000                        956 	.ds 1
                           000001   957 LLab_4.lcd_clear$Cmd$1$77==.
      000001                        958 _lcd_clear_Cmd_1_77:
      000001                        959 	.ds 2
                           000003   960 LLab_4.read_keypad$Data$1$78==.
      000003                        961 _read_keypad_Data_1_78:
      000003                        962 	.ds 2
                           000005   963 LLab_4.i2c_write_data$start_reg$1$97==.
      000005                        964 _i2c_write_data_PARM_2:
      000005                        965 	.ds 1
                           000006   966 LLab_4.i2c_write_data$buffer$1$97==.
      000006                        967 _i2c_write_data_PARM_3:
      000006                        968 	.ds 3
                           000009   969 LLab_4.i2c_write_data$num_bytes$1$97==.
      000009                        970 _i2c_write_data_PARM_4:
      000009                        971 	.ds 1
                           00000A   972 LLab_4.i2c_read_data$start_reg$1$99==.
      00000A                        973 _i2c_read_data_PARM_2:
      00000A                        974 	.ds 1
                           00000B   975 LLab_4.i2c_read_data$buffer$1$99==.
      00000B                        976 _i2c_read_data_PARM_3:
      00000B                        977 	.ds 3
                           00000E   978 LLab_4.i2c_read_data$num_bytes$1$99==.
      00000E                        979 _i2c_read_data_PARM_4:
      00000E                        980 	.ds 1
                           00000F   981 LLab_4.Accel_Init$Data2$1$103==.
      00000F                        982 _Accel_Init_Data2_1_103:
      00000F                        983 	.ds 1
                           000010   984 G$COMPASS_CENTER$0$0==.
      000010                        985 _COMPASS_CENTER::
      000010                        986 	.ds 2
                           000012   987 G$COMPASS_MAX$0$0==.
      000012                        988 _COMPASS_MAX::
      000012                        989 	.ds 2
                           000014   990 G$COMPASS_MIN$0$0==.
      000014                        991 _COMPASS_MIN::
      000014                        992 	.ds 2
                           000016   993 G$RANGER_CENTER$0$0==.
      000016                        994 _RANGER_CENTER::
      000016                        995 	.ds 2
                           000018   996 G$RANGER_MAX$0$0==.
      000018                        997 _RANGER_MAX::
      000018                        998 	.ds 2
                           00001A   999 G$RANGER_MIN$0$0==.
      00001A                       1000 _RANGER_MIN::
      00001A                       1001 	.ds 2
                           00001C  1002 G$PCA_START$0$0==.
      00001C                       1003 _PCA_START::
      00001C                       1004 	.ds 2
                           00001E  1005 G$new_heading$0$0==.
      00001E                       1006 _new_heading::
      00001E                       1007 	.ds 1
                           00001F  1008 G$new_range$0$0==.
      00001F                       1009 _new_range::
      00001F                       1010 	.ds 1
                           000020  1011 G$heading$0$0==.
      000020                       1012 _heading::
      000020                       1013 	.ds 2
                           000022  1014 G$range$0$0==.
      000022                       1015 _range::
      000022                       1016 	.ds 2
                           000024  1017 G$r_count$0$0==.
      000024                       1018 _r_count::
      000024                       1019 	.ds 1
                           000025  1020 G$h_count$0$0==.
      000025                       1021 _h_count::
      000025                       1022 	.ds 1
                           000026  1023 G$desired_heading$0$0==.
      000026                       1024 _desired_heading::
      000026                       1025 	.ds 2
                           000028  1026 G$desired_range$0$0==.
      000028                       1027 _desired_range::
      000028                       1028 	.ds 2
                           00002A  1029 G$heading_delay$0$0==.
      00002A                       1030 _heading_delay::
      00002A                       1031 	.ds 1
                           00002B  1032 G$COMPASS_PW$0$0==.
      00002B                       1033 _COMPASS_PW::
      00002B                       1034 	.ds 2
                           00002D  1035 G$RANGER_PW$0$0==.
      00002D                       1036 _RANGER_PW::
      00002D                       1037 	.ds 2
                           00002F  1038 G$compass_gain$0$0==.
      00002F                       1039 _compass_gain::
      00002F                       1040 	.ds 1
                           000030  1041 G$speed$0$0==.
      000030                       1042 _speed::
      000030                       1043 	.ds 1
                           000031  1044 LLab_4.read_compass$Data$1$141==.
      000031                       1045 _read_compass_Data_1_141:
      000031                       1046 	.ds 2
                           000033  1047 LLab_4.read_ranger$Data$1$146==.
      000033                       1048 _read_ranger_Data_1_146:
      000033                       1049 	.ds 2
                                   1050 ;--------------------------------------------------------
                                   1051 ; overlayable items in internal ram 
                                   1052 ;--------------------------------------------------------
                                   1053 	.area	OSEG    (OVR,DATA)
                                   1054 	.area	OSEG    (OVR,DATA)
                                   1055 	.area	OSEG    (OVR,DATA)
                                   1056 	.area	OSEG    (OVR,DATA)
                                   1057 	.area	OSEG    (OVR,DATA)
                                   1058 	.area	OSEG    (OVR,DATA)
                                   1059 	.area	OSEG    (OVR,DATA)
                                   1060 ;--------------------------------------------------------
                                   1061 ; Stack segment in internal ram 
                                   1062 ;--------------------------------------------------------
                                   1063 	.area	SSEG
      000000                       1064 __start__stack:
      000000                       1065 	.ds	1
                                   1066 
                                   1067 ;--------------------------------------------------------
                                   1068 ; indirectly addressable internal ram data
                                   1069 ;--------------------------------------------------------
                                   1070 	.area ISEG    (DATA)
                                   1071 ;--------------------------------------------------------
                                   1072 ; absolute internal ram data
                                   1073 ;--------------------------------------------------------
                                   1074 	.area IABS    (ABS,DATA)
                                   1075 	.area IABS    (ABS,DATA)
                                   1076 ;--------------------------------------------------------
                                   1077 ; bit data
                                   1078 ;--------------------------------------------------------
                                   1079 	.area BSEG    (BIT)
                                   1080 ;--------------------------------------------------------
                                   1081 ; paged external ram data
                                   1082 ;--------------------------------------------------------
                                   1083 	.area PSEG    (PAG,XDATA)
                                   1084 ;--------------------------------------------------------
                                   1085 ; external ram data
                                   1086 ;--------------------------------------------------------
                                   1087 	.area XSEG    (XDATA)
                           000000  1088 LLab_4.lcd_print$text$1$73==.
      000000                       1089 _lcd_print_text_1_73:
      000000                       1090 	.ds 80
                                   1091 ;--------------------------------------------------------
                                   1092 ; absolute external ram data
                                   1093 ;--------------------------------------------------------
                                   1094 	.area XABS    (ABS,XDATA)
                                   1095 ;--------------------------------------------------------
                                   1096 ; external initialized ram data
                                   1097 ;--------------------------------------------------------
                                   1098 	.area XISEG   (XDATA)
                                   1099 	.area HOME    (CODE)
                                   1100 	.area GSINIT0 (CODE)
                                   1101 	.area GSINIT1 (CODE)
                                   1102 	.area GSINIT2 (CODE)
                                   1103 	.area GSINIT3 (CODE)
                                   1104 	.area GSINIT4 (CODE)
                                   1105 	.area GSINIT5 (CODE)
                                   1106 	.area GSINIT  (CODE)
                                   1107 	.area GSFINAL (CODE)
                                   1108 	.area CSEG    (CODE)
                                   1109 ;--------------------------------------------------------
                                   1110 ; interrupt vector 
                                   1111 ;--------------------------------------------------------
                                   1112 	.area HOME    (CODE)
      000000                       1113 __interrupt_vect:
      000000 02r00r00         [24] 1114 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1115 	reti
      000004                       1116 	.ds	7
      00000B 32               [24] 1117 	reti
      00000C                       1118 	.ds	7
      000013 32               [24] 1119 	reti
      000014                       1120 	.ds	7
      00001B 32               [24] 1121 	reti
      00001C                       1122 	.ds	7
      000023 32               [24] 1123 	reti
      000024                       1124 	.ds	7
      00002B 32               [24] 1125 	reti
      00002C                       1126 	.ds	7
      000033 32               [24] 1127 	reti
      000034                       1128 	.ds	7
      00003B 32               [24] 1129 	reti
      00003C                       1130 	.ds	7
      000043 32               [24] 1131 	reti
      000044                       1132 	.ds	7
      00004B 02r05r5E         [24] 1133 	ljmp	_PCA_ISR
                                   1134 ;--------------------------------------------------------
                                   1135 ; global & static initialisations
                                   1136 ;--------------------------------------------------------
                                   1137 	.area HOME    (CODE)
                                   1138 	.area GSINIT  (CODE)
                                   1139 	.area GSFINAL (CODE)
                                   1140 	.area GSINIT  (CODE)
                                   1141 	.globl __sdcc_gsinit_startup
                                   1142 	.globl __sdcc_program_startup
                                   1143 	.globl __start__stack
                                   1144 	.globl __mcs51_genXINIT
                                   1145 	.globl __mcs51_genXRAMCLEAR
                                   1146 	.globl __mcs51_genRAMCLEAR
                           000000  1147 	C$Lab_4.c$38$1$159 ==.
                                   1148 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:38: unsigned int COMPASS_CENTER = 2760;
      000000 75*10 C8         [24] 1149 	mov	_COMPASS_CENTER,#0xC8
      000003 75*11 0A         [24] 1150 	mov	(_COMPASS_CENTER + 1),#0x0A
                           000006  1151 	C$Lab_4.c$39$1$159 ==.
                                   1152 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:39: unsigned int COMPASS_MAX = 3500;
      000006 75*12 AC         [24] 1153 	mov	_COMPASS_MAX,#0xAC
      000009 75*13 0D         [24] 1154 	mov	(_COMPASS_MAX + 1),#0x0D
                           00000C  1155 	C$Lab_4.c$40$1$159 ==.
                                   1156 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:40: unsigned int COMPASS_MIN = 2030;
      00000C 75*14 EE         [24] 1157 	mov	_COMPASS_MIN,#0xEE
      00000F 75*15 07         [24] 1158 	mov	(_COMPASS_MIN + 1),#0x07
                           000012  1159 	C$Lab_4.c$41$1$159 ==.
                                   1160 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:41: unsigned int RANGER_CENTER = 2760;
      000012 75*16 C8         [24] 1161 	mov	_RANGER_CENTER,#0xC8
      000015 75*17 0A         [24] 1162 	mov	(_RANGER_CENTER + 1),#0x0A
                           000018  1163 	C$Lab_4.c$42$1$159 ==.
                                   1164 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:42: unsigned int RANGER_MAX = 3500;
      000018 75*18 AC         [24] 1165 	mov	_RANGER_MAX,#0xAC
      00001B 75*19 0D         [24] 1166 	mov	(_RANGER_MAX + 1),#0x0D
                           00001E  1167 	C$Lab_4.c$43$1$159 ==.
                                   1168 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:43: unsigned int RANGER_MIN = 2030;
      00001E 75*1A EE         [24] 1169 	mov	_RANGER_MIN,#0xEE
      000021 75*1B 07         [24] 1170 	mov	(_RANGER_MIN + 1),#0x07
                           000024  1171 	C$Lab_4.c$44$1$159 ==.
                                   1172 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:44: unsigned int PCA_START = 28672;
      000024 75*1C 00         [24] 1173 	mov	_PCA_START,#0x00
      000027 75*1D 70         [24] 1174 	mov	(_PCA_START + 1),#0x70
                           00002A  1175 	C$Lab_4.c$45$1$159 ==.
                                   1176 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:45: unsigned char new_heading = 0; // flag for count of compass timing
      00002A 75*1E 00         [24] 1177 	mov	_new_heading,#0x00
                           00002D  1178 	C$Lab_4.c$46$1$159 ==.
                                   1179 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:46: unsigned char new_range = 0; // flag for count of ranger timing
      00002D 75*1F 00         [24] 1180 	mov	_new_range,#0x00
                                   1181 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1182 	ljmp	__sdcc_program_startup
                                   1183 ;--------------------------------------------------------
                                   1184 ; Home
                                   1185 ;--------------------------------------------------------
                                   1186 	.area HOME    (CODE)
                                   1187 	.area HOME    (CODE)
      00004E                       1188 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1189 	ljmp	_main
                                   1190 ;	return from main will return to caller
                                   1191 ;--------------------------------------------------------
                                   1192 ; code
                                   1193 ;--------------------------------------------------------
                                   1194 	.area CSEG    (CODE)
                                   1195 ;------------------------------------------------------------
                                   1196 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1197 ;------------------------------------------------------------
                                   1198 ;i                         Allocated to registers 
                                   1199 ;------------------------------------------------------------
                           000000  1200 	G$SYSCLK_Init$0$0 ==.
                           000000  1201 	C$c8051_SDCC.h$42$0$0 ==.
                                   1202 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1203 ;	-----------------------------------------
                                   1204 ;	 function SYSCLK_Init
                                   1205 ;	-----------------------------------------
      000000                       1206 _SYSCLK_Init:
                           000007  1207 	ar7 = 0x07
                           000006  1208 	ar6 = 0x06
                           000005  1209 	ar5 = 0x05
                           000004  1210 	ar4 = 0x04
                           000003  1211 	ar3 = 0x03
                           000002  1212 	ar2 = 0x02
                           000001  1213 	ar1 = 0x01
                           000000  1214 	ar0 = 0x00
                           000000  1215 	C$c8051_SDCC.h$46$1$2 ==.
                                   1216 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1217 	mov	_OSCXCN,#0x67
                           000003  1218 	C$c8051_SDCC.h$49$1$2 ==.
                                   1219 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1220 	mov	r6,#0x00
      000005 7F 01            [12] 1221 	mov	r7,#0x01
      000007                       1222 00107$:
      000007 1E               [12] 1223 	dec	r6
      000008 BE FF 01         [24] 1224 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1225 	dec	r7
      00000C                       1226 00121$:
      00000C EE               [12] 1227 	mov	a,r6
      00000D 4F               [12] 1228 	orl	a,r7
      00000E 70 F7            [24] 1229 	jnz	00107$
                           000010  1230 	C$c8051_SDCC.h$51$1$2 ==.
                                   1231 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1232 00102$:
      000010 E5 B1            [12] 1233 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1234 	jnb	acc.7,00102$
                           000015  1235 	C$c8051_SDCC.h$53$1$2 ==.
                                   1236 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1237 	mov	_OSCICN,#0x88
                           000018  1238 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1239 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1240 	ret
                                   1241 ;------------------------------------------------------------
                                   1242 ;Allocation info for local variables in function 'UART0_Init'
                                   1243 ;------------------------------------------------------------
                           000019  1244 	G$UART0_Init$0$0 ==.
                           000019  1245 	C$c8051_SDCC.h$64$1$2 ==.
                                   1246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1247 ;	-----------------------------------------
                                   1248 ;	 function UART0_Init
                                   1249 ;	-----------------------------------------
      000019                       1250 _UART0_Init:
                           000019  1251 	C$c8051_SDCC.h$66$1$4 ==.
                                   1252 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1253 	mov	_SCON0,#0x50
                           00001C  1254 	C$c8051_SDCC.h$67$1$4 ==.
                                   1255 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1256 	mov	_TMOD,#0x20
                           00001F  1257 	C$c8051_SDCC.h$68$1$4 ==.
                                   1258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1259 	mov	_TH1,#0xDC
                           000022  1260 	C$c8051_SDCC.h$69$1$4 ==.
                                   1261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1262 	setb	_TR1
                           000024  1263 	C$c8051_SDCC.h$70$1$4 ==.
                                   1264 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1265 	orl	_CKCON,#0x10
                           000027  1266 	C$c8051_SDCC.h$71$1$4 ==.
                                   1267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1268 	orl	_PCON,#0x80
                           00002A  1269 	C$c8051_SDCC.h$73$1$4 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1271 	setb	_TI0
                           00002C  1272 	C$c8051_SDCC.h$74$1$4 ==.
                                   1273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1274 	orl	_P0MDOUT,#0x01
                           00002F  1275 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1276 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1277 	ret
                                   1278 ;------------------------------------------------------------
                                   1279 ;Allocation info for local variables in function 'Sys_Init'
                                   1280 ;------------------------------------------------------------
                           000030  1281 	G$Sys_Init$0$0 ==.
                           000030  1282 	C$c8051_SDCC.h$83$1$4 ==.
                                   1283 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1284 ;	-----------------------------------------
                                   1285 ;	 function Sys_Init
                                   1286 ;	-----------------------------------------
      000030                       1287 _Sys_Init:
                           000030  1288 	C$c8051_SDCC.h$85$1$6 ==.
                                   1289 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1290 	mov	_WDTCN,#0xDE
                           000033  1291 	C$c8051_SDCC.h$86$1$6 ==.
                                   1292 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1293 	mov	_WDTCN,#0xAD
                           000036  1294 	C$c8051_SDCC.h$88$1$6 ==.
                                   1295 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1296 	lcall	_SYSCLK_Init
                           000039  1297 	C$c8051_SDCC.h$89$1$6 ==.
                                   1298 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1299 	lcall	_UART0_Init
                           00003C  1300 	C$c8051_SDCC.h$91$1$6 ==.
                                   1301 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1302 	orl	_XBR0,#0x04
                           00003F  1303 	C$c8051_SDCC.h$92$1$6 ==.
                                   1304 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1305 	orl	_XBR2,#0x40
                           000042  1306 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1307 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1308 	ret
                                   1309 ;------------------------------------------------------------
                                   1310 ;Allocation info for local variables in function 'putchar'
                                   1311 ;------------------------------------------------------------
                                   1312 ;c                         Allocated to registers r7 
                                   1313 ;------------------------------------------------------------
                           000043  1314 	G$putchar$0$0 ==.
                           000043  1315 	C$c8051_SDCC.h$98$1$6 ==.
                                   1316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function putchar
                                   1319 ;	-----------------------------------------
      000043                       1320 _putchar:
      000043 AF 82            [24] 1321 	mov	r7,dpl
                           000045  1322 	C$c8051_SDCC.h$100$1$8 ==.
                                   1323 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1324 00101$:
                           000045  1325 	C$c8051_SDCC.h$101$1$8 ==.
                                   1326 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1327 	jbc	_TI0,00112$
      000048 80 FB            [24] 1328 	sjmp	00101$
      00004A                       1329 00112$:
                           00004A  1330 	C$c8051_SDCC.h$102$1$8 ==.
                                   1331 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1332 	mov	_SBUF0,r7
                           00004C  1333 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1334 	XG$putchar$0$0 ==.
      00004C 22               [24] 1335 	ret
                                   1336 ;------------------------------------------------------------
                                   1337 ;Allocation info for local variables in function 'getchar'
                                   1338 ;------------------------------------------------------------
                                   1339 ;c                         Allocated to registers 
                                   1340 ;------------------------------------------------------------
                           00004D  1341 	G$getchar$0$0 ==.
                           00004D  1342 	C$c8051_SDCC.h$108$1$8 ==.
                                   1343 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1344 ;	-----------------------------------------
                                   1345 ;	 function getchar
                                   1346 ;	-----------------------------------------
      00004D                       1347 _getchar:
                           00004D  1348 	C$c8051_SDCC.h$111$1$10 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1350 00101$:
                           00004D  1351 	C$c8051_SDCC.h$112$1$10 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1353 	jbc	_RI0,00112$
      000050 80 FB            [24] 1354 	sjmp	00101$
      000052                       1355 00112$:
                           000052  1356 	C$c8051_SDCC.h$113$1$10 ==.
                                   1357 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1358 	mov	dpl,_SBUF0
                           000055  1359 	C$c8051_SDCC.h$114$1$10 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1361 	lcall	_putchar
                           000058  1362 	C$c8051_SDCC.h$115$1$10 ==.
                                   1363 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1364 	mov	dpl,_SBUF0
                           00005B  1365 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1366 	XG$getchar$0$0 ==.
      00005B 22               [24] 1367 	ret
                                   1368 ;------------------------------------------------------------
                                   1369 ;Allocation info for local variables in function 'lcd_print'
                                   1370 ;------------------------------------------------------------
                                   1371 ;fmt                       Allocated to stack - _bp -5
                                   1372 ;len                       Allocated to registers r6 
                                   1373 ;i                         Allocated to registers 
                                   1374 ;ap                        Allocated to registers 
                                   1375 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1376 ;------------------------------------------------------------
                           00005C  1377 	G$lcd_print$0$0 ==.
                           00005C  1378 	C$i2c.h$81$1$10 ==.
                                   1379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1380 ;	-----------------------------------------
                                   1381 ;	 function lcd_print
                                   1382 ;	-----------------------------------------
      00005C                       1383 _lcd_print:
      00005C C0*00            [24] 1384 	push	_bp
      00005E 85 81*00         [24] 1385 	mov	_bp,sp
                           000061  1386 	C$i2c.h$87$1$73 ==.
                                   1387 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1388 	mov	a,_bp
      000063 24 FB            [12] 1389 	add	a,#0xfb
      000065 F8               [12] 1390 	mov	r0,a
      000066 86 82            [24] 1391 	mov	dpl,@r0
      000068 08               [12] 1392 	inc	r0
      000069 86 83            [24] 1393 	mov	dph,@r0
      00006B 08               [12] 1394 	inc	r0
      00006C 86 F0            [24] 1395 	mov	b,@r0
      00006E 12r00r00         [24] 1396 	lcall	_strlen
      000071 E5 82            [12] 1397 	mov	a,dpl
      000073 85 83 F0         [24] 1398 	mov	b,dph
      000076 45 F0            [12] 1399 	orl	a,b
      000078 70 02            [24] 1400 	jnz	00102$
      00007A 80 62            [24] 1401 	sjmp	00109$
      00007C                       1402 00102$:
                           00007C  1403 	C$i2c.h$89$2$74 ==.
                                   1404 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1405 	mov	a,_bp
      00007E 24 FB            [12] 1406 	add	a,#0xFB
      000080 FF               [12] 1407 	mov	r7,a
      000081 8F*00            [24] 1408 	mov	_vsprintf_PARM_3,r7
                           000083  1409 	C$i2c.h$90$1$73 ==.
                                   1410 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1411 	mov	a,_bp
      000085 24 FB            [12] 1412 	add	a,#0xfb
      000087 F8               [12] 1413 	mov	r0,a
      000088 86*00            [24] 1414 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1415 	inc	r0
      00008B 86*01            [24] 1416 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1417 	inc	r0
      00008E 86*02            [24] 1418 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1419 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1420 	mov	b,#0x00
      000096 12r00r00         [24] 1421 	lcall	_vsprintf
                           000099  1422 	C$i2c.h$93$1$73 ==.
                                   1423 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1424 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1425 	mov	b,#0x00
      00009F 12r00r00         [24] 1426 	lcall	_strlen
      0000A2 AE 82            [24] 1427 	mov	r6,dpl
                           0000A4  1428 	C$i2c.h$94$1$73 ==.
                                   1429 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1430 	mov	r7,#0x00
      0000A6                       1431 00107$:
      0000A6 C3               [12] 1432 	clr	c
      0000A7 EF               [12] 1433 	mov	a,r7
      0000A8 9E               [12] 1434 	subb	a,r6
      0000A9 50 1F            [24] 1435 	jnc	00105$
                           0000AB  1436 	C$i2c.h$96$2$76 ==.
                                   1437 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1438 	mov	a,r7
      0000AC 24r00            [12] 1439 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1440 	mov	dpl,a
      0000B0 E4               [12] 1441 	clr	a
      0000B1 34s00            [12] 1442 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1443 	mov	dph,a
      0000B5 E0               [24] 1444 	movx	a,@dptr
      0000B6 FD               [12] 1445 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1446 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1447 	mov	a,r7
      0000BB 24r00            [12] 1448 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1449 	mov	dpl,a
      0000BF E4               [12] 1450 	clr	a
      0000C0 34s00            [12] 1451 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1452 	mov	dph,a
      0000C4 74 0D            [12] 1453 	mov	a,#0x0D
      0000C6 F0               [24] 1454 	movx	@dptr,a
      0000C7                       1455 00108$:
                           0000C7  1456 	C$i2c.h$94$1$73 ==.
                                   1457 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1458 	inc	r7
      0000C8 80 DC            [24] 1459 	sjmp	00107$
      0000CA                       1460 00105$:
                           0000CA  1461 	C$i2c.h$99$1$73 ==.
                                   1462 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1463 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1464 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1465 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1466 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1467 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1468 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1469 	lcall	_i2c_write_data
      0000DE                       1470 00109$:
      0000DE D0*00            [24] 1471 	pop	_bp
                           0000E0  1472 	C$i2c.h$100$1$73 ==.
                           0000E0  1473 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1474 	ret
                                   1475 ;------------------------------------------------------------
                                   1476 ;Allocation info for local variables in function 'lcd_clear'
                                   1477 ;------------------------------------------------------------
                                   1478 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1479 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1480 ;------------------------------------------------------------
                           0000E1  1481 	G$lcd_clear$0$0 ==.
                           0000E1  1482 	C$i2c.h$103$1$73 ==.
                                   1483 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1484 ;	-----------------------------------------
                                   1485 ;	 function lcd_clear
                                   1486 ;	-----------------------------------------
      0000E1                       1487 _lcd_clear:
                           0000E1  1488 	C$i2c.h$105$1$73 ==.
                                   1489 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1490 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1491 	C$i2c.h$107$1$77 ==.
                                   1492 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1493 00101$:
      0000E4 74 C0            [12] 1494 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1495 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1496 	jc	00103$
      0000EA 75*0Br00         [24] 1497 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1498 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1499 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1500 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1501 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1502 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1503 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1504 	sjmp	00101$
      000101                       1505 00103$:
                           000101  1506 	C$i2c.h$109$1$77 ==.
                                   1507 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1508 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1509 	C$i2c.h$110$1$77 ==.
                                   1510 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1511 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1512 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1513 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1514 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1515 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1516 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1517 	lcall	_i2c_write_data
                           000119  1518 	C$i2c.h$111$1$77 ==.
                           000119  1519 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1520 	ret
                                   1521 ;------------------------------------------------------------
                                   1522 ;Allocation info for local variables in function 'read_keypad'
                                   1523 ;------------------------------------------------------------
                                   1524 ;i                         Allocated to registers r7 
                                   1525 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1526 ;------------------------------------------------------------
                           00011A  1527 	G$read_keypad$0$0 ==.
                           00011A  1528 	C$i2c.h$114$1$77 ==.
                                   1529 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1530 ;	-----------------------------------------
                                   1531 ;	 function read_keypad
                                   1532 ;	-----------------------------------------
      00011A                       1533 _read_keypad:
                           00011A  1534 	C$i2c.h$118$1$78 ==.
                                   1535 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1536 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1537 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1538 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1539 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1540 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1541 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1542 	lcall	_i2c_read_data
                           00012F  1543 	C$i2c.h$119$1$78 ==.
                                   1544 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1545 	mov	a,#0xFF
      000131 B5*03 05         [24] 1546 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1547 	mov	dpl,#0x00
      000137 80 5F            [24] 1548 	sjmp	00116$
      000139                       1549 00102$:
                           000139  1550 	C$i2c.h$121$1$78 ==.
                                   1551 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1552 	mov	r7,#0x00
      00013B 8F 06            [24] 1553 	mov	ar6,r7
      00013D                       1554 00114$:
                           00013D  1555 	C$i2c.h$123$2$79 ==.
                                   1556 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1557 	mov	b,r6
      00013F 05 F0            [12] 1558 	inc	b
      000141 7C 01            [12] 1559 	mov	r4,#0x01
      000143 7D 00            [12] 1560 	mov	r5,#0x00
      000145 80 06            [24] 1561 	sjmp	00145$
      000147                       1562 00144$:
      000147 EC               [12] 1563 	mov	a,r4
      000148 2C               [12] 1564 	add	a,r4
      000149 FC               [12] 1565 	mov	r4,a
      00014A ED               [12] 1566 	mov	a,r5
      00014B 33               [12] 1567 	rlc	a
      00014C FD               [12] 1568 	mov	r5,a
      00014D                       1569 00145$:
      00014D D5 F0 F7         [24] 1570 	djnz	b,00144$
      000150 AA*03            [24] 1571 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1572 	mov	r3,#0x00
      000154 EA               [12] 1573 	mov	a,r2
      000155 52 04            [12] 1574 	anl	ar4,a
      000157 EB               [12] 1575 	mov	a,r3
      000158 52 05            [12] 1576 	anl	ar5,a
      00015A EC               [12] 1577 	mov	a,r4
      00015B 4D               [12] 1578 	orl	a,r5
      00015C 60 07            [24] 1579 	jz	00115$
                           00015E  1580 	C$i2c.h$124$2$79 ==.
                                   1581 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1582 	mov	a,#0x31
      000160 2F               [12] 1583 	add	a,r7
      000161 F5 82            [12] 1584 	mov	dpl,a
      000163 80 33            [24] 1585 	sjmp	00116$
      000165                       1586 00115$:
                           000165  1587 	C$i2c.h$121$1$78 ==.
                                   1588 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1589 	inc	r6
      000166 8E 07            [24] 1590 	mov	ar7,r6
      000168 BE 08 00         [24] 1591 	cjne	r6,#0x08,00147$
      00016B                       1592 00147$:
      00016B 40 D0            [24] 1593 	jc	00114$
                           00016D  1594 	C$i2c.h$127$1$78 ==.
                                   1595 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1596 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1597 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1598 	mov	dpl,#0x39
      000175 80 21            [24] 1599 	sjmp	00116$
      000177                       1600 00107$:
                           000177  1601 	C$i2c.h$129$1$78 ==.
                                   1602 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1603 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1604 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1605 	mov	dpl,#0x2A
      00017F 80 17            [24] 1606 	sjmp	00116$
      000181                       1607 00109$:
                           000181  1608 	C$i2c.h$131$1$78 ==.
                                   1609 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1610 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1611 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1612 	mov	dpl,#0x30
      000189 80 0D            [24] 1613 	sjmp	00116$
      00018B                       1614 00111$:
                           00018B  1615 	C$i2c.h$133$1$78 ==.
                                   1616 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1617 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1618 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1619 	mov	dpl,#0x23
      000193 80 03            [24] 1620 	sjmp	00116$
      000195                       1621 00113$:
                           000195  1622 	C$i2c.h$135$1$78 ==.
                                   1623 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1624 	mov	dpl,#0xFF
      000198                       1625 00116$:
                           000198  1626 	C$i2c.h$136$1$78 ==.
                           000198  1627 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1628 	ret
                                   1629 ;------------------------------------------------------------
                                   1630 ;Allocation info for local variables in function 'kpd_input'
                                   1631 ;------------------------------------------------------------
                                   1632 ;mode                      Allocated to registers r7 
                                   1633 ;sum                       Allocated to registers r5 r6 
                                   1634 ;key                       Allocated to registers r3 
                                   1635 ;i                         Allocated to registers 
                                   1636 ;------------------------------------------------------------
                           000199  1637 	G$kpd_input$0$0 ==.
                           000199  1638 	C$i2c.h$148$1$78 ==.
                                   1639 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1640 ;	-----------------------------------------
                                   1641 ;	 function kpd_input
                                   1642 ;	-----------------------------------------
      000199                       1643 _kpd_input:
      000199 AF 82            [24] 1644 	mov	r7,dpl
                           00019B  1645 	C$i2c.h$153$1$81 ==.
                                   1646 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1647 	C$i2c.h$156$1$81 ==.
                                   1648 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1649 	clr	a
      00019C FD               [12] 1650 	mov	r5,a
      00019D FE               [12] 1651 	mov	r6,a
      00019E EF               [12] 1652 	mov	a,r7
      00019F 70 1D            [24] 1653 	jnz	00102$
      0001A1 C0 06            [24] 1654 	push	ar6
      0001A3 C0 05            [24] 1655 	push	ar5
      0001A5 74r00            [12] 1656 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1657 	push	acc
      0001A9 74s00            [12] 1658 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1659 	push	acc
      0001AD 74 80            [12] 1660 	mov	a,#0x80
      0001AF C0 E0            [24] 1661 	push	acc
      0001B1 12r00r5C         [24] 1662 	lcall	_lcd_print
      0001B4 15 81            [12] 1663 	dec	sp
      0001B6 15 81            [12] 1664 	dec	sp
      0001B8 15 81            [12] 1665 	dec	sp
      0001BA D0 05            [24] 1666 	pop	ar5
      0001BC D0 06            [24] 1667 	pop	ar6
      0001BE                       1668 00102$:
                           0001BE  1669 	C$i2c.h$158$1$81 ==.
                                   1670 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1671 	push	ar6
      0001C0 C0 05            [24] 1672 	push	ar5
      0001C2 74 08            [12] 1673 	mov	a,#0x08
      0001C4 C0 E0            [24] 1674 	push	acc
      0001C6 E4               [12] 1675 	clr	a
      0001C7 C0 E0            [24] 1676 	push	acc
      0001C9 74 08            [12] 1677 	mov	a,#0x08
      0001CB C0 E0            [24] 1678 	push	acc
      0001CD E4               [12] 1679 	clr	a
      0001CE C0 E0            [24] 1680 	push	acc
      0001D0 74 08            [12] 1681 	mov	a,#0x08
      0001D2 C0 E0            [24] 1682 	push	acc
      0001D4 E4               [12] 1683 	clr	a
      0001D5 C0 E0            [24] 1684 	push	acc
      0001D7 74 08            [12] 1685 	mov	a,#0x08
      0001D9 C0 E0            [24] 1686 	push	acc
      0001DB E4               [12] 1687 	clr	a
      0001DC C0 E0            [24] 1688 	push	acc
      0001DE 74 08            [12] 1689 	mov	a,#0x08
      0001E0 C0 E0            [24] 1690 	push	acc
      0001E2 E4               [12] 1691 	clr	a
      0001E3 C0 E0            [24] 1692 	push	acc
      0001E5 74r16            [12] 1693 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1694 	push	acc
      0001E9 74s00            [12] 1695 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1696 	push	acc
      0001ED 74 80            [12] 1697 	mov	a,#0x80
      0001EF C0 E0            [24] 1698 	push	acc
      0001F1 12r00r5C         [24] 1699 	lcall	_lcd_print
      0001F4 E5 81            [12] 1700 	mov	a,sp
      0001F6 24 F3            [12] 1701 	add	a,#0xf3
      0001F8 F5 81            [12] 1702 	mov	sp,a
                           0001FA  1703 	C$i2c.h$160$1$81 ==.
                                   1704 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1705 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1706 	mov	b,#0x07
      000200 E4               [12] 1707 	clr	a
      000201 12r03r0D         [24] 1708 	lcall	_delay_time
      000204 D0 05            [24] 1709 	pop	ar5
      000206 D0 06            [24] 1710 	pop	ar6
                           000208  1711 	C$i2c.h$164$1$81 ==.
                                   1712 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1713 	mov	r7,#0x00
                           00020A  1714 	C$i2c.h$166$3$84 ==.
                                   1715 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1716 00104$:
      00020A C0 07            [24] 1717 	push	ar7
      00020C C0 06            [24] 1718 	push	ar6
      00020E C0 05            [24] 1719 	push	ar5
      000210 12r01r1A         [24] 1720 	lcall	_read_keypad
      000213 AC 82            [24] 1721 	mov	r4,dpl
      000215 D0 05            [24] 1722 	pop	ar5
      000217 D0 06            [24] 1723 	pop	ar6
      000219 D0 07            [24] 1724 	pop	ar7
      00021B 8C 03            [24] 1725 	mov	ar3,r4
      00021D BC FF 02         [24] 1726 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1727 	sjmp	00105$
      000222                       1728 00146$:
      000222 BB 2A 17         [24] 1729 	cjne	r3,#0x2A,00106$
      000225                       1730 00105$:
      000225 90 27 10         [24] 1731 	mov	dptr,#0x2710
      000228 E4               [12] 1732 	clr	a
      000229 F5 F0            [12] 1733 	mov	b,a
      00022B C0 07            [24] 1734 	push	ar7
      00022D C0 06            [24] 1735 	push	ar6
      00022F C0 05            [24] 1736 	push	ar5
      000231 12r03r0D         [24] 1737 	lcall	_delay_time
      000234 D0 05            [24] 1738 	pop	ar5
      000236 D0 06            [24] 1739 	pop	ar6
      000238 D0 07            [24] 1740 	pop	ar7
      00023A 80 CE            [24] 1741 	sjmp	00104$
      00023C                       1742 00106$:
                           00023C  1743 	C$i2c.h$167$2$82 ==.
                                   1744 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1745 	cjne	r3,#0x23,00114$
                           00023F  1746 	C$i2c.h$169$3$83 ==.
                                   1747 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1748 00107$:
      00023F C0 06            [24] 1749 	push	ar6
      000241 C0 05            [24] 1750 	push	ar5
      000243 12r01r1A         [24] 1751 	lcall	_read_keypad
      000246 AC 82            [24] 1752 	mov	r4,dpl
      000248 D0 05            [24] 1753 	pop	ar5
      00024A D0 06            [24] 1754 	pop	ar6
      00024C BC 23 13         [24] 1755 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1756 	mov	dptr,#0x2710
      000252 E4               [12] 1757 	clr	a
      000253 F5 F0            [12] 1758 	mov	b,a
      000255 C0 06            [24] 1759 	push	ar6
      000257 C0 05            [24] 1760 	push	ar5
      000259 12r03r0D         [24] 1761 	lcall	_delay_time
      00025C D0 05            [24] 1762 	pop	ar5
      00025E D0 06            [24] 1763 	pop	ar6
      000260 80 DD            [24] 1764 	sjmp	00107$
      000262                       1765 00109$:
                           000262  1766 	C$i2c.h$170$3$83 ==.
                                   1767 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1768 	mov	dpl,r5
      000264 8E 83            [24] 1769 	mov	dph,r6
      000266 02r03r0C         [24] 1770 	ljmp	00119$
      000269                       1771 00114$:
                           000269  1772 	C$i2c.h$174$3$84 ==.
                                   1773 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1774 	mov	a,r3
      00026A FA               [12] 1775 	mov	r2,a
      00026B 33               [12] 1776 	rlc	a
      00026C 95 E0            [12] 1777 	subb	a,acc
      00026E FC               [12] 1778 	mov	r4,a
      00026F C0 07            [24] 1779 	push	ar7
      000271 C0 06            [24] 1780 	push	ar6
      000273 C0 05            [24] 1781 	push	ar5
      000275 C0 04            [24] 1782 	push	ar4
      000277 C0 03            [24] 1783 	push	ar3
      000279 C0 02            [24] 1784 	push	ar2
      00027B C0 02            [24] 1785 	push	ar2
      00027D C0 04            [24] 1786 	push	ar4
      00027F 74r26            [12] 1787 	mov	a,#___str_2
      000281 C0 E0            [24] 1788 	push	acc
      000283 74s00            [12] 1789 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1790 	push	acc
      000287 74 80            [12] 1791 	mov	a,#0x80
      000289 C0 E0            [24] 1792 	push	acc
      00028B 12r00r5C         [24] 1793 	lcall	_lcd_print
      00028E E5 81            [12] 1794 	mov	a,sp
      000290 24 FB            [12] 1795 	add	a,#0xfb
      000292 F5 81            [12] 1796 	mov	sp,a
      000294 D0 02            [24] 1797 	pop	ar2
      000296 D0 03            [24] 1798 	pop	ar3
      000298 D0 04            [24] 1799 	pop	ar4
      00029A D0 05            [24] 1800 	pop	ar5
      00029C D0 06            [24] 1801 	pop	ar6
                           00029E  1802 	C$i2c.h$175$1$81 ==.
                                   1803 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1804 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1805 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1806 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1807 	push	ar4
      0002A7 C0 03            [24] 1808 	push	ar3
      0002A9 C0 02            [24] 1809 	push	ar2
      0002AB 12r00r00         [24] 1810 	lcall	__mulint
      0002AE A8 82            [24] 1811 	mov	r0,dpl
      0002B0 A9 83            [24] 1812 	mov	r1,dph
      0002B2 D0 02            [24] 1813 	pop	ar2
      0002B4 D0 03            [24] 1814 	pop	ar3
      0002B6 D0 04            [24] 1815 	pop	ar4
      0002B8 D0 07            [24] 1816 	pop	ar7
      0002BA EA               [12] 1817 	mov	a,r2
      0002BB 28               [12] 1818 	add	a,r0
      0002BC F8               [12] 1819 	mov	r0,a
      0002BD EC               [12] 1820 	mov	a,r4
      0002BE 39               [12] 1821 	addc	a,r1
      0002BF F9               [12] 1822 	mov	r1,a
      0002C0 E8               [12] 1823 	mov	a,r0
      0002C1 24 D0            [12] 1824 	add	a,#0xD0
      0002C3 FD               [12] 1825 	mov	r5,a
      0002C4 E9               [12] 1826 	mov	a,r1
      0002C5 34 FF            [12] 1827 	addc	a,#0xFF
      0002C7 FE               [12] 1828 	mov	r6,a
                           0002C8  1829 	C$i2c.h$176$3$84 ==.
                                   1830 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1831 00110$:
      0002C8 C0 07            [24] 1832 	push	ar7
      0002CA C0 06            [24] 1833 	push	ar6
      0002CC C0 05            [24] 1834 	push	ar5
      0002CE C0 03            [24] 1835 	push	ar3
      0002D0 12r01r1A         [24] 1836 	lcall	_read_keypad
      0002D3 AC 82            [24] 1837 	mov	r4,dpl
      0002D5 D0 03            [24] 1838 	pop	ar3
      0002D7 D0 05            [24] 1839 	pop	ar5
      0002D9 D0 06            [24] 1840 	pop	ar6
      0002DB D0 07            [24] 1841 	pop	ar7
      0002DD EC               [12] 1842 	mov	a,r4
      0002DE B5 03 1B         [24] 1843 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1844 	mov	dptr,#0x2710
      0002E4 E4               [12] 1845 	clr	a
      0002E5 F5 F0            [12] 1846 	mov	b,a
      0002E7 C0 07            [24] 1847 	push	ar7
      0002E9 C0 06            [24] 1848 	push	ar6
      0002EB C0 05            [24] 1849 	push	ar5
      0002ED C0 03            [24] 1850 	push	ar3
      0002EF 12r03r0D         [24] 1851 	lcall	_delay_time
      0002F2 D0 03            [24] 1852 	pop	ar3
      0002F4 D0 05            [24] 1853 	pop	ar5
      0002F6 D0 06            [24] 1854 	pop	ar6
      0002F8 D0 07            [24] 1855 	pop	ar7
      0002FA 80 CC            [24] 1856 	sjmp	00110$
      0002FC                       1857 00118$:
                           0002FC  1858 	C$i2c.h$164$1$81 ==.
                                   1859 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1860 	inc	r7
      0002FD C3               [12] 1861 	clr	c
      0002FE EF               [12] 1862 	mov	a,r7
      0002FF 64 80            [12] 1863 	xrl	a,#0x80
      000301 94 85            [12] 1864 	subb	a,#0x85
      000303 50 03            [24] 1865 	jnc	00155$
      000305 02r02r0A         [24] 1866 	ljmp	00104$
      000308                       1867 00155$:
                           000308  1868 	C$i2c.h$179$1$81 ==.
                                   1869 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1870 	mov	dpl,r5
      00030A 8E 83            [24] 1871 	mov	dph,r6
      00030C                       1872 00119$:
                           00030C  1873 	C$i2c.h$180$1$81 ==.
                           00030C  1874 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1875 	ret
                                   1876 ;------------------------------------------------------------
                                   1877 ;Allocation info for local variables in function 'delay_time'
                                   1878 ;------------------------------------------------------------
                                   1879 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1880 ;index                     Allocated to registers 
                                   1881 ;------------------------------------------------------------
                           00030D  1882 	G$delay_time$0$0 ==.
                           00030D  1883 	C$i2c.h$189$1$81 ==.
                                   1884 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1885 ;	-----------------------------------------
                                   1886 ;	 function delay_time
                                   1887 ;	-----------------------------------------
      00030D                       1888 _delay_time:
      00030D AC 82            [24] 1889 	mov	r4,dpl
      00030F AD 83            [24] 1890 	mov	r5,dph
      000311 AE F0            [24] 1891 	mov	r6,b
      000313 FF               [12] 1892 	mov	r7,a
                           000314  1893 	C$i2c.h$192$1$86 ==.
                                   1894 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1895 	mov	r0,#0x00
      000316 79 00            [12] 1896 	mov	r1,#0x00
      000318 7A 00            [12] 1897 	mov	r2,#0x00
      00031A 7B 00            [12] 1898 	mov	r3,#0x00
      00031C                       1899 00103$:
      00031C C3               [12] 1900 	clr	c
      00031D E8               [12] 1901 	mov	a,r0
      00031E 9C               [12] 1902 	subb	a,r4
      00031F E9               [12] 1903 	mov	a,r1
      000320 9D               [12] 1904 	subb	a,r5
      000321 EA               [12] 1905 	mov	a,r2
      000322 9E               [12] 1906 	subb	a,r6
      000323 EB               [12] 1907 	mov	a,r3
      000324 9F               [12] 1908 	subb	a,r7
      000325 50 0F            [24] 1909 	jnc	00105$
      000327 08               [12] 1910 	inc	r0
      000328 B8 00 09         [24] 1911 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1912 	inc	r1
      00032C B9 00 05         [24] 1913 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1914 	inc	r2
      000330 BA 00 E9         [24] 1915 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1916 	inc	r3
      000334                       1917 00115$:
      000334 80 E6            [24] 1918 	sjmp	00103$
      000336                       1919 00105$:
                           000336  1920 	C$i2c.h$193$1$86 ==.
                           000336  1921 	XG$delay_time$0$0 ==.
      000336 22               [24] 1922 	ret
                                   1923 ;------------------------------------------------------------
                                   1924 ;Allocation info for local variables in function 'i2c_start'
                                   1925 ;------------------------------------------------------------
                           000337  1926 	G$i2c_start$0$0 ==.
                           000337  1927 	C$i2c.h$196$1$86 ==.
                                   1928 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1929 ;	-----------------------------------------
                                   1930 ;	 function i2c_start
                                   1931 ;	-----------------------------------------
      000337                       1932 _i2c_start:
                           000337  1933 	C$i2c.h$198$1$88 ==.
                                   1934 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1935 00101$:
      000337 20 C7 FD         [24] 1936 	jb	_BUSY,00101$
                           00033A  1937 	C$i2c.h$199$1$88 ==.
                                   1938 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1939 	setb	_STA
                           00033C  1940 	C$i2c.h$200$1$88 ==.
                                   1941 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1942 00104$:
      00033C 30 C3 FD         [24] 1943 	jnb	_SI,00104$
                           00033F  1944 	C$i2c.h$201$1$88 ==.
                                   1945 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1946 	clr	_STA
                           000341  1947 	C$i2c.h$202$1$88 ==.
                                   1948 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1949 	clr	_SI
                           000343  1950 	C$i2c.h$203$1$88 ==.
                           000343  1951 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1952 	ret
                                   1953 ;------------------------------------------------------------
                                   1954 ;Allocation info for local variables in function 'i2c_write'
                                   1955 ;------------------------------------------------------------
                                   1956 ;output_data               Allocated to registers 
                                   1957 ;------------------------------------------------------------
                           000344  1958 	G$i2c_write$0$0 ==.
                           000344  1959 	C$i2c.h$206$1$88 ==.
                                   1960 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1961 ;	-----------------------------------------
                                   1962 ;	 function i2c_write
                                   1963 ;	-----------------------------------------
      000344                       1964 _i2c_write:
      000344 85 82 C2         [24] 1965 	mov	_SMB0DAT,dpl
                           000347  1966 	C$i2c.h$209$1$90 ==.
                                   1967 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1968 00101$:
                           000347  1969 	C$i2c.h$210$1$90 ==.
                                   1970 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1971 	jbc	_SI,00112$
      00034A 80 FB            [24] 1972 	sjmp	00101$
      00034C                       1973 00112$:
                           00034C  1974 	C$i2c.h$211$1$90 ==.
                           00034C  1975 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1976 	ret
                                   1977 ;------------------------------------------------------------
                                   1978 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1979 ;------------------------------------------------------------
                                   1980 ;output_data               Allocated to registers 
                                   1981 ;------------------------------------------------------------
                           00034D  1982 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1983 	C$i2c.h$214$1$90 ==.
                                   1984 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1985 ;	-----------------------------------------
                                   1986 ;	 function i2c_write_and_stop
                                   1987 ;	-----------------------------------------
      00034D                       1988 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1989 	mov	_SMB0DAT,dpl
                           000350  1990 	C$i2c.h$217$1$92 ==.
                                   1991 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1992 	setb	_STO
                           000352  1993 	C$i2c.h$218$1$92 ==.
                                   1994 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1995 00101$:
                           000352  1996 	C$i2c.h$219$1$92 ==.
                                   1997 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1998 	jbc	_SI,00112$
      000355 80 FB            [24] 1999 	sjmp	00101$
      000357                       2000 00112$:
                           000357  2001 	C$i2c.h$220$1$92 ==.
                           000357  2002 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2003 	ret
                                   2004 ;------------------------------------------------------------
                                   2005 ;Allocation info for local variables in function 'i2c_read'
                                   2006 ;------------------------------------------------------------
                                   2007 ;input_data                Allocated to registers 
                                   2008 ;------------------------------------------------------------
                           000358  2009 	G$i2c_read$0$0 ==.
                           000358  2010 	C$i2c.h$223$1$92 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2012 ;	-----------------------------------------
                                   2013 ;	 function i2c_read
                                   2014 ;	-----------------------------------------
      000358                       2015 _i2c_read:
                           000358  2016 	C$i2c.h$226$1$94 ==.
                                   2017 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2018 00101$:
      000358 30 C3 FD         [24] 2019 	jnb	_SI,00101$
                           00035B  2020 	C$i2c.h$227$1$94 ==.
                                   2021 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2022 	mov	dpl,_SMB0DAT
                           00035E  2023 	C$i2c.h$228$1$94 ==.
                                   2024 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2025 	clr	_SI
                           000360  2026 	C$i2c.h$229$1$94 ==.
                                   2027 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2028 	C$i2c.h$230$1$94 ==.
                           000360  2029 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2030 	ret
                                   2031 ;------------------------------------------------------------
                                   2032 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2033 ;------------------------------------------------------------
                                   2034 ;input_data                Allocated to registers r7 
                                   2035 ;------------------------------------------------------------
                           000361  2036 	G$i2c_read_and_stop$0$0 ==.
                           000361  2037 	C$i2c.h$233$1$94 ==.
                                   2038 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2039 ;	-----------------------------------------
                                   2040 ;	 function i2c_read_and_stop
                                   2041 ;	-----------------------------------------
      000361                       2042 _i2c_read_and_stop:
                           000361  2043 	C$i2c.h$236$1$96 ==.
                                   2044 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2045 00101$:
      000361 30 C3 FD         [24] 2046 	jnb	_SI,00101$
                           000364  2047 	C$i2c.h$237$1$96 ==.
                                   2048 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2049 	mov	r7,_SMB0DAT
                           000366  2050 	C$i2c.h$238$1$96 ==.
                                   2051 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2052 	clr	_SI
                           000368  2053 	C$i2c.h$239$1$96 ==.
                                   2054 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2055 	setb	_STO
                           00036A  2056 	C$i2c.h$240$1$96 ==.
                                   2057 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2058 00104$:
                           00036A  2059 	C$i2c.h$241$1$96 ==.
                                   2060 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2061 	jbc	_SI,00122$
      00036D 80 FB            [24] 2062 	sjmp	00104$
      00036F                       2063 00122$:
                           00036F  2064 	C$i2c.h$242$1$96 ==.
                                   2065 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2066 	mov	dpl,r7
                           000371  2067 	C$i2c.h$243$1$96 ==.
                           000371  2068 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2069 	ret
                                   2070 ;------------------------------------------------------------
                                   2071 ;Allocation info for local variables in function 'i2c_write_data'
                                   2072 ;------------------------------------------------------------
                                   2073 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2074 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2075 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2076 ;addr                      Allocated to registers r7 
                                   2077 ;i                         Allocated to registers 
                                   2078 ;------------------------------------------------------------
                           000372  2079 	G$i2c_write_data$0$0 ==.
                           000372  2080 	C$i2c.h$246$1$96 ==.
                                   2081 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2082 ;	-----------------------------------------
                                   2083 ;	 function i2c_write_data
                                   2084 ;	-----------------------------------------
      000372                       2085 _i2c_write_data:
      000372 AF 82            [24] 2086 	mov	r7,dpl
                           000374  2087 	C$i2c.h$250$1$98 ==.
                                   2088 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2089 	push	ar7
      000376 12r03r37         [24] 2090 	lcall	_i2c_start
      000379 D0 07            [24] 2091 	pop	ar7
                           00037B  2092 	C$i2c.h$251$1$98 ==.
                                   2093 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2094 	mov	a,#0xFE
      00037D 5F               [12] 2095 	anl	a,r7
      00037E F5 82            [12] 2096 	mov	dpl,a
      000380 12r03r44         [24] 2097 	lcall	_i2c_write
                           000383  2098 	C$i2c.h$252$1$98 ==.
                                   2099 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2100 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2101 	lcall	_i2c_write
                           000389  2102 	C$i2c.h$253$1$98 ==.
                                   2103 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2104 	mov	r7,#0x00
      00038B                       2105 00103$:
      00038B AD*09            [24] 2106 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2107 	mov	r6,#0x00
      00038F 1D               [12] 2108 	dec	r5
      000390 BD FF 01         [24] 2109 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2110 	dec	r6
      000394                       2111 00114$:
      000394 8F 03            [24] 2112 	mov	ar3,r7
      000396 7C 00            [12] 2113 	mov	r4,#0x00
      000398 C3               [12] 2114 	clr	c
      000399 EB               [12] 2115 	mov	a,r3
      00039A 9D               [12] 2116 	subb	a,r5
      00039B EC               [12] 2117 	mov	a,r4
      00039C 64 80            [12] 2118 	xrl	a,#0x80
      00039E 8E F0            [24] 2119 	mov	b,r6
      0003A0 63 F0 80         [24] 2120 	xrl	b,#0x80
      0003A3 95 F0            [12] 2121 	subb	a,b
      0003A5 50 1F            [24] 2122 	jnc	00101$
                           0003A7  2123 	C$i2c.h$254$1$98 ==.
                                   2124 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2125 	mov	a,r7
      0003A8 25*06            [12] 2126 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2127 	mov	r4,a
      0003AB E4               [12] 2128 	clr	a
      0003AC 35*07            [12] 2129 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2130 	mov	r5,a
      0003AF AE*08            [24] 2131 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2132 	mov	dpl,r4
      0003B3 8D 83            [24] 2133 	mov	dph,r5
      0003B5 8E F0            [24] 2134 	mov	b,r6
      0003B7 12r00r00         [24] 2135 	lcall	__gptrget
      0003BA F5 82            [12] 2136 	mov	dpl,a
      0003BC C0 07            [24] 2137 	push	ar7
      0003BE 12r03r44         [24] 2138 	lcall	_i2c_write
      0003C1 D0 07            [24] 2139 	pop	ar7
                           0003C3  2140 	C$i2c.h$253$1$98 ==.
                                   2141 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2142 	inc	r7
      0003C4 80 C5            [24] 2143 	sjmp	00103$
      0003C6                       2144 00101$:
                           0003C6  2145 	C$i2c.h$255$1$98 ==.
                                   2146 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2147 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2148 	mov	r7,#0x00
      0003CA 1E               [12] 2149 	dec	r6
      0003CB BE FF 01         [24] 2150 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2151 	dec	r7
      0003CF                       2152 00116$:
      0003CF EE               [12] 2153 	mov	a,r6
      0003D0 25*06            [12] 2154 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2155 	mov	r6,a
      0003D3 EF               [12] 2156 	mov	a,r7
      0003D4 35*07            [12] 2157 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2158 	mov	r7,a
      0003D7 AD*08            [24] 2159 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2160 	mov	dpl,r6
      0003DB 8F 83            [24] 2161 	mov	dph,r7
      0003DD 8D F0            [24] 2162 	mov	b,r5
      0003DF 12r00r00         [24] 2163 	lcall	__gptrget
      0003E2 F5 82            [12] 2164 	mov	dpl,a
      0003E4 12r03r4D         [24] 2165 	lcall	_i2c_write_and_stop
                           0003E7  2166 	C$i2c.h$256$1$98 ==.
                           0003E7  2167 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2168 	ret
                                   2169 ;------------------------------------------------------------
                                   2170 ;Allocation info for local variables in function 'i2c_read_data'
                                   2171 ;------------------------------------------------------------
                                   2172 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2173 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2174 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2175 ;addr                      Allocated to registers r7 
                                   2176 ;j                         Allocated to registers 
                                   2177 ;------------------------------------------------------------
                           0003E8  2178 	G$i2c_read_data$0$0 ==.
                           0003E8  2179 	C$i2c.h$259$1$98 ==.
                                   2180 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2181 ;	-----------------------------------------
                                   2182 ;	 function i2c_read_data
                                   2183 ;	-----------------------------------------
      0003E8                       2184 _i2c_read_data:
      0003E8 AF 82            [24] 2185 	mov	r7,dpl
                           0003EA  2186 	C$i2c.h$262$1$100 ==.
                                   2187 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2188 	push	ar7
      0003EC 12r03r37         [24] 2189 	lcall	_i2c_start
      0003EF D0 07            [24] 2190 	pop	ar7
                           0003F1  2191 	C$i2c.h$263$1$100 ==.
                                   2192 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2193 	mov	ar6,r7
      0003F3 74 FE            [12] 2194 	mov	a,#0xFE
      0003F5 5E               [12] 2195 	anl	a,r6
      0003F6 F5 82            [12] 2196 	mov	dpl,a
      0003F8 C0 07            [24] 2197 	push	ar7
      0003FA 12r03r44         [24] 2198 	lcall	_i2c_write
                           0003FD  2199 	C$i2c.h$264$1$100 ==.
                                   2200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2201 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2202 	lcall	_i2c_write_and_stop
                           000403  2203 	C$i2c.h$265$1$100 ==.
                                   2204 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2205 	lcall	_i2c_start
      000406 D0 07            [24] 2206 	pop	ar7
                           000408  2207 	C$i2c.h$266$1$100 ==.
                                   2208 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2209 	mov	a,#0x01
      00040A 4F               [12] 2210 	orl	a,r7
      00040B F5 82            [12] 2211 	mov	dpl,a
      00040D 12r03r44         [24] 2212 	lcall	_i2c_write
                           000410  2213 	C$i2c.h$267$1$100 ==.
                                   2214 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2215 	mov	r7,#0x00
      000412                       2216 00103$:
      000412 AD*0E            [24] 2217 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2218 	mov	r6,#0x00
      000416 1D               [12] 2219 	dec	r5
      000417 BD FF 01         [24] 2220 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2221 	dec	r6
      00041B                       2222 00114$:
      00041B 8F 03            [24] 2223 	mov	ar3,r7
      00041D 7C 00            [12] 2224 	mov	r4,#0x00
      00041F C3               [12] 2225 	clr	c
      000420 EB               [12] 2226 	mov	a,r3
      000421 9D               [12] 2227 	subb	a,r5
      000422 EC               [12] 2228 	mov	a,r4
      000423 64 80            [12] 2229 	xrl	a,#0x80
      000425 8E F0            [24] 2230 	mov	b,r6
      000427 63 F0 80         [24] 2231 	xrl	b,#0x80
      00042A 95 F0            [12] 2232 	subb	a,b
      00042C 50 2E            [24] 2233 	jnc	00101$
                           00042E  2234 	C$i2c.h$269$2$101 ==.
                                   2235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2236 	setb	_AA
                           000430  2237 	C$i2c.h$270$2$101 ==.
                                   2238 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2239 	mov	a,r7
      000431 25*0B            [12] 2240 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2241 	mov	r4,a
      000434 E4               [12] 2242 	clr	a
      000435 35*0C            [12] 2243 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2244 	mov	r5,a
      000438 AE*0D            [24] 2245 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2246 	push	ar7
      00043C C0 06            [24] 2247 	push	ar6
      00043E C0 05            [24] 2248 	push	ar5
      000440 C0 04            [24] 2249 	push	ar4
      000442 12r03r58         [24] 2250 	lcall	_i2c_read
      000445 AB 82            [24] 2251 	mov	r3,dpl
      000447 D0 04            [24] 2252 	pop	ar4
      000449 D0 05            [24] 2253 	pop	ar5
      00044B D0 06            [24] 2254 	pop	ar6
      00044D D0 07            [24] 2255 	pop	ar7
      00044F 8C 82            [24] 2256 	mov	dpl,r4
      000451 8D 83            [24] 2257 	mov	dph,r5
      000453 8E F0            [24] 2258 	mov	b,r6
      000455 EB               [12] 2259 	mov	a,r3
      000456 12r00r00         [24] 2260 	lcall	__gptrput
                           000459  2261 	C$i2c.h$267$1$100 ==.
                                   2262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2263 	inc	r7
      00045A 80 B6            [24] 2264 	sjmp	00103$
      00045C                       2265 00101$:
                           00045C  2266 	C$i2c.h$272$1$100 ==.
                                   2267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2268 	clr	_AA
                           00045E  2269 	C$i2c.h$273$1$100 ==.
                                   2270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2271 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2272 	mov	r7,#0x00
      000462 1E               [12] 2273 	dec	r6
      000463 BE FF 01         [24] 2274 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2275 	dec	r7
      000467                       2276 00116$:
      000467 EE               [12] 2277 	mov	a,r6
      000468 25*0B            [12] 2278 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2279 	mov	r6,a
      00046B EF               [12] 2280 	mov	a,r7
      00046C 35*0C            [12] 2281 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2282 	mov	r7,a
      00046F AD*0D            [24] 2283 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2284 	push	ar7
      000473 C0 06            [24] 2285 	push	ar6
      000475 C0 05            [24] 2286 	push	ar5
      000477 12r03r61         [24] 2287 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2288 	mov	r4,dpl
      00047C D0 05            [24] 2289 	pop	ar5
      00047E D0 06            [24] 2290 	pop	ar6
      000480 D0 07            [24] 2291 	pop	ar7
      000482 8E 82            [24] 2292 	mov	dpl,r6
      000484 8F 83            [24] 2293 	mov	dph,r7
      000486 8D F0            [24] 2294 	mov	b,r5
      000488 EC               [12] 2295 	mov	a,r4
      000489 12r00r00         [24] 2296 	lcall	__gptrput
                           00048C  2297 	C$i2c.h$274$1$100 ==.
                           00048C  2298 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2299 	ret
                                   2300 ;------------------------------------------------------------
                                   2301 ;Allocation info for local variables in function 'Accel_Init'
                                   2302 ;------------------------------------------------------------
                                   2303 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2304 ;------------------------------------------------------------
                           00048D  2305 	G$Accel_Init$0$0 ==.
                           00048D  2306 	C$i2c.h$283$1$100 ==.
                                   2307 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2308 ;	-----------------------------------------
                                   2309 ;	 function Accel_Init
                                   2310 ;	-----------------------------------------
      00048D                       2311 _Accel_Init:
                           00048D  2312 	C$i2c.h$287$1$103 ==.
                                   2313 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2314 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2315 	C$i2c.h$289$1$103 ==.
                                   2316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2317 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2318 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2319 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2320 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2321 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2322 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2323 	lcall	_i2c_write_data
                           0004A5  2324 	C$i2c.h$290$1$103 ==.
                                   2325 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2326 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2327 	C$i2c.h$292$1$103 ==.
                                   2328 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2329 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2330 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2331 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2332 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2333 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2334 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2335 	lcall	_i2c_write_data
                           0004BD  2336 	C$i2c.h$293$1$103 ==.
                                   2337 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2338 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2339 	C$i2c.h$294$1$103 ==.
                                   2340 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2341 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2342 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2343 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2344 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2345 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2346 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2347 	lcall	_i2c_write_data
                           0004D5  2348 	C$i2c.h$298$1$103 ==.
                           0004D5  2349 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2350 	ret
                                   2351 ;------------------------------------------------------------
                                   2352 ;Allocation info for local variables in function 'main'
                                   2353 ;------------------------------------------------------------
                                   2354 ;run_stop                  Allocated to registers r7 
                                   2355 ;------------------------------------------------------------
                           0004D6  2356 	G$main$0$0 ==.
                           0004D6  2357 	C$Lab_4.c$64$1$103 ==.
                                   2358 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:64: void main(void)
                                   2359 ;	-----------------------------------------
                                   2360 ;	 function main
                                   2361 ;	-----------------------------------------
      0004D6                       2362 _main:
                           0004D6  2363 	C$Lab_4.c$67$1$120 ==.
                                   2364 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:67: Sys_Init(); // initialize board
      0004D6 12r00r30         [24] 2365 	lcall	_Sys_Init
                           0004D9  2366 	C$Lab_4.c$68$1$120 ==.
                                   2367 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:68: Port_Init();
      0004D9 12r05r41         [24] 2368 	lcall	_Port_Init
                           0004DC  2369 	C$Lab_4.c$69$1$120 ==.
                                   2370 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:69: PCA_Init();
      0004DC 12r05r4F         [24] 2371 	lcall	_PCA_Init
                           0004DF  2372 	C$Lab_4.c$71$1$120 ==.
                                   2373 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:71: r_count = 0;
      0004DF 75*24 00         [24] 2374 	mov	_r_count,#0x00
                           0004E2  2375 	C$Lab_4.c$72$1$120 ==.
                                   2376 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:72: h_count = 0;
      0004E2 75*25 00         [24] 2377 	mov	_h_count,#0x00
                           0004E5  2378 	C$Lab_4.c$73$1$120 ==.
                                   2379 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:73: compass_gain = heading_gain();
      0004E5 12r00r00         [24] 2380 	lcall	_heading_gain
      0004E8 85 82*2F         [24] 2381 	mov	_compass_gain,dpl
                           0004EB  2382 	C$Lab_4.c$74$1$120 ==.
                                   2383 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:74: speed = input_speed();
      0004EB 12r08r68         [24] 2384 	lcall	_input_speed
      0004EE 85 82*30         [24] 2385 	mov	_speed,dpl
                           0004F1  2386 	C$Lab_4.c$75$1$120 ==.
                                   2387 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:75: while (1)
      0004F1                       2388 00112$:
                           0004F1  2389 	C$Lab_4.c$77$2$121 ==.
                                   2390 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:77: run_stop = 0;
      0004F1 7F 00            [12] 2391 	mov	r7,#0x00
                           0004F3  2392 	C$Lab_4.c$78$2$121 ==.
                                   2393 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:78: while ((!COMPASS_SWITCH)&&(!RANGER_SWITCH)) // make run an sbit for the run/stop switch
      0004F3                       2394 00104$:
      0004F3 20 B7 1C         [24] 2395 	jb	_COMPASS_SWITCH,00106$
      0004F6 20 B6 19         [24] 2396 	jb	_RANGER_SWITCH,00106$
                           0004F9  2397 	C$Lab_4.c$80$3$122 ==.
                                   2398 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:80: if (run_stop == 0)
      0004F9 EF               [12] 2399 	mov	a,r7
      0004FA 70 F7            [24] 2400 	jnz	00104$
                           0004FC  2401 	C$Lab_4.c$82$4$123 ==.
                                   2402 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:82: desired_heading = pick_heading();
      0004FC 12r06rC0         [24] 2403 	lcall	_pick_heading
      0004FF 85 82*26         [24] 2404 	mov	_desired_heading,dpl
      000502 85 83*27         [24] 2405 	mov	(_desired_heading + 1),dph
                           000505  2406 	C$Lab_4.c$83$4$123 ==.
                                   2407 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:83: desired_range = pick_range();
      000505 12r00r00         [24] 2408 	lcall	_pick_range
      000508 85 82*28         [24] 2409 	mov	_desired_range,dpl
      00050B 85 83*29         [24] 2410 	mov	(_desired_range + 1),dph
                           00050E  2411 	C$Lab_4.c$84$4$123 ==.
                                   2412 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:84: run_stop = 1; // only try to update desired heading once
      00050E 7F 01            [12] 2413 	mov	r7,#0x01
      000510 80 E1            [24] 2414 	sjmp	00104$
      000512                       2415 00106$:
                           000512  2416 	C$Lab_4.c$87$2$121 ==.
                                   2417 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:87: if (new_heading) // enough overflows for a new heading
      000512 E5*1E            [12] 2418 	mov	a,_new_heading
      000514 60 12            [24] 2419 	jz	00108$
                           000516  2420 	C$Lab_4.c$89$3$124 ==.
                                   2421 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:89: heading = read_compass();
      000516 12r05rB2         [24] 2422 	lcall	_read_compass
      000519 85 82*20         [24] 2423 	mov	_heading,dpl
      00051C 85 83*21         [24] 2424 	mov	(_heading + 1),dph
                           00051F  2425 	C$Lab_4.c$90$3$124 ==.
                                   2426 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:90: set_servo_PWM(); // if new data, adjust servo PWM for compass & ranger
      00051F 12r05rD8         [24] 2427 	lcall	_set_servo_PWM
                           000522  2428 	C$Lab_4.c$91$3$124 ==.
                                   2429 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:91: new_heading = 0;
      000522 75*1E 00         [24] 2430 	mov	_new_heading,#0x00
                           000525  2431 	C$Lab_4.c$92$3$124 ==.
                                   2432 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:92: h_count = 0;
      000525 75*25 00         [24] 2433 	mov	_h_count,#0x00
      000528                       2434 00108$:
                           000528  2435 	C$Lab_4.c$94$2$121 ==.
                                   2436 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:94: if (new_range) // enough overflow for a new range
      000528 E5*1F            [12] 2437 	mov	a,_new_range
      00052A 60 C5            [24] 2438 	jz	00112$
                           00052C  2439 	C$Lab_4.c$96$3$125 ==.
                                   2440 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:96: range = read_ranger(); // get range
      00052C 12r06r31         [24] 2441 	lcall	_read_ranger
      00052F 85 82*22         [24] 2442 	mov	_range,dpl
      000532 85 83*23         [24] 2443 	mov	(_range + 1),dph
                           000535  2444 	C$Lab_4.c$98$3$125 ==.
                                   2445 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:98: set_range_adj(); // if new data, set value to adjust steering PWM
      000535 12r00r00         [24] 2446 	lcall	_set_range_adj
                           000538  2447 	C$Lab_4.c$99$3$125 ==.
                                   2448 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:99: new_range = 0;
      000538 75*1F 00         [24] 2449 	mov	_new_range,#0x00
                           00053B  2450 	C$Lab_4.c$100$3$125 ==.
                                   2451 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:100: r_count = 0;
      00053B 75*24 00         [24] 2452 	mov	_r_count,#0x00
      00053E 80 B1            [24] 2453 	sjmp	00112$
                           000540  2454 	C$Lab_4.c$103$1$120 ==.
                           000540  2455 	XG$main$0$0 ==.
      000540 22               [24] 2456 	ret
                                   2457 ;------------------------------------------------------------
                                   2458 ;Allocation info for local variables in function 'Port_Init'
                                   2459 ;------------------------------------------------------------
                           000541  2460 	G$Port_Init$0$0 ==.
                           000541  2461 	C$Lab_4.c$108$1$120 ==.
                                   2462 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:108: void Port_Init()
                                   2463 ;	-----------------------------------------
                                   2464 ;	 function Port_Init
                                   2465 ;	-----------------------------------------
      000541                       2466 _Port_Init:
                           000541  2467 	C$Lab_4.c$110$1$126 ==.
                                   2468 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:110: P1MDOUT |= 0x01; //set output pin for CEX0 in push-pull mode
      000541 43 A5 01         [24] 2469 	orl	_P1MDOUT,#0x01
                           000544  2470 	C$Lab_4.c$111$1$126 ==.
                                   2471 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:111: P3MDOUT &= 0x7F; // set input pin for 3.7 to open-drain
      000544 53 A7 7F         [24] 2472 	anl	_P3MDOUT,#0x7F
                           000547  2473 	C$Lab_4.c$112$1$126 ==.
                                   2474 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:112: P3		|= ~0x7F;// set input pin for 3.7 to high impedence
      000547 AF B0            [24] 2475 	mov	r7,_P3
      000549 74 80            [12] 2476 	mov	a,#0x80
      00054B 4F               [12] 2477 	orl	a,r7
      00054C F5 B0            [12] 2478 	mov	_P3,a
                           00054E  2479 	C$Lab_4.c$113$1$126 ==.
                           00054E  2480 	XG$Port_Init$0$0 ==.
      00054E 22               [24] 2481 	ret
                                   2482 ;------------------------------------------------------------
                                   2483 ;Allocation info for local variables in function 'PCA_Init'
                                   2484 ;------------------------------------------------------------
                           00054F  2485 	G$PCA_Init$0$0 ==.
                           00054F  2486 	C$Lab_4.c$117$1$126 ==.
                                   2487 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:117: void PCA_Init(void)
                                   2488 ;	-----------------------------------------
                                   2489 ;	 function PCA_Init
                                   2490 ;	-----------------------------------------
      00054F                       2491 _PCA_Init:
                           00054F  2492 	C$Lab_4.c$119$1$128 ==.
                                   2493 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:119: PCA0CPM0 = 0xC2;	// CCM0 in 16-bit compare mode
      00054F 75 DA C2         [24] 2494 	mov	_PCA0CPM0,#0xC2
                           000552  2495 	C$Lab_4.c$120$1$128 ==.
                                   2496 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:120: PCA0CN = 0x40;		// Enable PCA Counter
      000552 75 D8 40         [24] 2497 	mov	_PCA0CN,#0x40
                           000555  2498 	C$Lab_4.c$121$1$128 ==.
                                   2499 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:121: PCA0MD = 0x81;		// Enable CF Interrupt and SYSCLK/12
      000555 75 D9 81         [24] 2500 	mov	_PCA0MD,#0x81
                           000558  2501 	C$Lab_4.c$122$1$128 ==.
                                   2502 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:122: EA = 1;				// Enable Global Interrupts
      000558 D2 AF            [12] 2503 	setb	_EA
                           00055A  2504 	C$Lab_4.c$123$1$128 ==.
                                   2505 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:123: EIE1 |= 0x08;		// Enable PCA Interrupt
      00055A 43 E6 08         [24] 2506 	orl	_EIE1,#0x08
                           00055D  2507 	C$Lab_4.c$124$1$128 ==.
                           00055D  2508 	XG$PCA_Init$0$0 ==.
      00055D 22               [24] 2509 	ret
                                   2510 ;------------------------------------------------------------
                                   2511 ;Allocation info for local variables in function 'PCA_ISR'
                                   2512 ;------------------------------------------------------------
                           00055E  2513 	G$PCA_ISR$0$0 ==.
                           00055E  2514 	C$Lab_4.c$128$1$128 ==.
                                   2515 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:128: void PCA_ISR(void) __interrupt 9
                                   2516 ;	-----------------------------------------
                                   2517 ;	 function PCA_ISR
                                   2518 ;	-----------------------------------------
      00055E                       2519 _PCA_ISR:
      00055E C0 E0            [24] 2520 	push	acc
      000560 C0 D0            [24] 2521 	push	psw
                           000562  2522 	C$Lab_4.c$130$1$130 ==.
                                   2523 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:130: if (CF)
                           000562  2524 	C$Lab_4.c$132$2$131 ==.
                                   2525 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:132: CF = 0; // clear overflow indicator
      000562 10 DF 02         [24] 2526 	jbc	_CF,00123$
      000565 80 2D            [24] 2527 	sjmp	00108$
      000567                       2528 00123$:
                           000567  2529 	C$Lab_4.c$133$2$131 ==.
                                   2530 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:133: h_count++;
      000567 05*25            [12] 2531 	inc	_h_count
                           000569  2532 	C$Lab_4.c$134$2$131 ==.
                                   2533 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:134: if (h_count>=2)
      000569 74 FE            [12] 2534 	mov	a,#0x100 - 0x02
      00056B 25*25            [12] 2535 	add	a,_h_count
      00056D 50 06            [24] 2536 	jnc	00102$
                           00056F  2537 	C$Lab_4.c$136$3$132 ==.
                                   2538 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:136: new_heading=1;
      00056F 75*1E 01         [24] 2539 	mov	_new_heading,#0x01
                           000572  2540 	C$Lab_4.c$137$3$132 ==.
                                   2541 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:137: h_count = 0;
      000572 75*25 00         [24] 2542 	mov	_h_count,#0x00
      000575                       2543 00102$:
                           000575  2544 	C$Lab_4.c$139$2$131 ==.
                                   2545 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:139: heading_delay++;
      000575 05*2A            [12] 2546 	inc	_heading_delay
                           000577  2547 	C$Lab_4.c$140$2$131 ==.
                                   2548 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:140: if(heading_delay>5) heading_delay=0;
      000577 E5*2A            [12] 2549 	mov	a,_heading_delay
      000579 24 FA            [12] 2550 	add	a,#0xff - 0x05
      00057B 50 03            [24] 2551 	jnc	00104$
      00057D 75*2A 00         [24] 2552 	mov	_heading_delay,#0x00
      000580                       2553 00104$:
                           000580  2554 	C$Lab_4.c$141$2$131 ==.
                                   2555 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:141: r_count++;
      000580 05*24            [12] 2556 	inc	_r_count
                           000582  2557 	C$Lab_4.c$142$2$131 ==.
                                   2558 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:142: if (r_count>=4)
      000582 74 FC            [12] 2559 	mov	a,#0x100 - 0x04
      000584 25*24            [12] 2560 	add	a,_r_count
      000586 50 06            [24] 2561 	jnc	00106$
                           000588  2562 	C$Lab_4.c$144$3$133 ==.
                                   2563 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:144: new_range = 1;
      000588 75*1F 01         [24] 2564 	mov	_new_range,#0x01
                           00058B  2565 	C$Lab_4.c$145$3$133 ==.
                                   2566 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:145: r_count = 0;
      00058B 75*24 00         [24] 2567 	mov	_r_count,#0x00
      00058E                       2568 00106$:
                           00058E  2569 	C$Lab_4.c$147$2$131 ==.
                                   2570 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:147: PCA0 = PCA_START;
      00058E 85*1C E9         [24] 2571 	mov	((_PCA0 >> 0) & 0xFF),_PCA_START
      000591 85*1D F9         [24] 2572 	mov	((_PCA0 >> 8) & 0xFF),(_PCA_START + 1)
      000594                       2573 00108$:
                           000594  2574 	C$Lab_4.c$150$1$130 ==.
                                   2575 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:150: PCA0CN &= 0xC0;
      000594 53 D8 C0         [24] 2576 	anl	_PCA0CN,#0xC0
      000597 D0 D0            [24] 2577 	pop	psw
      000599 D0 E0            [24] 2578 	pop	acc
                           00059B  2579 	C$Lab_4.c$151$1$130 ==.
                           00059B  2580 	XG$PCA_ISR$0$0 ==.
      00059B 32               [24] 2581 	reti
                                   2582 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2583 ;	eliminated unneeded push/pop dpl
                                   2584 ;	eliminated unneeded push/pop dph
                                   2585 ;	eliminated unneeded push/pop b
                                   2586 ;------------------------------------------------------------
                                   2587 ;Allocation info for local variables in function 'SMB_Init'
                                   2588 ;------------------------------------------------------------
                           00059C  2589 	G$SMB_Init$0$0 ==.
                           00059C  2590 	C$Lab_4.c$155$1$130 ==.
                                   2591 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:155: void SMB_Init(void)
                                   2592 ;	-----------------------------------------
                                   2593 ;	 function SMB_Init
                                   2594 ;	-----------------------------------------
      00059C                       2595 _SMB_Init:
                           00059C  2596 	C$Lab_4.c$157$1$135 ==.
                                   2597 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:157: SMB0CR=0x93;	//Set SCL to 100KHz
      00059C 75 CF 93         [24] 2598 	mov	_SMB0CR,#0x93
                           00059F  2599 	C$Lab_4.c$158$1$135 ==.
                                   2600 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:158: ENSMB=1; 		//Bit 6 of SMB0CN, enable the SMBus
      00059F D2 C6            [12] 2601 	setb	_ENSMB
                           0005A1  2602 	C$Lab_4.c$159$1$135 ==.
                           0005A1  2603 	XG$SMB_Init$0$0 ==.
      0005A1 22               [24] 2604 	ret
                                   2605 ;------------------------------------------------------------
                                   2606 ;Allocation info for local variables in function 'ADC_Init'
                                   2607 ;------------------------------------------------------------
                           0005A2  2608 	G$ADC_Init$0$0 ==.
                           0005A2  2609 	C$Lab_4.c$162$1$135 ==.
                                   2610 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:162: void ADC_Init(void)
                                   2611 ;	-----------------------------------------
                                   2612 ;	 function ADC_Init
                                   2613 ;	-----------------------------------------
      0005A2                       2614 _ADC_Init:
                           0005A2  2615 	C$Lab_4.c$164$1$137 ==.
                                   2616 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:164: REF0CN = 0x03;	// Set Vref to use internal reference voltage (2.4 V)
      0005A2 75 D1 03         [24] 2617 	mov	_REF0CN,#0x03
                           0005A5  2618 	C$Lab_4.c$165$1$137 ==.
                                   2619 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:165: ADC1CN = 0x80;	// Enable A/D converter (ADC1)
      0005A5 75 AA 80         [24] 2620 	mov	_ADC1CN,#0x80
                           0005A8  2621 	C$Lab_4.c$166$1$137 ==.
                                   2622 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:166: ADC1CF |= 0x01; // Set A/D converter gain to 1
      0005A8 43 AB 01         [24] 2623 	orl	_ADC1CF,#0x01
                           0005AB  2624 	C$Lab_4.c$167$1$137 ==.
                           0005AB  2625 	XG$ADC_Init$0$0 ==.
      0005AB 22               [24] 2626 	ret
                                   2627 ;------------------------------------------------------------
                                   2628 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2629 ;------------------------------------------------------------
                           0005AC  2630 	G$Interrupt_Init$0$0 ==.
                           0005AC  2631 	C$Lab_4.c$171$1$137 ==.
                                   2632 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:171: void Interrupt_Init(void)
                                   2633 ;	-----------------------------------------
                                   2634 ;	 function Interrupt_Init
                                   2635 ;	-----------------------------------------
      0005AC                       2636 _Interrupt_Init:
                           0005AC  2637 	C$Lab_4.c$173$1$139 ==.
                                   2638 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:173: EIE1 |= 0x08;	//Enable PCA0 Interrupt (bit 3) 
      0005AC 43 E6 08         [24] 2639 	orl	_EIE1,#0x08
                           0005AF  2640 	C$Lab_4.c$174$1$139 ==.
                                   2641 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:174: EA = 1;			//Enable global interrupts
      0005AF D2 AF            [12] 2642 	setb	_EA
                           0005B1  2643 	C$Lab_4.c$175$1$139 ==.
                           0005B1  2644 	XG$Interrupt_Init$0$0 ==.
      0005B1 22               [24] 2645 	ret
                                   2646 ;------------------------------------------------------------
                                   2647 ;Allocation info for local variables in function 'read_compass'
                                   2648 ;------------------------------------------------------------
                                   2649 ;addr                      Allocated to registers 
                                   2650 ;Data                      Allocated with name '_read_compass_Data_1_141'
                                   2651 ;read_heading              Allocated to registers 
                                   2652 ;------------------------------------------------------------
                           0005B2  2653 	G$read_compass$0$0 ==.
                           0005B2  2654 	C$Lab_4.c$179$1$139 ==.
                                   2655 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:179: int read_compass(void)
                                   2656 ;	-----------------------------------------
                                   2657 ;	 function read_compass
                                   2658 ;	-----------------------------------------
      0005B2                       2659 _read_compass:
                           0005B2  2660 	C$Lab_4.c$184$1$141 ==.
                                   2661 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:184: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0005B2 75*0Br31         [24] 2662 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_141
      0005B5 75*0C 00         [24] 2663 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005B8 75*0D 40         [24] 2664 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005BB 75*0A 02         [24] 2665 	mov	_i2c_read_data_PARM_2,#0x02
      0005BE 75*0E 02         [24] 2666 	mov	_i2c_read_data_PARM_4,#0x02
      0005C1 75 82 C0         [24] 2667 	mov	dpl,#0xC0
      0005C4 12r03rE8         [24] 2668 	lcall	_i2c_read_data
                           0005C7  2669 	C$Lab_4.c$185$1$141 ==.
                                   2670 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:185: read_heading =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0005C7 AF*31            [24] 2671 	mov	r7,_read_compass_Data_1_141
      0005C9 7E 00            [12] 2672 	mov	r6,#0x00
      0005CB AC*32            [24] 2673 	mov	r4,(_read_compass_Data_1_141 + 0x0001)
      0005CD 7D 00            [12] 2674 	mov	r5,#0x00
      0005CF EC               [12] 2675 	mov	a,r4
      0005D0 4E               [12] 2676 	orl	a,r6
      0005D1 F5 82            [12] 2677 	mov	dpl,a
      0005D3 ED               [12] 2678 	mov	a,r5
      0005D4 4F               [12] 2679 	orl	a,r7
      0005D5 F5 83            [12] 2680 	mov	dph,a
                           0005D7  2681 	C$Lab_4.c$186$1$141 ==.
                                   2682 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:186: return read_heading; // the heading returned in degrees between 0 and 3599
                           0005D7  2683 	C$Lab_4.c$187$1$141 ==.
                           0005D7  2684 	XG$read_compass$0$0 ==.
      0005D7 22               [24] 2685 	ret
                                   2686 ;------------------------------------------------------------
                                   2687 ;Allocation info for local variables in function 'set_servo_PWM'
                                   2688 ;------------------------------------------------------------
                           0005D8  2689 	G$set_servo_PWM$0$0 ==.
                           0005D8  2690 	C$Lab_4.c$190$1$141 ==.
                                   2691 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:190: void set_servo_PWM(void)
                                   2692 ;	-----------------------------------------
                                   2693 ;	 function set_servo_PWM
                                   2694 ;	-----------------------------------------
      0005D8                       2695 _set_servo_PWM:
                           0005D8  2696 	C$Lab_4.c$192$1$143 ==.
                                   2697 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:192: if(new_heading && (heading_delay>=5))
      0005D8 E5*1E            [12] 2698 	mov	a,_new_heading
      0005DA 60 54            [24] 2699 	jz	00104$
      0005DC 74 FB            [12] 2700 	mov	a,#0x100 - 0x05
      0005DE 25*2A            [12] 2701 	add	a,_heading_delay
      0005E0 50 4E            [24] 2702 	jnc	00104$
                           0005E2  2703 	C$Lab_4.c$194$2$144 ==.
                                   2704 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:194: heading = read_compass();
      0005E2 12r05rB2         [24] 2705 	lcall	_read_compass
                           0005E5  2706 	C$Lab_4.c$195$1$143 ==.
                                   2707 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:195: printf("\rThe current direction is %u\n", heading/10);
      0005E5 85 82*20         [24] 2708 	mov	_heading,dpl
      0005E8 85 83*21         [24] 2709 	mov	(_heading + 1),dph
      0005EB 75*00 0A         [24] 2710 	mov	__divuint_PARM_2,#0x0A
      0005EE 75*01 00         [24] 2711 	mov	(__divuint_PARM_2 + 1),#0x00
      0005F1 12r00r00         [24] 2712 	lcall	__divuint
      0005F4 AE 82            [24] 2713 	mov	r6,dpl
      0005F6 AF 83            [24] 2714 	mov	r7,dph
      0005F8 C0 06            [24] 2715 	push	ar6
      0005FA C0 07            [24] 2716 	push	ar7
      0005FC 74r29            [12] 2717 	mov	a,#___str_3
      0005FE C0 E0            [24] 2718 	push	acc
      000600 74s00            [12] 2719 	mov	a,#(___str_3 >> 8)
      000602 C0 E0            [24] 2720 	push	acc
      000604 74 80            [12] 2721 	mov	a,#0x80
      000606 C0 E0            [24] 2722 	push	acc
      000608 12r00r00         [24] 2723 	lcall	_printf
      00060B E5 81            [12] 2724 	mov	a,sp
      00060D 24 FB            [12] 2725 	add	a,#0xfb
      00060F F5 81            [12] 2726 	mov	sp,a
                           000611  2727 	C$Lab_4.c$196$2$144 ==.
                                   2728 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:196: COMPASS_PW = servo_error(heading); // Adjust pulsewidth based on error function
      000611 85*20 82         [24] 2729 	mov	dpl,_heading
      000614 85*21 83         [24] 2730 	mov	dph,(_heading + 1)
      000617 12r07r27         [24] 2731 	lcall	_servo_error
      00061A 85 82*2B         [24] 2732 	mov	_COMPASS_PW,dpl
      00061D 85 83*2C         [24] 2733 	mov	(_COMPASS_PW + 1),dph
                           000620  2734 	C$Lab_4.c$197$2$144 ==.
                                   2735 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:197: PCA0CP0 = 0xFFFF - COMPASS_PW; // Change pulse width
      000620 74 FF            [12] 2736 	mov	a,#0xFF
      000622 C3               [12] 2737 	clr	c
      000623 95*2B            [12] 2738 	subb	a,_COMPASS_PW
      000625 F5 EA            [12] 2739 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000627 74 FF            [12] 2740 	mov	a,#0xFF
      000629 95*2C            [12] 2741 	subb	a,(_COMPASS_PW + 1)
      00062B F5 FA            [12] 2742 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           00062D  2743 	C$Lab_4.c$198$2$144 ==.
                                   2744 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:198: new_heading = 0;
      00062D 75*1E 00         [24] 2745 	mov	_new_heading,#0x00
      000630                       2746 00104$:
                           000630  2747 	C$Lab_4.c$200$1$143 ==.
                           000630  2748 	XG$set_servo_PWM$0$0 ==.
      000630 22               [24] 2749 	ret
                                   2750 ;------------------------------------------------------------
                                   2751 ;Allocation info for local variables in function 'read_ranger'
                                   2752 ;------------------------------------------------------------
                                   2753 ;addr                      Allocated to registers 
                                   2754 ;Data                      Allocated with name '_read_ranger_Data_1_146'
                                   2755 ;range                     Allocated to registers r6 r7 
                                   2756 ;------------------------------------------------------------
                           000631  2757 	G$read_ranger$0$0 ==.
                           000631  2758 	C$Lab_4.c$204$1$143 ==.
                                   2759 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:204: int read_ranger(void)
                                   2760 ;	-----------------------------------------
                                   2761 ;	 function read_ranger
                                   2762 ;	-----------------------------------------
      000631                       2763 _read_ranger:
                           000631  2764 	C$Lab_4.c$209$1$146 ==.
                                   2765 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:209: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      000631 75*0Br33         [24] 2766 	mov	_i2c_read_data_PARM_3,#_read_ranger_Data_1_146
      000634 75*0C 00         [24] 2767 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000637 75*0D 40         [24] 2768 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00063A 75*0A 02         [24] 2769 	mov	_i2c_read_data_PARM_2,#0x02
      00063D 75*0E 02         [24] 2770 	mov	_i2c_read_data_PARM_4,#0x02
      000640 75 82 E0         [24] 2771 	mov	dpl,#0xE0
      000643 12r03rE8         [24] 2772 	lcall	_i2c_read_data
                           000646  2773 	C$Lab_4.c$210$1$146 ==.
                                   2774 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:210: range =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values	
      000646 AF*33            [24] 2775 	mov	r7,_read_ranger_Data_1_146
      000648 7E 00            [12] 2776 	mov	r6,#0x00
      00064A AC*34            [24] 2777 	mov	r4,(_read_ranger_Data_1_146 + 0x0001)
      00064C 7D 00            [12] 2778 	mov	r5,#0x00
      00064E EC               [12] 2779 	mov	a,r4
      00064F 42 06            [12] 2780 	orl	ar6,a
      000651 ED               [12] 2781 	mov	a,r5
      000652 42 07            [12] 2782 	orl	ar7,a
                           000654  2783 	C$Lab_4.c$211$1$146 ==.
                                   2784 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:211: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      000654 75*33 51         [24] 2785 	mov	_read_ranger_Data_1_146,#0x51
                           000657  2786 	C$Lab_4.c$212$1$146 ==.
                                   2787 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:212: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      000657 75*06r33         [24] 2788 	mov	_i2c_write_data_PARM_3,#_read_ranger_Data_1_146
      00065A 75*07 00         [24] 2789 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00065D 75*08 40         [24] 2790 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000660 75*05 00         [24] 2791 	mov	_i2c_write_data_PARM_2,#0x00
      000663 75*09 01         [24] 2792 	mov	_i2c_write_data_PARM_4,#0x01
      000666 75 82 E0         [24] 2793 	mov	dpl,#0xE0
      000669 C0 07            [24] 2794 	push	ar7
      00066B C0 06            [24] 2795 	push	ar6
      00066D 12r03r72         [24] 2796 	lcall	_i2c_write_data
      000670 D0 06            [24] 2797 	pop	ar6
      000672 D0 07            [24] 2798 	pop	ar7
                           000674  2799 	C$Lab_4.c$213$1$146 ==.
                                   2800 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:213: return range;
      000674 8E 82            [24] 2801 	mov	dpl,r6
      000676 8F 83            [24] 2802 	mov	dph,r7
                           000678  2803 	C$Lab_4.c$214$1$146 ==.
                           000678  2804 	XG$read_ranger$0$0 ==.
      000678 22               [24] 2805 	ret
                                   2806 ;------------------------------------------------------------
                                   2807 ;Allocation info for local variables in function 'set_drive_PWM'
                                   2808 ;------------------------------------------------------------
                           000679  2809 	G$set_drive_PWM$0$0 ==.
                           000679  2810 	C$Lab_4.c$232$1$146 ==.
                                   2811 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:232: void set_drive_PWM(void)
                                   2812 ;	-----------------------------------------
                                   2813 ;	 function set_drive_PWM
                                   2814 ;	-----------------------------------------
      000679                       2815 _set_drive_PWM:
                           000679  2816 	C$Lab_4.c$234$1$148 ==.
                                   2817 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:234: if(new_range)
      000679 E5*1F            [12] 2818 	mov	a,_new_range
      00067B 60 03            [24] 2819 	jz	00102$
                           00067D  2820 	C$Lab_4.c$236$2$149 ==.
                                   2821 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:236: new_range = 0;
      00067D 75*1F 00         [24] 2822 	mov	_new_range,#0x00
      000680                       2823 00102$:
                           000680  2824 	C$Lab_4.c$238$1$148 ==.
                                   2825 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:238: RANGER_PW = (2760) + ((speed)*(74));
      000680 E5*30            [12] 2826 	mov	a,_speed
      000682 75 F0 4A         [24] 2827 	mov	b,#0x4A
      000685 A4               [48] 2828 	mul	ab
      000686 24 C8            [12] 2829 	add	a,#0xC8
      000688 F5*2D            [12] 2830 	mov	_RANGER_PW,a
      00068A 74 0A            [12] 2831 	mov	a,#0x0A
      00068C 35 F0            [12] 2832 	addc	a,b
      00068E F5*2E            [12] 2833 	mov	(_RANGER_PW + 1),a
                           000690  2834 	C$Lab_4.c$239$1$148 ==.
                                   2835 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:239: if(RANGER_PW > RANGER_MAX) RANGER_PW = RANGER_MAX;
      000690 C3               [12] 2836 	clr	c
      000691 E5*18            [12] 2837 	mov	a,_RANGER_MAX
      000693 95*2D            [12] 2838 	subb	a,_RANGER_PW
      000695 E5*19            [12] 2839 	mov	a,(_RANGER_MAX + 1)
      000697 95*2E            [12] 2840 	subb	a,(_RANGER_PW + 1)
      000699 50 06            [24] 2841 	jnc	00104$
      00069B 85*18*2D         [24] 2842 	mov	_RANGER_PW,_RANGER_MAX
      00069E 85*19*2E         [24] 2843 	mov	(_RANGER_PW + 1),(_RANGER_MAX + 1)
      0006A1                       2844 00104$:
                           0006A1  2845 	C$Lab_4.c$240$1$148 ==.
                                   2846 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:240: if(RANGER_PW < RANGER_MIN) RANGER_PW = RANGER_MIN;
      0006A1 C3               [12] 2847 	clr	c
      0006A2 E5*2D            [12] 2848 	mov	a,_RANGER_PW
      0006A4 95*1A            [12] 2849 	subb	a,_RANGER_MIN
      0006A6 E5*2E            [12] 2850 	mov	a,(_RANGER_PW + 1)
      0006A8 95*1B            [12] 2851 	subb	a,(_RANGER_MIN + 1)
      0006AA 50 06            [24] 2852 	jnc	00106$
      0006AC 85*1A*2D         [24] 2853 	mov	_RANGER_PW,_RANGER_MIN
      0006AF 85*1B*2E         [24] 2854 	mov	(_RANGER_PW + 1),(_RANGER_MIN + 1)
      0006B2                       2855 00106$:
                           0006B2  2856 	C$Lab_4.c$241$1$148 ==.
                                   2857 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:241: PCA0CP2 = 0xFFFF - RANGER_PW;
      0006B2 74 FF            [12] 2858 	mov	a,#0xFF
      0006B4 C3               [12] 2859 	clr	c
      0006B5 95*2D            [12] 2860 	subb	a,_RANGER_PW
      0006B7 F5 EC            [12] 2861 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      0006B9 74 FF            [12] 2862 	mov	a,#0xFF
      0006BB 95*2E            [12] 2863 	subb	a,(_RANGER_PW + 1)
      0006BD F5 FC            [12] 2864 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0006BF  2865 	C$Lab_4.c$242$1$148 ==.
                           0006BF  2866 	XG$set_drive_PWM$0$0 ==.
      0006BF 22               [24] 2867 	ret
                                   2868 ;------------------------------------------------------------
                                   2869 ;Allocation info for local variables in function 'pick_heading'
                                   2870 ;------------------------------------------------------------
                                   2871 ;input_heading             Allocated to registers r6 r7 
                                   2872 ;------------------------------------------------------------
                           0006C0  2873 	G$pick_heading$0$0 ==.
                           0006C0  2874 	C$Lab_4.c$246$1$148 ==.
                                   2875 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:246: int pick_heading(void)
                                   2876 ;	-----------------------------------------
                                   2877 ;	 function pick_heading
                                   2878 ;	-----------------------------------------
      0006C0                       2879 _pick_heading:
                           0006C0  2880 	C$Lab_4.c$249$1$151 ==.
                                   2881 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:249: printf("\rInput desired heading on keypad, in degrees.\n");
      0006C0 74r47            [12] 2882 	mov	a,#___str_4
      0006C2 C0 E0            [24] 2883 	push	acc
      0006C4 74s00            [12] 2884 	mov	a,#(___str_4 >> 8)
      0006C6 C0 E0            [24] 2885 	push	acc
      0006C8 74 80            [12] 2886 	mov	a,#0x80
      0006CA C0 E0            [24] 2887 	push	acc
      0006CC 12r00r00         [24] 2888 	lcall	_printf
      0006CF 15 81            [12] 2889 	dec	sp
      0006D1 15 81            [12] 2890 	dec	sp
      0006D3 15 81            [12] 2891 	dec	sp
                           0006D5  2892 	C$Lab_4.c$250$1$151 ==.
                                   2893 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:250: printf("\rAny number above 360 will be interpreted as 360.\n");
      0006D5 74r76            [12] 2894 	mov	a,#___str_5
      0006D7 C0 E0            [24] 2895 	push	acc
      0006D9 74s00            [12] 2896 	mov	a,#(___str_5 >> 8)
      0006DB C0 E0            [24] 2897 	push	acc
      0006DD 74 80            [12] 2898 	mov	a,#0x80
      0006DF C0 E0            [24] 2899 	push	acc
      0006E1 12r00r00         [24] 2900 	lcall	_printf
      0006E4 15 81            [12] 2901 	dec	sp
      0006E6 15 81            [12] 2902 	dec	sp
      0006E8 15 81            [12] 2903 	dec	sp
                           0006EA  2904 	C$Lab_4.c$251$1$151 ==.
                                   2905 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:251: input_heading = kpd_input(1);
      0006EA 75 82 01         [24] 2906 	mov	dpl,#0x01
      0006ED 12r01r99         [24] 2907 	lcall	_kpd_input
      0006F0 AE 82            [24] 2908 	mov	r6,dpl
      0006F2 AF 83            [24] 2909 	mov	r7,dph
                           0006F4  2910 	C$Lab_4.c$252$1$151 ==.
                                   2911 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:252: if(input_heading >= 360) input_heading = 0;
      0006F4 C3               [12] 2912 	clr	c
      0006F5 EE               [12] 2913 	mov	a,r6
      0006F6 94 68            [12] 2914 	subb	a,#0x68
      0006F8 EF               [12] 2915 	mov	a,r7
      0006F9 94 01            [12] 2916 	subb	a,#0x01
      0006FB 40 04            [24] 2917 	jc	00102$
      0006FD 7E 00            [12] 2918 	mov	r6,#0x00
      0006FF 7F 00            [12] 2919 	mov	r7,#0x00
      000701                       2920 00102$:
                           000701  2921 	C$Lab_4.c$253$1$151 ==.
                                   2922 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:253: printf("\rDesired heading is %u degrees", input_heading);
      000701 C0 07            [24] 2923 	push	ar7
      000703 C0 06            [24] 2924 	push	ar6
      000705 C0 06            [24] 2925 	push	ar6
      000707 C0 07            [24] 2926 	push	ar7
      000709 74rA9            [12] 2927 	mov	a,#___str_6
      00070B C0 E0            [24] 2928 	push	acc
      00070D 74s00            [12] 2929 	mov	a,#(___str_6 >> 8)
      00070F C0 E0            [24] 2930 	push	acc
      000711 74 80            [12] 2931 	mov	a,#0x80
      000713 C0 E0            [24] 2932 	push	acc
      000715 12r00r00         [24] 2933 	lcall	_printf
      000718 E5 81            [12] 2934 	mov	a,sp
      00071A 24 FB            [12] 2935 	add	a,#0xfb
      00071C F5 81            [12] 2936 	mov	sp,a
      00071E D0 06            [24] 2937 	pop	ar6
      000720 D0 07            [24] 2938 	pop	ar7
                           000722  2939 	C$Lab_4.c$254$1$151 ==.
                                   2940 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:254: return input_heading;
      000722 8E 82            [24] 2941 	mov	dpl,r6
      000724 8F 83            [24] 2942 	mov	dph,r7
                           000726  2943 	C$Lab_4.c$255$1$151 ==.
                           000726  2944 	XG$pick_heading$0$0 ==.
      000726 22               [24] 2945 	ret
                                   2946 ;------------------------------------------------------------
                                   2947 ;Allocation info for local variables in function 'servo_error'
                                   2948 ;------------------------------------------------------------
                                   2949 ;heading                   Allocated to registers r6 r7 
                                   2950 ;Error                     Allocated to registers r6 r7 
                                   2951 ;PWMe                      Allocated to registers r6 r7 
                                   2952 ;k                         Allocated to registers r5 
                                   2953 ;------------------------------------------------------------
                           000727  2954 	G$servo_error$0$0 ==.
                           000727  2955 	C$Lab_4.c$257$1$151 ==.
                                   2956 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:257: signed int servo_error(unsigned int heading)
                                   2957 ;	-----------------------------------------
                                   2958 ;	 function servo_error
                                   2959 ;	-----------------------------------------
      000727                       2960 _servo_error:
      000727 AE 82            [24] 2961 	mov	r6,dpl
      000729 AF 83            [24] 2962 	mov	r7,dph
                           00072B  2963 	C$Lab_4.c$261$1$151 ==.
                                   2964 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:261: unsigned char k = 1;				//Gain constant. Higher numbers turn more, lower numbers turn less.
      00072B 7D 01            [12] 2965 	mov	r5,#0x01
                           00072D  2966 	C$Lab_4.c$262$1$153 ==.
                                   2967 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:262: Error = (desired_heading) - heading;	//Calculate the error
      00072D E5*26            [12] 2968 	mov	a,_desired_heading
      00072F C3               [12] 2969 	clr	c
      000730 9E               [12] 2970 	subb	a,r6
      000731 FE               [12] 2971 	mov	r6,a
      000732 E5*27            [12] 2972 	mov	a,(_desired_heading + 1)
      000734 9F               [12] 2973 	subb	a,r7
      000735 FF               [12] 2974 	mov	r7,a
                           000736  2975 	C$Lab_4.c$263$1$153 ==.
                                   2976 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:263: if(Error < 1800) Error = Error + 3600;	//Adjust the Error for +/- 180 degrees
      000736 C3               [12] 2977 	clr	c
      000737 EE               [12] 2978 	mov	a,r6
      000738 94 08            [12] 2979 	subb	a,#0x08
      00073A EF               [12] 2980 	mov	a,r7
      00073B 64 80            [12] 2981 	xrl	a,#0x80
      00073D 94 87            [12] 2982 	subb	a,#0x87
      00073F 50 08            [24] 2983 	jnc	00102$
      000741 74 10            [12] 2984 	mov	a,#0x10
      000743 2E               [12] 2985 	add	a,r6
      000744 FE               [12] 2986 	mov	r6,a
      000745 74 0E            [12] 2987 	mov	a,#0x0E
      000747 3F               [12] 2988 	addc	a,r7
      000748 FF               [12] 2989 	mov	r7,a
      000749                       2990 00102$:
                           000749  2991 	C$Lab_4.c$264$1$153 ==.
                                   2992 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:264: if(Error > 1800) Error = Error - 3600;
      000749 C3               [12] 2993 	clr	c
      00074A 74 08            [12] 2994 	mov	a,#0x08
      00074C 9E               [12] 2995 	subb	a,r6
      00074D 74 87            [12] 2996 	mov	a,#(0x07 ^ 0x80)
      00074F 8F F0            [24] 2997 	mov	b,r7
      000751 63 F0 80         [24] 2998 	xrl	b,#0x80
      000754 95 F0            [12] 2999 	subb	a,b
      000756 50 08            [24] 3000 	jnc	00104$
      000758 EE               [12] 3001 	mov	a,r6
      000759 24 F0            [12] 3002 	add	a,#0xF0
      00075B FE               [12] 3003 	mov	r6,a
      00075C EF               [12] 3004 	mov	a,r7
      00075D 34 F1            [12] 3005 	addc	a,#0xF1
      00075F FF               [12] 3006 	mov	r7,a
      000760                       3007 00104$:
                           000760  3008 	C$Lab_4.c$265$1$153 ==.
                                   3009 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:265: PWMe = COMPASS_CENTER + (k*Error);
      000760 7C 00            [12] 3010 	mov	r4,#0x00
      000762 8E*00            [24] 3011 	mov	__mulint_PARM_2,r6
      000764 8F*01            [24] 3012 	mov	(__mulint_PARM_2 + 1),r7
      000766 8D 82            [24] 3013 	mov	dpl,r5
      000768 8C 83            [24] 3014 	mov	dph,r4
      00076A 12r00r00         [24] 3015 	lcall	__mulint
      00076D AE 82            [24] 3016 	mov	r6,dpl
      00076F AF 83            [24] 3017 	mov	r7,dph
      000771 EE               [12] 3018 	mov	a,r6
      000772 25*10            [12] 3019 	add	a,_COMPASS_CENTER
      000774 FE               [12] 3020 	mov	r6,a
      000775 EF               [12] 3021 	mov	a,r7
      000776 35*11            [12] 3022 	addc	a,(_COMPASS_CENTER + 1)
      000778 FF               [12] 3023 	mov	r7,a
                           000779  3024 	C$Lab_4.c$266$1$153 ==.
                                   3025 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:266: if(PWMe < COMPASS_MIN) PWMe = COMPASS_MIN;
      000779 C3               [12] 3026 	clr	c
      00077A EE               [12] 3027 	mov	a,r6
      00077B 95*14            [12] 3028 	subb	a,_COMPASS_MIN
      00077D EF               [12] 3029 	mov	a,r7
      00077E 95*15            [12] 3030 	subb	a,(_COMPASS_MIN + 1)
      000780 50 04            [24] 3031 	jnc	00106$
      000782 AE*14            [24] 3032 	mov	r6,_COMPASS_MIN
      000784 AF*15            [24] 3033 	mov	r7,(_COMPASS_MIN + 1)
      000786                       3034 00106$:
                           000786  3035 	C$Lab_4.c$267$1$153 ==.
                                   3036 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:267: if(PWMe > COMPASS_MAX) PWMe = COMPASS_MAX;
      000786 C3               [12] 3037 	clr	c
      000787 E5*12            [12] 3038 	mov	a,_COMPASS_MAX
      000789 9E               [12] 3039 	subb	a,r6
      00078A E5*13            [12] 3040 	mov	a,(_COMPASS_MAX + 1)
      00078C 9F               [12] 3041 	subb	a,r7
      00078D 50 04            [24] 3042 	jnc	00108$
      00078F AE*12            [24] 3043 	mov	r6,_COMPASS_MAX
      000791 AF*13            [24] 3044 	mov	r7,(_COMPASS_MAX + 1)
      000793                       3045 00108$:
                           000793  3046 	C$Lab_4.c$268$1$153 ==.
                                   3047 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:268: return PWMe;
      000793 8E 82            [24] 3048 	mov	dpl,r6
      000795 8F 83            [24] 3049 	mov	dph,r7
                           000797  3050 	C$Lab_4.c$269$1$153 ==.
                           000797  3051 	XG$servo_error$0$0 ==.
      000797 22               [24] 3052 	ret
                                   3053 ;------------------------------------------------------------
                                   3054 ;Allocation info for local variables in function 'motor_error'
                                   3055 ;------------------------------------------------------------
                                   3056 ;range                     Allocated to registers r6 r7 
                                   3057 ;Error                     Allocated to registers r6 r7 
                                   3058 ;PWMe                      Allocated to registers r4 r5 
                                   3059 ;k                         Allocated to registers 
                                   3060 ;------------------------------------------------------------
                           000798  3061 	G$motor_error$0$0 ==.
                           000798  3062 	C$Lab_4.c$271$1$153 ==.
                                   3063 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:271: signed int motor_error(unsigned int range)
                                   3064 ;	-----------------------------------------
                                   3065 ;	 function motor_error
                                   3066 ;	-----------------------------------------
      000798                       3067 _motor_error:
      000798 AE 82            [24] 3068 	mov	r6,dpl
      00079A AF 83            [24] 3069 	mov	r7,dph
                           00079C  3070 	C$Lab_4.c$276$1$155 ==.
                                   3071 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:276: Error = (desired_range) - range;	// Calculate the error
      00079C E5*28            [12] 3072 	mov	a,_desired_range
      00079E C3               [12] 3073 	clr	c
      00079F 9E               [12] 3074 	subb	a,r6
      0007A0 FE               [12] 3075 	mov	r6,a
      0007A1 E5*29            [12] 3076 	mov	a,(_desired_range + 1)
      0007A3 9F               [12] 3077 	subb	a,r7
      0007A4 FF               [12] 3078 	mov	r7,a
                           0007A5  3079 	C$Lab_4.c$277$1$155 ==.
                                   3080 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:277: PWMe = RANGER_CENTER + (k*Error);
      0007A5 8E*00            [24] 3081 	mov	__mulint_PARM_2,r6
      0007A7 8F*01            [24] 3082 	mov	(__mulint_PARM_2 + 1),r7
      0007A9 90 00 14         [24] 3083 	mov	dptr,#0x0014
      0007AC C0 07            [24] 3084 	push	ar7
      0007AE C0 06            [24] 3085 	push	ar6
      0007B0 12r00r00         [24] 3086 	lcall	__mulint
      0007B3 AC 82            [24] 3087 	mov	r4,dpl
      0007B5 AD 83            [24] 3088 	mov	r5,dph
      0007B7 D0 06            [24] 3089 	pop	ar6
      0007B9 D0 07            [24] 3090 	pop	ar7
      0007BB EC               [12] 3091 	mov	a,r4
      0007BC 25*16            [12] 3092 	add	a,_RANGER_CENTER
      0007BE FC               [12] 3093 	mov	r4,a
      0007BF ED               [12] 3094 	mov	a,r5
      0007C0 35*17            [12] 3095 	addc	a,(_RANGER_CENTER + 1)
      0007C2 FD               [12] 3096 	mov	r5,a
                           0007C3  3097 	C$Lab_4.c$278$1$155 ==.
                                   3098 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:278: if(PWMe < RANGER_MIN) PWMe = RANGER_MIN;
      0007C3 C3               [12] 3099 	clr	c
      0007C4 EC               [12] 3100 	mov	a,r4
      0007C5 95*1A            [12] 3101 	subb	a,_RANGER_MIN
      0007C7 ED               [12] 3102 	mov	a,r5
      0007C8 95*1B            [12] 3103 	subb	a,(_RANGER_MIN + 1)
      0007CA 50 04            [24] 3104 	jnc	00102$
      0007CC AC*1A            [24] 3105 	mov	r4,_RANGER_MIN
      0007CE AD*1B            [24] 3106 	mov	r5,(_RANGER_MIN + 1)
      0007D0                       3107 00102$:
                           0007D0  3108 	C$Lab_4.c$279$1$155 ==.
                                   3109 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:279: if(PWMe > RANGER_MAX) PWMe = RANGER_MAX;
      0007D0 C3               [12] 3110 	clr	c
      0007D1 E5*18            [12] 3111 	mov	a,_RANGER_MAX
      0007D3 9C               [12] 3112 	subb	a,r4
      0007D4 E5*19            [12] 3113 	mov	a,(_RANGER_MAX + 1)
      0007D6 9D               [12] 3114 	subb	a,r5
      0007D7 50 04            [24] 3115 	jnc	00104$
      0007D9 AC*18            [24] 3116 	mov	r4,_RANGER_MAX
      0007DB AD*19            [24] 3117 	mov	r5,(_RANGER_MAX + 1)
      0007DD                       3118 00104$:
                           0007DD  3119 	C$Lab_4.c$280$1$155 ==.
                                   3120 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:280: if((-5<Error) && (Error<5)) PWMe = RANGER_CENTER;
      0007DD C3               [12] 3121 	clr	c
      0007DE 74 FB            [12] 3122 	mov	a,#0xFB
      0007E0 9E               [12] 3123 	subb	a,r6
      0007E1 74 7F            [12] 3124 	mov	a,#(0xFF ^ 0x80)
      0007E3 8F F0            [24] 3125 	mov	b,r7
      0007E5 63 F0 80         [24] 3126 	xrl	b,#0x80
      0007E8 95 F0            [12] 3127 	subb	a,b
      0007EA 50 0F            [24] 3128 	jnc	00106$
      0007EC C3               [12] 3129 	clr	c
      0007ED EE               [12] 3130 	mov	a,r6
      0007EE 94 05            [12] 3131 	subb	a,#0x05
      0007F0 EF               [12] 3132 	mov	a,r7
      0007F1 64 80            [12] 3133 	xrl	a,#0x80
      0007F3 94 80            [12] 3134 	subb	a,#0x80
      0007F5 50 04            [24] 3135 	jnc	00106$
      0007F7 AC*16            [24] 3136 	mov	r4,_RANGER_CENTER
      0007F9 AD*17            [24] 3137 	mov	r5,(_RANGER_CENTER + 1)
      0007FB                       3138 00106$:
                           0007FB  3139 	C$Lab_4.c$283$1$155 ==.
                                   3140 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:283: return PWMe;
      0007FB 8C 82            [24] 3141 	mov	dpl,r4
      0007FD 8D 83            [24] 3142 	mov	dph,r5
                           0007FF  3143 	C$Lab_4.c$284$1$155 ==.
                           0007FF  3144 	XG$motor_error$0$0 ==.
      0007FF 22               [24] 3145 	ret
                                   3146 ;------------------------------------------------------------
                                   3147 ;Allocation info for local variables in function 'steering_gain'
                                   3148 ;------------------------------------------------------------
                                   3149 ;input_gain                Allocated to registers r6 
                                   3150 ;------------------------------------------------------------
                           000800  3151 	G$steering_gain$0$0 ==.
                           000800  3152 	C$Lab_4.c$286$1$155 ==.
                                   3153 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:286: char steering_gain(void)
                                   3154 ;	-----------------------------------------
                                   3155 ;	 function steering_gain
                                   3156 ;	-----------------------------------------
      000800                       3157 _steering_gain:
                           000800  3158 	C$Lab_4.c$289$1$157 ==.
                                   3159 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:289: printf("\rInput desired steering gain on keypad.\n");
      000800 74rC8            [12] 3160 	mov	a,#___str_7
      000802 C0 E0            [24] 3161 	push	acc
      000804 74s00            [12] 3162 	mov	a,#(___str_7 >> 8)
      000806 C0 E0            [24] 3163 	push	acc
      000808 74 80            [12] 3164 	mov	a,#0x80
      00080A C0 E0            [24] 3165 	push	acc
      00080C 12r00r00         [24] 3166 	lcall	_printf
      00080F 15 81            [12] 3167 	dec	sp
      000811 15 81            [12] 3168 	dec	sp
      000813 15 81            [12] 3169 	dec	sp
                           000815  3170 	C$Lab_4.c$290$1$157 ==.
                                   3171 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:290: printf("\rAny number below 0 will be interpreted as 1.\n");
      000815 74rF1            [12] 3172 	mov	a,#___str_8
      000817 C0 E0            [24] 3173 	push	acc
      000819 74s00            [12] 3174 	mov	a,#(___str_8 >> 8)
      00081B C0 E0            [24] 3175 	push	acc
      00081D 74 80            [12] 3176 	mov	a,#0x80
      00081F C0 E0            [24] 3177 	push	acc
      000821 12r00r00         [24] 3178 	lcall	_printf
      000824 15 81            [12] 3179 	dec	sp
      000826 15 81            [12] 3180 	dec	sp
      000828 15 81            [12] 3181 	dec	sp
                           00082A  3182 	C$Lab_4.c$291$1$157 ==.
                                   3183 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:291: input_gain = kpd_input(1);
      00082A 75 82 01         [24] 3184 	mov	dpl,#0x01
      00082D 12r01r99         [24] 3185 	lcall	_kpd_input
      000830 AE 82            [24] 3186 	mov	r6,dpl
      000832 AF 83            [24] 3187 	mov	r7,dph
                           000834  3188 	C$Lab_4.c$292$1$157 ==.
                                   3189 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:292: if(input_gain <= 0) input_gain = 1;
      000834 C3               [12] 3190 	clr	c
      000835 74 80            [12] 3191 	mov	a,#(0x00 ^ 0x80)
      000837 8E F0            [24] 3192 	mov	b,r6
      000839 63 F0 80         [24] 3193 	xrl	b,#0x80
      00083C 95 F0            [12] 3194 	subb	a,b
      00083E 40 02            [24] 3195 	jc	00102$
      000840 7E 01            [12] 3196 	mov	r6,#0x01
      000842                       3197 00102$:
                           000842  3198 	C$Lab_4.c$293$1$157 ==.
                                   3199 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:293: printf("\rDesired gain is %u", input_gain);
      000842 EE               [12] 3200 	mov	a,r6
      000843 FD               [12] 3201 	mov	r5,a
      000844 33               [12] 3202 	rlc	a
      000845 95 E0            [12] 3203 	subb	a,acc
      000847 FF               [12] 3204 	mov	r7,a
      000848 C0 06            [24] 3205 	push	ar6
      00084A C0 05            [24] 3206 	push	ar5
      00084C C0 07            [24] 3207 	push	ar7
      00084E 74r20            [12] 3208 	mov	a,#___str_9
      000850 C0 E0            [24] 3209 	push	acc
      000852 74s01            [12] 3210 	mov	a,#(___str_9 >> 8)
      000854 C0 E0            [24] 3211 	push	acc
      000856 74 80            [12] 3212 	mov	a,#0x80
      000858 C0 E0            [24] 3213 	push	acc
      00085A 12r00r00         [24] 3214 	lcall	_printf
      00085D E5 81            [12] 3215 	mov	a,sp
      00085F 24 FB            [12] 3216 	add	a,#0xfb
      000861 F5 81            [12] 3217 	mov	sp,a
      000863 D0 06            [24] 3218 	pop	ar6
                           000865  3219 	C$Lab_4.c$294$1$157 ==.
                                   3220 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:294: return input_gain;
      000865 8E 82            [24] 3221 	mov	dpl,r6
                           000867  3222 	C$Lab_4.c$295$1$157 ==.
                           000867  3223 	XG$steering_gain$0$0 ==.
      000867 22               [24] 3224 	ret
                                   3225 ;------------------------------------------------------------
                                   3226 ;Allocation info for local variables in function 'input_speed'
                                   3227 ;------------------------------------------------------------
                                   3228 ;desired_speed             Allocated to registers r6 
                                   3229 ;------------------------------------------------------------
                           000868  3230 	G$input_speed$0$0 ==.
                           000868  3231 	C$Lab_4.c$297$1$157 ==.
                                   3232 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:297: char input_speed(void)
                                   3233 ;	-----------------------------------------
                                   3234 ;	 function input_speed
                                   3235 ;	-----------------------------------------
      000868                       3236 _input_speed:
                           000868  3237 	C$Lab_4.c$300$1$159 ==.
                                   3238 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:300: printf("\rInput desired speed setting, between 0 and 10. Note that 0 will leave the motor still.\n");
      000868 74r34            [12] 3239 	mov	a,#___str_10
      00086A C0 E0            [24] 3240 	push	acc
      00086C 74s01            [12] 3241 	mov	a,#(___str_10 >> 8)
      00086E C0 E0            [24] 3242 	push	acc
      000870 74 80            [12] 3243 	mov	a,#0x80
      000872 C0 E0            [24] 3244 	push	acc
      000874 12r00r00         [24] 3245 	lcall	_printf
      000877 15 81            [12] 3246 	dec	sp
      000879 15 81            [12] 3247 	dec	sp
      00087B 15 81            [12] 3248 	dec	sp
                           00087D  3249 	C$Lab_4.c$301$1$159 ==.
                                   3250 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:301: printf("\rAny number below 0 will be interpreted as 0. Any number above 10 will be 10.\n");
      00087D 74r8D            [12] 3251 	mov	a,#___str_11
      00087F C0 E0            [24] 3252 	push	acc
      000881 74s01            [12] 3253 	mov	a,#(___str_11 >> 8)
      000883 C0 E0            [24] 3254 	push	acc
      000885 74 80            [12] 3255 	mov	a,#0x80
      000887 C0 E0            [24] 3256 	push	acc
      000889 12r00r00         [24] 3257 	lcall	_printf
      00088C 15 81            [12] 3258 	dec	sp
      00088E 15 81            [12] 3259 	dec	sp
      000890 15 81            [12] 3260 	dec	sp
                           000892  3261 	C$Lab_4.c$302$1$159 ==.
                                   3262 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:302: desired_speed = kpd_input(1);
      000892 75 82 01         [24] 3263 	mov	dpl,#0x01
      000895 12r01r99         [24] 3264 	lcall	_kpd_input
      000898 AE 82            [24] 3265 	mov	r6,dpl
      00089A AF 83            [24] 3266 	mov	r7,dph
                           00089C  3267 	C$Lab_4.c$303$1$159 ==.
                                   3268 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:303: if(desired_speed <= 0) desired_speed = 0;
      00089C C3               [12] 3269 	clr	c
      00089D 74 80            [12] 3270 	mov	a,#(0x00 ^ 0x80)
      00089F 8E F0            [24] 3271 	mov	b,r6
      0008A1 63 F0 80         [24] 3272 	xrl	b,#0x80
      0008A4 95 F0            [12] 3273 	subb	a,b
      0008A6 40 02            [24] 3274 	jc	00102$
      0008A8 7E 00            [12] 3275 	mov	r6,#0x00
      0008AA                       3276 00102$:
                           0008AA  3277 	C$Lab_4.c$304$1$159 ==.
                                   3278 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:304: if(desired_speed >= 10) desired_speed = 10;
      0008AA C3               [12] 3279 	clr	c
      0008AB EE               [12] 3280 	mov	a,r6
      0008AC 64 80            [12] 3281 	xrl	a,#0x80
      0008AE 94 8A            [12] 3282 	subb	a,#0x8a
      0008B0 40 02            [24] 3283 	jc	00104$
      0008B2 7E 0A            [12] 3284 	mov	r6,#0x0A
      0008B4                       3285 00104$:
                           0008B4  3286 	C$Lab_4.c$305$1$159 ==.
                                   3287 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:305: printf("\rDesired speed is %u", desired_speed);
      0008B4 EE               [12] 3288 	mov	a,r6
      0008B5 FD               [12] 3289 	mov	r5,a
      0008B6 33               [12] 3290 	rlc	a
      0008B7 95 E0            [12] 3291 	subb	a,acc
      0008B9 FF               [12] 3292 	mov	r7,a
      0008BA C0 06            [24] 3293 	push	ar6
      0008BC C0 05            [24] 3294 	push	ar5
      0008BE C0 07            [24] 3295 	push	ar7
      0008C0 74rDC            [12] 3296 	mov	a,#___str_12
      0008C2 C0 E0            [24] 3297 	push	acc
      0008C4 74s01            [12] 3298 	mov	a,#(___str_12 >> 8)
      0008C6 C0 E0            [24] 3299 	push	acc
      0008C8 74 80            [12] 3300 	mov	a,#0x80
      0008CA C0 E0            [24] 3301 	push	acc
      0008CC 12r00r00         [24] 3302 	lcall	_printf
      0008CF E5 81            [12] 3303 	mov	a,sp
      0008D1 24 FB            [12] 3304 	add	a,#0xfb
      0008D3 F5 81            [12] 3305 	mov	sp,a
      0008D5 D0 06            [24] 3306 	pop	ar6
                           0008D7  3307 	C$Lab_4.c$306$1$159 ==.
                                   3308 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 4\Lab 4 Code\Lab_4.c:306: return desired_speed;
      0008D7 8E 82            [24] 3309 	mov	dpl,r6
                           0008D9  3310 	C$Lab_4.c$307$1$159 ==.
                           0008D9  3311 	XG$input_speed$0$0 ==.
      0008D9 22               [24] 3312 	ret
                                   3313 	.area CSEG    (CODE)
                                   3314 	.area CONST   (CODE)
                           000000  3315 FLab_4$__str_0$0$0 == .
      000000                       3316 ___str_0:
      000000 0A                    3317 	.db 0x0A
      000001 54 79 70 65 20 64 69  3318 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3319 	.db 0x00
                           000016  3320 FLab_4$__str_1$0$0 == .
      000016                       3321 ___str_1:
      000016 20 20 20 20 20 25 63  3322 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3323 	.db 0x00
                           000026  3324 FLab_4$__str_2$0$0 == .
      000026                       3325 ___str_2:
      000026 25 63                 3326 	.ascii "%c"
      000028 00                    3327 	.db 0x00
                           000029  3328 FLab_4$__str_3$0$0 == .
      000029                       3329 ___str_3:
      000029 0D                    3330 	.db 0x0D
      00002A 54 68 65 20 63 75 72  3331 	.ascii "The current direction is %u"
             72 65 6E 74 20 64 69
             72 65 63 74 69 6F 6E
             20 69 73 20 25 75
      000045 0A                    3332 	.db 0x0A
      000046 00                    3333 	.db 0x00
                           000047  3334 FLab_4$__str_4$0$0 == .
      000047                       3335 ___str_4:
      000047 0D                    3336 	.db 0x0D
      000048 49 6E 70 75 74 20 64  3337 	.ascii "Input desired heading on keypad, in degrees."
             65 73 69 72 65 64 20
             68 65 61 64 69 6E 67
             20 6F 6E 20 6B 65 79
             70 61 64 2C 20 69 6E
             20 64 65 67 72 65 65
             73 2E
      000074 0A                    3338 	.db 0x0A
      000075 00                    3339 	.db 0x00
                           000076  3340 FLab_4$__str_5$0$0 == .
      000076                       3341 ___str_5:
      000076 0D                    3342 	.db 0x0D
      000077 41 6E 79 20 6E 75 6D  3343 	.ascii "Any number above 360 will be interpreted as 360."
             62 65 72 20 61 62 6F
             76 65 20 33 36 30 20
             77 69 6C 6C 20 62 65
             20 69 6E 74 65 72 70
             72 65 74 65 64 20 61
             73 20 33 36 30 2E
      0000A7 0A                    3344 	.db 0x0A
      0000A8 00                    3345 	.db 0x00
                           0000A9  3346 FLab_4$__str_6$0$0 == .
      0000A9                       3347 ___str_6:
      0000A9 0D                    3348 	.db 0x0D
      0000AA 44 65 73 69 72 65 64  3349 	.ascii "Desired heading is %u degrees"
             20 68 65 61 64 69 6E
             67 20 69 73 20 25 75
             20 64 65 67 72 65 65
             73
      0000C7 00                    3350 	.db 0x00
                           0000C8  3351 FLab_4$__str_7$0$0 == .
      0000C8                       3352 ___str_7:
      0000C8 0D                    3353 	.db 0x0D
      0000C9 49 6E 70 75 74 20 64  3354 	.ascii "Input desired steering gain on keypad."
             65 73 69 72 65 64 20
             73 74 65 65 72 69 6E
             67 20 67 61 69 6E 20
             6F 6E 20 6B 65 79 70
             61 64 2E
      0000EF 0A                    3355 	.db 0x0A
      0000F0 00                    3356 	.db 0x00
                           0000F1  3357 FLab_4$__str_8$0$0 == .
      0000F1                       3358 ___str_8:
      0000F1 0D                    3359 	.db 0x0D
      0000F2 41 6E 79 20 6E 75 6D  3360 	.ascii "Any number below 0 will be interpreted as 1."
             62 65 72 20 62 65 6C
             6F 77 20 30 20 77 69
             6C 6C 20 62 65 20 69
             6E 74 65 72 70 72 65
             74 65 64 20 61 73 20
             31 2E
      00011E 0A                    3361 	.db 0x0A
      00011F 00                    3362 	.db 0x00
                           000120  3363 FLab_4$__str_9$0$0 == .
      000120                       3364 ___str_9:
      000120 0D                    3365 	.db 0x0D
      000121 44 65 73 69 72 65 64  3366 	.ascii "Desired gain is %u"
             20 67 61 69 6E 20 69
             73 20 25 75
      000133 00                    3367 	.db 0x00
                           000134  3368 FLab_4$__str_10$0$0 == .
      000134                       3369 ___str_10:
      000134 0D                    3370 	.db 0x0D
      000135 49 6E 70 75 74 20 64  3371 	.ascii "Input desired speed setting, between 0 and 10. Note that 0 "
             65 73 69 72 65 64 20
             73 70 65 65 64 20 73
             65 74 74 69 6E 67 2C
             20 62 65 74 77 65 65
             6E 20 30 20 61 6E 64
             20 31 30 2E 20 4E 6F
             74 65 20 74 68 61 74
             20 30 20
      000170 77 69 6C 6C 20 6C 65  3372 	.ascii "will leave the motor still."
             61 76 65 20 74 68 65
             20 6D 6F 74 6F 72 20
             73 74 69 6C 6C 2E
      00018B 0A                    3373 	.db 0x0A
      00018C 00                    3374 	.db 0x00
                           00018D  3375 FLab_4$__str_11$0$0 == .
      00018D                       3376 ___str_11:
      00018D 0D                    3377 	.db 0x0D
      00018E 41 6E 79 20 6E 75 6D  3378 	.ascii "Any number below 0 will be interpreted as 0. Any number abo"
             62 65 72 20 62 65 6C
             6F 77 20 30 20 77 69
             6C 6C 20 62 65 20 69
             6E 74 65 72 70 72 65
             74 65 64 20 61 73 20
             30 2E 20 41 6E 79 20
             6E 75 6D 62 65 72 20
             61 62 6F
      0001C9 76 65 20 31 30 20 77  3379 	.ascii "ve 10 will be 10."
             69 6C 6C 20 62 65 20
             31 30 2E
      0001DA 0A                    3380 	.db 0x0A
      0001DB 00                    3381 	.db 0x00
                           0001DC  3382 FLab_4$__str_12$0$0 == .
      0001DC                       3383 ___str_12:
      0001DC 0D                    3384 	.db 0x0D
      0001DD 44 65 73 69 72 65 64  3385 	.ascii "Desired speed is %u"
             20 73 70 65 65 64 20
             69 73 20 25 75
      0001F0 00                    3386 	.db 0x00
                                   3387 	.area XINIT   (CODE)
                                   3388 	.area CABS    (ABS,CODE)
