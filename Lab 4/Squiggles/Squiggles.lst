                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Sun Apr 19 16:30:11 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Squiggles
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _Sys_Init
                                     16 	.globl _UART0_Init
                                     17 	.globl _SYSCLK_Init
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _RANGER_SWITCH
                                     21 	.globl _COMPASS_SWITCH
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _Data
                                    308 	.globl _voltage
                                    309 	.globl _AD_Result
                                    310 	.globl _ranger_gain
                                    311 	.globl _compass_adj
                                    312 	.globl _range_adj
                                    313 	.globl _COMPASS_PW
                                    314 	.globl _range
                                    315 	.globl _heading
                                    316 	.globl _new_range
                                    317 	.globl _new_heading
                                    318 	.globl _delay
                                    319 	.globl _r_count
                                    320 	.globl _h_count
                                    321 	.globl _compass_gain
                                    322 	.globl _desired_heading
                                    323 	.globl _nOverflows
                                    324 	.globl _nCounts
                                    325 	.globl _Counts
                                    326 	.globl _i2c_read_data_PARM_4
                                    327 	.globl _i2c_read_data_PARM_3
                                    328 	.globl _i2c_read_data_PARM_2
                                    329 	.globl _i2c_write_data_PARM_4
                                    330 	.globl _i2c_write_data_PARM_3
                                    331 	.globl _i2c_write_data_PARM_2
                                    332 	.globl _putchar
                                    333 	.globl _getchar
                                    334 	.globl _lcd_print
                                    335 	.globl _lcd_clear
                                    336 	.globl _kpd_input
                                    337 	.globl _delay_time
                                    338 	.globl _i2c_start
                                    339 	.globl _i2c_write
                                    340 	.globl _i2c_write_and_stop
                                    341 	.globl _i2c_read
                                    342 	.globl _i2c_read_and_stop
                                    343 	.globl _i2c_write_data
                                    344 	.globl _i2c_read_data
                                    345 	.globl _Accel_Init
                                    346 	.globl _Port_Init
                                    347 	.globl _Interrupt_Init
                                    348 	.globl _PCA_Init
                                    349 	.globl _SMB0_Init
                                    350 	.globl _PCA_ISR
                                    351 	.globl _ADC_Init
                                    352 	.globl _read_AD_input
                                    353 	.globl _Pick_Heading
                                    354 	.globl _Pick_Compass_Gain
                                    355 	.globl _read_compass
                                    356 	.globl _read_ranger
                                    357 	.globl _set_range_adj
                                    358 	.globl _set_COMPASS_PW
                                    359 ;--------------------------------------------------------
                                    360 ; special function registers
                                    361 ;--------------------------------------------------------
                                    362 	.area RSEG    (ABS,DATA)
      000000                        363 	.org 0x0000
                           000080   364 G$P0$0$0 == 0x0080
                           000080   365 _P0	=	0x0080
                           000081   366 G$SP$0$0 == 0x0081
                           000081   367 _SP	=	0x0081
                           000082   368 G$DPL$0$0 == 0x0082
                           000082   369 _DPL	=	0x0082
                           000083   370 G$DPH$0$0 == 0x0083
                           000083   371 _DPH	=	0x0083
                           000084   372 G$P4$0$0 == 0x0084
                           000084   373 _P4	=	0x0084
                           000085   374 G$P5$0$0 == 0x0085
                           000085   375 _P5	=	0x0085
                           000086   376 G$P6$0$0 == 0x0086
                           000086   377 _P6	=	0x0086
                           000087   378 G$PCON$0$0 == 0x0087
                           000087   379 _PCON	=	0x0087
                           000088   380 G$TCON$0$0 == 0x0088
                           000088   381 _TCON	=	0x0088
                           000089   382 G$TMOD$0$0 == 0x0089
                           000089   383 _TMOD	=	0x0089
                           00008A   384 G$TL0$0$0 == 0x008a
                           00008A   385 _TL0	=	0x008a
                           00008B   386 G$TL1$0$0 == 0x008b
                           00008B   387 _TL1	=	0x008b
                           00008C   388 G$TH0$0$0 == 0x008c
                           00008C   389 _TH0	=	0x008c
                           00008D   390 G$TH1$0$0 == 0x008d
                           00008D   391 _TH1	=	0x008d
                           00008E   392 G$CKCON$0$0 == 0x008e
                           00008E   393 _CKCON	=	0x008e
                           00008F   394 G$PSCTL$0$0 == 0x008f
                           00008F   395 _PSCTL	=	0x008f
                           000090   396 G$P1$0$0 == 0x0090
                           000090   397 _P1	=	0x0090
                           000091   398 G$TMR3CN$0$0 == 0x0091
                           000091   399 _TMR3CN	=	0x0091
                           000092   400 G$TMR3RLL$0$0 == 0x0092
                           000092   401 _TMR3RLL	=	0x0092
                           000093   402 G$TMR3RLH$0$0 == 0x0093
                           000093   403 _TMR3RLH	=	0x0093
                           000094   404 G$TMR3L$0$0 == 0x0094
                           000094   405 _TMR3L	=	0x0094
                           000095   406 G$TMR3H$0$0 == 0x0095
                           000095   407 _TMR3H	=	0x0095
                           000096   408 G$P7$0$0 == 0x0096
                           000096   409 _P7	=	0x0096
                           000098   410 G$SCON$0$0 == 0x0098
                           000098   411 _SCON	=	0x0098
                           000098   412 G$SCON0$0$0 == 0x0098
                           000098   413 _SCON0	=	0x0098
                           000099   414 G$SBUF$0$0 == 0x0099
                           000099   415 _SBUF	=	0x0099
                           000099   416 G$SBUF0$0$0 == 0x0099
                           000099   417 _SBUF0	=	0x0099
                           00009A   418 G$SPI0CFG$0$0 == 0x009a
                           00009A   419 _SPI0CFG	=	0x009a
                           00009B   420 G$SPI0DAT$0$0 == 0x009b
                           00009B   421 _SPI0DAT	=	0x009b
                           00009C   422 G$ADC1$0$0 == 0x009c
                           00009C   423 _ADC1	=	0x009c
                           00009D   424 G$SPI0CKR$0$0 == 0x009d
                           00009D   425 _SPI0CKR	=	0x009d
                           00009E   426 G$CPT0CN$0$0 == 0x009e
                           00009E   427 _CPT0CN	=	0x009e
                           00009F   428 G$CPT1CN$0$0 == 0x009f
                           00009F   429 _CPT1CN	=	0x009f
                           0000A0   430 G$P2$0$0 == 0x00a0
                           0000A0   431 _P2	=	0x00a0
                           0000A1   432 G$EMI0TC$0$0 == 0x00a1
                           0000A1   433 _EMI0TC	=	0x00a1
                           0000A3   434 G$EMI0CF$0$0 == 0x00a3
                           0000A3   435 _EMI0CF	=	0x00a3
                           0000A4   436 G$PRT0CF$0$0 == 0x00a4
                           0000A4   437 _PRT0CF	=	0x00a4
                           0000A4   438 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   439 _P0MDOUT	=	0x00a4
                           0000A5   440 G$PRT1CF$0$0 == 0x00a5
                           0000A5   441 _PRT1CF	=	0x00a5
                           0000A5   442 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   443 _P1MDOUT	=	0x00a5
                           0000A6   444 G$PRT2CF$0$0 == 0x00a6
                           0000A6   445 _PRT2CF	=	0x00a6
                           0000A6   446 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   447 _P2MDOUT	=	0x00a6
                           0000A7   448 G$PRT3CF$0$0 == 0x00a7
                           0000A7   449 _PRT3CF	=	0x00a7
                           0000A7   450 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   451 _P3MDOUT	=	0x00a7
                           0000A8   452 G$IE$0$0 == 0x00a8
                           0000A8   453 _IE	=	0x00a8
                           0000A9   454 G$SADDR0$0$0 == 0x00a9
                           0000A9   455 _SADDR0	=	0x00a9
                           0000AA   456 G$ADC1CN$0$0 == 0x00aa
                           0000AA   457 _ADC1CN	=	0x00aa
                           0000AB   458 G$ADC1CF$0$0 == 0x00ab
                           0000AB   459 _ADC1CF	=	0x00ab
                           0000AC   460 G$AMX1SL$0$0 == 0x00ac
                           0000AC   461 _AMX1SL	=	0x00ac
                           0000AD   462 G$P3IF$0$0 == 0x00ad
                           0000AD   463 _P3IF	=	0x00ad
                           0000AE   464 G$SADEN1$0$0 == 0x00ae
                           0000AE   465 _SADEN1	=	0x00ae
                           0000AF   466 G$EMI0CN$0$0 == 0x00af
                           0000AF   467 _EMI0CN	=	0x00af
                           0000AF   468 G$_XPAGE$0$0 == 0x00af
                           0000AF   469 __XPAGE	=	0x00af
                           0000B0   470 G$P3$0$0 == 0x00b0
                           0000B0   471 _P3	=	0x00b0
                           0000B1   472 G$OSCXCN$0$0 == 0x00b1
                           0000B1   473 _OSCXCN	=	0x00b1
                           0000B2   474 G$OSCICN$0$0 == 0x00b2
                           0000B2   475 _OSCICN	=	0x00b2
                           0000B5   476 G$P74OUT$0$0 == 0x00b5
                           0000B5   477 _P74OUT	=	0x00b5
                           0000B6   478 G$FLSCL$0$0 == 0x00b6
                           0000B6   479 _FLSCL	=	0x00b6
                           0000B7   480 G$FLACL$0$0 == 0x00b7
                           0000B7   481 _FLACL	=	0x00b7
                           0000B8   482 G$IP$0$0 == 0x00b8
                           0000B8   483 _IP	=	0x00b8
                           0000B9   484 G$SADEN0$0$0 == 0x00b9
                           0000B9   485 _SADEN0	=	0x00b9
                           0000BA   486 G$AMX0CF$0$0 == 0x00ba
                           0000BA   487 _AMX0CF	=	0x00ba
                           0000BB   488 G$AMX0SL$0$0 == 0x00bb
                           0000BB   489 _AMX0SL	=	0x00bb
                           0000BC   490 G$ADC0CF$0$0 == 0x00bc
                           0000BC   491 _ADC0CF	=	0x00bc
                           0000BD   492 G$P1MDIN$0$0 == 0x00bd
                           0000BD   493 _P1MDIN	=	0x00bd
                           0000BE   494 G$ADC0L$0$0 == 0x00be
                           0000BE   495 _ADC0L	=	0x00be
                           0000BF   496 G$ADC0H$0$0 == 0x00bf
                           0000BF   497 _ADC0H	=	0x00bf
                           0000C0   498 G$SMB0CN$0$0 == 0x00c0
                           0000C0   499 _SMB0CN	=	0x00c0
                           0000C1   500 G$SMB0STA$0$0 == 0x00c1
                           0000C1   501 _SMB0STA	=	0x00c1
                           0000C2   502 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   503 _SMB0DAT	=	0x00c2
                           0000C3   504 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   505 _SMB0ADR	=	0x00c3
                           0000C4   506 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   507 _ADC0GTL	=	0x00c4
                           0000C5   508 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   509 _ADC0GTH	=	0x00c5
                           0000C6   510 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   511 _ADC0LTL	=	0x00c6
                           0000C7   512 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   513 _ADC0LTH	=	0x00c7
                           0000C8   514 G$T2CON$0$0 == 0x00c8
                           0000C8   515 _T2CON	=	0x00c8
                           0000C9   516 G$T4CON$0$0 == 0x00c9
                           0000C9   517 _T4CON	=	0x00c9
                           0000CA   518 G$RCAP2L$0$0 == 0x00ca
                           0000CA   519 _RCAP2L	=	0x00ca
                           0000CB   520 G$RCAP2H$0$0 == 0x00cb
                           0000CB   521 _RCAP2H	=	0x00cb
                           0000CC   522 G$TL2$0$0 == 0x00cc
                           0000CC   523 _TL2	=	0x00cc
                           0000CD   524 G$TH2$0$0 == 0x00cd
                           0000CD   525 _TH2	=	0x00cd
                           0000CF   526 G$SMB0CR$0$0 == 0x00cf
                           0000CF   527 _SMB0CR	=	0x00cf
                           0000D0   528 G$PSW$0$0 == 0x00d0
                           0000D0   529 _PSW	=	0x00d0
                           0000D1   530 G$REF0CN$0$0 == 0x00d1
                           0000D1   531 _REF0CN	=	0x00d1
                           0000D2   532 G$DAC0L$0$0 == 0x00d2
                           0000D2   533 _DAC0L	=	0x00d2
                           0000D3   534 G$DAC0H$0$0 == 0x00d3
                           0000D3   535 _DAC0H	=	0x00d3
                           0000D4   536 G$DAC0CN$0$0 == 0x00d4
                           0000D4   537 _DAC0CN	=	0x00d4
                           0000D5   538 G$DAC1L$0$0 == 0x00d5
                           0000D5   539 _DAC1L	=	0x00d5
                           0000D6   540 G$DAC1H$0$0 == 0x00d6
                           0000D6   541 _DAC1H	=	0x00d6
                           0000D7   542 G$DAC1CN$0$0 == 0x00d7
                           0000D7   543 _DAC1CN	=	0x00d7
                           0000D8   544 G$PCA0CN$0$0 == 0x00d8
                           0000D8   545 _PCA0CN	=	0x00d8
                           0000D9   546 G$PCA0MD$0$0 == 0x00d9
                           0000D9   547 _PCA0MD	=	0x00d9
                           0000DA   548 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   549 _PCA0CPM0	=	0x00da
                           0000DB   550 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   551 _PCA0CPM1	=	0x00db
                           0000DC   552 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   553 _PCA0CPM2	=	0x00dc
                           0000DD   554 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   555 _PCA0CPM3	=	0x00dd
                           0000DE   556 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   557 _PCA0CPM4	=	0x00de
                           0000E0   558 G$ACC$0$0 == 0x00e0
                           0000E0   559 _ACC	=	0x00e0
                           0000E1   560 G$XBR0$0$0 == 0x00e1
                           0000E1   561 _XBR0	=	0x00e1
                           0000E2   562 G$XBR1$0$0 == 0x00e2
                           0000E2   563 _XBR1	=	0x00e2
                           0000E3   564 G$XBR2$0$0 == 0x00e3
                           0000E3   565 _XBR2	=	0x00e3
                           0000E4   566 G$RCAP4L$0$0 == 0x00e4
                           0000E4   567 _RCAP4L	=	0x00e4
                           0000E5   568 G$RCAP4H$0$0 == 0x00e5
                           0000E5   569 _RCAP4H	=	0x00e5
                           0000E6   570 G$EIE1$0$0 == 0x00e6
                           0000E6   571 _EIE1	=	0x00e6
                           0000E7   572 G$EIE2$0$0 == 0x00e7
                           0000E7   573 _EIE2	=	0x00e7
                           0000E8   574 G$ADC0CN$0$0 == 0x00e8
                           0000E8   575 _ADC0CN	=	0x00e8
                           0000E9   576 G$PCA0L$0$0 == 0x00e9
                           0000E9   577 _PCA0L	=	0x00e9
                           0000EA   578 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   579 _PCA0CPL0	=	0x00ea
                           0000EB   580 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   581 _PCA0CPL1	=	0x00eb
                           0000EC   582 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   583 _PCA0CPL2	=	0x00ec
                           0000ED   584 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   585 _PCA0CPL3	=	0x00ed
                           0000EE   586 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   587 _PCA0CPL4	=	0x00ee
                           0000EF   588 G$RSTSRC$0$0 == 0x00ef
                           0000EF   589 _RSTSRC	=	0x00ef
                           0000F0   590 G$B$0$0 == 0x00f0
                           0000F0   591 _B	=	0x00f0
                           0000F1   592 G$SCON1$0$0 == 0x00f1
                           0000F1   593 _SCON1	=	0x00f1
                           0000F2   594 G$SBUF1$0$0 == 0x00f2
                           0000F2   595 _SBUF1	=	0x00f2
                           0000F3   596 G$SADDR1$0$0 == 0x00f3
                           0000F3   597 _SADDR1	=	0x00f3
                           0000F4   598 G$TL4$0$0 == 0x00f4
                           0000F4   599 _TL4	=	0x00f4
                           0000F5   600 G$TH4$0$0 == 0x00f5
                           0000F5   601 _TH4	=	0x00f5
                           0000F6   602 G$EIP1$0$0 == 0x00f6
                           0000F6   603 _EIP1	=	0x00f6
                           0000F7   604 G$EIP2$0$0 == 0x00f7
                           0000F7   605 _EIP2	=	0x00f7
                           0000F8   606 G$SPI0CN$0$0 == 0x00f8
                           0000F8   607 _SPI0CN	=	0x00f8
                           0000F9   608 G$PCA0H$0$0 == 0x00f9
                           0000F9   609 _PCA0H	=	0x00f9
                           0000FA   610 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   611 _PCA0CPH0	=	0x00fa
                           0000FB   612 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   613 _PCA0CPH1	=	0x00fb
                           0000FC   614 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   615 _PCA0CPH2	=	0x00fc
                           0000FD   616 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   617 _PCA0CPH3	=	0x00fd
                           0000FE   618 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   619 _PCA0CPH4	=	0x00fe
                           0000FF   620 G$WDTCN$0$0 == 0x00ff
                           0000FF   621 _WDTCN	=	0x00ff
                           008C8A   622 G$TMR0$0$0 == 0x8c8a
                           008C8A   623 _TMR0	=	0x8c8a
                           008D8B   624 G$TMR1$0$0 == 0x8d8b
                           008D8B   625 _TMR1	=	0x8d8b
                           00CDCC   626 G$TMR2$0$0 == 0xcdcc
                           00CDCC   627 _TMR2	=	0xcdcc
                           00CBCA   628 G$RCAP2$0$0 == 0xcbca
                           00CBCA   629 _RCAP2	=	0xcbca
                           009594   630 G$TMR3$0$0 == 0x9594
                           009594   631 _TMR3	=	0x9594
                           009392   632 G$TMR3RL$0$0 == 0x9392
                           009392   633 _TMR3RL	=	0x9392
                           00F5F4   634 G$TMR4$0$0 == 0xf5f4
                           00F5F4   635 _TMR4	=	0xf5f4
                           00E5E4   636 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   637 _RCAP4	=	0xe5e4
                           00BFBE   638 G$ADC0$0$0 == 0xbfbe
                           00BFBE   639 _ADC0	=	0xbfbe
                           00C5C4   640 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   641 _ADC0GT	=	0xc5c4
                           00C7C6   642 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   643 _ADC0LT	=	0xc7c6
                           00D3D2   644 G$DAC0$0$0 == 0xd3d2
                           00D3D2   645 _DAC0	=	0xd3d2
                           00D6D5   646 G$DAC1$0$0 == 0xd6d5
                           00D6D5   647 _DAC1	=	0xd6d5
                           00F9E9   648 G$PCA0$0$0 == 0xf9e9
                           00F9E9   649 _PCA0	=	0xf9e9
                           00FAEA   650 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   651 _PCA0CP0	=	0xfaea
                           00FBEB   652 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   653 _PCA0CP1	=	0xfbeb
                           00FCEC   654 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   655 _PCA0CP2	=	0xfcec
                           00FDED   656 G$PCA0CP3$0$0 == 0xfded
                           00FDED   657 _PCA0CP3	=	0xfded
                           00FEEE   658 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   659 _PCA0CP4	=	0xfeee
                                    660 ;--------------------------------------------------------
                                    661 ; special function bits
                                    662 ;--------------------------------------------------------
                                    663 	.area RSEG    (ABS,DATA)
      000000                        664 	.org 0x0000
                           000080   665 G$P0_0$0$0 == 0x0080
                           000080   666 _P0_0	=	0x0080
                           000081   667 G$P0_1$0$0 == 0x0081
                           000081   668 _P0_1	=	0x0081
                           000082   669 G$P0_2$0$0 == 0x0082
                           000082   670 _P0_2	=	0x0082
                           000083   671 G$P0_3$0$0 == 0x0083
                           000083   672 _P0_3	=	0x0083
                           000084   673 G$P0_4$0$0 == 0x0084
                           000084   674 _P0_4	=	0x0084
                           000085   675 G$P0_5$0$0 == 0x0085
                           000085   676 _P0_5	=	0x0085
                           000086   677 G$P0_6$0$0 == 0x0086
                           000086   678 _P0_6	=	0x0086
                           000087   679 G$P0_7$0$0 == 0x0087
                           000087   680 _P0_7	=	0x0087
                           000088   681 G$IT0$0$0 == 0x0088
                           000088   682 _IT0	=	0x0088
                           000089   683 G$IE0$0$0 == 0x0089
                           000089   684 _IE0	=	0x0089
                           00008A   685 G$IT1$0$0 == 0x008a
                           00008A   686 _IT1	=	0x008a
                           00008B   687 G$IE1$0$0 == 0x008b
                           00008B   688 _IE1	=	0x008b
                           00008C   689 G$TR0$0$0 == 0x008c
                           00008C   690 _TR0	=	0x008c
                           00008D   691 G$TF0$0$0 == 0x008d
                           00008D   692 _TF0	=	0x008d
                           00008E   693 G$TR1$0$0 == 0x008e
                           00008E   694 _TR1	=	0x008e
                           00008F   695 G$TF1$0$0 == 0x008f
                           00008F   696 _TF1	=	0x008f
                           000090   697 G$P1_0$0$0 == 0x0090
                           000090   698 _P1_0	=	0x0090
                           000091   699 G$P1_1$0$0 == 0x0091
                           000091   700 _P1_1	=	0x0091
                           000092   701 G$P1_2$0$0 == 0x0092
                           000092   702 _P1_2	=	0x0092
                           000093   703 G$P1_3$0$0 == 0x0093
                           000093   704 _P1_3	=	0x0093
                           000094   705 G$P1_4$0$0 == 0x0094
                           000094   706 _P1_4	=	0x0094
                           000095   707 G$P1_5$0$0 == 0x0095
                           000095   708 _P1_5	=	0x0095
                           000096   709 G$P1_6$0$0 == 0x0096
                           000096   710 _P1_6	=	0x0096
                           000097   711 G$P1_7$0$0 == 0x0097
                           000097   712 _P1_7	=	0x0097
                           000098   713 G$RI$0$0 == 0x0098
                           000098   714 _RI	=	0x0098
                           000098   715 G$RI0$0$0 == 0x0098
                           000098   716 _RI0	=	0x0098
                           000099   717 G$TI$0$0 == 0x0099
                           000099   718 _TI	=	0x0099
                           000099   719 G$TI0$0$0 == 0x0099
                           000099   720 _TI0	=	0x0099
                           00009A   721 G$RB8$0$0 == 0x009a
                           00009A   722 _RB8	=	0x009a
                           00009A   723 G$RB80$0$0 == 0x009a
                           00009A   724 _RB80	=	0x009a
                           00009B   725 G$TB8$0$0 == 0x009b
                           00009B   726 _TB8	=	0x009b
                           00009B   727 G$TB80$0$0 == 0x009b
                           00009B   728 _TB80	=	0x009b
                           00009C   729 G$REN$0$0 == 0x009c
                           00009C   730 _REN	=	0x009c
                           00009C   731 G$REN0$0$0 == 0x009c
                           00009C   732 _REN0	=	0x009c
                           00009D   733 G$SM2$0$0 == 0x009d
                           00009D   734 _SM2	=	0x009d
                           00009D   735 G$SM20$0$0 == 0x009d
                           00009D   736 _SM20	=	0x009d
                           00009D   737 G$MCE0$0$0 == 0x009d
                           00009D   738 _MCE0	=	0x009d
                           00009E   739 G$SM1$0$0 == 0x009e
                           00009E   740 _SM1	=	0x009e
                           00009E   741 G$SM10$0$0 == 0x009e
                           00009E   742 _SM10	=	0x009e
                           00009F   743 G$SM0$0$0 == 0x009f
                           00009F   744 _SM0	=	0x009f
                           00009F   745 G$SM00$0$0 == 0x009f
                           00009F   746 _SM00	=	0x009f
                           00009F   747 G$S0MODE$0$0 == 0x009f
                           00009F   748 _S0MODE	=	0x009f
                           0000A0   749 G$P2_0$0$0 == 0x00a0
                           0000A0   750 _P2_0	=	0x00a0
                           0000A1   751 G$P2_1$0$0 == 0x00a1
                           0000A1   752 _P2_1	=	0x00a1
                           0000A2   753 G$P2_2$0$0 == 0x00a2
                           0000A2   754 _P2_2	=	0x00a2
                           0000A3   755 G$P2_3$0$0 == 0x00a3
                           0000A3   756 _P2_3	=	0x00a3
                           0000A4   757 G$P2_4$0$0 == 0x00a4
                           0000A4   758 _P2_4	=	0x00a4
                           0000A5   759 G$P2_5$0$0 == 0x00a5
                           0000A5   760 _P2_5	=	0x00a5
                           0000A6   761 G$P2_6$0$0 == 0x00a6
                           0000A6   762 _P2_6	=	0x00a6
                           0000A7   763 G$P2_7$0$0 == 0x00a7
                           0000A7   764 _P2_7	=	0x00a7
                           0000A8   765 G$EX0$0$0 == 0x00a8
                           0000A8   766 _EX0	=	0x00a8
                           0000A9   767 G$ET0$0$0 == 0x00a9
                           0000A9   768 _ET0	=	0x00a9
                           0000AA   769 G$EX1$0$0 == 0x00aa
                           0000AA   770 _EX1	=	0x00aa
                           0000AB   771 G$ET1$0$0 == 0x00ab
                           0000AB   772 _ET1	=	0x00ab
                           0000AC   773 G$ES0$0$0 == 0x00ac
                           0000AC   774 _ES0	=	0x00ac
                           0000AC   775 G$ES$0$0 == 0x00ac
                           0000AC   776 _ES	=	0x00ac
                           0000AD   777 G$ET2$0$0 == 0x00ad
                           0000AD   778 _ET2	=	0x00ad
                           0000AF   779 G$EA$0$0 == 0x00af
                           0000AF   780 _EA	=	0x00af
                           0000B0   781 G$P3_0$0$0 == 0x00b0
                           0000B0   782 _P3_0	=	0x00b0
                           0000B1   783 G$P3_1$0$0 == 0x00b1
                           0000B1   784 _P3_1	=	0x00b1
                           0000B2   785 G$P3_2$0$0 == 0x00b2
                           0000B2   786 _P3_2	=	0x00b2
                           0000B3   787 G$P3_3$0$0 == 0x00b3
                           0000B3   788 _P3_3	=	0x00b3
                           0000B4   789 G$P3_4$0$0 == 0x00b4
                           0000B4   790 _P3_4	=	0x00b4
                           0000B5   791 G$P3_5$0$0 == 0x00b5
                           0000B5   792 _P3_5	=	0x00b5
                           0000B6   793 G$P3_6$0$0 == 0x00b6
                           0000B6   794 _P3_6	=	0x00b6
                           0000B7   795 G$P3_7$0$0 == 0x00b7
                           0000B7   796 _P3_7	=	0x00b7
                           0000B8   797 G$PX0$0$0 == 0x00b8
                           0000B8   798 _PX0	=	0x00b8
                           0000B9   799 G$PT0$0$0 == 0x00b9
                           0000B9   800 _PT0	=	0x00b9
                           0000BA   801 G$PX1$0$0 == 0x00ba
                           0000BA   802 _PX1	=	0x00ba
                           0000BB   803 G$PT1$0$0 == 0x00bb
                           0000BB   804 _PT1	=	0x00bb
                           0000BC   805 G$PS0$0$0 == 0x00bc
                           0000BC   806 _PS0	=	0x00bc
                           0000BC   807 G$PS$0$0 == 0x00bc
                           0000BC   808 _PS	=	0x00bc
                           0000BD   809 G$PT2$0$0 == 0x00bd
                           0000BD   810 _PT2	=	0x00bd
                           0000C0   811 G$SMBTOE$0$0 == 0x00c0
                           0000C0   812 _SMBTOE	=	0x00c0
                           0000C1   813 G$SMBFTE$0$0 == 0x00c1
                           0000C1   814 _SMBFTE	=	0x00c1
                           0000C2   815 G$AA$0$0 == 0x00c2
                           0000C2   816 _AA	=	0x00c2
                           0000C3   817 G$SI$0$0 == 0x00c3
                           0000C3   818 _SI	=	0x00c3
                           0000C4   819 G$STO$0$0 == 0x00c4
                           0000C4   820 _STO	=	0x00c4
                           0000C5   821 G$STA$0$0 == 0x00c5
                           0000C5   822 _STA	=	0x00c5
                           0000C6   823 G$ENSMB$0$0 == 0x00c6
                           0000C6   824 _ENSMB	=	0x00c6
                           0000C7   825 G$BUSY$0$0 == 0x00c7
                           0000C7   826 _BUSY	=	0x00c7
                           0000C8   827 G$CPRL2$0$0 == 0x00c8
                           0000C8   828 _CPRL2	=	0x00c8
                           0000C9   829 G$CT2$0$0 == 0x00c9
                           0000C9   830 _CT2	=	0x00c9
                           0000CA   831 G$TR2$0$0 == 0x00ca
                           0000CA   832 _TR2	=	0x00ca
                           0000CB   833 G$EXEN2$0$0 == 0x00cb
                           0000CB   834 _EXEN2	=	0x00cb
                           0000CC   835 G$TCLK$0$0 == 0x00cc
                           0000CC   836 _TCLK	=	0x00cc
                           0000CD   837 G$RCLK$0$0 == 0x00cd
                           0000CD   838 _RCLK	=	0x00cd
                           0000CE   839 G$EXF2$0$0 == 0x00ce
                           0000CE   840 _EXF2	=	0x00ce
                           0000CF   841 G$TF2$0$0 == 0x00cf
                           0000CF   842 _TF2	=	0x00cf
                           0000D0   843 G$P$0$0 == 0x00d0
                           0000D0   844 _P	=	0x00d0
                           0000D1   845 G$F1$0$0 == 0x00d1
                           0000D1   846 _F1	=	0x00d1
                           0000D2   847 G$OV$0$0 == 0x00d2
                           0000D2   848 _OV	=	0x00d2
                           0000D3   849 G$RS0$0$0 == 0x00d3
                           0000D3   850 _RS0	=	0x00d3
                           0000D4   851 G$RS1$0$0 == 0x00d4
                           0000D4   852 _RS1	=	0x00d4
                           0000D5   853 G$F0$0$0 == 0x00d5
                           0000D5   854 _F0	=	0x00d5
                           0000D6   855 G$AC$0$0 == 0x00d6
                           0000D6   856 _AC	=	0x00d6
                           0000D7   857 G$CY$0$0 == 0x00d7
                           0000D7   858 _CY	=	0x00d7
                           0000D8   859 G$CCF0$0$0 == 0x00d8
                           0000D8   860 _CCF0	=	0x00d8
                           0000D9   861 G$CCF1$0$0 == 0x00d9
                           0000D9   862 _CCF1	=	0x00d9
                           0000DA   863 G$CCF2$0$0 == 0x00da
                           0000DA   864 _CCF2	=	0x00da
                           0000DB   865 G$CCF3$0$0 == 0x00db
                           0000DB   866 _CCF3	=	0x00db
                           0000DC   867 G$CCF4$0$0 == 0x00dc
                           0000DC   868 _CCF4	=	0x00dc
                           0000DE   869 G$CR$0$0 == 0x00de
                           0000DE   870 _CR	=	0x00de
                           0000DF   871 G$CF$0$0 == 0x00df
                           0000DF   872 _CF	=	0x00df
                           0000E8   873 G$ADLJST$0$0 == 0x00e8
                           0000E8   874 _ADLJST	=	0x00e8
                           0000E8   875 G$AD0LJST$0$0 == 0x00e8
                           0000E8   876 _AD0LJST	=	0x00e8
                           0000E9   877 G$ADWINT$0$0 == 0x00e9
                           0000E9   878 _ADWINT	=	0x00e9
                           0000E9   879 G$AD0WINT$0$0 == 0x00e9
                           0000E9   880 _AD0WINT	=	0x00e9
                           0000EA   881 G$ADSTM0$0$0 == 0x00ea
                           0000EA   882 _ADSTM0	=	0x00ea
                           0000EA   883 G$AD0CM0$0$0 == 0x00ea
                           0000EA   884 _AD0CM0	=	0x00ea
                           0000EB   885 G$ADSTM1$0$0 == 0x00eb
                           0000EB   886 _ADSTM1	=	0x00eb
                           0000EB   887 G$AD0CM1$0$0 == 0x00eb
                           0000EB   888 _AD0CM1	=	0x00eb
                           0000EC   889 G$ADBUSY$0$0 == 0x00ec
                           0000EC   890 _ADBUSY	=	0x00ec
                           0000EC   891 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   892 _AD0BUSY	=	0x00ec
                           0000ED   893 G$ADCINT$0$0 == 0x00ed
                           0000ED   894 _ADCINT	=	0x00ed
                           0000ED   895 G$AD0INT$0$0 == 0x00ed
                           0000ED   896 _AD0INT	=	0x00ed
                           0000EE   897 G$ADCTM$0$0 == 0x00ee
                           0000EE   898 _ADCTM	=	0x00ee
                           0000EE   899 G$AD0TM$0$0 == 0x00ee
                           0000EE   900 _AD0TM	=	0x00ee
                           0000EF   901 G$ADCEN$0$0 == 0x00ef
                           0000EF   902 _ADCEN	=	0x00ef
                           0000EF   903 G$AD0EN$0$0 == 0x00ef
                           0000EF   904 _AD0EN	=	0x00ef
                           0000F8   905 G$SPIEN$0$0 == 0x00f8
                           0000F8   906 _SPIEN	=	0x00f8
                           0000F9   907 G$MSTEN$0$0 == 0x00f9
                           0000F9   908 _MSTEN	=	0x00f9
                           0000FA   909 G$SLVSEL$0$0 == 0x00fa
                           0000FA   910 _SLVSEL	=	0x00fa
                           0000FB   911 G$TXBSY$0$0 == 0x00fb
                           0000FB   912 _TXBSY	=	0x00fb
                           0000FC   913 G$RXOVRN$0$0 == 0x00fc
                           0000FC   914 _RXOVRN	=	0x00fc
                           0000FD   915 G$MODF$0$0 == 0x00fd
                           0000FD   916 _MODF	=	0x00fd
                           0000FE   917 G$WCOL$0$0 == 0x00fe
                           0000FE   918 _WCOL	=	0x00fe
                           0000FF   919 G$SPIF$0$0 == 0x00ff
                           0000FF   920 _SPIF	=	0x00ff
                           0000C7   921 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   922 _BUS_BUSY	=	0x00c7
                           0000C6   923 G$BUS_EN$0$0 == 0x00c6
                           0000C6   924 _BUS_EN	=	0x00c6
                           0000C5   925 G$BUS_START$0$0 == 0x00c5
                           0000C5   926 _BUS_START	=	0x00c5
                           0000C4   927 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   928 _BUS_STOP	=	0x00c4
                           0000C3   929 G$BUS_INT$0$0 == 0x00c3
                           0000C3   930 _BUS_INT	=	0x00c3
                           0000C2   931 G$BUS_AA$0$0 == 0x00c2
                           0000C2   932 _BUS_AA	=	0x00c2
                           0000C1   933 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   934 _BUS_FTE	=	0x00c1
                           0000C0   935 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   936 _BUS_TOE	=	0x00c0
                           000083   937 G$BUS_SCL$0$0 == 0x0083
                           000083   938 _BUS_SCL	=	0x0083
                           0000B7   939 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   940 _COMPASS_SWITCH	=	0x00b7
                           0000B6   941 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   942 _RANGER_SWITCH	=	0x00b6
                                    943 ;--------------------------------------------------------
                                    944 ; overlayable register banks
                                    945 ;--------------------------------------------------------
                                    946 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        947 	.ds 8
                                    948 ;--------------------------------------------------------
                                    949 ; internal ram data
                                    950 ;--------------------------------------------------------
                                    951 	.area DSEG    (DATA)
                           000000   952 LSquiggles.lcd_clear$NumBytes$1$77==.
      000000                        953 _lcd_clear_NumBytes_1_77:
      000000                        954 	.ds 1
                           000001   955 LSquiggles.lcd_clear$Cmd$1$77==.
      000001                        956 _lcd_clear_Cmd_1_77:
      000001                        957 	.ds 2
                           000003   958 LSquiggles.read_keypad$Data$1$78==.
      000003                        959 _read_keypad_Data_1_78:
      000003                        960 	.ds 2
                           000005   961 LSquiggles.i2c_write_data$start_reg$1$97==.
      000005                        962 _i2c_write_data_PARM_2:
      000005                        963 	.ds 1
                           000006   964 LSquiggles.i2c_write_data$buffer$1$97==.
      000006                        965 _i2c_write_data_PARM_3:
      000006                        966 	.ds 3
                           000009   967 LSquiggles.i2c_write_data$num_bytes$1$97==.
      000009                        968 _i2c_write_data_PARM_4:
      000009                        969 	.ds 1
                           00000A   970 LSquiggles.i2c_read_data$start_reg$1$99==.
      00000A                        971 _i2c_read_data_PARM_2:
      00000A                        972 	.ds 1
                           00000B   973 LSquiggles.i2c_read_data$buffer$1$99==.
      00000B                        974 _i2c_read_data_PARM_3:
      00000B                        975 	.ds 3
                           00000E   976 LSquiggles.i2c_read_data$num_bytes$1$99==.
      00000E                        977 _i2c_read_data_PARM_4:
      00000E                        978 	.ds 1
                           00000F   979 LSquiggles.Accel_Init$Data2$1$103==.
      00000F                        980 _Accel_Init_Data2_1_103:
      00000F                        981 	.ds 1
                           000010   982 G$Counts$0$0==.
      000010                        983 _Counts::
      000010                        984 	.ds 2
                           000012   985 G$nCounts$0$0==.
      000012                        986 _nCounts::
      000012                        987 	.ds 2
                           000014   988 G$nOverflows$0$0==.
      000014                        989 _nOverflows::
      000014                        990 	.ds 2
                           000016   991 G$desired_heading$0$0==.
      000016                        992 _desired_heading::
      000016                        993 	.ds 2
                           000018   994 G$compass_gain$0$0==.
      000018                        995 _compass_gain::
      000018                        996 	.ds 4
                           00001C   997 G$h_count$0$0==.
      00001C                        998 _h_count::
      00001C                        999 	.ds 1
                           00001D  1000 G$r_count$0$0==.
      00001D                       1001 _r_count::
      00001D                       1002 	.ds 1
                           00001E  1003 G$delay$0$0==.
      00001E                       1004 _delay::
      00001E                       1005 	.ds 1
                           00001F  1006 G$new_heading$0$0==.
      00001F                       1007 _new_heading::
      00001F                       1008 	.ds 1
                           000020  1009 G$new_range$0$0==.
      000020                       1010 _new_range::
      000020                       1011 	.ds 1
                           000021  1012 G$heading$0$0==.
      000021                       1013 _heading::
      000021                       1014 	.ds 2
                           000023  1015 G$range$0$0==.
      000023                       1016 _range::
      000023                       1017 	.ds 2
                           000025  1018 G$COMPASS_PW$0$0==.
      000025                       1019 _COMPASS_PW::
      000025                       1020 	.ds 2
                           000027  1021 G$range_adj$0$0==.
      000027                       1022 _range_adj::
      000027                       1023 	.ds 2
                           000029  1024 G$compass_adj$0$0==.
      000029                       1025 _compass_adj::
      000029                       1026 	.ds 2
                           00002B  1027 G$ranger_gain$0$0==.
      00002B                       1028 _ranger_gain::
      00002B                       1029 	.ds 1
                           00002C  1030 G$AD_Result$0$0==.
      00002C                       1031 _AD_Result::
      00002C                       1032 	.ds 1
                           00002D  1033 G$voltage$0$0==.
      00002D                       1034 _voltage::
      00002D                       1035 	.ds 1
                           00002E  1036 G$Data$0$0==.
      00002E                       1037 _Data::
      00002E                       1038 	.ds 2
                           000030  1039 LSquiggles.read_compass$Data$1$152==.
      000030                       1040 _read_compass_Data_1_152:
      000030                       1041 	.ds 2
                                   1042 ;--------------------------------------------------------
                                   1043 ; overlayable items in internal ram 
                                   1044 ;--------------------------------------------------------
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 	.area	OSEG    (OVR,DATA)
                                   1049 	.area	OSEG    (OVR,DATA)
                                   1050 	.area	OSEG    (OVR,DATA)
                                   1051 	.area	OSEG    (OVR,DATA)
                                   1052 	.area	OSEG    (OVR,DATA)
                                   1053 ;--------------------------------------------------------
                                   1054 ; Stack segment in internal ram 
                                   1055 ;--------------------------------------------------------
                                   1056 	.area	SSEG
      000000                       1057 __start__stack:
      000000                       1058 	.ds	1
                                   1059 
                                   1060 ;--------------------------------------------------------
                                   1061 ; indirectly addressable internal ram data
                                   1062 ;--------------------------------------------------------
                                   1063 	.area ISEG    (DATA)
                                   1064 ;--------------------------------------------------------
                                   1065 ; absolute internal ram data
                                   1066 ;--------------------------------------------------------
                                   1067 	.area IABS    (ABS,DATA)
                                   1068 	.area IABS    (ABS,DATA)
                                   1069 ;--------------------------------------------------------
                                   1070 ; bit data
                                   1071 ;--------------------------------------------------------
                                   1072 	.area BSEG    (BIT)
                                   1073 ;--------------------------------------------------------
                                   1074 ; paged external ram data
                                   1075 ;--------------------------------------------------------
                                   1076 	.area PSEG    (PAG,XDATA)
                                   1077 ;--------------------------------------------------------
                                   1078 ; external ram data
                                   1079 ;--------------------------------------------------------
                                   1080 	.area XSEG    (XDATA)
                           000000  1081 LSquiggles.lcd_print$text$1$73==.
      000000                       1082 _lcd_print_text_1_73:
      000000                       1083 	.ds 80
                                   1084 ;--------------------------------------------------------
                                   1085 ; absolute external ram data
                                   1086 ;--------------------------------------------------------
                                   1087 	.area XABS    (ABS,XDATA)
                                   1088 ;--------------------------------------------------------
                                   1089 ; external initialized ram data
                                   1090 ;--------------------------------------------------------
                                   1091 	.area XISEG   (XDATA)
                                   1092 	.area HOME    (CODE)
                                   1093 	.area GSINIT0 (CODE)
                                   1094 	.area GSINIT1 (CODE)
                                   1095 	.area GSINIT2 (CODE)
                                   1096 	.area GSINIT3 (CODE)
                                   1097 	.area GSINIT4 (CODE)
                                   1098 	.area GSINIT5 (CODE)
                                   1099 	.area GSINIT  (CODE)
                                   1100 	.area GSFINAL (CODE)
                                   1101 	.area CSEG    (CODE)
                                   1102 ;--------------------------------------------------------
                                   1103 ; interrupt vector 
                                   1104 ;--------------------------------------------------------
                                   1105 	.area HOME    (CODE)
      000000                       1106 __interrupt_vect:
      000000 02r00r00         [24] 1107 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1108 	reti
      000004                       1109 	.ds	7
      00000B 32               [24] 1110 	reti
      00000C                       1111 	.ds	7
      000013 32               [24] 1112 	reti
      000014                       1113 	.ds	7
      00001B 32               [24] 1114 	reti
      00001C                       1115 	.ds	7
      000023 32               [24] 1116 	reti
      000024                       1117 	.ds	7
      00002B 32               [24] 1118 	reti
      00002C                       1119 	.ds	7
      000033 32               [24] 1120 	reti
      000034                       1121 	.ds	7
      00003B 32               [24] 1122 	reti
      00003C                       1123 	.ds	7
      000043 32               [24] 1124 	reti
      000044                       1125 	.ds	7
      00004B 02r06r50         [24] 1126 	ljmp	_PCA_ISR
                                   1127 ;--------------------------------------------------------
                                   1128 ; global & static initialisations
                                   1129 ;--------------------------------------------------------
                                   1130 	.area HOME    (CODE)
                                   1131 	.area GSINIT  (CODE)
                                   1132 	.area GSFINAL (CODE)
                                   1133 	.area GSINIT  (CODE)
                                   1134 	.globl __sdcc_gsinit_startup
                                   1135 	.globl __sdcc_program_startup
                                   1136 	.globl __start__stack
                                   1137 	.globl __mcs51_genXINIT
                                   1138 	.globl __mcs51_genXRAMCLEAR
                                   1139 	.globl __mcs51_genRAMCLEAR
                           000000  1140 	C$Squiggles.c$44$1$160 ==.
                                   1141 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:44: unsigned int desired_heading = 1500;
      000000 75*16 DC         [24] 1142 	mov	_desired_heading,#0xDC
      000003 75*17 05         [24] 1143 	mov	(_desired_heading + 1),#0x05
                           000006  1144 	C$Squiggles.c$45$1$160 ==.
                                   1145 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:45: float compass_gain = 1;
      000006 E4               [12] 1146 	clr	a
      000007 F5*18            [12] 1147 	mov	_compass_gain,a
      000009 F5*19            [12] 1148 	mov	(_compass_gain + 1),a
      00000B 75*1A 80         [24] 1149 	mov	(_compass_gain + 2),#0x80
      00000E 75*1B 3F         [24] 1150 	mov	(_compass_gain + 3),#0x3F
                           000011  1151 	C$Squiggles.c$56$1$160 ==.
                                   1152 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:56: unsigned int range_adj = 0;
      000011 F5*27            [12] 1153 	mov	_range_adj,a
      000013 F5*28            [12] 1154 	mov	(_range_adj + 1),a
                           000015  1155 	C$Squiggles.c$57$1$160 ==.
                                   1156 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:57: unsigned int compass_adj = 0;
      000015 F5*29            [12] 1157 	mov	_compass_adj,a
      000017 F5*2A            [12] 1158 	mov	(_compass_adj + 1),a
                           000019  1159 	C$Squiggles.c$58$1$160 ==.
                                   1160 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:58: unsigned char ranger_gain = 40;		// between 30 and 150
      000019 75*2B 28         [24] 1161 	mov	_ranger_gain,#0x28
                                   1162 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1163 	ljmp	__sdcc_program_startup
                                   1164 ;--------------------------------------------------------
                                   1165 ; Home
                                   1166 ;--------------------------------------------------------
                                   1167 	.area HOME    (CODE)
                                   1168 	.area HOME    (CODE)
      00004E                       1169 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1170 	ljmp	_main
                                   1171 ;	return from main will return to caller
                                   1172 ;--------------------------------------------------------
                                   1173 ; code
                                   1174 ;--------------------------------------------------------
                                   1175 	.area CSEG    (CODE)
                                   1176 ;------------------------------------------------------------
                                   1177 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1178 ;------------------------------------------------------------
                                   1179 ;i                         Allocated to registers 
                                   1180 ;------------------------------------------------------------
                           000000  1181 	G$SYSCLK_Init$0$0 ==.
                           000000  1182 	C$c8051_SDCC.h$42$0$0 ==.
                                   1183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1184 ;	-----------------------------------------
                                   1185 ;	 function SYSCLK_Init
                                   1186 ;	-----------------------------------------
      000000                       1187 _SYSCLK_Init:
                           000007  1188 	ar7 = 0x07
                           000006  1189 	ar6 = 0x06
                           000005  1190 	ar5 = 0x05
                           000004  1191 	ar4 = 0x04
                           000003  1192 	ar3 = 0x03
                           000002  1193 	ar2 = 0x02
                           000001  1194 	ar1 = 0x01
                           000000  1195 	ar0 = 0x00
                           000000  1196 	C$c8051_SDCC.h$46$1$31 ==.
                                   1197 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1198 	mov	_OSCXCN,#0x67
                           000003  1199 	C$c8051_SDCC.h$49$1$31 ==.
                                   1200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1201 	mov	r6,#0x00
      000005 7F 01            [12] 1202 	mov	r7,#0x01
      000007                       1203 00107$:
      000007 1E               [12] 1204 	dec	r6
      000008 BE FF 01         [24] 1205 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1206 	dec	r7
      00000C                       1207 00121$:
      00000C EE               [12] 1208 	mov	a,r6
      00000D 4F               [12] 1209 	orl	a,r7
      00000E 70 F7            [24] 1210 	jnz	00107$
                           000010  1211 	C$c8051_SDCC.h$51$1$31 ==.
                                   1212 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1213 00102$:
      000010 E5 B1            [12] 1214 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1215 	jnb	acc.7,00102$
                           000015  1216 	C$c8051_SDCC.h$53$1$31 ==.
                                   1217 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1218 	mov	_OSCICN,#0x88
                           000018  1219 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1220 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1221 	ret
                                   1222 ;------------------------------------------------------------
                                   1223 ;Allocation info for local variables in function 'UART0_Init'
                                   1224 ;------------------------------------------------------------
                           000019  1225 	G$UART0_Init$0$0 ==.
                           000019  1226 	C$c8051_SDCC.h$64$1$31 ==.
                                   1227 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1228 ;	-----------------------------------------
                                   1229 ;	 function UART0_Init
                                   1230 ;	-----------------------------------------
      000019                       1231 _UART0_Init:
                           000019  1232 	C$c8051_SDCC.h$66$1$33 ==.
                                   1233 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1234 	mov	_SCON0,#0x50
                           00001C  1235 	C$c8051_SDCC.h$67$1$33 ==.
                                   1236 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1237 	mov	_TMOD,#0x20
                           00001F  1238 	C$c8051_SDCC.h$68$1$33 ==.
                                   1239 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1240 	mov	_TH1,#0xDC
                           000022  1241 	C$c8051_SDCC.h$69$1$33 ==.
                                   1242 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1243 	setb	_TR1
                           000024  1244 	C$c8051_SDCC.h$70$1$33 ==.
                                   1245 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1246 	orl	_CKCON,#0x10
                           000027  1247 	C$c8051_SDCC.h$71$1$33 ==.
                                   1248 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1249 	orl	_PCON,#0x80
                           00002A  1250 	C$c8051_SDCC.h$73$1$33 ==.
                                   1251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1252 	setb	_TI0
                           00002C  1253 	C$c8051_SDCC.h$74$1$33 ==.
                                   1254 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1255 	orl	_P0MDOUT,#0x01
                           00002F  1256 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1257 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1258 	ret
                                   1259 ;------------------------------------------------------------
                                   1260 ;Allocation info for local variables in function 'Sys_Init'
                                   1261 ;------------------------------------------------------------
                           000030  1262 	G$Sys_Init$0$0 ==.
                           000030  1263 	C$c8051_SDCC.h$83$1$33 ==.
                                   1264 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1265 ;	-----------------------------------------
                                   1266 ;	 function Sys_Init
                                   1267 ;	-----------------------------------------
      000030                       1268 _Sys_Init:
                           000030  1269 	C$c8051_SDCC.h$85$1$35 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1271 	mov	_WDTCN,#0xDE
                           000033  1272 	C$c8051_SDCC.h$86$1$35 ==.
                                   1273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1274 	mov	_WDTCN,#0xAD
                           000036  1275 	C$c8051_SDCC.h$88$1$35 ==.
                                   1276 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1277 	lcall	_SYSCLK_Init
                           000039  1278 	C$c8051_SDCC.h$89$1$35 ==.
                                   1279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1280 	lcall	_UART0_Init
                           00003C  1281 	C$c8051_SDCC.h$91$1$35 ==.
                                   1282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1283 	orl	_XBR0,#0x04
                           00003F  1284 	C$c8051_SDCC.h$92$1$35 ==.
                                   1285 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1286 	orl	_XBR2,#0x40
                           000042  1287 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1288 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1289 	ret
                                   1290 ;------------------------------------------------------------
                                   1291 ;Allocation info for local variables in function 'putchar'
                                   1292 ;------------------------------------------------------------
                                   1293 ;c                         Allocated to registers r7 
                                   1294 ;------------------------------------------------------------
                           000043  1295 	G$putchar$0$0 ==.
                           000043  1296 	C$c8051_SDCC.h$98$1$35 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1298 ;	-----------------------------------------
                                   1299 ;	 function putchar
                                   1300 ;	-----------------------------------------
      000043                       1301 _putchar:
      000043 AF 82            [24] 1302 	mov	r7,dpl
                           000045  1303 	C$c8051_SDCC.h$100$1$37 ==.
                                   1304 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1305 00101$:
                           000045  1306 	C$c8051_SDCC.h$101$1$37 ==.
                                   1307 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1308 	jbc	_TI0,00112$
      000048 80 FB            [24] 1309 	sjmp	00101$
      00004A                       1310 00112$:
                           00004A  1311 	C$c8051_SDCC.h$102$1$37 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1313 	mov	_SBUF0,r7
                           00004C  1314 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1315 	XG$putchar$0$0 ==.
      00004C 22               [24] 1316 	ret
                                   1317 ;------------------------------------------------------------
                                   1318 ;Allocation info for local variables in function 'getchar'
                                   1319 ;------------------------------------------------------------
                                   1320 ;c                         Allocated to registers 
                                   1321 ;------------------------------------------------------------
                           00004D  1322 	G$getchar$0$0 ==.
                           00004D  1323 	C$c8051_SDCC.h$108$1$37 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1325 ;	-----------------------------------------
                                   1326 ;	 function getchar
                                   1327 ;	-----------------------------------------
      00004D                       1328 _getchar:
                           00004D  1329 	C$c8051_SDCC.h$111$1$39 ==.
                                   1330 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1331 00101$:
                           00004D  1332 	C$c8051_SDCC.h$112$1$39 ==.
                                   1333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1334 	jbc	_RI0,00112$
      000050 80 FB            [24] 1335 	sjmp	00101$
      000052                       1336 00112$:
                           000052  1337 	C$c8051_SDCC.h$113$1$39 ==.
                                   1338 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1339 	mov	dpl,_SBUF0
                           000055  1340 	C$c8051_SDCC.h$114$1$39 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1342 	lcall	_putchar
                           000058  1343 	C$c8051_SDCC.h$115$1$39 ==.
                                   1344 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1345 	mov	dpl,_SBUF0
                           00005B  1346 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1347 	XG$getchar$0$0 ==.
      00005B 22               [24] 1348 	ret
                                   1349 ;------------------------------------------------------------
                                   1350 ;Allocation info for local variables in function 'lcd_print'
                                   1351 ;------------------------------------------------------------
                                   1352 ;fmt                       Allocated to stack - _bp -5
                                   1353 ;len                       Allocated to registers r6 
                                   1354 ;i                         Allocated to registers 
                                   1355 ;ap                        Allocated to registers 
                                   1356 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1357 ;------------------------------------------------------------
                           00005C  1358 	G$lcd_print$0$0 ==.
                           00005C  1359 	C$i2c.h$81$1$39 ==.
                                   1360 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1361 ;	-----------------------------------------
                                   1362 ;	 function lcd_print
                                   1363 ;	-----------------------------------------
      00005C                       1364 _lcd_print:
      00005C C0*00            [24] 1365 	push	_bp
      00005E 85 81*00         [24] 1366 	mov	_bp,sp
                           000061  1367 	C$i2c.h$87$1$73 ==.
                                   1368 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1369 	mov	a,_bp
      000063 24 FB            [12] 1370 	add	a,#0xfb
      000065 F8               [12] 1371 	mov	r0,a
      000066 86 82            [24] 1372 	mov	dpl,@r0
      000068 08               [12] 1373 	inc	r0
      000069 86 83            [24] 1374 	mov	dph,@r0
      00006B 08               [12] 1375 	inc	r0
      00006C 86 F0            [24] 1376 	mov	b,@r0
      00006E 12r00r00         [24] 1377 	lcall	_strlen
      000071 E5 82            [12] 1378 	mov	a,dpl
      000073 85 83 F0         [24] 1379 	mov	b,dph
      000076 45 F0            [12] 1380 	orl	a,b
      000078 70 02            [24] 1381 	jnz	00102$
      00007A 80 62            [24] 1382 	sjmp	00109$
      00007C                       1383 00102$:
                           00007C  1384 	C$i2c.h$89$2$74 ==.
                                   1385 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1386 	mov	a,_bp
      00007E 24 FB            [12] 1387 	add	a,#0xFB
      000080 FF               [12] 1388 	mov	r7,a
      000081 8F*00            [24] 1389 	mov	_vsprintf_PARM_3,r7
                           000083  1390 	C$i2c.h$90$1$73 ==.
                                   1391 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1392 	mov	a,_bp
      000085 24 FB            [12] 1393 	add	a,#0xfb
      000087 F8               [12] 1394 	mov	r0,a
      000088 86*00            [24] 1395 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1396 	inc	r0
      00008B 86*01            [24] 1397 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1398 	inc	r0
      00008E 86*02            [24] 1399 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1400 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1401 	mov	b,#0x00
      000096 12r00r00         [24] 1402 	lcall	_vsprintf
                           000099  1403 	C$i2c.h$93$1$73 ==.
                                   1404 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1405 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1406 	mov	b,#0x00
      00009F 12r00r00         [24] 1407 	lcall	_strlen
      0000A2 AE 82            [24] 1408 	mov	r6,dpl
                           0000A4  1409 	C$i2c.h$94$1$73 ==.
                                   1410 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1411 	mov	r7,#0x00
      0000A6                       1412 00107$:
      0000A6 C3               [12] 1413 	clr	c
      0000A7 EF               [12] 1414 	mov	a,r7
      0000A8 9E               [12] 1415 	subb	a,r6
      0000A9 50 1F            [24] 1416 	jnc	00105$
                           0000AB  1417 	C$i2c.h$96$2$76 ==.
                                   1418 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1419 	mov	a,r7
      0000AC 24r00            [12] 1420 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1421 	mov	dpl,a
      0000B0 E4               [12] 1422 	clr	a
      0000B1 34s00            [12] 1423 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1424 	mov	dph,a
      0000B5 E0               [24] 1425 	movx	a,@dptr
      0000B6 FD               [12] 1426 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1427 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1428 	mov	a,r7
      0000BB 24r00            [12] 1429 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1430 	mov	dpl,a
      0000BF E4               [12] 1431 	clr	a
      0000C0 34s00            [12] 1432 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1433 	mov	dph,a
      0000C4 74 0D            [12] 1434 	mov	a,#0x0D
      0000C6 F0               [24] 1435 	movx	@dptr,a
      0000C7                       1436 00108$:
                           0000C7  1437 	C$i2c.h$94$1$73 ==.
                                   1438 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1439 	inc	r7
      0000C8 80 DC            [24] 1440 	sjmp	00107$
      0000CA                       1441 00105$:
                           0000CA  1442 	C$i2c.h$99$1$73 ==.
                                   1443 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1444 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1445 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1446 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1447 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1448 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1449 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1450 	lcall	_i2c_write_data
      0000DE                       1451 00109$:
      0000DE D0*00            [24] 1452 	pop	_bp
                           0000E0  1453 	C$i2c.h$100$1$73 ==.
                           0000E0  1454 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1455 	ret
                                   1456 ;------------------------------------------------------------
                                   1457 ;Allocation info for local variables in function 'lcd_clear'
                                   1458 ;------------------------------------------------------------
                                   1459 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1460 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1461 ;------------------------------------------------------------
                           0000E1  1462 	G$lcd_clear$0$0 ==.
                           0000E1  1463 	C$i2c.h$103$1$73 ==.
                                   1464 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1465 ;	-----------------------------------------
                                   1466 ;	 function lcd_clear
                                   1467 ;	-----------------------------------------
      0000E1                       1468 _lcd_clear:
                           0000E1  1469 	C$i2c.h$105$1$73 ==.
                                   1470 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1471 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1472 	C$i2c.h$107$1$77 ==.
                                   1473 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1474 00101$:
      0000E4 74 C0            [12] 1475 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1476 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1477 	jc	00103$
      0000EA 75*0Br00         [24] 1478 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1479 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1480 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1481 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1482 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1483 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1484 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1485 	sjmp	00101$
      000101                       1486 00103$:
                           000101  1487 	C$i2c.h$109$1$77 ==.
                                   1488 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1489 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1490 	C$i2c.h$110$1$77 ==.
                                   1491 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1492 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1493 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1494 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1495 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1496 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1497 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1498 	lcall	_i2c_write_data
                           000119  1499 	C$i2c.h$111$1$77 ==.
                           000119  1500 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1501 	ret
                                   1502 ;------------------------------------------------------------
                                   1503 ;Allocation info for local variables in function 'read_keypad'
                                   1504 ;------------------------------------------------------------
                                   1505 ;i                         Allocated to registers r7 
                                   1506 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1507 ;------------------------------------------------------------
                           00011A  1508 	G$read_keypad$0$0 ==.
                           00011A  1509 	C$i2c.h$114$1$77 ==.
                                   1510 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1511 ;	-----------------------------------------
                                   1512 ;	 function read_keypad
                                   1513 ;	-----------------------------------------
      00011A                       1514 _read_keypad:
                           00011A  1515 	C$i2c.h$118$1$78 ==.
                                   1516 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1517 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1518 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1519 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1520 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1521 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1522 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1523 	lcall	_i2c_read_data
                           00012F  1524 	C$i2c.h$119$1$78 ==.
                                   1525 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1526 	mov	a,#0xFF
      000131 B5*03 05         [24] 1527 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1528 	mov	dpl,#0x00
      000137 80 5F            [24] 1529 	sjmp	00116$
      000139                       1530 00102$:
                           000139  1531 	C$i2c.h$121$1$78 ==.
                                   1532 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1533 	mov	r7,#0x00
      00013B 8F 06            [24] 1534 	mov	ar6,r7
      00013D                       1535 00114$:
                           00013D  1536 	C$i2c.h$123$2$79 ==.
                                   1537 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1538 	mov	b,r6
      00013F 05 F0            [12] 1539 	inc	b
      000141 7C 01            [12] 1540 	mov	r4,#0x01
      000143 7D 00            [12] 1541 	mov	r5,#0x00
      000145 80 06            [24] 1542 	sjmp	00145$
      000147                       1543 00144$:
      000147 EC               [12] 1544 	mov	a,r4
      000148 2C               [12] 1545 	add	a,r4
      000149 FC               [12] 1546 	mov	r4,a
      00014A ED               [12] 1547 	mov	a,r5
      00014B 33               [12] 1548 	rlc	a
      00014C FD               [12] 1549 	mov	r5,a
      00014D                       1550 00145$:
      00014D D5 F0 F7         [24] 1551 	djnz	b,00144$
      000150 AA*03            [24] 1552 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1553 	mov	r3,#0x00
      000154 EA               [12] 1554 	mov	a,r2
      000155 52 04            [12] 1555 	anl	ar4,a
      000157 EB               [12] 1556 	mov	a,r3
      000158 52 05            [12] 1557 	anl	ar5,a
      00015A EC               [12] 1558 	mov	a,r4
      00015B 4D               [12] 1559 	orl	a,r5
      00015C 60 07            [24] 1560 	jz	00115$
                           00015E  1561 	C$i2c.h$124$2$79 ==.
                                   1562 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1563 	mov	a,#0x31
      000160 2F               [12] 1564 	add	a,r7
      000161 F5 82            [12] 1565 	mov	dpl,a
      000163 80 33            [24] 1566 	sjmp	00116$
      000165                       1567 00115$:
                           000165  1568 	C$i2c.h$121$1$78 ==.
                                   1569 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1570 	inc	r6
      000166 8E 07            [24] 1571 	mov	ar7,r6
      000168 BE 08 00         [24] 1572 	cjne	r6,#0x08,00147$
      00016B                       1573 00147$:
      00016B 40 D0            [24] 1574 	jc	00114$
                           00016D  1575 	C$i2c.h$127$1$78 ==.
                                   1576 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1577 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1578 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1579 	mov	dpl,#0x39
      000175 80 21            [24] 1580 	sjmp	00116$
      000177                       1581 00107$:
                           000177  1582 	C$i2c.h$129$1$78 ==.
                                   1583 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1584 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1585 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1586 	mov	dpl,#0x2A
      00017F 80 17            [24] 1587 	sjmp	00116$
      000181                       1588 00109$:
                           000181  1589 	C$i2c.h$131$1$78 ==.
                                   1590 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1591 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1592 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1593 	mov	dpl,#0x30
      000189 80 0D            [24] 1594 	sjmp	00116$
      00018B                       1595 00111$:
                           00018B  1596 	C$i2c.h$133$1$78 ==.
                                   1597 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1598 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1599 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1600 	mov	dpl,#0x23
      000193 80 03            [24] 1601 	sjmp	00116$
      000195                       1602 00113$:
                           000195  1603 	C$i2c.h$135$1$78 ==.
                                   1604 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1605 	mov	dpl,#0xFF
      000198                       1606 00116$:
                           000198  1607 	C$i2c.h$136$1$78 ==.
                           000198  1608 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1609 	ret
                                   1610 ;------------------------------------------------------------
                                   1611 ;Allocation info for local variables in function 'kpd_input'
                                   1612 ;------------------------------------------------------------
                                   1613 ;mode                      Allocated to registers r7 
                                   1614 ;sum                       Allocated to registers r5 r6 
                                   1615 ;key                       Allocated to registers r3 
                                   1616 ;i                         Allocated to registers 
                                   1617 ;------------------------------------------------------------
                           000199  1618 	G$kpd_input$0$0 ==.
                           000199  1619 	C$i2c.h$148$1$78 ==.
                                   1620 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1621 ;	-----------------------------------------
                                   1622 ;	 function kpd_input
                                   1623 ;	-----------------------------------------
      000199                       1624 _kpd_input:
      000199 AF 82            [24] 1625 	mov	r7,dpl
                           00019B  1626 	C$i2c.h$153$1$81 ==.
                                   1627 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1628 	C$i2c.h$156$1$81 ==.
                                   1629 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1630 	clr	a
      00019C FD               [12] 1631 	mov	r5,a
      00019D FE               [12] 1632 	mov	r6,a
      00019E EF               [12] 1633 	mov	a,r7
      00019F 70 1D            [24] 1634 	jnz	00102$
      0001A1 C0 06            [24] 1635 	push	ar6
      0001A3 C0 05            [24] 1636 	push	ar5
      0001A5 74r00            [12] 1637 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1638 	push	acc
      0001A9 74s00            [12] 1639 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1640 	push	acc
      0001AD 74 80            [12] 1641 	mov	a,#0x80
      0001AF C0 E0            [24] 1642 	push	acc
      0001B1 12r00r5C         [24] 1643 	lcall	_lcd_print
      0001B4 15 81            [12] 1644 	dec	sp
      0001B6 15 81            [12] 1645 	dec	sp
      0001B8 15 81            [12] 1646 	dec	sp
      0001BA D0 05            [24] 1647 	pop	ar5
      0001BC D0 06            [24] 1648 	pop	ar6
      0001BE                       1649 00102$:
                           0001BE  1650 	C$i2c.h$158$1$81 ==.
                                   1651 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1652 	push	ar6
      0001C0 C0 05            [24] 1653 	push	ar5
      0001C2 74 08            [12] 1654 	mov	a,#0x08
      0001C4 C0 E0            [24] 1655 	push	acc
      0001C6 E4               [12] 1656 	clr	a
      0001C7 C0 E0            [24] 1657 	push	acc
      0001C9 74 08            [12] 1658 	mov	a,#0x08
      0001CB C0 E0            [24] 1659 	push	acc
      0001CD E4               [12] 1660 	clr	a
      0001CE C0 E0            [24] 1661 	push	acc
      0001D0 74 08            [12] 1662 	mov	a,#0x08
      0001D2 C0 E0            [24] 1663 	push	acc
      0001D4 E4               [12] 1664 	clr	a
      0001D5 C0 E0            [24] 1665 	push	acc
      0001D7 74 08            [12] 1666 	mov	a,#0x08
      0001D9 C0 E0            [24] 1667 	push	acc
      0001DB E4               [12] 1668 	clr	a
      0001DC C0 E0            [24] 1669 	push	acc
      0001DE 74 08            [12] 1670 	mov	a,#0x08
      0001E0 C0 E0            [24] 1671 	push	acc
      0001E2 E4               [12] 1672 	clr	a
      0001E3 C0 E0            [24] 1673 	push	acc
      0001E5 74r16            [12] 1674 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1675 	push	acc
      0001E9 74s00            [12] 1676 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1677 	push	acc
      0001ED 74 80            [12] 1678 	mov	a,#0x80
      0001EF C0 E0            [24] 1679 	push	acc
      0001F1 12r00r5C         [24] 1680 	lcall	_lcd_print
      0001F4 E5 81            [12] 1681 	mov	a,sp
      0001F6 24 F3            [12] 1682 	add	a,#0xf3
      0001F8 F5 81            [12] 1683 	mov	sp,a
                           0001FA  1684 	C$i2c.h$160$1$81 ==.
                                   1685 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1686 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1687 	mov	b,#0x07
      000200 E4               [12] 1688 	clr	a
      000201 12r03r0D         [24] 1689 	lcall	_delay_time
      000204 D0 05            [24] 1690 	pop	ar5
      000206 D0 06            [24] 1691 	pop	ar6
                           000208  1692 	C$i2c.h$164$1$81 ==.
                                   1693 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1694 	mov	r7,#0x00
                           00020A  1695 	C$i2c.h$166$3$84 ==.
                                   1696 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1697 00104$:
      00020A C0 07            [24] 1698 	push	ar7
      00020C C0 06            [24] 1699 	push	ar6
      00020E C0 05            [24] 1700 	push	ar5
      000210 12r01r1A         [24] 1701 	lcall	_read_keypad
      000213 AC 82            [24] 1702 	mov	r4,dpl
      000215 D0 05            [24] 1703 	pop	ar5
      000217 D0 06            [24] 1704 	pop	ar6
      000219 D0 07            [24] 1705 	pop	ar7
      00021B 8C 03            [24] 1706 	mov	ar3,r4
      00021D BC FF 02         [24] 1707 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1708 	sjmp	00105$
      000222                       1709 00146$:
      000222 BB 2A 17         [24] 1710 	cjne	r3,#0x2A,00106$
      000225                       1711 00105$:
      000225 90 27 10         [24] 1712 	mov	dptr,#0x2710
      000228 E4               [12] 1713 	clr	a
      000229 F5 F0            [12] 1714 	mov	b,a
      00022B C0 07            [24] 1715 	push	ar7
      00022D C0 06            [24] 1716 	push	ar6
      00022F C0 05            [24] 1717 	push	ar5
      000231 12r03r0D         [24] 1718 	lcall	_delay_time
      000234 D0 05            [24] 1719 	pop	ar5
      000236 D0 06            [24] 1720 	pop	ar6
      000238 D0 07            [24] 1721 	pop	ar7
      00023A 80 CE            [24] 1722 	sjmp	00104$
      00023C                       1723 00106$:
                           00023C  1724 	C$i2c.h$167$2$82 ==.
                                   1725 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1726 	cjne	r3,#0x23,00114$
                           00023F  1727 	C$i2c.h$169$3$83 ==.
                                   1728 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1729 00107$:
      00023F C0 06            [24] 1730 	push	ar6
      000241 C0 05            [24] 1731 	push	ar5
      000243 12r01r1A         [24] 1732 	lcall	_read_keypad
      000246 AC 82            [24] 1733 	mov	r4,dpl
      000248 D0 05            [24] 1734 	pop	ar5
      00024A D0 06            [24] 1735 	pop	ar6
      00024C BC 23 13         [24] 1736 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1737 	mov	dptr,#0x2710
      000252 E4               [12] 1738 	clr	a
      000253 F5 F0            [12] 1739 	mov	b,a
      000255 C0 06            [24] 1740 	push	ar6
      000257 C0 05            [24] 1741 	push	ar5
      000259 12r03r0D         [24] 1742 	lcall	_delay_time
      00025C D0 05            [24] 1743 	pop	ar5
      00025E D0 06            [24] 1744 	pop	ar6
      000260 80 DD            [24] 1745 	sjmp	00107$
      000262                       1746 00109$:
                           000262  1747 	C$i2c.h$170$3$83 ==.
                                   1748 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1749 	mov	dpl,r5
      000264 8E 83            [24] 1750 	mov	dph,r6
      000266 02r03r0C         [24] 1751 	ljmp	00119$
      000269                       1752 00114$:
                           000269  1753 	C$i2c.h$174$3$84 ==.
                                   1754 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1755 	mov	a,r3
      00026A FA               [12] 1756 	mov	r2,a
      00026B 33               [12] 1757 	rlc	a
      00026C 95 E0            [12] 1758 	subb	a,acc
      00026E FC               [12] 1759 	mov	r4,a
      00026F C0 07            [24] 1760 	push	ar7
      000271 C0 06            [24] 1761 	push	ar6
      000273 C0 05            [24] 1762 	push	ar5
      000275 C0 04            [24] 1763 	push	ar4
      000277 C0 03            [24] 1764 	push	ar3
      000279 C0 02            [24] 1765 	push	ar2
      00027B C0 02            [24] 1766 	push	ar2
      00027D C0 04            [24] 1767 	push	ar4
      00027F 74r26            [12] 1768 	mov	a,#___str_2
      000281 C0 E0            [24] 1769 	push	acc
      000283 74s00            [12] 1770 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1771 	push	acc
      000287 74 80            [12] 1772 	mov	a,#0x80
      000289 C0 E0            [24] 1773 	push	acc
      00028B 12r00r5C         [24] 1774 	lcall	_lcd_print
      00028E E5 81            [12] 1775 	mov	a,sp
      000290 24 FB            [12] 1776 	add	a,#0xfb
      000292 F5 81            [12] 1777 	mov	sp,a
      000294 D0 02            [24] 1778 	pop	ar2
      000296 D0 03            [24] 1779 	pop	ar3
      000298 D0 04            [24] 1780 	pop	ar4
      00029A D0 05            [24] 1781 	pop	ar5
      00029C D0 06            [24] 1782 	pop	ar6
                           00029E  1783 	C$i2c.h$175$1$81 ==.
                                   1784 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1785 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1786 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1787 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1788 	push	ar4
      0002A7 C0 03            [24] 1789 	push	ar3
      0002A9 C0 02            [24] 1790 	push	ar2
      0002AB 12r00r00         [24] 1791 	lcall	__mulint
      0002AE A8 82            [24] 1792 	mov	r0,dpl
      0002B0 A9 83            [24] 1793 	mov	r1,dph
      0002B2 D0 02            [24] 1794 	pop	ar2
      0002B4 D0 03            [24] 1795 	pop	ar3
      0002B6 D0 04            [24] 1796 	pop	ar4
      0002B8 D0 07            [24] 1797 	pop	ar7
      0002BA EA               [12] 1798 	mov	a,r2
      0002BB 28               [12] 1799 	add	a,r0
      0002BC F8               [12] 1800 	mov	r0,a
      0002BD EC               [12] 1801 	mov	a,r4
      0002BE 39               [12] 1802 	addc	a,r1
      0002BF F9               [12] 1803 	mov	r1,a
      0002C0 E8               [12] 1804 	mov	a,r0
      0002C1 24 D0            [12] 1805 	add	a,#0xD0
      0002C3 FD               [12] 1806 	mov	r5,a
      0002C4 E9               [12] 1807 	mov	a,r1
      0002C5 34 FF            [12] 1808 	addc	a,#0xFF
      0002C7 FE               [12] 1809 	mov	r6,a
                           0002C8  1810 	C$i2c.h$176$3$84 ==.
                                   1811 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1812 00110$:
      0002C8 C0 07            [24] 1813 	push	ar7
      0002CA C0 06            [24] 1814 	push	ar6
      0002CC C0 05            [24] 1815 	push	ar5
      0002CE C0 03            [24] 1816 	push	ar3
      0002D0 12r01r1A         [24] 1817 	lcall	_read_keypad
      0002D3 AC 82            [24] 1818 	mov	r4,dpl
      0002D5 D0 03            [24] 1819 	pop	ar3
      0002D7 D0 05            [24] 1820 	pop	ar5
      0002D9 D0 06            [24] 1821 	pop	ar6
      0002DB D0 07            [24] 1822 	pop	ar7
      0002DD EC               [12] 1823 	mov	a,r4
      0002DE B5 03 1B         [24] 1824 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1825 	mov	dptr,#0x2710
      0002E4 E4               [12] 1826 	clr	a
      0002E5 F5 F0            [12] 1827 	mov	b,a
      0002E7 C0 07            [24] 1828 	push	ar7
      0002E9 C0 06            [24] 1829 	push	ar6
      0002EB C0 05            [24] 1830 	push	ar5
      0002ED C0 03            [24] 1831 	push	ar3
      0002EF 12r03r0D         [24] 1832 	lcall	_delay_time
      0002F2 D0 03            [24] 1833 	pop	ar3
      0002F4 D0 05            [24] 1834 	pop	ar5
      0002F6 D0 06            [24] 1835 	pop	ar6
      0002F8 D0 07            [24] 1836 	pop	ar7
      0002FA 80 CC            [24] 1837 	sjmp	00110$
      0002FC                       1838 00118$:
                           0002FC  1839 	C$i2c.h$164$1$81 ==.
                                   1840 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1841 	inc	r7
      0002FD C3               [12] 1842 	clr	c
      0002FE EF               [12] 1843 	mov	a,r7
      0002FF 64 80            [12] 1844 	xrl	a,#0x80
      000301 94 85            [12] 1845 	subb	a,#0x85
      000303 50 03            [24] 1846 	jnc	00155$
      000305 02r02r0A         [24] 1847 	ljmp	00104$
      000308                       1848 00155$:
                           000308  1849 	C$i2c.h$179$1$81 ==.
                                   1850 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1851 	mov	dpl,r5
      00030A 8E 83            [24] 1852 	mov	dph,r6
      00030C                       1853 00119$:
                           00030C  1854 	C$i2c.h$180$1$81 ==.
                           00030C  1855 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1856 	ret
                                   1857 ;------------------------------------------------------------
                                   1858 ;Allocation info for local variables in function 'delay_time'
                                   1859 ;------------------------------------------------------------
                                   1860 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1861 ;index                     Allocated to registers 
                                   1862 ;------------------------------------------------------------
                           00030D  1863 	G$delay_time$0$0 ==.
                           00030D  1864 	C$i2c.h$189$1$81 ==.
                                   1865 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1866 ;	-----------------------------------------
                                   1867 ;	 function delay_time
                                   1868 ;	-----------------------------------------
      00030D                       1869 _delay_time:
      00030D AC 82            [24] 1870 	mov	r4,dpl
      00030F AD 83            [24] 1871 	mov	r5,dph
      000311 AE F0            [24] 1872 	mov	r6,b
      000313 FF               [12] 1873 	mov	r7,a
                           000314  1874 	C$i2c.h$192$1$86 ==.
                                   1875 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1876 	mov	r0,#0x00
      000316 79 00            [12] 1877 	mov	r1,#0x00
      000318 7A 00            [12] 1878 	mov	r2,#0x00
      00031A 7B 00            [12] 1879 	mov	r3,#0x00
      00031C                       1880 00103$:
      00031C C3               [12] 1881 	clr	c
      00031D E8               [12] 1882 	mov	a,r0
      00031E 9C               [12] 1883 	subb	a,r4
      00031F E9               [12] 1884 	mov	a,r1
      000320 9D               [12] 1885 	subb	a,r5
      000321 EA               [12] 1886 	mov	a,r2
      000322 9E               [12] 1887 	subb	a,r6
      000323 EB               [12] 1888 	mov	a,r3
      000324 9F               [12] 1889 	subb	a,r7
      000325 50 0F            [24] 1890 	jnc	00105$
      000327 08               [12] 1891 	inc	r0
      000328 B8 00 09         [24] 1892 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1893 	inc	r1
      00032C B9 00 05         [24] 1894 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1895 	inc	r2
      000330 BA 00 E9         [24] 1896 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1897 	inc	r3
      000334                       1898 00115$:
      000334 80 E6            [24] 1899 	sjmp	00103$
      000336                       1900 00105$:
                           000336  1901 	C$i2c.h$193$1$86 ==.
                           000336  1902 	XG$delay_time$0$0 ==.
      000336 22               [24] 1903 	ret
                                   1904 ;------------------------------------------------------------
                                   1905 ;Allocation info for local variables in function 'i2c_start'
                                   1906 ;------------------------------------------------------------
                           000337  1907 	G$i2c_start$0$0 ==.
                           000337  1908 	C$i2c.h$196$1$86 ==.
                                   1909 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1910 ;	-----------------------------------------
                                   1911 ;	 function i2c_start
                                   1912 ;	-----------------------------------------
      000337                       1913 _i2c_start:
                           000337  1914 	C$i2c.h$198$1$88 ==.
                                   1915 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1916 00101$:
      000337 20 C7 FD         [24] 1917 	jb	_BUSY,00101$
                           00033A  1918 	C$i2c.h$199$1$88 ==.
                                   1919 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1920 	setb	_STA
                           00033C  1921 	C$i2c.h$200$1$88 ==.
                                   1922 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1923 00104$:
      00033C 30 C3 FD         [24] 1924 	jnb	_SI,00104$
                           00033F  1925 	C$i2c.h$201$1$88 ==.
                                   1926 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1927 	clr	_STA
                           000341  1928 	C$i2c.h$202$1$88 ==.
                                   1929 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1930 	clr	_SI
                           000343  1931 	C$i2c.h$203$1$88 ==.
                           000343  1932 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1933 	ret
                                   1934 ;------------------------------------------------------------
                                   1935 ;Allocation info for local variables in function 'i2c_write'
                                   1936 ;------------------------------------------------------------
                                   1937 ;output_data               Allocated to registers 
                                   1938 ;------------------------------------------------------------
                           000344  1939 	G$i2c_write$0$0 ==.
                           000344  1940 	C$i2c.h$206$1$88 ==.
                                   1941 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1942 ;	-----------------------------------------
                                   1943 ;	 function i2c_write
                                   1944 ;	-----------------------------------------
      000344                       1945 _i2c_write:
      000344 85 82 C2         [24] 1946 	mov	_SMB0DAT,dpl
                           000347  1947 	C$i2c.h$209$1$90 ==.
                                   1948 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1949 00101$:
                           000347  1950 	C$i2c.h$210$1$90 ==.
                                   1951 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1952 	jbc	_SI,00112$
      00034A 80 FB            [24] 1953 	sjmp	00101$
      00034C                       1954 00112$:
                           00034C  1955 	C$i2c.h$211$1$90 ==.
                           00034C  1956 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1957 	ret
                                   1958 ;------------------------------------------------------------
                                   1959 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1960 ;------------------------------------------------------------
                                   1961 ;output_data               Allocated to registers 
                                   1962 ;------------------------------------------------------------
                           00034D  1963 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1964 	C$i2c.h$214$1$90 ==.
                                   1965 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1966 ;	-----------------------------------------
                                   1967 ;	 function i2c_write_and_stop
                                   1968 ;	-----------------------------------------
      00034D                       1969 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1970 	mov	_SMB0DAT,dpl
                           000350  1971 	C$i2c.h$217$1$92 ==.
                                   1972 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1973 	setb	_STO
                           000352  1974 	C$i2c.h$218$1$92 ==.
                                   1975 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1976 00101$:
                           000352  1977 	C$i2c.h$219$1$92 ==.
                                   1978 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1979 	jbc	_SI,00112$
      000355 80 FB            [24] 1980 	sjmp	00101$
      000357                       1981 00112$:
                           000357  1982 	C$i2c.h$220$1$92 ==.
                           000357  1983 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1984 	ret
                                   1985 ;------------------------------------------------------------
                                   1986 ;Allocation info for local variables in function 'i2c_read'
                                   1987 ;------------------------------------------------------------
                                   1988 ;input_data                Allocated to registers 
                                   1989 ;------------------------------------------------------------
                           000358  1990 	G$i2c_read$0$0 ==.
                           000358  1991 	C$i2c.h$223$1$92 ==.
                                   1992 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   1993 ;	-----------------------------------------
                                   1994 ;	 function i2c_read
                                   1995 ;	-----------------------------------------
      000358                       1996 _i2c_read:
                           000358  1997 	C$i2c.h$226$1$94 ==.
                                   1998 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       1999 00101$:
      000358 30 C3 FD         [24] 2000 	jnb	_SI,00101$
                           00035B  2001 	C$i2c.h$227$1$94 ==.
                                   2002 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2003 	mov	dpl,_SMB0DAT
                           00035E  2004 	C$i2c.h$228$1$94 ==.
                                   2005 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2006 	clr	_SI
                           000360  2007 	C$i2c.h$229$1$94 ==.
                                   2008 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2009 	C$i2c.h$230$1$94 ==.
                           000360  2010 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2011 	ret
                                   2012 ;------------------------------------------------------------
                                   2013 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2014 ;------------------------------------------------------------
                                   2015 ;input_data                Allocated to registers r7 
                                   2016 ;------------------------------------------------------------
                           000361  2017 	G$i2c_read_and_stop$0$0 ==.
                           000361  2018 	C$i2c.h$233$1$94 ==.
                                   2019 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2020 ;	-----------------------------------------
                                   2021 ;	 function i2c_read_and_stop
                                   2022 ;	-----------------------------------------
      000361                       2023 _i2c_read_and_stop:
                           000361  2024 	C$i2c.h$236$1$96 ==.
                                   2025 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2026 00101$:
      000361 30 C3 FD         [24] 2027 	jnb	_SI,00101$
                           000364  2028 	C$i2c.h$237$1$96 ==.
                                   2029 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2030 	mov	r7,_SMB0DAT
                           000366  2031 	C$i2c.h$238$1$96 ==.
                                   2032 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2033 	clr	_SI
                           000368  2034 	C$i2c.h$239$1$96 ==.
                                   2035 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2036 	setb	_STO
                           00036A  2037 	C$i2c.h$240$1$96 ==.
                                   2038 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2039 00104$:
                           00036A  2040 	C$i2c.h$241$1$96 ==.
                                   2041 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2042 	jbc	_SI,00122$
      00036D 80 FB            [24] 2043 	sjmp	00104$
      00036F                       2044 00122$:
                           00036F  2045 	C$i2c.h$242$1$96 ==.
                                   2046 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2047 	mov	dpl,r7
                           000371  2048 	C$i2c.h$243$1$96 ==.
                           000371  2049 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2050 	ret
                                   2051 ;------------------------------------------------------------
                                   2052 ;Allocation info for local variables in function 'i2c_write_data'
                                   2053 ;------------------------------------------------------------
                                   2054 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2055 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2056 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2057 ;addr                      Allocated to registers r7 
                                   2058 ;i                         Allocated to registers 
                                   2059 ;------------------------------------------------------------
                           000372  2060 	G$i2c_write_data$0$0 ==.
                           000372  2061 	C$i2c.h$246$1$96 ==.
                                   2062 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2063 ;	-----------------------------------------
                                   2064 ;	 function i2c_write_data
                                   2065 ;	-----------------------------------------
      000372                       2066 _i2c_write_data:
      000372 AF 82            [24] 2067 	mov	r7,dpl
                           000374  2068 	C$i2c.h$250$1$98 ==.
                                   2069 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2070 	push	ar7
      000376 12r03r37         [24] 2071 	lcall	_i2c_start
      000379 D0 07            [24] 2072 	pop	ar7
                           00037B  2073 	C$i2c.h$251$1$98 ==.
                                   2074 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2075 	mov	a,#0xFE
      00037D 5F               [12] 2076 	anl	a,r7
      00037E F5 82            [12] 2077 	mov	dpl,a
      000380 12r03r44         [24] 2078 	lcall	_i2c_write
                           000383  2079 	C$i2c.h$252$1$98 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2081 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2082 	lcall	_i2c_write
                           000389  2083 	C$i2c.h$253$1$98 ==.
                                   2084 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2085 	mov	r7,#0x00
      00038B                       2086 00103$:
      00038B AD*09            [24] 2087 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2088 	mov	r6,#0x00
      00038F 1D               [12] 2089 	dec	r5
      000390 BD FF 01         [24] 2090 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2091 	dec	r6
      000394                       2092 00114$:
      000394 8F 03            [24] 2093 	mov	ar3,r7
      000396 7C 00            [12] 2094 	mov	r4,#0x00
      000398 C3               [12] 2095 	clr	c
      000399 EB               [12] 2096 	mov	a,r3
      00039A 9D               [12] 2097 	subb	a,r5
      00039B EC               [12] 2098 	mov	a,r4
      00039C 64 80            [12] 2099 	xrl	a,#0x80
      00039E 8E F0            [24] 2100 	mov	b,r6
      0003A0 63 F0 80         [24] 2101 	xrl	b,#0x80
      0003A3 95 F0            [12] 2102 	subb	a,b
      0003A5 50 1F            [24] 2103 	jnc	00101$
                           0003A7  2104 	C$i2c.h$254$1$98 ==.
                                   2105 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2106 	mov	a,r7
      0003A8 25*06            [12] 2107 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2108 	mov	r4,a
      0003AB E4               [12] 2109 	clr	a
      0003AC 35*07            [12] 2110 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2111 	mov	r5,a
      0003AF AE*08            [24] 2112 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2113 	mov	dpl,r4
      0003B3 8D 83            [24] 2114 	mov	dph,r5
      0003B5 8E F0            [24] 2115 	mov	b,r6
      0003B7 12r00r00         [24] 2116 	lcall	__gptrget
      0003BA F5 82            [12] 2117 	mov	dpl,a
      0003BC C0 07            [24] 2118 	push	ar7
      0003BE 12r03r44         [24] 2119 	lcall	_i2c_write
      0003C1 D0 07            [24] 2120 	pop	ar7
                           0003C3  2121 	C$i2c.h$253$1$98 ==.
                                   2122 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2123 	inc	r7
      0003C4 80 C5            [24] 2124 	sjmp	00103$
      0003C6                       2125 00101$:
                           0003C6  2126 	C$i2c.h$255$1$98 ==.
                                   2127 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2128 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2129 	mov	r7,#0x00
      0003CA 1E               [12] 2130 	dec	r6
      0003CB BE FF 01         [24] 2131 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2132 	dec	r7
      0003CF                       2133 00116$:
      0003CF EE               [12] 2134 	mov	a,r6
      0003D0 25*06            [12] 2135 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2136 	mov	r6,a
      0003D3 EF               [12] 2137 	mov	a,r7
      0003D4 35*07            [12] 2138 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2139 	mov	r7,a
      0003D7 AD*08            [24] 2140 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2141 	mov	dpl,r6
      0003DB 8F 83            [24] 2142 	mov	dph,r7
      0003DD 8D F0            [24] 2143 	mov	b,r5
      0003DF 12r00r00         [24] 2144 	lcall	__gptrget
      0003E2 F5 82            [12] 2145 	mov	dpl,a
      0003E4 12r03r4D         [24] 2146 	lcall	_i2c_write_and_stop
                           0003E7  2147 	C$i2c.h$256$1$98 ==.
                           0003E7  2148 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2149 	ret
                                   2150 ;------------------------------------------------------------
                                   2151 ;Allocation info for local variables in function 'i2c_read_data'
                                   2152 ;------------------------------------------------------------
                                   2153 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2154 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2155 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2156 ;addr                      Allocated to registers r7 
                                   2157 ;j                         Allocated to registers 
                                   2158 ;------------------------------------------------------------
                           0003E8  2159 	G$i2c_read_data$0$0 ==.
                           0003E8  2160 	C$i2c.h$259$1$98 ==.
                                   2161 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2162 ;	-----------------------------------------
                                   2163 ;	 function i2c_read_data
                                   2164 ;	-----------------------------------------
      0003E8                       2165 _i2c_read_data:
      0003E8 AF 82            [24] 2166 	mov	r7,dpl
                           0003EA  2167 	C$i2c.h$262$1$100 ==.
                                   2168 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2169 	push	ar7
      0003EC 12r03r37         [24] 2170 	lcall	_i2c_start
      0003EF D0 07            [24] 2171 	pop	ar7
                           0003F1  2172 	C$i2c.h$263$1$100 ==.
                                   2173 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2174 	mov	ar6,r7
      0003F3 74 FE            [12] 2175 	mov	a,#0xFE
      0003F5 5E               [12] 2176 	anl	a,r6
      0003F6 F5 82            [12] 2177 	mov	dpl,a
      0003F8 C0 07            [24] 2178 	push	ar7
      0003FA 12r03r44         [24] 2179 	lcall	_i2c_write
                           0003FD  2180 	C$i2c.h$264$1$100 ==.
                                   2181 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2182 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2183 	lcall	_i2c_write_and_stop
                           000403  2184 	C$i2c.h$265$1$100 ==.
                                   2185 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2186 	lcall	_i2c_start
      000406 D0 07            [24] 2187 	pop	ar7
                           000408  2188 	C$i2c.h$266$1$100 ==.
                                   2189 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2190 	mov	a,#0x01
      00040A 4F               [12] 2191 	orl	a,r7
      00040B F5 82            [12] 2192 	mov	dpl,a
      00040D 12r03r44         [24] 2193 	lcall	_i2c_write
                           000410  2194 	C$i2c.h$267$1$100 ==.
                                   2195 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2196 	mov	r7,#0x00
      000412                       2197 00103$:
      000412 AD*0E            [24] 2198 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2199 	mov	r6,#0x00
      000416 1D               [12] 2200 	dec	r5
      000417 BD FF 01         [24] 2201 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2202 	dec	r6
      00041B                       2203 00114$:
      00041B 8F 03            [24] 2204 	mov	ar3,r7
      00041D 7C 00            [12] 2205 	mov	r4,#0x00
      00041F C3               [12] 2206 	clr	c
      000420 EB               [12] 2207 	mov	a,r3
      000421 9D               [12] 2208 	subb	a,r5
      000422 EC               [12] 2209 	mov	a,r4
      000423 64 80            [12] 2210 	xrl	a,#0x80
      000425 8E F0            [24] 2211 	mov	b,r6
      000427 63 F0 80         [24] 2212 	xrl	b,#0x80
      00042A 95 F0            [12] 2213 	subb	a,b
      00042C 50 2E            [24] 2214 	jnc	00101$
                           00042E  2215 	C$i2c.h$269$2$101 ==.
                                   2216 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2217 	setb	_AA
                           000430  2218 	C$i2c.h$270$2$101 ==.
                                   2219 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2220 	mov	a,r7
      000431 25*0B            [12] 2221 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2222 	mov	r4,a
      000434 E4               [12] 2223 	clr	a
      000435 35*0C            [12] 2224 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2225 	mov	r5,a
      000438 AE*0D            [24] 2226 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2227 	push	ar7
      00043C C0 06            [24] 2228 	push	ar6
      00043E C0 05            [24] 2229 	push	ar5
      000440 C0 04            [24] 2230 	push	ar4
      000442 12r03r58         [24] 2231 	lcall	_i2c_read
      000445 AB 82            [24] 2232 	mov	r3,dpl
      000447 D0 04            [24] 2233 	pop	ar4
      000449 D0 05            [24] 2234 	pop	ar5
      00044B D0 06            [24] 2235 	pop	ar6
      00044D D0 07            [24] 2236 	pop	ar7
      00044F 8C 82            [24] 2237 	mov	dpl,r4
      000451 8D 83            [24] 2238 	mov	dph,r5
      000453 8E F0            [24] 2239 	mov	b,r6
      000455 EB               [12] 2240 	mov	a,r3
      000456 12r00r00         [24] 2241 	lcall	__gptrput
                           000459  2242 	C$i2c.h$267$1$100 ==.
                                   2243 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2244 	inc	r7
      00045A 80 B6            [24] 2245 	sjmp	00103$
      00045C                       2246 00101$:
                           00045C  2247 	C$i2c.h$272$1$100 ==.
                                   2248 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2249 	clr	_AA
                           00045E  2250 	C$i2c.h$273$1$100 ==.
                                   2251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2252 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2253 	mov	r7,#0x00
      000462 1E               [12] 2254 	dec	r6
      000463 BE FF 01         [24] 2255 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2256 	dec	r7
      000467                       2257 00116$:
      000467 EE               [12] 2258 	mov	a,r6
      000468 25*0B            [12] 2259 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2260 	mov	r6,a
      00046B EF               [12] 2261 	mov	a,r7
      00046C 35*0C            [12] 2262 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2263 	mov	r7,a
      00046F AD*0D            [24] 2264 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2265 	push	ar7
      000473 C0 06            [24] 2266 	push	ar6
      000475 C0 05            [24] 2267 	push	ar5
      000477 12r03r61         [24] 2268 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2269 	mov	r4,dpl
      00047C D0 05            [24] 2270 	pop	ar5
      00047E D0 06            [24] 2271 	pop	ar6
      000480 D0 07            [24] 2272 	pop	ar7
      000482 8E 82            [24] 2273 	mov	dpl,r6
      000484 8F 83            [24] 2274 	mov	dph,r7
      000486 8D F0            [24] 2275 	mov	b,r5
      000488 EC               [12] 2276 	mov	a,r4
      000489 12r00r00         [24] 2277 	lcall	__gptrput
                           00048C  2278 	C$i2c.h$274$1$100 ==.
                           00048C  2279 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2280 	ret
                                   2281 ;------------------------------------------------------------
                                   2282 ;Allocation info for local variables in function 'Accel_Init'
                                   2283 ;------------------------------------------------------------
                                   2284 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2285 ;------------------------------------------------------------
                           00048D  2286 	G$Accel_Init$0$0 ==.
                           00048D  2287 	C$i2c.h$283$1$100 ==.
                                   2288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2289 ;	-----------------------------------------
                                   2290 ;	 function Accel_Init
                                   2291 ;	-----------------------------------------
      00048D                       2292 _Accel_Init:
                           00048D  2293 	C$i2c.h$287$1$103 ==.
                                   2294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2295 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2296 	C$i2c.h$289$1$103 ==.
                                   2297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2298 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2299 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2300 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2301 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2302 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2303 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2304 	lcall	_i2c_write_data
                           0004A5  2305 	C$i2c.h$290$1$103 ==.
                                   2306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2307 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2308 	C$i2c.h$292$1$103 ==.
                                   2309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2310 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2311 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2312 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2313 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2314 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2315 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2316 	lcall	_i2c_write_data
                           0004BD  2317 	C$i2c.h$293$1$103 ==.
                                   2318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2319 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2320 	C$i2c.h$294$1$103 ==.
                                   2321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2322 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2323 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2324 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2325 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2326 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2327 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2328 	lcall	_i2c_write_data
                           0004D5  2329 	C$i2c.h$298$1$103 ==.
                           0004D5  2330 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2331 	ret
                                   2332 ;------------------------------------------------------------
                                   2333 ;Allocation info for local variables in function 'main'
                                   2334 ;------------------------------------------------------------
                           0004D6  2335 	G$main$0$0 ==.
                           0004D6  2336 	C$Squiggles.c$66$1$103 ==.
                                   2337 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:66: void main(void)
                                   2338 ;	-----------------------------------------
                                   2339 ;	 function main
                                   2340 ;	-----------------------------------------
      0004D6                       2341 _main:
                           0004D6  2342 	C$Squiggles.c$68$1$120 ==.
                                   2343 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:68: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2344 	lcall	_Sys_Init
                           0004D9  2345 	C$Squiggles.c$69$1$120 ==.
                                   2346 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:69: Port_Init();    // Initialize ports 2 and 3 - XBR0 set to 0x05, UART0 & SMB
      0004D9 12r06r16         [24] 2347 	lcall	_Port_Init
                           0004DC  2348 	C$Squiggles.c$70$1$120 ==.
                                   2349 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:70: Interrupt_Init();   // You may want to change XBR0 to match your SMB wiring
      0004DC 12r06r34         [24] 2350 	lcall	_Interrupt_Init
                           0004DF  2351 	C$Squiggles.c$71$1$120 ==.
                                   2352 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:71: PCA_Init();
      0004DF 12r06r3D         [24] 2353 	lcall	_PCA_Init
                           0004E2  2354 	C$Squiggles.c$72$1$120 ==.
                                   2355 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:72: ADC_Init();
      0004E2 12r06rAD         [24] 2356 	lcall	_ADC_Init
                           0004E5  2357 	C$Squiggles.c$73$1$120 ==.
                                   2358 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:73: SMB0_Init();
      0004E5 12r06r4A         [24] 2359 	lcall	_SMB0_Init
                           0004E8  2360 	C$Squiggles.c$74$1$120 ==.
                                   2361 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:74: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2362 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2363 	lcall	_putchar
                           0004EE  2364 	C$Squiggles.c$75$1$120 ==.
                                   2365 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:75: printf("\nStart\r\n");
      0004EE 74r29            [12] 2366 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2367 	push	acc
      0004F2 74s00            [12] 2368 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2369 	push	acc
      0004F6 74 80            [12] 2370 	mov	a,#0x80
      0004F8 C0 E0            [24] 2371 	push	acc
      0004FA 12r00r00         [24] 2372 	lcall	_printf
      0004FD 15 81            [12] 2373 	dec	sp
      0004FF 15 81            [12] 2374 	dec	sp
      000501 15 81            [12] 2375 	dec	sp
                           000503  2376 	C$Squiggles.c$76$1$120 ==.
                                   2377 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:76: PCA0CP0 = 0xFFFF - COMPASS_CENTER;
      000503 75 EA 37         [24] 2378 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000506 75 FA F5         [24] 2379 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2380 	C$Squiggles.c$77$1$120 ==.
                                   2381 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:77: PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Car isn't moving to start
      000509 75 EC 37         [24] 2382 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00050C 75 FC F5         [24] 2383 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           00050F  2384 	C$Squiggles.c$80$1$120 ==.
                                   2385 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:80: Counts = 0;
      00050F E4               [12] 2386 	clr	a
      000510 F5*10            [12] 2387 	mov	_Counts,a
      000512 F5*11            [12] 2388 	mov	(_Counts + 1),a
                           000514  2389 	C$Squiggles.c$81$1$120 ==.
                                   2390 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:81: while (Counts < 1); //{ printf("\r%u\n", nCounts); } // Wait a long time (1s) for keypad & LCD to initialize
      000514                       2391 00101$:
      000514 C3               [12] 2392 	clr	c
      000515 E5*10            [12] 2393 	mov	a,_Counts
      000517 94 01            [12] 2394 	subb	a,#0x01
      000519 E5*11            [12] 2395 	mov	a,(_Counts + 1)
      00051B 94 00            [12] 2396 	subb	a,#0x00
      00051D 40 F5            [24] 2397 	jc	00101$
                           00051F  2398 	C$Squiggles.c$88$1$120 ==.
                                   2399 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:88: printf("\n\r------------DATA COLLECTION------------\n");
      00051F 74r32            [12] 2400 	mov	a,#___str_4
      000521 C0 E0            [24] 2401 	push	acc
      000523 74s00            [12] 2402 	mov	a,#(___str_4 >> 8)
      000525 C0 E0            [24] 2403 	push	acc
      000527 74 80            [12] 2404 	mov	a,#0x80
      000529 C0 E0            [24] 2405 	push	acc
      00052B 12r00r00         [24] 2406 	lcall	_printf
      00052E 15 81            [12] 2407 	dec	sp
      000530 15 81            [12] 2408 	dec	sp
      000532 15 81            [12] 2409 	dec	sp
                           000534  2410 	C$Squiggles.c$90$1$120 ==.
                                   2411 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:90: while (1)
      000534                       2412 00123$:
                           000534  2413 	C$Squiggles.c$95$2$121 ==.
                                   2414 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:95: if ((new_range)) // enough overflow for a new range
      000534 E5*20            [12] 2415 	mov	a,_new_range
      000536 60 6C            [24] 2416 	jz	00115$
                           000538  2417 	C$Squiggles.c$97$3$122 ==.
                                   2418 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:97: range = read_ranger();
      000538 12r07rCF         [24] 2419 	lcall	_read_ranger
      00053B 85 82*23         [24] 2420 	mov	_range,dpl
      00053E 85 83*24         [24] 2421 	mov	(_range + 1),dph
                           000541  2422 	C$Squiggles.c$98$3$122 ==.
                                   2423 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:98: if(range != 0xFFFF) printf("\rRange: %u\n", range);
      000541 74 FF            [12] 2424 	mov	a,#0xFF
      000543 B5*23 07         [24] 2425 	cjne	a,_range,00165$
      000546 74 FF            [12] 2426 	mov	a,#0xFF
      000548 B5*24 02         [24] 2427 	cjne	a,(_range + 1),00165$
      00054B 80 19            [24] 2428 	sjmp	00105$
      00054D                       2429 00165$:
      00054D C0*23            [24] 2430 	push	_range
      00054F C0*24            [24] 2431 	push	(_range + 1)
      000551 74r5D            [12] 2432 	mov	a,#___str_5
      000553 C0 E0            [24] 2433 	push	acc
      000555 74s00            [12] 2434 	mov	a,#(___str_5 >> 8)
      000557 C0 E0            [24] 2435 	push	acc
      000559 74 80            [12] 2436 	mov	a,#0x80
      00055B C0 E0            [24] 2437 	push	acc
      00055D 12r00r00         [24] 2438 	lcall	_printf
      000560 E5 81            [12] 2439 	mov	a,sp
      000562 24 FB            [12] 2440 	add	a,#0xfb
      000564 F5 81            [12] 2441 	mov	sp,a
      000566                       2442 00105$:
                           000566  2443 	C$Squiggles.c$99$3$122 ==.
                                   2444 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:99: if ((range != 0) && (range != 0xFFFF))
      000566 E5*23            [12] 2445 	mov	a,_range
      000568 45*24            [12] 2446 	orl	a,(_range + 1)
      00056A 60 33            [24] 2447 	jz	00111$
      00056C 74 FF            [12] 2448 	mov	a,#0xFF
      00056E B5*23 07         [24] 2449 	cjne	a,_range,00167$
      000571 74 FF            [12] 2450 	mov	a,#0xFF
      000573 B5*24 02         [24] 2451 	cjne	a,(_range + 1),00167$
      000576 80 27            [24] 2452 	sjmp	00111$
      000578                       2453 00167$:
                           000578  2454 	C$Squiggles.c$101$4$123 ==.
                                   2455 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:101: if((range < 15) && (range != 0)) PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Stop if near an object
      000578 C3               [12] 2456 	clr	c
      000579 E5*23            [12] 2457 	mov	a,_range
      00057B 94 0F            [12] 2458 	subb	a,#0x0F
      00057D E5*24            [12] 2459 	mov	a,(_range + 1)
      00057F 94 00            [12] 2460 	subb	a,#0x00
      000581 50 0E            [24] 2461 	jnc	00107$
      000583 E5*23            [12] 2462 	mov	a,_range
      000585 45*24            [12] 2463 	orl	a,(_range + 1)
      000587 60 08            [24] 2464 	jz	00107$
      000589 75 EC 37         [24] 2465 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00058C 75 FC F5         [24] 2466 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
      00058F 80 06            [24] 2467 	sjmp	00108$
      000591                       2468 00107$:
                           000591  2469 	C$Squiggles.c$102$4$123 ==.
                                   2470 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:102: else PCA0CP2 = 0xFFFF - 3200;
      000591 75 EC 7F         [24] 2471 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x7F
      000594 75 FC F3         [24] 2472 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF3
      000597                       2473 00108$:
                           000597  2474 	C$Squiggles.c$105$4$123 ==.
                                   2475 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:105: new_range = 0;
      000597 75*20 00         [24] 2476 	mov	_new_range,#0x00
                           00059A  2477 	C$Squiggles.c$106$4$123 ==.
                                   2478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:106: r_count = 0;
      00059A 75*1D 00         [24] 2479 	mov	_r_count,#0x00
      00059D 80 05            [24] 2480 	sjmp	00115$
      00059F                       2481 00111$:
                           00059F  2482 	C$Squiggles.c$111$4$124 ==.
                                   2483 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:111: range_adj = 0;
      00059F E4               [12] 2484 	clr	a
      0005A0 F5*27            [12] 2485 	mov	_range_adj,a
      0005A2 F5*28            [12] 2486 	mov	(_range_adj + 1),a
      0005A4                       2487 00115$:
                           0005A4  2488 	C$Squiggles.c$114$2$121 ==.
                                   2489 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:114: if(delay == 10) 	//delay so that we don't get spammed with print messages
      0005A4 74 0A            [12] 2490 	mov	a,#0x0A
      0005A6 B5*1E 40         [24] 2491 	cjne	a,_delay,00117$
                           0005A9  2492 	C$Squiggles.c$116$3$125 ==.
                                   2493 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:116: AD_Result = read_AD_input(5); //Read analog input on pin 1.5
      0005A9 75 82 05         [24] 2494 	mov	dpl,#0x05
      0005AC 12r06rB7         [24] 2495 	lcall	_read_AD_input
                           0005AF  2496 	C$Squiggles.c$117$1$120 ==.
                                   2497 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:117: voltage = ((14.4/255)*AD_Result); //Convert back to input voltage
      0005AF 85 82*2C         [24] 2498 	mov  _AD_Result,dpl
      0005B2 12r00r00         [24] 2499 	lcall	___uchar2fs
      0005B5 AC 82            [24] 2500 	mov	r4,dpl
      0005B7 AD 83            [24] 2501 	mov	r5,dph
      0005B9 AE F0            [24] 2502 	mov	r6,b
      0005BB FF               [12] 2503 	mov	r7,a
      0005BC C0 04            [24] 2504 	push	ar4
      0005BE C0 05            [24] 2505 	push	ar5
      0005C0 C0 06            [24] 2506 	push	ar6
      0005C2 C0 07            [24] 2507 	push	ar7
      0005C4 90 4D B4         [24] 2508 	mov	dptr,#0x4DB4
      0005C7 75 F0 67         [24] 2509 	mov	b,#0x67
      0005CA 74 3D            [12] 2510 	mov	a,#0x3D
      0005CC 12r00r00         [24] 2511 	lcall	___fsmul
      0005CF AC 82            [24] 2512 	mov	r4,dpl
      0005D1 AD 83            [24] 2513 	mov	r5,dph
      0005D3 AE F0            [24] 2514 	mov	r6,b
      0005D5 FF               [12] 2515 	mov	r7,a
      0005D6 E5 81            [12] 2516 	mov	a,sp
      0005D8 24 FC            [12] 2517 	add	a,#0xfc
      0005DA F5 81            [12] 2518 	mov	sp,a
      0005DC 8C 82            [24] 2519 	mov	dpl,r4
      0005DE 8D 83            [24] 2520 	mov	dph,r5
      0005E0 8E F0            [24] 2521 	mov	b,r6
      0005E2 EF               [12] 2522 	mov	a,r7
      0005E3 12r00r00         [24] 2523 	lcall	___fs2uchar
      0005E6 85 82*2D         [24] 2524 	mov	_voltage,dpl
      0005E9                       2525 00117$:
                           0005E9  2526 	C$Squiggles.c$120$2$121 ==.
                                   2527 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:120: if((new_heading))
      0005E9 E5*1F            [12] 2528 	mov	a,_new_heading
      0005EB 70 03            [24] 2529 	jnz	00172$
      0005ED 02r05r34         [24] 2530 	ljmp	00123$
      0005F0                       2531 00172$:
                           0005F0  2532 	C$Squiggles.c$122$3$126 ==.
                                   2533 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:122: if(delay >= 10) heading = read_compass();
      0005F0 74 F6            [12] 2534 	mov	a,#0x100 - 0x0A
      0005F2 25*1E            [12] 2535 	add	a,_delay
      0005F4 50 09            [24] 2536 	jnc	00119$
      0005F6 12r07rA9         [24] 2537 	lcall	_read_compass
      0005F9 85 82*21         [24] 2538 	mov	_heading,dpl
      0005FC 85 83*22         [24] 2539 	mov	(_heading + 1),dph
      0005FF                       2540 00119$:
                           0005FF  2541 	C$Squiggles.c$124$3$126 ==.
                                   2542 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:124: set_COMPASS_PW(); // Adjust pulsewidth based on error function
      0005FF 12r08r48         [24] 2543 	lcall	_set_COMPASS_PW
                           000602  2544 	C$Squiggles.c$125$3$126 ==.
                                   2545 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:125: PCA0CP0 = 0xFFFF - COMPASS_PW; // Change pulse width
      000602 74 FF            [12] 2546 	mov	a,#0xFF
      000604 C3               [12] 2547 	clr	c
      000605 95*25            [12] 2548 	subb	a,_COMPASS_PW
      000607 F5 EA            [12] 2549 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000609 74 FF            [12] 2550 	mov	a,#0xFF
      00060B 95*26            [12] 2551 	subb	a,(_COMPASS_PW + 1)
      00060D F5 FA            [12] 2552 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           00060F  2553 	C$Squiggles.c$126$3$126 ==.
                                   2554 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:126: new_heading = 0;
      00060F 75*1F 00         [24] 2555 	mov	_new_heading,#0x00
      000612 02r05r34         [24] 2556 	ljmp	00123$
                           000615  2557 	C$Squiggles.c$130$1$120 ==.
                           000615  2558 	XG$main$0$0 ==.
      000615 22               [24] 2559 	ret
                                   2560 ;------------------------------------------------------------
                                   2561 ;Allocation info for local variables in function 'Port_Init'
                                   2562 ;------------------------------------------------------------
                           000616  2563 	G$Port_Init$0$0 ==.
                           000616  2564 	C$Squiggles.c$135$1$120 ==.
                                   2565 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:135: void Port_Init(void)	
                                   2566 ;	-----------------------------------------
                                   2567 ;	 function Port_Init
                                   2568 ;	-----------------------------------------
      000616                       2569 _Port_Init:
                           000616  2570 	C$Squiggles.c$137$1$128 ==.
                                   2571 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:137: XBR0 = 0x27;
      000616 75 E1 27         [24] 2572 	mov	_XBR0,#0x27
                           000619  2573 	C$Squiggles.c$138$1$128 ==.
                                   2574 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:138: P1MDIN 	&= 0xDF;	// set pin 1.3 for analog input	
      000619 53 BD DF         [24] 2575 	anl	_P1MDIN,#0xDF
                           00061C  2576 	C$Squiggles.c$139$1$128 ==.
                                   2577 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:139: P1MDOUT |= 0x05;	//set output pin for CEX0 in push-pull mode
      00061C 43 A5 05         [24] 2578 	orl	_P1MDOUT,#0x05
                           00061F  2579 	C$Squiggles.c$140$1$128 ==.
                                   2580 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:140: P1MDOUT &= 0xDF;	// set input pin for 1.3 to open-drain
      00061F 53 A5 DF         [24] 2581 	anl	_P1MDOUT,#0xDF
                           000622  2582 	C$Squiggles.c$141$1$128 ==.
                                   2583 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:141: P1		|= ~0xDF;	// set input pin for 1.3 to high impedence
      000622 AF 90            [24] 2584 	mov	r7,_P1
      000624 74 20            [12] 2585 	mov	a,#0x20
      000626 4F               [12] 2586 	orl	a,r7
      000627 F5 90            [12] 2587 	mov	_P1,a
                           000629  2588 	C$Squiggles.c$142$1$128 ==.
                                   2589 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:142: P3MDOUT &= 0x7F;	// set input pin for 3.7 to open-drain
      000629 53 A7 7F         [24] 2590 	anl	_P3MDOUT,#0x7F
                           00062C  2591 	C$Squiggles.c$143$1$128 ==.
                                   2592 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:143: P3		|= ~0x7F;	// set input pin for 3.7 to high impedence
      00062C AF B0            [24] 2593 	mov	r7,_P3
      00062E 74 80            [12] 2594 	mov	a,#0x80
      000630 4F               [12] 2595 	orl	a,r7
      000631 F5 B0            [12] 2596 	mov	_P3,a
                           000633  2597 	C$Squiggles.c$145$1$128 ==.
                           000633  2598 	XG$Port_Init$0$0 ==.
      000633 22               [24] 2599 	ret
                                   2600 ;------------------------------------------------------------
                                   2601 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2602 ;------------------------------------------------------------
                           000634  2603 	G$Interrupt_Init$0$0 ==.
                           000634  2604 	C$Squiggles.c$149$1$128 ==.
                                   2605 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:149: void Interrupt_Init(void)
                                   2606 ;	-----------------------------------------
                                   2607 ;	 function Interrupt_Init
                                   2608 ;	-----------------------------------------
      000634                       2609 _Interrupt_Init:
                           000634  2610 	C$Squiggles.c$151$1$130 ==.
                                   2611 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:151: IE |= 0x02;
      000634 43 A8 02         [24] 2612 	orl	_IE,#0x02
                           000637  2613 	C$Squiggles.c$152$1$130 ==.
                                   2614 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:152: EIE1 |= 0x08;
      000637 43 E6 08         [24] 2615 	orl	_EIE1,#0x08
                           00063A  2616 	C$Squiggles.c$153$1$130 ==.
                                   2617 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:153: EA = 1;
      00063A D2 AF            [12] 2618 	setb	_EA
                           00063C  2619 	C$Squiggles.c$154$1$130 ==.
                           00063C  2620 	XG$Interrupt_Init$0$0 ==.
      00063C 22               [24] 2621 	ret
                                   2622 ;------------------------------------------------------------
                                   2623 ;Allocation info for local variables in function 'PCA_Init'
                                   2624 ;------------------------------------------------------------
                           00063D  2625 	G$PCA_Init$0$0 ==.
                           00063D  2626 	C$Squiggles.c$158$1$130 ==.
                                   2627 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:158: void PCA_Init(void)
                                   2628 ;	-----------------------------------------
                                   2629 ;	 function PCA_Init
                                   2630 ;	-----------------------------------------
      00063D                       2631 _PCA_Init:
                           00063D  2632 	C$Squiggles.c$160$1$132 ==.
                                   2633 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:160: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      00063D 75 D9 81         [24] 2634 	mov	_PCA0MD,#0x81
                           000640  2635 	C$Squiggles.c$161$1$132 ==.
                                   2636 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:161: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      000640 75 DA C2         [24] 2637 	mov	_PCA0CPM0,#0xC2
                           000643  2638 	C$Squiggles.c$162$1$132 ==.
                                   2639 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:162: PCA0CPM2 = 0xC2;
      000643 75 DC C2         [24] 2640 	mov	_PCA0CPM2,#0xC2
                           000646  2641 	C$Squiggles.c$163$1$132 ==.
                                   2642 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:163: PCA0CN |= 0x40;     // enable PCA
      000646 43 D8 40         [24] 2643 	orl	_PCA0CN,#0x40
                           000649  2644 	C$Squiggles.c$164$1$132 ==.
                           000649  2645 	XG$PCA_Init$0$0 ==.
      000649 22               [24] 2646 	ret
                                   2647 ;------------------------------------------------------------
                                   2648 ;Allocation info for local variables in function 'SMB0_Init'
                                   2649 ;------------------------------------------------------------
                           00064A  2650 	G$SMB0_Init$0$0 ==.
                           00064A  2651 	C$Squiggles.c$168$1$132 ==.
                                   2652 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:168: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2653 ;	-----------------------------------------
                                   2654 ;	 function SMB0_Init
                                   2655 ;	-----------------------------------------
      00064A                       2656 _SMB0_Init:
                           00064A  2657 	C$Squiggles.c$170$1$134 ==.
                                   2658 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:170: SMB0CR = 0x93;      // Set SCL to 100KHz
      00064A 75 CF 93         [24] 2659 	mov	_SMB0CR,#0x93
                           00064D  2660 	C$Squiggles.c$171$1$134 ==.
                                   2661 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:171: ENSMB = 1;          // Enable SMBUS0
      00064D D2 C6            [12] 2662 	setb	_ENSMB
                           00064F  2663 	C$Squiggles.c$172$1$134 ==.
                           00064F  2664 	XG$SMB0_Init$0$0 ==.
      00064F 22               [24] 2665 	ret
                                   2666 ;------------------------------------------------------------
                                   2667 ;Allocation info for local variables in function 'PCA_ISR'
                                   2668 ;------------------------------------------------------------
                           000650  2669 	G$PCA_ISR$0$0 ==.
                           000650  2670 	C$Squiggles.c$176$1$134 ==.
                                   2671 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:176: void PCA_ISR(void) __interrupt 9
                                   2672 ;	-----------------------------------------
                                   2673 ;	 function PCA_ISR
                                   2674 ;	-----------------------------------------
      000650                       2675 _PCA_ISR:
      000650 C0 E0            [24] 2676 	push	acc
      000652 C0 D0            [24] 2677 	push	psw
                           000654  2678 	C$Squiggles.c$178$1$136 ==.
                                   2679 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:178: if (CF)
                           000654  2680 	C$Squiggles.c$180$2$137 ==.
                                   2681 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:180: CF = 0;                     // clear the interrupt flag
      000654 10 DF 02         [24] 2682 	jbc	_CF,00129$
      000657 80 4C            [24] 2683 	sjmp	00110$
      000659                       2684 00129$:
                           000659  2685 	C$Squiggles.c$182$2$137 ==.
                                   2686 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:182: nCounts++;
      000659 05*12            [12] 2687 	inc	_nCounts
      00065B E4               [12] 2688 	clr	a
      00065C B5*12 02         [24] 2689 	cjne	a,_nCounts,00130$
      00065F 05*13            [12] 2690 	inc	(_nCounts + 1)
      000661                       2691 00130$:
                           000661  2692 	C$Squiggles.c$183$2$137 ==.
                                   2693 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:183: PCA0 = PCA_START;
      000661 75 E9 00         [24] 2694 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000664 75 F9 70         [24] 2695 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000667  2696 	C$Squiggles.c$184$2$137 ==.
                                   2697 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:184: if (nCounts > 50)
      000667 C3               [12] 2698 	clr	c
      000668 74 32            [12] 2699 	mov	a,#0x32
      00066A 95*12            [12] 2700 	subb	a,_nCounts
      00066C E4               [12] 2701 	clr	a
      00066D 95*13            [12] 2702 	subb	a,(_nCounts + 1)
      00066F 50 0C            [24] 2703 	jnc	00102$
                           000671  2704 	C$Squiggles.c$186$3$138 ==.
                                   2705 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:186: nCounts = 0;
      000671 E4               [12] 2706 	clr	a
      000672 F5*12            [12] 2707 	mov	_nCounts,a
      000674 F5*13            [12] 2708 	mov	(_nCounts + 1),a
                           000676  2709 	C$Squiggles.c$187$3$138 ==.
                                   2710 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:187: Counts++;               // seconds counter
      000676 05*10            [12] 2711 	inc	_Counts
                                   2712 ;	genFromRTrack removed	clr	a
      000678 B5*10 02         [24] 2713 	cjne	a,_Counts,00132$
      00067B 05*11            [12] 2714 	inc	(_Counts + 1)
      00067D                       2715 00132$:
      00067D                       2716 00102$:
                           00067D  2717 	C$Squiggles.c$189$2$137 ==.
                                   2718 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:189: h_count++;
      00067D 05*1C            [12] 2719 	inc	_h_count
                           00067F  2720 	C$Squiggles.c$190$2$137 ==.
                                   2721 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:190: if (h_count>=2)
      00067F 74 FE            [12] 2722 	mov	a,#0x100 - 0x02
      000681 25*1C            [12] 2723 	add	a,_h_count
      000683 50 06            [24] 2724 	jnc	00104$
                           000685  2725 	C$Squiggles.c$192$3$139 ==.
                                   2726 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:192: new_heading=1;
      000685 75*1F 01         [24] 2727 	mov	_new_heading,#0x01
                           000688  2728 	C$Squiggles.c$193$3$139 ==.
                                   2729 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:193: h_count = 0;
      000688 75*1C 00         [24] 2730 	mov	_h_count,#0x00
      00068B                       2731 00104$:
                           00068B  2732 	C$Squiggles.c$195$2$137 ==.
                                   2733 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:195: delay++;
      00068B 05*1E            [12] 2734 	inc	_delay
                           00068D  2735 	C$Squiggles.c$196$2$137 ==.
                                   2736 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:196: if(delay == 11) delay=0;
      00068D 74 0B            [12] 2737 	mov	a,#0x0B
      00068F B5*1E 03         [24] 2738 	cjne	a,_delay,00106$
      000692 75*1E 00         [24] 2739 	mov	_delay,#0x00
      000695                       2740 00106$:
                           000695  2741 	C$Squiggles.c$197$2$137 ==.
                                   2742 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:197: r_count++;
      000695 05*1D            [12] 2743 	inc	_r_count
                           000697  2744 	C$Squiggles.c$198$2$137 ==.
                                   2745 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:198: if (r_count>=4)
      000697 74 FC            [12] 2746 	mov	a,#0x100 - 0x04
      000699 25*1D            [12] 2747 	add	a,_r_count
      00069B 50 0B            [24] 2748 	jnc	00112$
                           00069D  2749 	C$Squiggles.c$200$3$140 ==.
                                   2750 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:200: new_range = 1;
      00069D 75*20 01         [24] 2751 	mov	_new_range,#0x01
                           0006A0  2752 	C$Squiggles.c$201$3$140 ==.
                                   2753 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:201: r_count = 0;
      0006A0 75*1D 00         [24] 2754 	mov	_r_count,#0x00
      0006A3 80 03            [24] 2755 	sjmp	00112$
      0006A5                       2756 00110$:
                           0006A5  2757 	C$Squiggles.c$204$1$136 ==.
                                   2758 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:204: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      0006A5 53 D8 C0         [24] 2759 	anl	_PCA0CN,#0xC0
      0006A8                       2760 00112$:
      0006A8 D0 D0            [24] 2761 	pop	psw
      0006AA D0 E0            [24] 2762 	pop	acc
                           0006AC  2763 	C$Squiggles.c$205$1$136 ==.
                           0006AC  2764 	XG$PCA_ISR$0$0 ==.
      0006AC 32               [24] 2765 	reti
                                   2766 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2767 ;	eliminated unneeded push/pop dpl
                                   2768 ;	eliminated unneeded push/pop dph
                                   2769 ;	eliminated unneeded push/pop b
                                   2770 ;------------------------------------------------------------
                                   2771 ;Allocation info for local variables in function 'ADC_Init'
                                   2772 ;------------------------------------------------------------
                           0006AD  2773 	G$ADC_Init$0$0 ==.
                           0006AD  2774 	C$Squiggles.c$210$1$136 ==.
                                   2775 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:210: void ADC_Init(void)
                                   2776 ;	-----------------------------------------
                                   2777 ;	 function ADC_Init
                                   2778 ;	-----------------------------------------
      0006AD                       2779 _ADC_Init:
                           0006AD  2780 	C$Squiggles.c$212$1$142 ==.
                                   2781 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:212: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      0006AD 75 D1 03         [24] 2782 	mov	_REF0CN,#0x03
                           0006B0  2783 	C$Squiggles.c$213$1$142 ==.
                                   2784 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:213: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      0006B0 75 AA 80         [24] 2785 	mov	_ADC1CN,#0x80
                           0006B3  2786 	C$Squiggles.c$214$1$142 ==.
                                   2787 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:214: ADC1CF |= 0x01; // Set A/D converter gain to 1
      0006B3 43 AB 01         [24] 2788 	orl	_ADC1CF,#0x01
                           0006B6  2789 	C$Squiggles.c$215$1$142 ==.
                           0006B6  2790 	XG$ADC_Init$0$0 ==.
      0006B6 22               [24] 2791 	ret
                                   2792 ;------------------------------------------------------------
                                   2793 ;Allocation info for local variables in function 'read_AD_input'
                                   2794 ;------------------------------------------------------------
                                   2795 ;n                         Allocated to registers 
                                   2796 ;------------------------------------------------------------
                           0006B7  2797 	G$read_AD_input$0$0 ==.
                           0006B7  2798 	C$Squiggles.c$219$1$142 ==.
                                   2799 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:219: unsigned char read_AD_input(unsigned char n)
                                   2800 ;	-----------------------------------------
                                   2801 ;	 function read_AD_input
                                   2802 ;	-----------------------------------------
      0006B7                       2803 _read_AD_input:
      0006B7 85 82 AC         [24] 2804 	mov	_AMX1SL,dpl
                           0006BA  2805 	C$Squiggles.c$222$1$144 ==.
                                   2806 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:222: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      0006BA AF AA            [24] 2807 	mov	r7,_ADC1CN
      0006BC 74 DF            [12] 2808 	mov	a,#0xDF
      0006BE 5F               [12] 2809 	anl	a,r7
      0006BF F5 AA            [12] 2810 	mov	_ADC1CN,a
                           0006C1  2811 	C$Squiggles.c$223$1$144 ==.
                                   2812 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:223: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      0006C1 43 AA 10         [24] 2813 	orl	_ADC1CN,#0x10
                           0006C4  2814 	C$Squiggles.c$225$1$144 ==.
                                   2815 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:225: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      0006C4                       2816 00101$:
      0006C4 E5 AA            [12] 2817 	mov	a,_ADC1CN
      0006C6 30 E5 FB         [24] 2818 	jnb	acc.5,00101$
                           0006C9  2819 	C$Squiggles.c$227$1$144 ==.
                                   2820 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:227: return ADC1; // Return digital value in ADC1 register
      0006C9 85 9C 82         [24] 2821 	mov	dpl,_ADC1
                           0006CC  2822 	C$Squiggles.c$228$1$144 ==.
                           0006CC  2823 	XG$read_AD_input$0$0 ==.
      0006CC 22               [24] 2824 	ret
                                   2825 ;------------------------------------------------------------
                                   2826 ;Allocation info for local variables in function 'Pick_Heading'
                                   2827 ;------------------------------------------------------------
                                   2828 ;user_heading              Allocated to registers r6 r7 
                                   2829 ;------------------------------------------------------------
                           0006CD  2830 	G$Pick_Heading$0$0 ==.
                           0006CD  2831 	C$Squiggles.c$232$1$144 ==.
                                   2832 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:232: void Pick_Heading(void)
                                   2833 ;	-----------------------------------------
                                   2834 ;	 function Pick_Heading
                                   2835 ;	-----------------------------------------
      0006CD                       2836 _Pick_Heading:
                           0006CD  2837 	C$Squiggles.c$235$1$146 ==.
                                   2838 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:235: lcd_clear();
      0006CD 12r00rE1         [24] 2839 	lcall	_lcd_clear
                           0006D0  2840 	C$Squiggles.c$236$1$146 ==.
                                   2841 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:236: lcd_print("\rEnter desired heading for the compass.\n");
      0006D0 74r69            [12] 2842 	mov	a,#___str_6
      0006D2 C0 E0            [24] 2843 	push	acc
      0006D4 74s00            [12] 2844 	mov	a,#(___str_6 >> 8)
      0006D6 C0 E0            [24] 2845 	push	acc
      0006D8 74 80            [12] 2846 	mov	a,#0x80
      0006DA C0 E0            [24] 2847 	push	acc
      0006DC 12r00r5C         [24] 2848 	lcall	_lcd_print
      0006DF 15 81            [12] 2849 	dec	sp
      0006E1 15 81            [12] 2850 	dec	sp
      0006E3 15 81            [12] 2851 	dec	sp
                           0006E5  2852 	C$Squiggles.c$237$1$146 ==.
                                   2853 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:237: user_heading = kpd_input(1);
      0006E5 75 82 01         [24] 2854 	mov	dpl,#0x01
      0006E8 12r01r99         [24] 2855 	lcall	_kpd_input
      0006EB AE 82            [24] 2856 	mov	r6,dpl
      0006ED AF 83            [24] 2857 	mov	r7,dph
                           0006EF  2858 	C$Squiggles.c$238$1$146 ==.
                                   2859 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:238: while(user_heading > 3600) //Headings must be between 0 and 3600
      0006EF 8E 04            [24] 2860 	mov	ar4,r6
      0006F1 8F 05            [24] 2861 	mov	ar5,r7
      0006F3                       2862 00101$:
      0006F3 C3               [12] 2863 	clr	c
      0006F4 74 10            [12] 2864 	mov	a,#0x10
      0006F6 9C               [12] 2865 	subb	a,r4
      0006F7 74 8E            [12] 2866 	mov	a,#(0x0E ^ 0x80)
      0006F9 8D F0            [24] 2867 	mov	b,r5
      0006FB 63 F0 80         [24] 2868 	xrl	b,#0x80
      0006FE 95 F0            [12] 2869 	subb	a,b
      000700 50 0A            [24] 2870 	jnc	00113$
                           000702  2871 	C$Squiggles.c$240$2$147 ==.
                                   2872 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:240: user_heading -= 3600;
      000702 EC               [12] 2873 	mov	a,r4
      000703 24 F0            [12] 2874 	add	a,#0xF0
      000705 FC               [12] 2875 	mov	r4,a
      000706 ED               [12] 2876 	mov	a,r5
      000707 34 F1            [12] 2877 	addc	a,#0xF1
      000709 FD               [12] 2878 	mov	r5,a
                           00070A  2879 	C$Squiggles.c$242$1$146 ==.
                                   2880 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:242: while(user_heading < 0)
      00070A 80 E7            [24] 2881 	sjmp	00101$
      00070C                       2882 00113$:
      00070C 8C 06            [24] 2883 	mov	ar6,r4
      00070E 8D 07            [24] 2884 	mov	ar7,r5
      000710 8E 04            [24] 2885 	mov	ar4,r6
      000712 8F 05            [24] 2886 	mov	ar5,r7
      000714                       2887 00104$:
      000714 ED               [12] 2888 	mov	a,r5
      000715 30 E7 0A         [24] 2889 	jnb	acc.7,00114$
                           000718  2890 	C$Squiggles.c$244$2$148 ==.
                                   2891 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:244: user_heading += 3600;
      000718 74 10            [12] 2892 	mov	a,#0x10
      00071A 2C               [12] 2893 	add	a,r4
      00071B FC               [12] 2894 	mov	r4,a
      00071C 74 0E            [12] 2895 	mov	a,#0x0E
      00071E 3D               [12] 2896 	addc	a,r5
      00071F FD               [12] 2897 	mov	r5,a
      000720 80 F2            [24] 2898 	sjmp	00104$
      000722                       2899 00114$:
      000722 8C 06            [24] 2900 	mov	ar6,r4
      000724 8D 07            [24] 2901 	mov	ar7,r5
                           000726  2902 	C$Squiggles.c$246$1$146 ==.
                                   2903 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:246: lcd_clear();
      000726 C0 07            [24] 2904 	push	ar7
      000728 C0 06            [24] 2905 	push	ar6
      00072A 12r00rE1         [24] 2906 	lcall	_lcd_clear
      00072D D0 06            [24] 2907 	pop	ar6
      00072F D0 07            [24] 2908 	pop	ar7
                           000731  2909 	C$Squiggles.c$247$1$146 ==.
                                   2910 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:247: desired_heading = user_heading;
      000731 8E*16            [24] 2911 	mov	_desired_heading,r6
      000733 8F*17            [24] 2912 	mov	(_desired_heading + 1),r7
                           000735  2913 	C$Squiggles.c$248$1$146 ==.
                                   2914 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:248: printf("\rPick_Heading verified\n");
      000735 74r92            [12] 2915 	mov	a,#___str_7
      000737 C0 E0            [24] 2916 	push	acc
      000739 74s00            [12] 2917 	mov	a,#(___str_7 >> 8)
      00073B C0 E0            [24] 2918 	push	acc
      00073D 74 80            [12] 2919 	mov	a,#0x80
      00073F C0 E0            [24] 2920 	push	acc
      000741 12r00r00         [24] 2921 	lcall	_printf
      000744 15 81            [12] 2922 	dec	sp
      000746 15 81            [12] 2923 	dec	sp
      000748 15 81            [12] 2924 	dec	sp
                           00074A  2925 	C$Squiggles.c$249$1$146 ==.
                           00074A  2926 	XG$Pick_Heading$0$0 ==.
      00074A 22               [24] 2927 	ret
                                   2928 ;------------------------------------------------------------
                                   2929 ;Allocation info for local variables in function 'Pick_Compass_Gain'
                                   2930 ;------------------------------------------------------------
                                   2931 ;user_gain                 Allocated to registers r6 r7 
                                   2932 ;------------------------------------------------------------
                           00074B  2933 	G$Pick_Compass_Gain$0$0 ==.
                           00074B  2934 	C$Squiggles.c$252$1$146 ==.
                                   2935 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:252: void Pick_Compass_Gain(void)
                                   2936 ;	-----------------------------------------
                                   2937 ;	 function Pick_Compass_Gain
                                   2938 ;	-----------------------------------------
      00074B                       2939 _Pick_Compass_Gain:
                           00074B  2940 	C$Squiggles.c$255$1$150 ==.
                                   2941 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:255: lcd_clear();
      00074B 12r00rE1         [24] 2942 	lcall	_lcd_clear
                           00074E  2943 	C$Squiggles.c$256$1$150 ==.
                                   2944 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:256: lcd_print("\rEnter desired gain for the compass.\n");
      00074E 74rAA            [12] 2945 	mov	a,#___str_8
      000750 C0 E0            [24] 2946 	push	acc
      000752 74s00            [12] 2947 	mov	a,#(___str_8 >> 8)
      000754 C0 E0            [24] 2948 	push	acc
      000756 74 80            [12] 2949 	mov	a,#0x80
      000758 C0 E0            [24] 2950 	push	acc
      00075A 12r00r5C         [24] 2951 	lcall	_lcd_print
      00075D 15 81            [12] 2952 	dec	sp
      00075F 15 81            [12] 2953 	dec	sp
      000761 15 81            [12] 2954 	dec	sp
                           000763  2955 	C$Squiggles.c$257$1$150 ==.
                                   2956 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:257: user_gain = kpd_input(1);
      000763 75 82 01         [24] 2957 	mov	dpl,#0x01
      000766 12r01r99         [24] 2958 	lcall	_kpd_input
      000769 AE 82            [24] 2959 	mov	r6,dpl
      00076B AF 83            [24] 2960 	mov	r7,dph
                           00076D  2961 	C$Squiggles.c$258$1$150 ==.
                                   2962 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:258: lcd_clear();
      00076D C0 07            [24] 2963 	push	ar7
      00076F C0 06            [24] 2964 	push	ar6
      000771 12r00rE1         [24] 2965 	lcall	_lcd_clear
      000774 D0 06            [24] 2966 	pop	ar6
      000776 D0 07            [24] 2967 	pop	ar7
                           000778  2968 	C$Squiggles.c$259$1$150 ==.
                                   2969 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:259: compass_gain = (float)((user_gain)/1000);
      000778 75*00 E8         [24] 2970 	mov	__divsint_PARM_2,#0xE8
      00077B 75*01 03         [24] 2971 	mov	(__divsint_PARM_2 + 1),#0x03
      00077E 8E 82            [24] 2972 	mov	dpl,r6
      000780 8F 83            [24] 2973 	mov	dph,r7
      000782 12r00r00         [24] 2974 	lcall	__divsint
      000785 12r00r00         [24] 2975 	lcall	___sint2fs
      000788 85 82*18         [24] 2976 	mov	_compass_gain,dpl
      00078B 85 83*19         [24] 2977 	mov	(_compass_gain + 1),dph
      00078E 85 F0*1A         [24] 2978 	mov	(_compass_gain + 2),b
      000791 F5*1B            [12] 2979 	mov	(_compass_gain + 3),a
                           000793  2980 	C$Squiggles.c$260$1$150 ==.
                                   2981 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:260: printf("\rPick_Compass_Gain verified\n");
      000793 74rD0            [12] 2982 	mov	a,#___str_9
      000795 C0 E0            [24] 2983 	push	acc
      000797 74s00            [12] 2984 	mov	a,#(___str_9 >> 8)
      000799 C0 E0            [24] 2985 	push	acc
      00079B 74 80            [12] 2986 	mov	a,#0x80
      00079D C0 E0            [24] 2987 	push	acc
      00079F 12r00r00         [24] 2988 	lcall	_printf
      0007A2 15 81            [12] 2989 	dec	sp
      0007A4 15 81            [12] 2990 	dec	sp
      0007A6 15 81            [12] 2991 	dec	sp
                           0007A8  2992 	C$Squiggles.c$261$1$150 ==.
                           0007A8  2993 	XG$Pick_Compass_Gain$0$0 ==.
      0007A8 22               [24] 2994 	ret
                                   2995 ;------------------------------------------------------------
                                   2996 ;Allocation info for local variables in function 'read_compass'
                                   2997 ;------------------------------------------------------------
                                   2998 ;addr                      Allocated to registers 
                                   2999 ;Data                      Allocated with name '_read_compass_Data_1_152'
                                   3000 ;read_heading              Allocated to registers 
                                   3001 ;------------------------------------------------------------
                           0007A9  3002 	G$read_compass$0$0 ==.
                           0007A9  3003 	C$Squiggles.c$265$1$150 ==.
                                   3004 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:265: int read_compass(void)
                                   3005 ;	-----------------------------------------
                                   3006 ;	 function read_compass
                                   3007 ;	-----------------------------------------
      0007A9                       3008 _read_compass:
                           0007A9  3009 	C$Squiggles.c$270$1$152 ==.
                                   3010 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:270: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0007A9 75*0Br30         [24] 3011 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_152
      0007AC 75*0C 00         [24] 3012 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007AF 75*0D 40         [24] 3013 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007B2 75*0A 02         [24] 3014 	mov	_i2c_read_data_PARM_2,#0x02
      0007B5 75*0E 02         [24] 3015 	mov	_i2c_read_data_PARM_4,#0x02
      0007B8 75 82 C0         [24] 3016 	mov	dpl,#0xC0
      0007BB 12r03rE8         [24] 3017 	lcall	_i2c_read_data
                           0007BE  3018 	C$Squiggles.c$271$1$152 ==.
                                   3019 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:271: read_heading =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0007BE AF*30            [24] 3020 	mov	r7,_read_compass_Data_1_152
      0007C0 7E 00            [12] 3021 	mov	r6,#0x00
      0007C2 AC*31            [24] 3022 	mov	r4,(_read_compass_Data_1_152 + 0x0001)
      0007C4 7D 00            [12] 3023 	mov	r5,#0x00
      0007C6 EC               [12] 3024 	mov	a,r4
      0007C7 4E               [12] 3025 	orl	a,r6
      0007C8 F5 82            [12] 3026 	mov	dpl,a
      0007CA ED               [12] 3027 	mov	a,r5
      0007CB 4F               [12] 3028 	orl	a,r7
      0007CC F5 83            [12] 3029 	mov	dph,a
                           0007CE  3030 	C$Squiggles.c$272$1$152 ==.
                                   3031 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:272: return read_heading; // the heading returned in degrees between 0 and 3599
                           0007CE  3032 	C$Squiggles.c$273$1$152 ==.
                           0007CE  3033 	XG$read_compass$0$0 ==.
      0007CE 22               [24] 3034 	ret
                                   3035 ;------------------------------------------------------------
                                   3036 ;Allocation info for local variables in function 'read_ranger'
                                   3037 ;------------------------------------------------------------
                                   3038 ;addr                      Allocated to registers 
                                   3039 ;st_range                  Allocated to registers r6 r7 
                                   3040 ;------------------------------------------------------------
                           0007CF  3041 	G$read_ranger$0$0 ==.
                           0007CF  3042 	C$Squiggles.c$277$1$152 ==.
                                   3043 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:277: int read_ranger(void)
                                   3044 ;	-----------------------------------------
                                   3045 ;	 function read_ranger
                                   3046 ;	-----------------------------------------
      0007CF                       3047 _read_ranger:
                           0007CF  3048 	C$Squiggles.c$281$1$154 ==.
                                   3049 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:281: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0007CF 75*0Br2E         [24] 3050 	mov	_i2c_read_data_PARM_3,#_Data
      0007D2 75*0C 00         [24] 3051 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007D5 75*0D 40         [24] 3052 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007D8 75*0A 02         [24] 3053 	mov	_i2c_read_data_PARM_2,#0x02
      0007DB 75*0E 02         [24] 3054 	mov	_i2c_read_data_PARM_4,#0x02
      0007DE 75 82 E0         [24] 3055 	mov	dpl,#0xE0
      0007E1 12r03rE8         [24] 3056 	lcall	_i2c_read_data
                           0007E4  3057 	C$Squiggles.c$282$1$154 ==.
                                   3058 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:282: st_range =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values
      0007E4 AF*2E            [24] 3059 	mov	r7,_Data
      0007E6 7E 00            [12] 3060 	mov	r6,#0x00
      0007E8 AC*2F            [24] 3061 	mov	r4,(_Data + 0x0001)
      0007EA 7D 00            [12] 3062 	mov	r5,#0x00
      0007EC EC               [12] 3063 	mov	a,r4
      0007ED 42 06            [12] 3064 	orl	ar6,a
      0007EF ED               [12] 3065 	mov	a,r5
      0007F0 42 07            [12] 3066 	orl	ar7,a
                           0007F2  3067 	C$Squiggles.c$284$1$154 ==.
                                   3068 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:284: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      0007F2 75*2E 51         [24] 3069 	mov	_Data,#0x51
                           0007F5  3070 	C$Squiggles.c$285$1$154 ==.
                                   3071 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:285: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      0007F5 75*06r2E         [24] 3072 	mov	_i2c_write_data_PARM_3,#_Data
      0007F8 75*07 00         [24] 3073 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0007FB 75*08 40         [24] 3074 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0007FE 75*05 00         [24] 3075 	mov	_i2c_write_data_PARM_2,#0x00
      000801 75*09 01         [24] 3076 	mov	_i2c_write_data_PARM_4,#0x01
      000804 75 82 E0         [24] 3077 	mov	dpl,#0xE0
      000807 C0 07            [24] 3078 	push	ar7
      000809 C0 06            [24] 3079 	push	ar6
      00080B 12r03r72         [24] 3080 	lcall	_i2c_write_data
      00080E D0 06            [24] 3081 	pop	ar6
      000810 D0 07            [24] 3082 	pop	ar7
                           000812  3083 	C$Squiggles.c$286$1$154 ==.
                                   3084 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:286: return st_range;
      000812 8E 82            [24] 3085 	mov	dpl,r6
      000814 8F 83            [24] 3086 	mov	dph,r7
                           000816  3087 	C$Squiggles.c$287$1$154 ==.
                           000816  3088 	XG$read_ranger$0$0 ==.
      000816 22               [24] 3089 	ret
                                   3090 ;------------------------------------------------------------
                                   3091 ;Allocation info for local variables in function 'set_range_adj'
                                   3092 ;------------------------------------------------------------
                           000817  3093 	G$set_range_adj$0$0 ==.
                           000817  3094 	C$Squiggles.c$291$1$154 ==.
                                   3095 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:291: void set_range_adj(void)
                                   3096 ;	-----------------------------------------
                                   3097 ;	 function set_range_adj
                                   3098 ;	-----------------------------------------
      000817                       3099 _set_range_adj:
                           000817  3100 	C$Squiggles.c$296$1$156 ==.
                                   3101 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:296: if (range > MAX_RANGE)
      000817 C3               [12] 3102 	clr	c
      000818 74 3C            [12] 3103 	mov	a,#0x3C
      00081A 95*23            [12] 3104 	subb	a,_range
      00081C E4               [12] 3105 	clr	a
      00081D 95*24            [12] 3106 	subb	a,(_range + 1)
      00081F 50 07            [24] 3107 	jnc	00102$
                           000821  3108 	C$Squiggles.c$299$2$157 ==.
                                   3109 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:299: range_adj = 0; //no obstacle in range, no change
      000821 E4               [12] 3110 	clr	a
      000822 F5*27            [12] 3111 	mov	_range_adj,a
      000824 F5*28            [12] 3112 	mov	(_range_adj + 1),a
      000826 80 1F            [24] 3113 	sjmp	00104$
      000828                       3114 00102$:
                           000828  3115 	C$Squiggles.c$304$2$158 ==.
                                   3116 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:304: range_adj = (int)(ranger_gain * (MAX_RANGE - range)); //find adjustment
      000828 74 3C            [12] 3117 	mov	a,#0x3C
      00082A C3               [12] 3118 	clr	c
      00082B 95*23            [12] 3119 	subb	a,_range
      00082D F5*00            [12] 3120 	mov	__mulint_PARM_2,a
      00082F E4               [12] 3121 	clr	a
      000830 95*24            [12] 3122 	subb	a,(_range + 1)
      000832 F5*01            [12] 3123 	mov	(__mulint_PARM_2 + 1),a
      000834 AE*2B            [24] 3124 	mov	r6,_ranger_gain
      000836 7F 00            [12] 3125 	mov	r7,#0x00
      000838 8E 82            [24] 3126 	mov	dpl,r6
      00083A 8F 83            [24] 3127 	mov	dph,r7
      00083C 12r00r00         [24] 3128 	lcall	__mulint
      00083F AE 82            [24] 3129 	mov	r6,dpl
      000841 AF 83            [24] 3130 	mov	r7,dph
      000843 8E*27            [24] 3131 	mov	_range_adj,r6
      000845 8F*28            [24] 3132 	mov	(_range_adj + 1),r7
      000847                       3133 00104$:
                           000847  3134 	C$Squiggles.c$306$1$156 ==.
                           000847  3135 	XG$set_range_adj$0$0 ==.
      000847 22               [24] 3136 	ret
                                   3137 ;------------------------------------------------------------
                                   3138 ;Allocation info for local variables in function 'set_COMPASS_PW'
                                   3139 ;------------------------------------------------------------
                                   3140 ;Error                     Allocated to registers r6 r7 
                                   3141 ;------------------------------------------------------------
                           000848  3142 	G$set_COMPASS_PW$0$0 ==.
                           000848  3143 	C$Squiggles.c$368$1$156 ==.
                                   3144 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:368: void set_COMPASS_PW(void)
                                   3145 ;	-----------------------------------------
                                   3146 ;	 function set_COMPASS_PW
                                   3147 ;	-----------------------------------------
      000848                       3148 _set_COMPASS_PW:
                           000848  3149 	C$Squiggles.c$372$1$160 ==.
                                   3150 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:372: Error = (desired_heading) - heading;	//Calculate the error
      000848 E5*16            [12] 3151 	mov	a,_desired_heading
      00084A C3               [12] 3152 	clr	c
      00084B 95*21            [12] 3153 	subb	a,_heading
      00084D FE               [12] 3154 	mov	r6,a
      00084E E5*17            [12] 3155 	mov	a,(_desired_heading + 1)
      000850 95*22            [12] 3156 	subb	a,(_heading + 1)
      000852 FF               [12] 3157 	mov	r7,a
                           000853  3158 	C$Squiggles.c$378$1$160 ==.
                                   3159 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:378: if(Error < -1800) Error = Error + 3600;
      000853 C3               [12] 3160 	clr	c
      000854 EE               [12] 3161 	mov	a,r6
      000855 94 F8            [12] 3162 	subb	a,#0xF8
      000857 EF               [12] 3163 	mov	a,r7
      000858 64 80            [12] 3164 	xrl	a,#0x80
      00085A 94 78            [12] 3165 	subb	a,#0x78
      00085C 50 08            [24] 3166 	jnc	00102$
      00085E 74 10            [12] 3167 	mov	a,#0x10
      000860 2E               [12] 3168 	add	a,r6
      000861 FE               [12] 3169 	mov	r6,a
      000862 74 0E            [12] 3170 	mov	a,#0x0E
      000864 3F               [12] 3171 	addc	a,r7
      000865 FF               [12] 3172 	mov	r7,a
      000866                       3173 00102$:
                           000866  3174 	C$Squiggles.c$379$1$160 ==.
                                   3175 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:379: if(Error > 1800) Error = Error - 3600;
      000866 C3               [12] 3176 	clr	c
      000867 74 08            [12] 3177 	mov	a,#0x08
      000869 9E               [12] 3178 	subb	a,r6
      00086A 74 87            [12] 3179 	mov	a,#(0x07 ^ 0x80)
      00086C 8F F0            [24] 3180 	mov	b,r7
      00086E 63 F0 80         [24] 3181 	xrl	b,#0x80
      000871 95 F0            [12] 3182 	subb	a,b
      000873 50 08            [24] 3183 	jnc	00104$
      000875 EE               [12] 3184 	mov	a,r6
      000876 24 F0            [12] 3185 	add	a,#0xF0
      000878 FE               [12] 3186 	mov	r6,a
      000879 EF               [12] 3187 	mov	a,r7
      00087A 34 F1            [12] 3188 	addc	a,#0xF1
      00087C FF               [12] 3189 	mov	r7,a
      00087D                       3190 00104$:
                           00087D  3191 	C$Squiggles.c$381$1$160 ==.
                                   3192 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:381: if (range > MAX_RANGE) { range_adj = 0; } //no obstacle in range, no change
      00087D C3               [12] 3193 	clr	c
      00087E 74 3C            [12] 3194 	mov	a,#0x3C
      000880 95*23            [12] 3195 	subb	a,_range
      000882 E4               [12] 3196 	clr	a
      000883 95*24            [12] 3197 	subb	a,(_range + 1)
      000885 50 07            [24] 3198 	jnc	00106$
      000887 E4               [12] 3199 	clr	a
      000888 F5*27            [12] 3200 	mov	_range_adj,a
      00088A F5*28            [12] 3201 	mov	(_range_adj + 1),a
      00088C 80 27            [24] 3202 	sjmp	00107$
      00088E                       3203 00106$:
                           00088E  3204 	C$Squiggles.c$382$2$162 ==.
                                   3205 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:382: else { range_adj = (int)(ranger_gain * (MAX_RANGE - range)); } //find adjustment
      00088E 74 3C            [12] 3206 	mov	a,#0x3C
      000890 C3               [12] 3207 	clr	c
      000891 95*23            [12] 3208 	subb	a,_range
      000893 F5*00            [12] 3209 	mov	__mulint_PARM_2,a
      000895 E4               [12] 3210 	clr	a
      000896 95*24            [12] 3211 	subb	a,(_range + 1)
      000898 F5*01            [12] 3212 	mov	(__mulint_PARM_2 + 1),a
      00089A AC*2B            [24] 3213 	mov	r4,_ranger_gain
      00089C 7D 00            [12] 3214 	mov	r5,#0x00
      00089E 8C 82            [24] 3215 	mov	dpl,r4
      0008A0 8D 83            [24] 3216 	mov	dph,r5
      0008A2 C0 07            [24] 3217 	push	ar7
      0008A4 C0 06            [24] 3218 	push	ar6
      0008A6 12r00r00         [24] 3219 	lcall	__mulint
      0008A9 AC 82            [24] 3220 	mov	r4,dpl
      0008AB AD 83            [24] 3221 	mov	r5,dph
      0008AD D0 06            [24] 3222 	pop	ar6
      0008AF D0 07            [24] 3223 	pop	ar7
      0008B1 8C*27            [24] 3224 	mov	_range_adj,r4
      0008B3 8D*28            [24] 3225 	mov	(_range_adj + 1),r5
      0008B5                       3226 00107$:
                           0008B5  3227 	C$Squiggles.c$385$1$160 ==.
                                   3228 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:385: COMPASS_PW = COMPASS_CENTER + range_adj + (compass_gain*Error);
      0008B5 74 C8            [12] 3229 	mov	a,#0xC8
      0008B7 25*27            [12] 3230 	add	a,_range_adj
      0008B9 FC               [12] 3231 	mov	r4,a
      0008BA 74 0A            [12] 3232 	mov	a,#0x0A
      0008BC 35*28            [12] 3233 	addc	a,(_range_adj + 1)
      0008BE FD               [12] 3234 	mov	r5,a
      0008BF 8E 82            [24] 3235 	mov	dpl,r6
      0008C1 8F 83            [24] 3236 	mov	dph,r7
      0008C3 C0 05            [24] 3237 	push	ar5
      0008C5 C0 04            [24] 3238 	push	ar4
      0008C7 12r00r00         [24] 3239 	lcall	___sint2fs
      0008CA AA 82            [24] 3240 	mov	r2,dpl
      0008CC AB 83            [24] 3241 	mov	r3,dph
      0008CE AE F0            [24] 3242 	mov	r6,b
      0008D0 FF               [12] 3243 	mov	r7,a
      0008D1 C0 02            [24] 3244 	push	ar2
      0008D3 C0 03            [24] 3245 	push	ar3
      0008D5 C0 06            [24] 3246 	push	ar6
      0008D7 C0 07            [24] 3247 	push	ar7
      0008D9 85*18 82         [24] 3248 	mov	dpl,_compass_gain
      0008DC 85*19 83         [24] 3249 	mov	dph,(_compass_gain + 1)
      0008DF 85*1A F0         [24] 3250 	mov	b,(_compass_gain + 2)
      0008E2 E5*1B            [12] 3251 	mov	a,(_compass_gain + 3)
      0008E4 12r00r00         [24] 3252 	lcall	___fsmul
      0008E7 AA 82            [24] 3253 	mov	r2,dpl
      0008E9 AB 83            [24] 3254 	mov	r3,dph
      0008EB AE F0            [24] 3255 	mov	r6,b
      0008ED FF               [12] 3256 	mov	r7,a
      0008EE E5 81            [12] 3257 	mov	a,sp
      0008F0 24 FC            [12] 3258 	add	a,#0xfc
      0008F2 F5 81            [12] 3259 	mov	sp,a
      0008F4 D0 04            [24] 3260 	pop	ar4
      0008F6 D0 05            [24] 3261 	pop	ar5
      0008F8 8C 82            [24] 3262 	mov	dpl,r4
      0008FA 8D 83            [24] 3263 	mov	dph,r5
      0008FC C0 07            [24] 3264 	push	ar7
      0008FE C0 06            [24] 3265 	push	ar6
      000900 C0 03            [24] 3266 	push	ar3
      000902 C0 02            [24] 3267 	push	ar2
      000904 12r00r00         [24] 3268 	lcall	___uint2fs
      000907 A8 82            [24] 3269 	mov	r0,dpl
      000909 A9 83            [24] 3270 	mov	r1,dph
      00090B AC F0            [24] 3271 	mov	r4,b
      00090D FD               [12] 3272 	mov	r5,a
      00090E D0 02            [24] 3273 	pop	ar2
      000910 D0 03            [24] 3274 	pop	ar3
      000912 D0 06            [24] 3275 	pop	ar6
      000914 D0 07            [24] 3276 	pop	ar7
      000916 C0 02            [24] 3277 	push	ar2
      000918 C0 03            [24] 3278 	push	ar3
      00091A C0 06            [24] 3279 	push	ar6
      00091C C0 07            [24] 3280 	push	ar7
      00091E 88 82            [24] 3281 	mov	dpl,r0
      000920 89 83            [24] 3282 	mov	dph,r1
      000922 8C F0            [24] 3283 	mov	b,r4
      000924 ED               [12] 3284 	mov	a,r5
      000925 12r00r00         [24] 3285 	lcall	___fsadd
      000928 AC 82            [24] 3286 	mov	r4,dpl
      00092A AD 83            [24] 3287 	mov	r5,dph
      00092C AE F0            [24] 3288 	mov	r6,b
      00092E FF               [12] 3289 	mov	r7,a
      00092F E5 81            [12] 3290 	mov	a,sp
      000931 24 FC            [12] 3291 	add	a,#0xfc
      000933 F5 81            [12] 3292 	mov	sp,a
      000935 8C 82            [24] 3293 	mov	dpl,r4
      000937 8D 83            [24] 3294 	mov	dph,r5
      000939 8E F0            [24] 3295 	mov	b,r6
      00093B EF               [12] 3296 	mov	a,r7
      00093C 12r00r00         [24] 3297 	lcall	___fs2uint
      00093F 85 82*25         [24] 3298 	mov	_COMPASS_PW,dpl
      000942 85 83*26         [24] 3299 	mov	(_COMPASS_PW + 1),dph
                           000945  3300 	C$Squiggles.c$387$1$160 ==.
                                   3301 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:387: if(COMPASS_PW < COMPASS_MIN)
      000945 C3               [12] 3302 	clr	c
      000946 E5*25            [12] 3303 	mov	a,_COMPASS_PW
      000948 94 EE            [12] 3304 	subb	a,#0xEE
      00094A E5*26            [12] 3305 	mov	a,(_COMPASS_PW + 1)
      00094C 94 07            [12] 3306 	subb	a,#0x07
      00094E 50 06            [24] 3307 	jnc	00109$
                           000950  3308 	C$Squiggles.c$389$2$163 ==.
                                   3309 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:389: COMPASS_PW = COMPASS_MIN;
      000950 75*25 EE         [24] 3310 	mov	_COMPASS_PW,#0xEE
      000953 75*26 07         [24] 3311 	mov	(_COMPASS_PW + 1),#0x07
      000956                       3312 00109$:
                           000956  3313 	C$Squiggles.c$391$1$160 ==.
                                   3314 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:391: if(COMPASS_PW > COMPASS_MAX)
      000956 C3               [12] 3315 	clr	c
      000957 74 AC            [12] 3316 	mov	a,#0xAC
      000959 95*25            [12] 3317 	subb	a,_COMPASS_PW
      00095B 74 0D            [12] 3318 	mov	a,#0x0D
      00095D 95*26            [12] 3319 	subb	a,(_COMPASS_PW + 1)
      00095F 50 06            [24] 3320 	jnc	00112$
                           000961  3321 	C$Squiggles.c$393$2$164 ==.
                                   3322 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:393: COMPASS_PW = COMPASS_MAX;
      000961 75*25 AC         [24] 3323 	mov	_COMPASS_PW,#0xAC
      000964 75*26 0D         [24] 3324 	mov	(_COMPASS_PW + 1),#0x0D
      000967                       3325 00112$:
                           000967  3326 	C$Squiggles.c$402$1$160 ==.
                           000967  3327 	XG$set_COMPASS_PW$0$0 ==.
      000967 22               [24] 3328 	ret
                                   3329 	.area CSEG    (CODE)
                                   3330 	.area CONST   (CODE)
                           000000  3331 FSquiggles$__str_0$0$0 == .
      000000                       3332 ___str_0:
      000000 0A                    3333 	.db 0x0A
      000001 54 79 70 65 20 64 69  3334 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3335 	.db 0x00
                           000016  3336 FSquiggles$__str_1$0$0 == .
      000016                       3337 ___str_1:
      000016 20 20 20 20 20 25 63  3338 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3339 	.db 0x00
                           000026  3340 FSquiggles$__str_2$0$0 == .
      000026                       3341 ___str_2:
      000026 25 63                 3342 	.ascii "%c"
      000028 00                    3343 	.db 0x00
                           000029  3344 FSquiggles$__str_3$0$0 == .
      000029                       3345 ___str_3:
      000029 0A                    3346 	.db 0x0A
      00002A 53 74 61 72 74        3347 	.ascii "Start"
      00002F 0D                    3348 	.db 0x0D
      000030 0A                    3349 	.db 0x0A
      000031 00                    3350 	.db 0x00
                           000032  3351 FSquiggles$__str_4$0$0 == .
      000032                       3352 ___str_4:
      000032 0A                    3353 	.db 0x0A
      000033 0D                    3354 	.db 0x0D
      000034 2D 2D 2D 2D 2D 2D 2D  3355 	.ascii "------------DATA COLLECTION------------"
             2D 2D 2D 2D 2D 44 41
             54 41 20 43 4F 4C 4C
             45 43 54 49 4F 4E 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      00005B 0A                    3356 	.db 0x0A
      00005C 00                    3357 	.db 0x00
                           00005D  3358 FSquiggles$__str_5$0$0 == .
      00005D                       3359 ___str_5:
      00005D 0D                    3360 	.db 0x0D
      00005E 52 61 6E 67 65 3A 20  3361 	.ascii "Range: %u"
             25 75
      000067 0A                    3362 	.db 0x0A
      000068 00                    3363 	.db 0x00
                           000069  3364 FSquiggles$__str_6$0$0 == .
      000069                       3365 ___str_6:
      000069 0D                    3366 	.db 0x0D
      00006A 45 6E 74 65 72 20 64  3367 	.ascii "Enter desired heading for the compass."
             65 73 69 72 65 64 20
             68 65 61 64 69 6E 67
             20 66 6F 72 20 74 68
             65 20 63 6F 6D 70 61
             73 73 2E
      000090 0A                    3368 	.db 0x0A
      000091 00                    3369 	.db 0x00
                           000092  3370 FSquiggles$__str_7$0$0 == .
      000092                       3371 ___str_7:
      000092 0D                    3372 	.db 0x0D
      000093 50 69 63 6B 5F 48 65  3373 	.ascii "Pick_Heading verified"
             61 64 69 6E 67 20 76
             65 72 69 66 69 65 64
      0000A8 0A                    3374 	.db 0x0A
      0000A9 00                    3375 	.db 0x00
                           0000AA  3376 FSquiggles$__str_8$0$0 == .
      0000AA                       3377 ___str_8:
      0000AA 0D                    3378 	.db 0x0D
      0000AB 45 6E 74 65 72 20 64  3379 	.ascii "Enter desired gain for the compass."
             65 73 69 72 65 64 20
             67 61 69 6E 20 66 6F
             72 20 74 68 65 20 63
             6F 6D 70 61 73 73 2E
      0000CE 0A                    3380 	.db 0x0A
      0000CF 00                    3381 	.db 0x00
                           0000D0  3382 FSquiggles$__str_9$0$0 == .
      0000D0                       3383 ___str_9:
      0000D0 0D                    3384 	.db 0x0D
      0000D1 50 69 63 6B 5F 43 6F  3385 	.ascii "Pick_Compass_Gain verified"
             6D 70 61 73 73 5F 47
             61 69 6E 20 76 65 72
             69 66 69 65 64
      0000EB 0A                    3386 	.db 0x0A
      0000EC 00                    3387 	.db 0x00
                                   3388 	.area XINIT   (CODE)
                                   3389 	.area CABS    (ABS,CODE)
