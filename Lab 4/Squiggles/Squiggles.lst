                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Thu Apr 23 19:16:41 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Squiggles
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _Sys_Init
                                     16 	.globl _UART0_Init
                                     17 	.globl _SYSCLK_Init
                                     18 	.globl _printf_fast_f
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _RANGER_SWITCH
                                     22 	.globl _COMPASS_SWITCH
                                     23 	.globl _BUS_SCL
                                     24 	.globl _BUS_TOE
                                     25 	.globl _BUS_FTE
                                     26 	.globl _BUS_AA
                                     27 	.globl _BUS_INT
                                     28 	.globl _BUS_STOP
                                     29 	.globl _BUS_START
                                     30 	.globl _BUS_EN
                                     31 	.globl _BUS_BUSY
                                     32 	.globl _SPIF
                                     33 	.globl _WCOL
                                     34 	.globl _MODF
                                     35 	.globl _RXOVRN
                                     36 	.globl _TXBSY
                                     37 	.globl _SLVSEL
                                     38 	.globl _MSTEN
                                     39 	.globl _SPIEN
                                     40 	.globl _AD0EN
                                     41 	.globl _ADCEN
                                     42 	.globl _AD0TM
                                     43 	.globl _ADCTM
                                     44 	.globl _AD0INT
                                     45 	.globl _ADCINT
                                     46 	.globl _AD0BUSY
                                     47 	.globl _ADBUSY
                                     48 	.globl _AD0CM1
                                     49 	.globl _ADSTM1
                                     50 	.globl _AD0CM0
                                     51 	.globl _ADSTM0
                                     52 	.globl _AD0WINT
                                     53 	.globl _ADWINT
                                     54 	.globl _AD0LJST
                                     55 	.globl _ADLJST
                                     56 	.globl _CF
                                     57 	.globl _CR
                                     58 	.globl _CCF4
                                     59 	.globl _CCF3
                                     60 	.globl _CCF2
                                     61 	.globl _CCF1
                                     62 	.globl _CCF0
                                     63 	.globl _CY
                                     64 	.globl _AC
                                     65 	.globl _F0
                                     66 	.globl _RS1
                                     67 	.globl _RS0
                                     68 	.globl _OV
                                     69 	.globl _F1
                                     70 	.globl _P
                                     71 	.globl _TF2
                                     72 	.globl _EXF2
                                     73 	.globl _RCLK
                                     74 	.globl _TCLK
                                     75 	.globl _EXEN2
                                     76 	.globl _TR2
                                     77 	.globl _CT2
                                     78 	.globl _CPRL2
                                     79 	.globl _BUSY
                                     80 	.globl _ENSMB
                                     81 	.globl _STA
                                     82 	.globl _STO
                                     83 	.globl _SI
                                     84 	.globl _AA
                                     85 	.globl _SMBFTE
                                     86 	.globl _SMBTOE
                                     87 	.globl _PT2
                                     88 	.globl _PS
                                     89 	.globl _PS0
                                     90 	.globl _PT1
                                     91 	.globl _PX1
                                     92 	.globl _PT0
                                     93 	.globl _PX0
                                     94 	.globl _P3_7
                                     95 	.globl _P3_6
                                     96 	.globl _P3_5
                                     97 	.globl _P3_4
                                     98 	.globl _P3_3
                                     99 	.globl _P3_2
                                    100 	.globl _P3_1
                                    101 	.globl _P3_0
                                    102 	.globl _EA
                                    103 	.globl _ET2
                                    104 	.globl _ES
                                    105 	.globl _ES0
                                    106 	.globl _ET1
                                    107 	.globl _EX1
                                    108 	.globl _ET0
                                    109 	.globl _EX0
                                    110 	.globl _P2_7
                                    111 	.globl _P2_6
                                    112 	.globl _P2_5
                                    113 	.globl _P2_4
                                    114 	.globl _P2_3
                                    115 	.globl _P2_2
                                    116 	.globl _P2_1
                                    117 	.globl _P2_0
                                    118 	.globl _S0MODE
                                    119 	.globl _SM00
                                    120 	.globl _SM0
                                    121 	.globl _SM10
                                    122 	.globl _SM1
                                    123 	.globl _MCE0
                                    124 	.globl _SM20
                                    125 	.globl _SM2
                                    126 	.globl _REN0
                                    127 	.globl _REN
                                    128 	.globl _TB80
                                    129 	.globl _TB8
                                    130 	.globl _RB80
                                    131 	.globl _RB8
                                    132 	.globl _TI0
                                    133 	.globl _TI
                                    134 	.globl _RI0
                                    135 	.globl _RI
                                    136 	.globl _P1_7
                                    137 	.globl _P1_6
                                    138 	.globl _P1_5
                                    139 	.globl _P1_4
                                    140 	.globl _P1_3
                                    141 	.globl _P1_2
                                    142 	.globl _P1_1
                                    143 	.globl _P1_0
                                    144 	.globl _TF1
                                    145 	.globl _TR1
                                    146 	.globl _TF0
                                    147 	.globl _TR0
                                    148 	.globl _IE1
                                    149 	.globl _IT1
                                    150 	.globl _IE0
                                    151 	.globl _IT0
                                    152 	.globl _P0_7
                                    153 	.globl _P0_6
                                    154 	.globl _P0_5
                                    155 	.globl _P0_4
                                    156 	.globl _P0_3
                                    157 	.globl _P0_2
                                    158 	.globl _P0_1
                                    159 	.globl _P0_0
                                    160 	.globl _PCA0CP4
                                    161 	.globl _PCA0CP3
                                    162 	.globl _PCA0CP2
                                    163 	.globl _PCA0CP1
                                    164 	.globl _PCA0CP0
                                    165 	.globl _PCA0
                                    166 	.globl _DAC1
                                    167 	.globl _DAC0
                                    168 	.globl _ADC0LT
                                    169 	.globl _ADC0GT
                                    170 	.globl _ADC0
                                    171 	.globl _RCAP4
                                    172 	.globl _TMR4
                                    173 	.globl _TMR3RL
                                    174 	.globl _TMR3
                                    175 	.globl _RCAP2
                                    176 	.globl _TMR2
                                    177 	.globl _TMR1
                                    178 	.globl _TMR0
                                    179 	.globl _WDTCN
                                    180 	.globl _PCA0CPH4
                                    181 	.globl _PCA0CPH3
                                    182 	.globl _PCA0CPH2
                                    183 	.globl _PCA0CPH1
                                    184 	.globl _PCA0CPH0
                                    185 	.globl _PCA0H
                                    186 	.globl _SPI0CN
                                    187 	.globl _EIP2
                                    188 	.globl _EIP1
                                    189 	.globl _TH4
                                    190 	.globl _TL4
                                    191 	.globl _SADDR1
                                    192 	.globl _SBUF1
                                    193 	.globl _SCON1
                                    194 	.globl _B
                                    195 	.globl _RSTSRC
                                    196 	.globl _PCA0CPL4
                                    197 	.globl _PCA0CPL3
                                    198 	.globl _PCA0CPL2
                                    199 	.globl _PCA0CPL1
                                    200 	.globl _PCA0CPL0
                                    201 	.globl _PCA0L
                                    202 	.globl _ADC0CN
                                    203 	.globl _EIE2
                                    204 	.globl _EIE1
                                    205 	.globl _RCAP4H
                                    206 	.globl _RCAP4L
                                    207 	.globl _XBR2
                                    208 	.globl _XBR1
                                    209 	.globl _XBR0
                                    210 	.globl _ACC
                                    211 	.globl _PCA0CPM4
                                    212 	.globl _PCA0CPM3
                                    213 	.globl _PCA0CPM2
                                    214 	.globl _PCA0CPM1
                                    215 	.globl _PCA0CPM0
                                    216 	.globl _PCA0MD
                                    217 	.globl _PCA0CN
                                    218 	.globl _DAC1CN
                                    219 	.globl _DAC1H
                                    220 	.globl _DAC1L
                                    221 	.globl _DAC0CN
                                    222 	.globl _DAC0H
                                    223 	.globl _DAC0L
                                    224 	.globl _REF0CN
                                    225 	.globl _PSW
                                    226 	.globl _SMB0CR
                                    227 	.globl _TH2
                                    228 	.globl _TL2
                                    229 	.globl _RCAP2H
                                    230 	.globl _RCAP2L
                                    231 	.globl _T4CON
                                    232 	.globl _T2CON
                                    233 	.globl _ADC0LTH
                                    234 	.globl _ADC0LTL
                                    235 	.globl _ADC0GTH
                                    236 	.globl _ADC0GTL
                                    237 	.globl _SMB0ADR
                                    238 	.globl _SMB0DAT
                                    239 	.globl _SMB0STA
                                    240 	.globl _SMB0CN
                                    241 	.globl _ADC0H
                                    242 	.globl _ADC0L
                                    243 	.globl _P1MDIN
                                    244 	.globl _ADC0CF
                                    245 	.globl _AMX0SL
                                    246 	.globl _AMX0CF
                                    247 	.globl _SADEN0
                                    248 	.globl _IP
                                    249 	.globl _FLACL
                                    250 	.globl _FLSCL
                                    251 	.globl _P74OUT
                                    252 	.globl _OSCICN
                                    253 	.globl _OSCXCN
                                    254 	.globl _P3
                                    255 	.globl __XPAGE
                                    256 	.globl _EMI0CN
                                    257 	.globl _SADEN1
                                    258 	.globl _P3IF
                                    259 	.globl _AMX1SL
                                    260 	.globl _ADC1CF
                                    261 	.globl _ADC1CN
                                    262 	.globl _SADDR0
                                    263 	.globl _IE
                                    264 	.globl _P3MDOUT
                                    265 	.globl _PRT3CF
                                    266 	.globl _P2MDOUT
                                    267 	.globl _PRT2CF
                                    268 	.globl _P1MDOUT
                                    269 	.globl _PRT1CF
                                    270 	.globl _P0MDOUT
                                    271 	.globl _PRT0CF
                                    272 	.globl _EMI0CF
                                    273 	.globl _EMI0TC
                                    274 	.globl _P2
                                    275 	.globl _CPT1CN
                                    276 	.globl _CPT0CN
                                    277 	.globl _SPI0CKR
                                    278 	.globl _ADC1
                                    279 	.globl _SPI0DAT
                                    280 	.globl _SPI0CFG
                                    281 	.globl _SBUF0
                                    282 	.globl _SBUF
                                    283 	.globl _SCON0
                                    284 	.globl _SCON
                                    285 	.globl _P7
                                    286 	.globl _TMR3H
                                    287 	.globl _TMR3L
                                    288 	.globl _TMR3RLH
                                    289 	.globl _TMR3RLL
                                    290 	.globl _TMR3CN
                                    291 	.globl _P1
                                    292 	.globl _PSCTL
                                    293 	.globl _CKCON
                                    294 	.globl _TH1
                                    295 	.globl _TH0
                                    296 	.globl _TL1
                                    297 	.globl _TL0
                                    298 	.globl _TMOD
                                    299 	.globl _TCON
                                    300 	.globl _PCON
                                    301 	.globl _P6
                                    302 	.globl _P5
                                    303 	.globl _P4
                                    304 	.globl _DPH
                                    305 	.globl _DPL
                                    306 	.globl _SP
                                    307 	.globl _P0
                                    308 	.globl _Update_Value_PARM_4
                                    309 	.globl _Update_Value_PARM_3
                                    310 	.globl _Update_Value_PARM_2
                                    311 	.globl _Error
                                    312 	.globl _print_delay
                                    313 	.globl _Data
                                    314 	.globl _voltage
                                    315 	.globl _AD_Result
                                    316 	.globl _ranger_gain
                                    317 	.globl _compass_adj
                                    318 	.globl _range_adj
                                    319 	.globl _COMPASS_PW
                                    320 	.globl _range
                                    321 	.globl _heading
                                    322 	.globl _new_range
                                    323 	.globl _new_heading
                                    324 	.globl _delay
                                    325 	.globl _r_count
                                    326 	.globl _h_count
                                    327 	.globl _compass_gain
                                    328 	.globl _desired_heading
                                    329 	.globl _nCounts
                                    330 	.globl _Counts
                                    331 	.globl _i2c_read_data_PARM_4
                                    332 	.globl _i2c_read_data_PARM_3
                                    333 	.globl _i2c_read_data_PARM_2
                                    334 	.globl _i2c_write_data_PARM_4
                                    335 	.globl _i2c_write_data_PARM_3
                                    336 	.globl _i2c_write_data_PARM_2
                                    337 	.globl _putchar
                                    338 	.globl _getchar
                                    339 	.globl _lcd_print
                                    340 	.globl _lcd_clear
                                    341 	.globl _kpd_input
                                    342 	.globl _delay_time
                                    343 	.globl _i2c_start
                                    344 	.globl _i2c_write
                                    345 	.globl _i2c_write_and_stop
                                    346 	.globl _i2c_read
                                    347 	.globl _i2c_read_and_stop
                                    348 	.globl _i2c_write_data
                                    349 	.globl _i2c_read_data
                                    350 	.globl _Accel_Init
                                    351 	.globl _Port_Init
                                    352 	.globl _Interrupt_Init
                                    353 	.globl _PCA_Init
                                    354 	.globl _SMB0_Init
                                    355 	.globl _PCA_ISR
                                    356 	.globl _ADC_Init
                                    357 	.globl _read_AD_input
                                    358 	.globl _Pick_Heading
                                    359 	.globl _Pick_Compass_Gain
                                    360 	.globl _read_compass
                                    361 	.globl _read_ranger
                                    362 	.globl _Update_Value
                                    363 	.globl _set_COMPASS_PW
                                    364 ;--------------------------------------------------------
                                    365 ; special function registers
                                    366 ;--------------------------------------------------------
                                    367 	.area RSEG    (ABS,DATA)
      000000                        368 	.org 0x0000
                           000080   369 G$P0$0$0 == 0x0080
                           000080   370 _P0	=	0x0080
                           000081   371 G$SP$0$0 == 0x0081
                           000081   372 _SP	=	0x0081
                           000082   373 G$DPL$0$0 == 0x0082
                           000082   374 _DPL	=	0x0082
                           000083   375 G$DPH$0$0 == 0x0083
                           000083   376 _DPH	=	0x0083
                           000084   377 G$P4$0$0 == 0x0084
                           000084   378 _P4	=	0x0084
                           000085   379 G$P5$0$0 == 0x0085
                           000085   380 _P5	=	0x0085
                           000086   381 G$P6$0$0 == 0x0086
                           000086   382 _P6	=	0x0086
                           000087   383 G$PCON$0$0 == 0x0087
                           000087   384 _PCON	=	0x0087
                           000088   385 G$TCON$0$0 == 0x0088
                           000088   386 _TCON	=	0x0088
                           000089   387 G$TMOD$0$0 == 0x0089
                           000089   388 _TMOD	=	0x0089
                           00008A   389 G$TL0$0$0 == 0x008a
                           00008A   390 _TL0	=	0x008a
                           00008B   391 G$TL1$0$0 == 0x008b
                           00008B   392 _TL1	=	0x008b
                           00008C   393 G$TH0$0$0 == 0x008c
                           00008C   394 _TH0	=	0x008c
                           00008D   395 G$TH1$0$0 == 0x008d
                           00008D   396 _TH1	=	0x008d
                           00008E   397 G$CKCON$0$0 == 0x008e
                           00008E   398 _CKCON	=	0x008e
                           00008F   399 G$PSCTL$0$0 == 0x008f
                           00008F   400 _PSCTL	=	0x008f
                           000090   401 G$P1$0$0 == 0x0090
                           000090   402 _P1	=	0x0090
                           000091   403 G$TMR3CN$0$0 == 0x0091
                           000091   404 _TMR3CN	=	0x0091
                           000092   405 G$TMR3RLL$0$0 == 0x0092
                           000092   406 _TMR3RLL	=	0x0092
                           000093   407 G$TMR3RLH$0$0 == 0x0093
                           000093   408 _TMR3RLH	=	0x0093
                           000094   409 G$TMR3L$0$0 == 0x0094
                           000094   410 _TMR3L	=	0x0094
                           000095   411 G$TMR3H$0$0 == 0x0095
                           000095   412 _TMR3H	=	0x0095
                           000096   413 G$P7$0$0 == 0x0096
                           000096   414 _P7	=	0x0096
                           000098   415 G$SCON$0$0 == 0x0098
                           000098   416 _SCON	=	0x0098
                           000098   417 G$SCON0$0$0 == 0x0098
                           000098   418 _SCON0	=	0x0098
                           000099   419 G$SBUF$0$0 == 0x0099
                           000099   420 _SBUF	=	0x0099
                           000099   421 G$SBUF0$0$0 == 0x0099
                           000099   422 _SBUF0	=	0x0099
                           00009A   423 G$SPI0CFG$0$0 == 0x009a
                           00009A   424 _SPI0CFG	=	0x009a
                           00009B   425 G$SPI0DAT$0$0 == 0x009b
                           00009B   426 _SPI0DAT	=	0x009b
                           00009C   427 G$ADC1$0$0 == 0x009c
                           00009C   428 _ADC1	=	0x009c
                           00009D   429 G$SPI0CKR$0$0 == 0x009d
                           00009D   430 _SPI0CKR	=	0x009d
                           00009E   431 G$CPT0CN$0$0 == 0x009e
                           00009E   432 _CPT0CN	=	0x009e
                           00009F   433 G$CPT1CN$0$0 == 0x009f
                           00009F   434 _CPT1CN	=	0x009f
                           0000A0   435 G$P2$0$0 == 0x00a0
                           0000A0   436 _P2	=	0x00a0
                           0000A1   437 G$EMI0TC$0$0 == 0x00a1
                           0000A1   438 _EMI0TC	=	0x00a1
                           0000A3   439 G$EMI0CF$0$0 == 0x00a3
                           0000A3   440 _EMI0CF	=	0x00a3
                           0000A4   441 G$PRT0CF$0$0 == 0x00a4
                           0000A4   442 _PRT0CF	=	0x00a4
                           0000A4   443 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   444 _P0MDOUT	=	0x00a4
                           0000A5   445 G$PRT1CF$0$0 == 0x00a5
                           0000A5   446 _PRT1CF	=	0x00a5
                           0000A5   447 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   448 _P1MDOUT	=	0x00a5
                           0000A6   449 G$PRT2CF$0$0 == 0x00a6
                           0000A6   450 _PRT2CF	=	0x00a6
                           0000A6   451 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   452 _P2MDOUT	=	0x00a6
                           0000A7   453 G$PRT3CF$0$0 == 0x00a7
                           0000A7   454 _PRT3CF	=	0x00a7
                           0000A7   455 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   456 _P3MDOUT	=	0x00a7
                           0000A8   457 G$IE$0$0 == 0x00a8
                           0000A8   458 _IE	=	0x00a8
                           0000A9   459 G$SADDR0$0$0 == 0x00a9
                           0000A9   460 _SADDR0	=	0x00a9
                           0000AA   461 G$ADC1CN$0$0 == 0x00aa
                           0000AA   462 _ADC1CN	=	0x00aa
                           0000AB   463 G$ADC1CF$0$0 == 0x00ab
                           0000AB   464 _ADC1CF	=	0x00ab
                           0000AC   465 G$AMX1SL$0$0 == 0x00ac
                           0000AC   466 _AMX1SL	=	0x00ac
                           0000AD   467 G$P3IF$0$0 == 0x00ad
                           0000AD   468 _P3IF	=	0x00ad
                           0000AE   469 G$SADEN1$0$0 == 0x00ae
                           0000AE   470 _SADEN1	=	0x00ae
                           0000AF   471 G$EMI0CN$0$0 == 0x00af
                           0000AF   472 _EMI0CN	=	0x00af
                           0000AF   473 G$_XPAGE$0$0 == 0x00af
                           0000AF   474 __XPAGE	=	0x00af
                           0000B0   475 G$P3$0$0 == 0x00b0
                           0000B0   476 _P3	=	0x00b0
                           0000B1   477 G$OSCXCN$0$0 == 0x00b1
                           0000B1   478 _OSCXCN	=	0x00b1
                           0000B2   479 G$OSCICN$0$0 == 0x00b2
                           0000B2   480 _OSCICN	=	0x00b2
                           0000B5   481 G$P74OUT$0$0 == 0x00b5
                           0000B5   482 _P74OUT	=	0x00b5
                           0000B6   483 G$FLSCL$0$0 == 0x00b6
                           0000B6   484 _FLSCL	=	0x00b6
                           0000B7   485 G$FLACL$0$0 == 0x00b7
                           0000B7   486 _FLACL	=	0x00b7
                           0000B8   487 G$IP$0$0 == 0x00b8
                           0000B8   488 _IP	=	0x00b8
                           0000B9   489 G$SADEN0$0$0 == 0x00b9
                           0000B9   490 _SADEN0	=	0x00b9
                           0000BA   491 G$AMX0CF$0$0 == 0x00ba
                           0000BA   492 _AMX0CF	=	0x00ba
                           0000BB   493 G$AMX0SL$0$0 == 0x00bb
                           0000BB   494 _AMX0SL	=	0x00bb
                           0000BC   495 G$ADC0CF$0$0 == 0x00bc
                           0000BC   496 _ADC0CF	=	0x00bc
                           0000BD   497 G$P1MDIN$0$0 == 0x00bd
                           0000BD   498 _P1MDIN	=	0x00bd
                           0000BE   499 G$ADC0L$0$0 == 0x00be
                           0000BE   500 _ADC0L	=	0x00be
                           0000BF   501 G$ADC0H$0$0 == 0x00bf
                           0000BF   502 _ADC0H	=	0x00bf
                           0000C0   503 G$SMB0CN$0$0 == 0x00c0
                           0000C0   504 _SMB0CN	=	0x00c0
                           0000C1   505 G$SMB0STA$0$0 == 0x00c1
                           0000C1   506 _SMB0STA	=	0x00c1
                           0000C2   507 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   508 _SMB0DAT	=	0x00c2
                           0000C3   509 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   510 _SMB0ADR	=	0x00c3
                           0000C4   511 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   512 _ADC0GTL	=	0x00c4
                           0000C5   513 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   514 _ADC0GTH	=	0x00c5
                           0000C6   515 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   516 _ADC0LTL	=	0x00c6
                           0000C7   517 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   518 _ADC0LTH	=	0x00c7
                           0000C8   519 G$T2CON$0$0 == 0x00c8
                           0000C8   520 _T2CON	=	0x00c8
                           0000C9   521 G$T4CON$0$0 == 0x00c9
                           0000C9   522 _T4CON	=	0x00c9
                           0000CA   523 G$RCAP2L$0$0 == 0x00ca
                           0000CA   524 _RCAP2L	=	0x00ca
                           0000CB   525 G$RCAP2H$0$0 == 0x00cb
                           0000CB   526 _RCAP2H	=	0x00cb
                           0000CC   527 G$TL2$0$0 == 0x00cc
                           0000CC   528 _TL2	=	0x00cc
                           0000CD   529 G$TH2$0$0 == 0x00cd
                           0000CD   530 _TH2	=	0x00cd
                           0000CF   531 G$SMB0CR$0$0 == 0x00cf
                           0000CF   532 _SMB0CR	=	0x00cf
                           0000D0   533 G$PSW$0$0 == 0x00d0
                           0000D0   534 _PSW	=	0x00d0
                           0000D1   535 G$REF0CN$0$0 == 0x00d1
                           0000D1   536 _REF0CN	=	0x00d1
                           0000D2   537 G$DAC0L$0$0 == 0x00d2
                           0000D2   538 _DAC0L	=	0x00d2
                           0000D3   539 G$DAC0H$0$0 == 0x00d3
                           0000D3   540 _DAC0H	=	0x00d3
                           0000D4   541 G$DAC0CN$0$0 == 0x00d4
                           0000D4   542 _DAC0CN	=	0x00d4
                           0000D5   543 G$DAC1L$0$0 == 0x00d5
                           0000D5   544 _DAC1L	=	0x00d5
                           0000D6   545 G$DAC1H$0$0 == 0x00d6
                           0000D6   546 _DAC1H	=	0x00d6
                           0000D7   547 G$DAC1CN$0$0 == 0x00d7
                           0000D7   548 _DAC1CN	=	0x00d7
                           0000D8   549 G$PCA0CN$0$0 == 0x00d8
                           0000D8   550 _PCA0CN	=	0x00d8
                           0000D9   551 G$PCA0MD$0$0 == 0x00d9
                           0000D9   552 _PCA0MD	=	0x00d9
                           0000DA   553 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   554 _PCA0CPM0	=	0x00da
                           0000DB   555 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   556 _PCA0CPM1	=	0x00db
                           0000DC   557 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   558 _PCA0CPM2	=	0x00dc
                           0000DD   559 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   560 _PCA0CPM3	=	0x00dd
                           0000DE   561 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   562 _PCA0CPM4	=	0x00de
                           0000E0   563 G$ACC$0$0 == 0x00e0
                           0000E0   564 _ACC	=	0x00e0
                           0000E1   565 G$XBR0$0$0 == 0x00e1
                           0000E1   566 _XBR0	=	0x00e1
                           0000E2   567 G$XBR1$0$0 == 0x00e2
                           0000E2   568 _XBR1	=	0x00e2
                           0000E3   569 G$XBR2$0$0 == 0x00e3
                           0000E3   570 _XBR2	=	0x00e3
                           0000E4   571 G$RCAP4L$0$0 == 0x00e4
                           0000E4   572 _RCAP4L	=	0x00e4
                           0000E5   573 G$RCAP4H$0$0 == 0x00e5
                           0000E5   574 _RCAP4H	=	0x00e5
                           0000E6   575 G$EIE1$0$0 == 0x00e6
                           0000E6   576 _EIE1	=	0x00e6
                           0000E7   577 G$EIE2$0$0 == 0x00e7
                           0000E7   578 _EIE2	=	0x00e7
                           0000E8   579 G$ADC0CN$0$0 == 0x00e8
                           0000E8   580 _ADC0CN	=	0x00e8
                           0000E9   581 G$PCA0L$0$0 == 0x00e9
                           0000E9   582 _PCA0L	=	0x00e9
                           0000EA   583 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   584 _PCA0CPL0	=	0x00ea
                           0000EB   585 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   586 _PCA0CPL1	=	0x00eb
                           0000EC   587 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   588 _PCA0CPL2	=	0x00ec
                           0000ED   589 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   590 _PCA0CPL3	=	0x00ed
                           0000EE   591 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   592 _PCA0CPL4	=	0x00ee
                           0000EF   593 G$RSTSRC$0$0 == 0x00ef
                           0000EF   594 _RSTSRC	=	0x00ef
                           0000F0   595 G$B$0$0 == 0x00f0
                           0000F0   596 _B	=	0x00f0
                           0000F1   597 G$SCON1$0$0 == 0x00f1
                           0000F1   598 _SCON1	=	0x00f1
                           0000F2   599 G$SBUF1$0$0 == 0x00f2
                           0000F2   600 _SBUF1	=	0x00f2
                           0000F3   601 G$SADDR1$0$0 == 0x00f3
                           0000F3   602 _SADDR1	=	0x00f3
                           0000F4   603 G$TL4$0$0 == 0x00f4
                           0000F4   604 _TL4	=	0x00f4
                           0000F5   605 G$TH4$0$0 == 0x00f5
                           0000F5   606 _TH4	=	0x00f5
                           0000F6   607 G$EIP1$0$0 == 0x00f6
                           0000F6   608 _EIP1	=	0x00f6
                           0000F7   609 G$EIP2$0$0 == 0x00f7
                           0000F7   610 _EIP2	=	0x00f7
                           0000F8   611 G$SPI0CN$0$0 == 0x00f8
                           0000F8   612 _SPI0CN	=	0x00f8
                           0000F9   613 G$PCA0H$0$0 == 0x00f9
                           0000F9   614 _PCA0H	=	0x00f9
                           0000FA   615 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   616 _PCA0CPH0	=	0x00fa
                           0000FB   617 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   618 _PCA0CPH1	=	0x00fb
                           0000FC   619 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   620 _PCA0CPH2	=	0x00fc
                           0000FD   621 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   622 _PCA0CPH3	=	0x00fd
                           0000FE   623 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   624 _PCA0CPH4	=	0x00fe
                           0000FF   625 G$WDTCN$0$0 == 0x00ff
                           0000FF   626 _WDTCN	=	0x00ff
                           008C8A   627 G$TMR0$0$0 == 0x8c8a
                           008C8A   628 _TMR0	=	0x8c8a
                           008D8B   629 G$TMR1$0$0 == 0x8d8b
                           008D8B   630 _TMR1	=	0x8d8b
                           00CDCC   631 G$TMR2$0$0 == 0xcdcc
                           00CDCC   632 _TMR2	=	0xcdcc
                           00CBCA   633 G$RCAP2$0$0 == 0xcbca
                           00CBCA   634 _RCAP2	=	0xcbca
                           009594   635 G$TMR3$0$0 == 0x9594
                           009594   636 _TMR3	=	0x9594
                           009392   637 G$TMR3RL$0$0 == 0x9392
                           009392   638 _TMR3RL	=	0x9392
                           00F5F4   639 G$TMR4$0$0 == 0xf5f4
                           00F5F4   640 _TMR4	=	0xf5f4
                           00E5E4   641 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   642 _RCAP4	=	0xe5e4
                           00BFBE   643 G$ADC0$0$0 == 0xbfbe
                           00BFBE   644 _ADC0	=	0xbfbe
                           00C5C4   645 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   646 _ADC0GT	=	0xc5c4
                           00C7C6   647 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   648 _ADC0LT	=	0xc7c6
                           00D3D2   649 G$DAC0$0$0 == 0xd3d2
                           00D3D2   650 _DAC0	=	0xd3d2
                           00D6D5   651 G$DAC1$0$0 == 0xd6d5
                           00D6D5   652 _DAC1	=	0xd6d5
                           00F9E9   653 G$PCA0$0$0 == 0xf9e9
                           00F9E9   654 _PCA0	=	0xf9e9
                           00FAEA   655 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   656 _PCA0CP0	=	0xfaea
                           00FBEB   657 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   658 _PCA0CP1	=	0xfbeb
                           00FCEC   659 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   660 _PCA0CP2	=	0xfcec
                           00FDED   661 G$PCA0CP3$0$0 == 0xfded
                           00FDED   662 _PCA0CP3	=	0xfded
                           00FEEE   663 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   664 _PCA0CP4	=	0xfeee
                                    665 ;--------------------------------------------------------
                                    666 ; special function bits
                                    667 ;--------------------------------------------------------
                                    668 	.area RSEG    (ABS,DATA)
      000000                        669 	.org 0x0000
                           000080   670 G$P0_0$0$0 == 0x0080
                           000080   671 _P0_0	=	0x0080
                           000081   672 G$P0_1$0$0 == 0x0081
                           000081   673 _P0_1	=	0x0081
                           000082   674 G$P0_2$0$0 == 0x0082
                           000082   675 _P0_2	=	0x0082
                           000083   676 G$P0_3$0$0 == 0x0083
                           000083   677 _P0_3	=	0x0083
                           000084   678 G$P0_4$0$0 == 0x0084
                           000084   679 _P0_4	=	0x0084
                           000085   680 G$P0_5$0$0 == 0x0085
                           000085   681 _P0_5	=	0x0085
                           000086   682 G$P0_6$0$0 == 0x0086
                           000086   683 _P0_6	=	0x0086
                           000087   684 G$P0_7$0$0 == 0x0087
                           000087   685 _P0_7	=	0x0087
                           000088   686 G$IT0$0$0 == 0x0088
                           000088   687 _IT0	=	0x0088
                           000089   688 G$IE0$0$0 == 0x0089
                           000089   689 _IE0	=	0x0089
                           00008A   690 G$IT1$0$0 == 0x008a
                           00008A   691 _IT1	=	0x008a
                           00008B   692 G$IE1$0$0 == 0x008b
                           00008B   693 _IE1	=	0x008b
                           00008C   694 G$TR0$0$0 == 0x008c
                           00008C   695 _TR0	=	0x008c
                           00008D   696 G$TF0$0$0 == 0x008d
                           00008D   697 _TF0	=	0x008d
                           00008E   698 G$TR1$0$0 == 0x008e
                           00008E   699 _TR1	=	0x008e
                           00008F   700 G$TF1$0$0 == 0x008f
                           00008F   701 _TF1	=	0x008f
                           000090   702 G$P1_0$0$0 == 0x0090
                           000090   703 _P1_0	=	0x0090
                           000091   704 G$P1_1$0$0 == 0x0091
                           000091   705 _P1_1	=	0x0091
                           000092   706 G$P1_2$0$0 == 0x0092
                           000092   707 _P1_2	=	0x0092
                           000093   708 G$P1_3$0$0 == 0x0093
                           000093   709 _P1_3	=	0x0093
                           000094   710 G$P1_4$0$0 == 0x0094
                           000094   711 _P1_4	=	0x0094
                           000095   712 G$P1_5$0$0 == 0x0095
                           000095   713 _P1_5	=	0x0095
                           000096   714 G$P1_6$0$0 == 0x0096
                           000096   715 _P1_6	=	0x0096
                           000097   716 G$P1_7$0$0 == 0x0097
                           000097   717 _P1_7	=	0x0097
                           000098   718 G$RI$0$0 == 0x0098
                           000098   719 _RI	=	0x0098
                           000098   720 G$RI0$0$0 == 0x0098
                           000098   721 _RI0	=	0x0098
                           000099   722 G$TI$0$0 == 0x0099
                           000099   723 _TI	=	0x0099
                           000099   724 G$TI0$0$0 == 0x0099
                           000099   725 _TI0	=	0x0099
                           00009A   726 G$RB8$0$0 == 0x009a
                           00009A   727 _RB8	=	0x009a
                           00009A   728 G$RB80$0$0 == 0x009a
                           00009A   729 _RB80	=	0x009a
                           00009B   730 G$TB8$0$0 == 0x009b
                           00009B   731 _TB8	=	0x009b
                           00009B   732 G$TB80$0$0 == 0x009b
                           00009B   733 _TB80	=	0x009b
                           00009C   734 G$REN$0$0 == 0x009c
                           00009C   735 _REN	=	0x009c
                           00009C   736 G$REN0$0$0 == 0x009c
                           00009C   737 _REN0	=	0x009c
                           00009D   738 G$SM2$0$0 == 0x009d
                           00009D   739 _SM2	=	0x009d
                           00009D   740 G$SM20$0$0 == 0x009d
                           00009D   741 _SM20	=	0x009d
                           00009D   742 G$MCE0$0$0 == 0x009d
                           00009D   743 _MCE0	=	0x009d
                           00009E   744 G$SM1$0$0 == 0x009e
                           00009E   745 _SM1	=	0x009e
                           00009E   746 G$SM10$0$0 == 0x009e
                           00009E   747 _SM10	=	0x009e
                           00009F   748 G$SM0$0$0 == 0x009f
                           00009F   749 _SM0	=	0x009f
                           00009F   750 G$SM00$0$0 == 0x009f
                           00009F   751 _SM00	=	0x009f
                           00009F   752 G$S0MODE$0$0 == 0x009f
                           00009F   753 _S0MODE	=	0x009f
                           0000A0   754 G$P2_0$0$0 == 0x00a0
                           0000A0   755 _P2_0	=	0x00a0
                           0000A1   756 G$P2_1$0$0 == 0x00a1
                           0000A1   757 _P2_1	=	0x00a1
                           0000A2   758 G$P2_2$0$0 == 0x00a2
                           0000A2   759 _P2_2	=	0x00a2
                           0000A3   760 G$P2_3$0$0 == 0x00a3
                           0000A3   761 _P2_3	=	0x00a3
                           0000A4   762 G$P2_4$0$0 == 0x00a4
                           0000A4   763 _P2_4	=	0x00a4
                           0000A5   764 G$P2_5$0$0 == 0x00a5
                           0000A5   765 _P2_5	=	0x00a5
                           0000A6   766 G$P2_6$0$0 == 0x00a6
                           0000A6   767 _P2_6	=	0x00a6
                           0000A7   768 G$P2_7$0$0 == 0x00a7
                           0000A7   769 _P2_7	=	0x00a7
                           0000A8   770 G$EX0$0$0 == 0x00a8
                           0000A8   771 _EX0	=	0x00a8
                           0000A9   772 G$ET0$0$0 == 0x00a9
                           0000A9   773 _ET0	=	0x00a9
                           0000AA   774 G$EX1$0$0 == 0x00aa
                           0000AA   775 _EX1	=	0x00aa
                           0000AB   776 G$ET1$0$0 == 0x00ab
                           0000AB   777 _ET1	=	0x00ab
                           0000AC   778 G$ES0$0$0 == 0x00ac
                           0000AC   779 _ES0	=	0x00ac
                           0000AC   780 G$ES$0$0 == 0x00ac
                           0000AC   781 _ES	=	0x00ac
                           0000AD   782 G$ET2$0$0 == 0x00ad
                           0000AD   783 _ET2	=	0x00ad
                           0000AF   784 G$EA$0$0 == 0x00af
                           0000AF   785 _EA	=	0x00af
                           0000B0   786 G$P3_0$0$0 == 0x00b0
                           0000B0   787 _P3_0	=	0x00b0
                           0000B1   788 G$P3_1$0$0 == 0x00b1
                           0000B1   789 _P3_1	=	0x00b1
                           0000B2   790 G$P3_2$0$0 == 0x00b2
                           0000B2   791 _P3_2	=	0x00b2
                           0000B3   792 G$P3_3$0$0 == 0x00b3
                           0000B3   793 _P3_3	=	0x00b3
                           0000B4   794 G$P3_4$0$0 == 0x00b4
                           0000B4   795 _P3_4	=	0x00b4
                           0000B5   796 G$P3_5$0$0 == 0x00b5
                           0000B5   797 _P3_5	=	0x00b5
                           0000B6   798 G$P3_6$0$0 == 0x00b6
                           0000B6   799 _P3_6	=	0x00b6
                           0000B7   800 G$P3_7$0$0 == 0x00b7
                           0000B7   801 _P3_7	=	0x00b7
                           0000B8   802 G$PX0$0$0 == 0x00b8
                           0000B8   803 _PX0	=	0x00b8
                           0000B9   804 G$PT0$0$0 == 0x00b9
                           0000B9   805 _PT0	=	0x00b9
                           0000BA   806 G$PX1$0$0 == 0x00ba
                           0000BA   807 _PX1	=	0x00ba
                           0000BB   808 G$PT1$0$0 == 0x00bb
                           0000BB   809 _PT1	=	0x00bb
                           0000BC   810 G$PS0$0$0 == 0x00bc
                           0000BC   811 _PS0	=	0x00bc
                           0000BC   812 G$PS$0$0 == 0x00bc
                           0000BC   813 _PS	=	0x00bc
                           0000BD   814 G$PT2$0$0 == 0x00bd
                           0000BD   815 _PT2	=	0x00bd
                           0000C0   816 G$SMBTOE$0$0 == 0x00c0
                           0000C0   817 _SMBTOE	=	0x00c0
                           0000C1   818 G$SMBFTE$0$0 == 0x00c1
                           0000C1   819 _SMBFTE	=	0x00c1
                           0000C2   820 G$AA$0$0 == 0x00c2
                           0000C2   821 _AA	=	0x00c2
                           0000C3   822 G$SI$0$0 == 0x00c3
                           0000C3   823 _SI	=	0x00c3
                           0000C4   824 G$STO$0$0 == 0x00c4
                           0000C4   825 _STO	=	0x00c4
                           0000C5   826 G$STA$0$0 == 0x00c5
                           0000C5   827 _STA	=	0x00c5
                           0000C6   828 G$ENSMB$0$0 == 0x00c6
                           0000C6   829 _ENSMB	=	0x00c6
                           0000C7   830 G$BUSY$0$0 == 0x00c7
                           0000C7   831 _BUSY	=	0x00c7
                           0000C8   832 G$CPRL2$0$0 == 0x00c8
                           0000C8   833 _CPRL2	=	0x00c8
                           0000C9   834 G$CT2$0$0 == 0x00c9
                           0000C9   835 _CT2	=	0x00c9
                           0000CA   836 G$TR2$0$0 == 0x00ca
                           0000CA   837 _TR2	=	0x00ca
                           0000CB   838 G$EXEN2$0$0 == 0x00cb
                           0000CB   839 _EXEN2	=	0x00cb
                           0000CC   840 G$TCLK$0$0 == 0x00cc
                           0000CC   841 _TCLK	=	0x00cc
                           0000CD   842 G$RCLK$0$0 == 0x00cd
                           0000CD   843 _RCLK	=	0x00cd
                           0000CE   844 G$EXF2$0$0 == 0x00ce
                           0000CE   845 _EXF2	=	0x00ce
                           0000CF   846 G$TF2$0$0 == 0x00cf
                           0000CF   847 _TF2	=	0x00cf
                           0000D0   848 G$P$0$0 == 0x00d0
                           0000D0   849 _P	=	0x00d0
                           0000D1   850 G$F1$0$0 == 0x00d1
                           0000D1   851 _F1	=	0x00d1
                           0000D2   852 G$OV$0$0 == 0x00d2
                           0000D2   853 _OV	=	0x00d2
                           0000D3   854 G$RS0$0$0 == 0x00d3
                           0000D3   855 _RS0	=	0x00d3
                           0000D4   856 G$RS1$0$0 == 0x00d4
                           0000D4   857 _RS1	=	0x00d4
                           0000D5   858 G$F0$0$0 == 0x00d5
                           0000D5   859 _F0	=	0x00d5
                           0000D6   860 G$AC$0$0 == 0x00d6
                           0000D6   861 _AC	=	0x00d6
                           0000D7   862 G$CY$0$0 == 0x00d7
                           0000D7   863 _CY	=	0x00d7
                           0000D8   864 G$CCF0$0$0 == 0x00d8
                           0000D8   865 _CCF0	=	0x00d8
                           0000D9   866 G$CCF1$0$0 == 0x00d9
                           0000D9   867 _CCF1	=	0x00d9
                           0000DA   868 G$CCF2$0$0 == 0x00da
                           0000DA   869 _CCF2	=	0x00da
                           0000DB   870 G$CCF3$0$0 == 0x00db
                           0000DB   871 _CCF3	=	0x00db
                           0000DC   872 G$CCF4$0$0 == 0x00dc
                           0000DC   873 _CCF4	=	0x00dc
                           0000DE   874 G$CR$0$0 == 0x00de
                           0000DE   875 _CR	=	0x00de
                           0000DF   876 G$CF$0$0 == 0x00df
                           0000DF   877 _CF	=	0x00df
                           0000E8   878 G$ADLJST$0$0 == 0x00e8
                           0000E8   879 _ADLJST	=	0x00e8
                           0000E8   880 G$AD0LJST$0$0 == 0x00e8
                           0000E8   881 _AD0LJST	=	0x00e8
                           0000E9   882 G$ADWINT$0$0 == 0x00e9
                           0000E9   883 _ADWINT	=	0x00e9
                           0000E9   884 G$AD0WINT$0$0 == 0x00e9
                           0000E9   885 _AD0WINT	=	0x00e9
                           0000EA   886 G$ADSTM0$0$0 == 0x00ea
                           0000EA   887 _ADSTM0	=	0x00ea
                           0000EA   888 G$AD0CM0$0$0 == 0x00ea
                           0000EA   889 _AD0CM0	=	0x00ea
                           0000EB   890 G$ADSTM1$0$0 == 0x00eb
                           0000EB   891 _ADSTM1	=	0x00eb
                           0000EB   892 G$AD0CM1$0$0 == 0x00eb
                           0000EB   893 _AD0CM1	=	0x00eb
                           0000EC   894 G$ADBUSY$0$0 == 0x00ec
                           0000EC   895 _ADBUSY	=	0x00ec
                           0000EC   896 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   897 _AD0BUSY	=	0x00ec
                           0000ED   898 G$ADCINT$0$0 == 0x00ed
                           0000ED   899 _ADCINT	=	0x00ed
                           0000ED   900 G$AD0INT$0$0 == 0x00ed
                           0000ED   901 _AD0INT	=	0x00ed
                           0000EE   902 G$ADCTM$0$0 == 0x00ee
                           0000EE   903 _ADCTM	=	0x00ee
                           0000EE   904 G$AD0TM$0$0 == 0x00ee
                           0000EE   905 _AD0TM	=	0x00ee
                           0000EF   906 G$ADCEN$0$0 == 0x00ef
                           0000EF   907 _ADCEN	=	0x00ef
                           0000EF   908 G$AD0EN$0$0 == 0x00ef
                           0000EF   909 _AD0EN	=	0x00ef
                           0000F8   910 G$SPIEN$0$0 == 0x00f8
                           0000F8   911 _SPIEN	=	0x00f8
                           0000F9   912 G$MSTEN$0$0 == 0x00f9
                           0000F9   913 _MSTEN	=	0x00f9
                           0000FA   914 G$SLVSEL$0$0 == 0x00fa
                           0000FA   915 _SLVSEL	=	0x00fa
                           0000FB   916 G$TXBSY$0$0 == 0x00fb
                           0000FB   917 _TXBSY	=	0x00fb
                           0000FC   918 G$RXOVRN$0$0 == 0x00fc
                           0000FC   919 _RXOVRN	=	0x00fc
                           0000FD   920 G$MODF$0$0 == 0x00fd
                           0000FD   921 _MODF	=	0x00fd
                           0000FE   922 G$WCOL$0$0 == 0x00fe
                           0000FE   923 _WCOL	=	0x00fe
                           0000FF   924 G$SPIF$0$0 == 0x00ff
                           0000FF   925 _SPIF	=	0x00ff
                           0000C7   926 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   927 _BUS_BUSY	=	0x00c7
                           0000C6   928 G$BUS_EN$0$0 == 0x00c6
                           0000C6   929 _BUS_EN	=	0x00c6
                           0000C5   930 G$BUS_START$0$0 == 0x00c5
                           0000C5   931 _BUS_START	=	0x00c5
                           0000C4   932 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   933 _BUS_STOP	=	0x00c4
                           0000C3   934 G$BUS_INT$0$0 == 0x00c3
                           0000C3   935 _BUS_INT	=	0x00c3
                           0000C2   936 G$BUS_AA$0$0 == 0x00c2
                           0000C2   937 _BUS_AA	=	0x00c2
                           0000C1   938 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   939 _BUS_FTE	=	0x00c1
                           0000C0   940 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   941 _BUS_TOE	=	0x00c0
                           000083   942 G$BUS_SCL$0$0 == 0x0083
                           000083   943 _BUS_SCL	=	0x0083
                           0000B7   944 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   945 _COMPASS_SWITCH	=	0x00b7
                           0000B6   946 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   947 _RANGER_SWITCH	=	0x00b6
                                    948 ;--------------------------------------------------------
                                    949 ; overlayable register banks
                                    950 ;--------------------------------------------------------
                                    951 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        952 	.ds 8
                                    953 ;--------------------------------------------------------
                                    954 ; internal ram data
                                    955 ;--------------------------------------------------------
                                    956 	.area DSEG    (DATA)
                           000000   957 LSquiggles.lcd_clear$NumBytes$1$77==.
      000000                        958 _lcd_clear_NumBytes_1_77:
      000000                        959 	.ds 1
                           000001   960 LSquiggles.lcd_clear$Cmd$1$77==.
      000001                        961 _lcd_clear_Cmd_1_77:
      000001                        962 	.ds 2
                           000003   963 LSquiggles.read_keypad$Data$1$78==.
      000003                        964 _read_keypad_Data_1_78:
      000003                        965 	.ds 2
                           000005   966 LSquiggles.i2c_write_data$start_reg$1$97==.
      000005                        967 _i2c_write_data_PARM_2:
      000005                        968 	.ds 1
                           000006   969 LSquiggles.i2c_write_data$buffer$1$97==.
      000006                        970 _i2c_write_data_PARM_3:
      000006                        971 	.ds 3
                           000009   972 LSquiggles.i2c_write_data$num_bytes$1$97==.
      000009                        973 _i2c_write_data_PARM_4:
      000009                        974 	.ds 1
                           00000A   975 LSquiggles.i2c_read_data$start_reg$1$99==.
      00000A                        976 _i2c_read_data_PARM_2:
      00000A                        977 	.ds 1
                           00000B   978 LSquiggles.i2c_read_data$buffer$1$99==.
      00000B                        979 _i2c_read_data_PARM_3:
      00000B                        980 	.ds 3
                           00000E   981 LSquiggles.i2c_read_data$num_bytes$1$99==.
      00000E                        982 _i2c_read_data_PARM_4:
      00000E                        983 	.ds 1
                           00000F   984 LSquiggles.Accel_Init$Data2$1$103==.
      00000F                        985 _Accel_Init_Data2_1_103:
      00000F                        986 	.ds 1
                           000010   987 G$Counts$0$0==.
      000010                        988 _Counts::
      000010                        989 	.ds 2
                           000012   990 G$nCounts$0$0==.
      000012                        991 _nCounts::
      000012                        992 	.ds 2
                           000014   993 G$desired_heading$0$0==.
      000014                        994 _desired_heading::
      000014                        995 	.ds 2
                           000016   996 G$compass_gain$0$0==.
      000016                        997 _compass_gain::
      000016                        998 	.ds 4
                           00001A   999 G$h_count$0$0==.
      00001A                       1000 _h_count::
      00001A                       1001 	.ds 1
                           00001B  1002 G$r_count$0$0==.
      00001B                       1003 _r_count::
      00001B                       1004 	.ds 1
                           00001C  1005 G$delay$0$0==.
      00001C                       1006 _delay::
      00001C                       1007 	.ds 1
                           00001D  1008 G$new_heading$0$0==.
      00001D                       1009 _new_heading::
      00001D                       1010 	.ds 1
                           00001E  1011 G$new_range$0$0==.
      00001E                       1012 _new_range::
      00001E                       1013 	.ds 1
                           00001F  1014 G$heading$0$0==.
      00001F                       1015 _heading::
      00001F                       1016 	.ds 2
                           000021  1017 G$range$0$0==.
      000021                       1018 _range::
      000021                       1019 	.ds 2
                           000023  1020 G$COMPASS_PW$0$0==.
      000023                       1021 _COMPASS_PW::
      000023                       1022 	.ds 2
                           000025  1023 G$range_adj$0$0==.
      000025                       1024 _range_adj::
      000025                       1025 	.ds 2
                           000027  1026 G$compass_adj$0$0==.
      000027                       1027 _compass_adj::
      000027                       1028 	.ds 2
                           000029  1029 G$ranger_gain$0$0==.
      000029                       1030 _ranger_gain::
      000029                       1031 	.ds 1
                           00002A  1032 G$AD_Result$0$0==.
      00002A                       1033 _AD_Result::
      00002A                       1034 	.ds 1
                           00002B  1035 G$voltage$0$0==.
      00002B                       1036 _voltage::
      00002B                       1037 	.ds 1
                           00002C  1038 G$Data$0$0==.
      00002C                       1039 _Data::
      00002C                       1040 	.ds 2
                           00002E  1041 G$print_delay$0$0==.
      00002E                       1042 _print_delay::
      00002E                       1043 	.ds 1
                           00002F  1044 G$Error$0$0==.
      00002F                       1045 _Error::
      00002F                       1046 	.ds 2
                           000031  1047 LSquiggles.read_compass$Data$1$154==.
      000031                       1048 _read_compass_Data_1_154:
      000031                       1049 	.ds 2
                           000033  1050 LSquiggles.Update_Value$incr$1$157==.
      000033                       1051 _Update_Value_PARM_2:
      000033                       1052 	.ds 1
                           000034  1053 LSquiggles.Update_Value$maxval$1$157==.
      000034                       1054 _Update_Value_PARM_3:
      000034                       1055 	.ds 2
                           000036  1056 LSquiggles.Update_Value$minval$1$157==.
      000036                       1057 _Update_Value_PARM_4:
      000036                       1058 	.ds 2
                                   1059 ;--------------------------------------------------------
                                   1060 ; overlayable items in internal ram 
                                   1061 ;--------------------------------------------------------
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 	.area	OSEG    (OVR,DATA)
                                   1064 	.area	OSEG    (OVR,DATA)
                                   1065 	.area	OSEG    (OVR,DATA)
                                   1066 	.area	OSEG    (OVR,DATA)
                                   1067 	.area	OSEG    (OVR,DATA)
                                   1068 	.area	OSEG    (OVR,DATA)
                                   1069 	.area	OSEG    (OVR,DATA)
                                   1070 ;--------------------------------------------------------
                                   1071 ; Stack segment in internal ram 
                                   1072 ;--------------------------------------------------------
                                   1073 	.area	SSEG
      000000                       1074 __start__stack:
      000000                       1075 	.ds	1
                                   1076 
                                   1077 ;--------------------------------------------------------
                                   1078 ; indirectly addressable internal ram data
                                   1079 ;--------------------------------------------------------
                                   1080 	.area ISEG    (DATA)
                                   1081 ;--------------------------------------------------------
                                   1082 ; absolute internal ram data
                                   1083 ;--------------------------------------------------------
                                   1084 	.area IABS    (ABS,DATA)
                                   1085 	.area IABS    (ABS,DATA)
                                   1086 ;--------------------------------------------------------
                                   1087 ; bit data
                                   1088 ;--------------------------------------------------------
                                   1089 	.area BSEG    (BIT)
                                   1090 ;--------------------------------------------------------
                                   1091 ; paged external ram data
                                   1092 ;--------------------------------------------------------
                                   1093 	.area PSEG    (PAG,XDATA)
                                   1094 ;--------------------------------------------------------
                                   1095 ; external ram data
                                   1096 ;--------------------------------------------------------
                                   1097 	.area XSEG    (XDATA)
                           000000  1098 LSquiggles.lcd_print$text$1$73==.
      000000                       1099 _lcd_print_text_1_73:
      000000                       1100 	.ds 80
                                   1101 ;--------------------------------------------------------
                                   1102 ; absolute external ram data
                                   1103 ;--------------------------------------------------------
                                   1104 	.area XABS    (ABS,XDATA)
                                   1105 ;--------------------------------------------------------
                                   1106 ; external initialized ram data
                                   1107 ;--------------------------------------------------------
                                   1108 	.area XISEG   (XDATA)
                                   1109 	.area HOME    (CODE)
                                   1110 	.area GSINIT0 (CODE)
                                   1111 	.area GSINIT1 (CODE)
                                   1112 	.area GSINIT2 (CODE)
                                   1113 	.area GSINIT3 (CODE)
                                   1114 	.area GSINIT4 (CODE)
                                   1115 	.area GSINIT5 (CODE)
                                   1116 	.area GSINIT  (CODE)
                                   1117 	.area GSFINAL (CODE)
                                   1118 	.area CSEG    (CODE)
                                   1119 ;--------------------------------------------------------
                                   1120 ; interrupt vector 
                                   1121 ;--------------------------------------------------------
                                   1122 	.area HOME    (CODE)
      000000                       1123 __interrupt_vect:
      000000 02r00r00         [24] 1124 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1125 	reti
      000004                       1126 	.ds	7
      00000B 32               [24] 1127 	reti
      00000C                       1128 	.ds	7
      000013 32               [24] 1129 	reti
      000014                       1130 	.ds	7
      00001B 32               [24] 1131 	reti
      00001C                       1132 	.ds	7
      000023 32               [24] 1133 	reti
      000024                       1134 	.ds	7
      00002B 32               [24] 1135 	reti
      00002C                       1136 	.ds	7
      000033 32               [24] 1137 	reti
      000034                       1138 	.ds	7
      00003B 32               [24] 1139 	reti
      00003C                       1140 	.ds	7
      000043 32               [24] 1141 	reti
      000044                       1142 	.ds	7
      00004B 02r06rC7         [24] 1143 	ljmp	_PCA_ISR
                                   1144 ;--------------------------------------------------------
                                   1145 ; global & static initialisations
                                   1146 ;--------------------------------------------------------
                                   1147 	.area HOME    (CODE)
                                   1148 	.area GSINIT  (CODE)
                                   1149 	.area GSFINAL (CODE)
                                   1150 	.area GSINIT  (CODE)
                                   1151 	.globl __sdcc_gsinit_startup
                                   1152 	.globl __sdcc_program_startup
                                   1153 	.globl __start__stack
                                   1154 	.globl __mcs51_genXINIT
                                   1155 	.globl __mcs51_genXRAMCLEAR
                                   1156 	.globl __mcs51_genRAMCLEAR
                           000000  1157 	C$Squiggles.c$43$1$163 ==.
                                   1158 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:43: float compass_gain = 1;
      000000 E4               [12] 1159 	clr	a
      000001 F5*16            [12] 1160 	mov	_compass_gain,a
      000003 F5*17            [12] 1161 	mov	(_compass_gain + 1),a
      000005 75*18 80         [24] 1162 	mov	(_compass_gain + 2),#0x80
      000008 75*19 3F         [24] 1163 	mov	(_compass_gain + 3),#0x3F
                           00000B  1164 	C$Squiggles.c$44$1$163 ==.
                                   1165 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:44: unsigned char h_count = 0;
                                   1166 ;	1-genFromRTrack replaced	mov	_h_count,#0x00
      00000B F5*1A            [12] 1167 	mov	_h_count,a
                           00000D  1168 	C$Squiggles.c$45$1$163 ==.
                                   1169 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:45: unsigned char r_count = 0;
                                   1170 ;	1-genFromRTrack replaced	mov	_r_count,#0x00
      00000D F5*1B            [12] 1171 	mov	_r_count,a
                           00000F  1172 	C$Squiggles.c$46$1$163 ==.
                                   1173 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:46: unsigned char delay = 0;
                                   1174 ;	1-genFromRTrack replaced	mov	_delay,#0x00
      00000F F5*1C            [12] 1175 	mov	_delay,a
                           000011  1176 	C$Squiggles.c$47$1$163 ==.
                                   1177 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:47: unsigned char new_heading = 0;
                                   1178 ;	1-genFromRTrack replaced	mov	_new_heading,#0x00
      000011 F5*1D            [12] 1179 	mov	_new_heading,a
                           000013  1180 	C$Squiggles.c$48$1$163 ==.
                                   1181 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:48: unsigned char new_range = 0;
                                   1182 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000013 F5*1E            [12] 1183 	mov	_new_range,a
                           000015  1184 	C$Squiggles.c$49$1$163 ==.
                                   1185 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:49: unsigned int heading = 0;
      000015 F5*1F            [12] 1186 	mov	_heading,a
      000017 F5*20            [12] 1187 	mov	(_heading + 1),a
                           000019  1188 	C$Squiggles.c$50$1$163 ==.
                                   1189 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:50: unsigned int range = 0;
      000019 F5*21            [12] 1190 	mov	_range,a
      00001B F5*22            [12] 1191 	mov	(_range + 1),a
                           00001D  1192 	C$Squiggles.c$51$1$163 ==.
                                   1193 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:51: unsigned int COMPASS_PW = 2760;
      00001D 75*23 C8         [24] 1194 	mov	_COMPASS_PW,#0xC8
      000020 75*24 0A         [24] 1195 	mov	(_COMPASS_PW + 1),#0x0A
                           000023  1196 	C$Squiggles.c$54$1$163 ==.
                                   1197 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:54: unsigned int range_adj = 0;
      000023 F5*25            [12] 1198 	mov	_range_adj,a
      000025 F5*26            [12] 1199 	mov	(_range_adj + 1),a
                           000027  1200 	C$Squiggles.c$55$1$163 ==.
                                   1201 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:55: unsigned int compass_adj = 0;
      000027 F5*27            [12] 1202 	mov	_compass_adj,a
      000029 F5*28            [12] 1203 	mov	(_compass_adj + 1),a
                           00002B  1204 	C$Squiggles.c$56$1$163 ==.
                                   1205 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:56: unsigned char ranger_gain = 60;		// between 30 and 150
      00002B 75*29 3C         [24] 1206 	mov	_ranger_gain,#0x3C
                           00002E  1207 	C$Squiggles.c$57$1$163 ==.
                                   1208 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:57: unsigned char AD_Result = 0;
                                   1209 ;	1-genFromRTrack replaced	mov	_AD_Result,#0x00
      00002E F5*2A            [12] 1210 	mov	_AD_Result,a
                           000030  1211 	C$Squiggles.c$58$1$163 ==.
                                   1212 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:58: unsigned char voltage = 0;
                                   1213 ;	1-genFromRTrack replaced	mov	_voltage,#0x00
      000030 F5*2B            [12] 1214 	mov	_voltage,a
                           000032  1215 	C$Squiggles.c$60$1$163 ==.
                                   1216 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:60: unsigned char print_delay = 0;
                                   1217 ;	1-genFromRTrack replaced	mov	_print_delay,#0x00
      000032 F5*2E            [12] 1218 	mov	_print_delay,a
                           000034  1219 	C$Squiggles.c$61$1$163 ==.
                                   1220 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:61: signed int Error = 0;
      000034 F5*2F            [12] 1221 	mov	_Error,a
      000036 F5*30            [12] 1222 	mov	(_Error + 1),a
                                   1223 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1224 	ljmp	__sdcc_program_startup
                                   1225 ;--------------------------------------------------------
                                   1226 ; Home
                                   1227 ;--------------------------------------------------------
                                   1228 	.area HOME    (CODE)
                                   1229 	.area HOME    (CODE)
      00004E                       1230 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1231 	ljmp	_main
                                   1232 ;	return from main will return to caller
                                   1233 ;--------------------------------------------------------
                                   1234 ; code
                                   1235 ;--------------------------------------------------------
                                   1236 	.area CSEG    (CODE)
                                   1237 ;------------------------------------------------------------
                                   1238 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1239 ;------------------------------------------------------------
                                   1240 ;i                         Allocated to registers 
                                   1241 ;------------------------------------------------------------
                           000000  1242 	G$SYSCLK_Init$0$0 ==.
                           000000  1243 	C$c8051_SDCC.h$42$0$0 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1245 ;	-----------------------------------------
                                   1246 ;	 function SYSCLK_Init
                                   1247 ;	-----------------------------------------
      000000                       1248 _SYSCLK_Init:
                           000007  1249 	ar7 = 0x07
                           000006  1250 	ar6 = 0x06
                           000005  1251 	ar5 = 0x05
                           000004  1252 	ar4 = 0x04
                           000003  1253 	ar3 = 0x03
                           000002  1254 	ar2 = 0x02
                           000001  1255 	ar1 = 0x01
                           000000  1256 	ar0 = 0x00
                           000000  1257 	C$c8051_SDCC.h$46$1$31 ==.
                                   1258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1259 	mov	_OSCXCN,#0x67
                           000003  1260 	C$c8051_SDCC.h$49$1$31 ==.
                                   1261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1262 	mov	r6,#0x00
      000005 7F 01            [12] 1263 	mov	r7,#0x01
      000007                       1264 00107$:
      000007 1E               [12] 1265 	dec	r6
      000008 BE FF 01         [24] 1266 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1267 	dec	r7
      00000C                       1268 00121$:
      00000C EE               [12] 1269 	mov	a,r6
      00000D 4F               [12] 1270 	orl	a,r7
      00000E 70 F7            [24] 1271 	jnz	00107$
                           000010  1272 	C$c8051_SDCC.h$51$1$31 ==.
                                   1273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1274 00102$:
      000010 E5 B1            [12] 1275 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1276 	jnb	acc.7,00102$
                           000015  1277 	C$c8051_SDCC.h$53$1$31 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1279 	mov	_OSCICN,#0x88
                           000018  1280 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1281 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1282 	ret
                                   1283 ;------------------------------------------------------------
                                   1284 ;Allocation info for local variables in function 'UART0_Init'
                                   1285 ;------------------------------------------------------------
                           000019  1286 	G$UART0_Init$0$0 ==.
                           000019  1287 	C$c8051_SDCC.h$64$1$31 ==.
                                   1288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1289 ;	-----------------------------------------
                                   1290 ;	 function UART0_Init
                                   1291 ;	-----------------------------------------
      000019                       1292 _UART0_Init:
                           000019  1293 	C$c8051_SDCC.h$66$1$33 ==.
                                   1294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1295 	mov	_SCON0,#0x50
                           00001C  1296 	C$c8051_SDCC.h$67$1$33 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1298 	mov	_TMOD,#0x20
                           00001F  1299 	C$c8051_SDCC.h$68$1$33 ==.
                                   1300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1301 	mov	_TH1,#0xDC
                           000022  1302 	C$c8051_SDCC.h$69$1$33 ==.
                                   1303 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1304 	setb	_TR1
                           000024  1305 	C$c8051_SDCC.h$70$1$33 ==.
                                   1306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1307 	orl	_CKCON,#0x10
                           000027  1308 	C$c8051_SDCC.h$71$1$33 ==.
                                   1309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1310 	orl	_PCON,#0x80
                           00002A  1311 	C$c8051_SDCC.h$73$1$33 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1313 	setb	_TI0
                           00002C  1314 	C$c8051_SDCC.h$74$1$33 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1316 	orl	_P0MDOUT,#0x01
                           00002F  1317 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1318 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1319 	ret
                                   1320 ;------------------------------------------------------------
                                   1321 ;Allocation info for local variables in function 'Sys_Init'
                                   1322 ;------------------------------------------------------------
                           000030  1323 	G$Sys_Init$0$0 ==.
                           000030  1324 	C$c8051_SDCC.h$83$1$33 ==.
                                   1325 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1326 ;	-----------------------------------------
                                   1327 ;	 function Sys_Init
                                   1328 ;	-----------------------------------------
      000030                       1329 _Sys_Init:
                           000030  1330 	C$c8051_SDCC.h$85$1$35 ==.
                                   1331 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1332 	mov	_WDTCN,#0xDE
                           000033  1333 	C$c8051_SDCC.h$86$1$35 ==.
                                   1334 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1335 	mov	_WDTCN,#0xAD
                           000036  1336 	C$c8051_SDCC.h$88$1$35 ==.
                                   1337 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1338 	lcall	_SYSCLK_Init
                           000039  1339 	C$c8051_SDCC.h$89$1$35 ==.
                                   1340 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1341 	lcall	_UART0_Init
                           00003C  1342 	C$c8051_SDCC.h$91$1$35 ==.
                                   1343 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1344 	orl	_XBR0,#0x04
                           00003F  1345 	C$c8051_SDCC.h$92$1$35 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1347 	orl	_XBR2,#0x40
                           000042  1348 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1349 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1350 	ret
                                   1351 ;------------------------------------------------------------
                                   1352 ;Allocation info for local variables in function 'putchar'
                                   1353 ;------------------------------------------------------------
                                   1354 ;c                         Allocated to registers r7 
                                   1355 ;------------------------------------------------------------
                           000043  1356 	G$putchar$0$0 ==.
                           000043  1357 	C$c8051_SDCC.h$98$1$35 ==.
                                   1358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1359 ;	-----------------------------------------
                                   1360 ;	 function putchar
                                   1361 ;	-----------------------------------------
      000043                       1362 _putchar:
      000043 AF 82            [24] 1363 	mov	r7,dpl
                           000045  1364 	C$c8051_SDCC.h$100$1$37 ==.
                                   1365 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1366 00101$:
                           000045  1367 	C$c8051_SDCC.h$101$1$37 ==.
                                   1368 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1369 	jbc	_TI0,00112$
      000048 80 FB            [24] 1370 	sjmp	00101$
      00004A                       1371 00112$:
                           00004A  1372 	C$c8051_SDCC.h$102$1$37 ==.
                                   1373 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1374 	mov	_SBUF0,r7
                           00004C  1375 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1376 	XG$putchar$0$0 ==.
      00004C 22               [24] 1377 	ret
                                   1378 ;------------------------------------------------------------
                                   1379 ;Allocation info for local variables in function 'getchar'
                                   1380 ;------------------------------------------------------------
                                   1381 ;c                         Allocated to registers 
                                   1382 ;------------------------------------------------------------
                           00004D  1383 	G$getchar$0$0 ==.
                           00004D  1384 	C$c8051_SDCC.h$108$1$37 ==.
                                   1385 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1386 ;	-----------------------------------------
                                   1387 ;	 function getchar
                                   1388 ;	-----------------------------------------
      00004D                       1389 _getchar:
                           00004D  1390 	C$c8051_SDCC.h$111$1$39 ==.
                                   1391 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1392 00101$:
                           00004D  1393 	C$c8051_SDCC.h$112$1$39 ==.
                                   1394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1395 	jbc	_RI0,00112$
      000050 80 FB            [24] 1396 	sjmp	00101$
      000052                       1397 00112$:
                           000052  1398 	C$c8051_SDCC.h$113$1$39 ==.
                                   1399 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1400 	mov	dpl,_SBUF0
                           000055  1401 	C$c8051_SDCC.h$114$1$39 ==.
                                   1402 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1403 	lcall	_putchar
                           000058  1404 	C$c8051_SDCC.h$115$1$39 ==.
                                   1405 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1406 	mov	dpl,_SBUF0
                           00005B  1407 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1408 	XG$getchar$0$0 ==.
      00005B 22               [24] 1409 	ret
                                   1410 ;------------------------------------------------------------
                                   1411 ;Allocation info for local variables in function 'lcd_print'
                                   1412 ;------------------------------------------------------------
                                   1413 ;fmt                       Allocated to stack - _bp -5
                                   1414 ;len                       Allocated to registers r6 
                                   1415 ;i                         Allocated to registers 
                                   1416 ;ap                        Allocated to registers 
                                   1417 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1418 ;------------------------------------------------------------
                           00005C  1419 	G$lcd_print$0$0 ==.
                           00005C  1420 	C$i2c.h$81$1$39 ==.
                                   1421 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1422 ;	-----------------------------------------
                                   1423 ;	 function lcd_print
                                   1424 ;	-----------------------------------------
      00005C                       1425 _lcd_print:
      00005C C0*00            [24] 1426 	push	_bp
      00005E 85 81*00         [24] 1427 	mov	_bp,sp
                           000061  1428 	C$i2c.h$87$1$73 ==.
                                   1429 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1430 	mov	a,_bp
      000063 24 FB            [12] 1431 	add	a,#0xfb
      000065 F8               [12] 1432 	mov	r0,a
      000066 86 82            [24] 1433 	mov	dpl,@r0
      000068 08               [12] 1434 	inc	r0
      000069 86 83            [24] 1435 	mov	dph,@r0
      00006B 08               [12] 1436 	inc	r0
      00006C 86 F0            [24] 1437 	mov	b,@r0
      00006E 12r00r00         [24] 1438 	lcall	_strlen
      000071 E5 82            [12] 1439 	mov	a,dpl
      000073 85 83 F0         [24] 1440 	mov	b,dph
      000076 45 F0            [12] 1441 	orl	a,b
      000078 70 02            [24] 1442 	jnz	00102$
      00007A 80 62            [24] 1443 	sjmp	00109$
      00007C                       1444 00102$:
                           00007C  1445 	C$i2c.h$89$2$74 ==.
                                   1446 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1447 	mov	a,_bp
      00007E 24 FB            [12] 1448 	add	a,#0xFB
      000080 FF               [12] 1449 	mov	r7,a
      000081 8F*00            [24] 1450 	mov	_vsprintf_PARM_3,r7
                           000083  1451 	C$i2c.h$90$1$73 ==.
                                   1452 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1453 	mov	a,_bp
      000085 24 FB            [12] 1454 	add	a,#0xfb
      000087 F8               [12] 1455 	mov	r0,a
      000088 86*00            [24] 1456 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1457 	inc	r0
      00008B 86*01            [24] 1458 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1459 	inc	r0
      00008E 86*02            [24] 1460 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1461 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1462 	mov	b,#0x00
      000096 12r00r00         [24] 1463 	lcall	_vsprintf
                           000099  1464 	C$i2c.h$93$1$73 ==.
                                   1465 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1466 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1467 	mov	b,#0x00
      00009F 12r00r00         [24] 1468 	lcall	_strlen
      0000A2 AE 82            [24] 1469 	mov	r6,dpl
                           0000A4  1470 	C$i2c.h$94$1$73 ==.
                                   1471 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1472 	mov	r7,#0x00
      0000A6                       1473 00107$:
      0000A6 C3               [12] 1474 	clr	c
      0000A7 EF               [12] 1475 	mov	a,r7
      0000A8 9E               [12] 1476 	subb	a,r6
      0000A9 50 1F            [24] 1477 	jnc	00105$
                           0000AB  1478 	C$i2c.h$96$2$76 ==.
                                   1479 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1480 	mov	a,r7
      0000AC 24r00            [12] 1481 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1482 	mov	dpl,a
      0000B0 E4               [12] 1483 	clr	a
      0000B1 34s00            [12] 1484 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1485 	mov	dph,a
      0000B5 E0               [24] 1486 	movx	a,@dptr
      0000B6 FD               [12] 1487 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1488 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1489 	mov	a,r7
      0000BB 24r00            [12] 1490 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1491 	mov	dpl,a
      0000BF E4               [12] 1492 	clr	a
      0000C0 34s00            [12] 1493 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1494 	mov	dph,a
      0000C4 74 0D            [12] 1495 	mov	a,#0x0D
      0000C6 F0               [24] 1496 	movx	@dptr,a
      0000C7                       1497 00108$:
                           0000C7  1498 	C$i2c.h$94$1$73 ==.
                                   1499 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1500 	inc	r7
      0000C8 80 DC            [24] 1501 	sjmp	00107$
      0000CA                       1502 00105$:
                           0000CA  1503 	C$i2c.h$99$1$73 ==.
                                   1504 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1505 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1506 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1507 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1508 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1509 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1510 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1511 	lcall	_i2c_write_data
      0000DE                       1512 00109$:
      0000DE D0*00            [24] 1513 	pop	_bp
                           0000E0  1514 	C$i2c.h$100$1$73 ==.
                           0000E0  1515 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1516 	ret
                                   1517 ;------------------------------------------------------------
                                   1518 ;Allocation info for local variables in function 'lcd_clear'
                                   1519 ;------------------------------------------------------------
                                   1520 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1521 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1522 ;------------------------------------------------------------
                           0000E1  1523 	G$lcd_clear$0$0 ==.
                           0000E1  1524 	C$i2c.h$103$1$73 ==.
                                   1525 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1526 ;	-----------------------------------------
                                   1527 ;	 function lcd_clear
                                   1528 ;	-----------------------------------------
      0000E1                       1529 _lcd_clear:
                           0000E1  1530 	C$i2c.h$105$1$73 ==.
                                   1531 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1532 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1533 	C$i2c.h$107$1$77 ==.
                                   1534 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1535 00101$:
      0000E4 74 C0            [12] 1536 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1537 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1538 	jc	00103$
      0000EA 75*0Br00         [24] 1539 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1540 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1541 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1542 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1543 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1544 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1545 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1546 	sjmp	00101$
      000101                       1547 00103$:
                           000101  1548 	C$i2c.h$109$1$77 ==.
                                   1549 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1550 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1551 	C$i2c.h$110$1$77 ==.
                                   1552 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1553 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1554 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1555 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1556 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1557 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1558 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1559 	lcall	_i2c_write_data
                           000119  1560 	C$i2c.h$111$1$77 ==.
                           000119  1561 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1562 	ret
                                   1563 ;------------------------------------------------------------
                                   1564 ;Allocation info for local variables in function 'read_keypad'
                                   1565 ;------------------------------------------------------------
                                   1566 ;i                         Allocated to registers r7 
                                   1567 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1568 ;------------------------------------------------------------
                           00011A  1569 	G$read_keypad$0$0 ==.
                           00011A  1570 	C$i2c.h$114$1$77 ==.
                                   1571 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1572 ;	-----------------------------------------
                                   1573 ;	 function read_keypad
                                   1574 ;	-----------------------------------------
      00011A                       1575 _read_keypad:
                           00011A  1576 	C$i2c.h$118$1$78 ==.
                                   1577 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1578 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1579 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1580 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1581 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1582 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1583 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1584 	lcall	_i2c_read_data
                           00012F  1585 	C$i2c.h$119$1$78 ==.
                                   1586 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1587 	mov	a,#0xFF
      000131 B5*03 05         [24] 1588 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1589 	mov	dpl,#0x00
      000137 80 5F            [24] 1590 	sjmp	00116$
      000139                       1591 00102$:
                           000139  1592 	C$i2c.h$121$1$78 ==.
                                   1593 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1594 	mov	r7,#0x00
      00013B 8F 06            [24] 1595 	mov	ar6,r7
      00013D                       1596 00114$:
                           00013D  1597 	C$i2c.h$123$2$79 ==.
                                   1598 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1599 	mov	b,r6
      00013F 05 F0            [12] 1600 	inc	b
      000141 7C 01            [12] 1601 	mov	r4,#0x01
      000143 7D 00            [12] 1602 	mov	r5,#0x00
      000145 80 06            [24] 1603 	sjmp	00145$
      000147                       1604 00144$:
      000147 EC               [12] 1605 	mov	a,r4
      000148 2C               [12] 1606 	add	a,r4
      000149 FC               [12] 1607 	mov	r4,a
      00014A ED               [12] 1608 	mov	a,r5
      00014B 33               [12] 1609 	rlc	a
      00014C FD               [12] 1610 	mov	r5,a
      00014D                       1611 00145$:
      00014D D5 F0 F7         [24] 1612 	djnz	b,00144$
      000150 AA*03            [24] 1613 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1614 	mov	r3,#0x00
      000154 EA               [12] 1615 	mov	a,r2
      000155 52 04            [12] 1616 	anl	ar4,a
      000157 EB               [12] 1617 	mov	a,r3
      000158 52 05            [12] 1618 	anl	ar5,a
      00015A EC               [12] 1619 	mov	a,r4
      00015B 4D               [12] 1620 	orl	a,r5
      00015C 60 07            [24] 1621 	jz	00115$
                           00015E  1622 	C$i2c.h$124$2$79 ==.
                                   1623 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1624 	mov	a,#0x31
      000160 2F               [12] 1625 	add	a,r7
      000161 F5 82            [12] 1626 	mov	dpl,a
      000163 80 33            [24] 1627 	sjmp	00116$
      000165                       1628 00115$:
                           000165  1629 	C$i2c.h$121$1$78 ==.
                                   1630 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1631 	inc	r6
      000166 8E 07            [24] 1632 	mov	ar7,r6
      000168 BE 08 00         [24] 1633 	cjne	r6,#0x08,00147$
      00016B                       1634 00147$:
      00016B 40 D0            [24] 1635 	jc	00114$
                           00016D  1636 	C$i2c.h$127$1$78 ==.
                                   1637 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1638 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1639 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1640 	mov	dpl,#0x39
      000175 80 21            [24] 1641 	sjmp	00116$
      000177                       1642 00107$:
                           000177  1643 	C$i2c.h$129$1$78 ==.
                                   1644 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1645 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1646 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1647 	mov	dpl,#0x2A
      00017F 80 17            [24] 1648 	sjmp	00116$
      000181                       1649 00109$:
                           000181  1650 	C$i2c.h$131$1$78 ==.
                                   1651 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1652 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1653 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1654 	mov	dpl,#0x30
      000189 80 0D            [24] 1655 	sjmp	00116$
      00018B                       1656 00111$:
                           00018B  1657 	C$i2c.h$133$1$78 ==.
                                   1658 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1659 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1660 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1661 	mov	dpl,#0x23
      000193 80 03            [24] 1662 	sjmp	00116$
      000195                       1663 00113$:
                           000195  1664 	C$i2c.h$135$1$78 ==.
                                   1665 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1666 	mov	dpl,#0xFF
      000198                       1667 00116$:
                           000198  1668 	C$i2c.h$136$1$78 ==.
                           000198  1669 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1670 	ret
                                   1671 ;------------------------------------------------------------
                                   1672 ;Allocation info for local variables in function 'kpd_input'
                                   1673 ;------------------------------------------------------------
                                   1674 ;mode                      Allocated to registers r7 
                                   1675 ;sum                       Allocated to registers r5 r6 
                                   1676 ;key                       Allocated to registers r3 
                                   1677 ;i                         Allocated to registers 
                                   1678 ;------------------------------------------------------------
                           000199  1679 	G$kpd_input$0$0 ==.
                           000199  1680 	C$i2c.h$148$1$78 ==.
                                   1681 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1682 ;	-----------------------------------------
                                   1683 ;	 function kpd_input
                                   1684 ;	-----------------------------------------
      000199                       1685 _kpd_input:
      000199 AF 82            [24] 1686 	mov	r7,dpl
                           00019B  1687 	C$i2c.h$153$1$81 ==.
                                   1688 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1689 	C$i2c.h$156$1$81 ==.
                                   1690 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1691 	clr	a
      00019C FD               [12] 1692 	mov	r5,a
      00019D FE               [12] 1693 	mov	r6,a
      00019E EF               [12] 1694 	mov	a,r7
      00019F 70 1D            [24] 1695 	jnz	00102$
      0001A1 C0 06            [24] 1696 	push	ar6
      0001A3 C0 05            [24] 1697 	push	ar5
      0001A5 74r00            [12] 1698 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1699 	push	acc
      0001A9 74s00            [12] 1700 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1701 	push	acc
      0001AD 74 80            [12] 1702 	mov	a,#0x80
      0001AF C0 E0            [24] 1703 	push	acc
      0001B1 12r00r5C         [24] 1704 	lcall	_lcd_print
      0001B4 15 81            [12] 1705 	dec	sp
      0001B6 15 81            [12] 1706 	dec	sp
      0001B8 15 81            [12] 1707 	dec	sp
      0001BA D0 05            [24] 1708 	pop	ar5
      0001BC D0 06            [24] 1709 	pop	ar6
      0001BE                       1710 00102$:
                           0001BE  1711 	C$i2c.h$158$1$81 ==.
                                   1712 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1713 	push	ar6
      0001C0 C0 05            [24] 1714 	push	ar5
      0001C2 74 08            [12] 1715 	mov	a,#0x08
      0001C4 C0 E0            [24] 1716 	push	acc
      0001C6 E4               [12] 1717 	clr	a
      0001C7 C0 E0            [24] 1718 	push	acc
      0001C9 74 08            [12] 1719 	mov	a,#0x08
      0001CB C0 E0            [24] 1720 	push	acc
      0001CD E4               [12] 1721 	clr	a
      0001CE C0 E0            [24] 1722 	push	acc
      0001D0 74 08            [12] 1723 	mov	a,#0x08
      0001D2 C0 E0            [24] 1724 	push	acc
      0001D4 E4               [12] 1725 	clr	a
      0001D5 C0 E0            [24] 1726 	push	acc
      0001D7 74 08            [12] 1727 	mov	a,#0x08
      0001D9 C0 E0            [24] 1728 	push	acc
      0001DB E4               [12] 1729 	clr	a
      0001DC C0 E0            [24] 1730 	push	acc
      0001DE 74 08            [12] 1731 	mov	a,#0x08
      0001E0 C0 E0            [24] 1732 	push	acc
      0001E2 E4               [12] 1733 	clr	a
      0001E3 C0 E0            [24] 1734 	push	acc
      0001E5 74r16            [12] 1735 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1736 	push	acc
      0001E9 74s00            [12] 1737 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1738 	push	acc
      0001ED 74 80            [12] 1739 	mov	a,#0x80
      0001EF C0 E0            [24] 1740 	push	acc
      0001F1 12r00r5C         [24] 1741 	lcall	_lcd_print
      0001F4 E5 81            [12] 1742 	mov	a,sp
      0001F6 24 F3            [12] 1743 	add	a,#0xf3
      0001F8 F5 81            [12] 1744 	mov	sp,a
                           0001FA  1745 	C$i2c.h$160$1$81 ==.
                                   1746 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1747 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1748 	mov	b,#0x07
      000200 E4               [12] 1749 	clr	a
      000201 12r03r0D         [24] 1750 	lcall	_delay_time
      000204 D0 05            [24] 1751 	pop	ar5
      000206 D0 06            [24] 1752 	pop	ar6
                           000208  1753 	C$i2c.h$164$1$81 ==.
                                   1754 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1755 	mov	r7,#0x00
                           00020A  1756 	C$i2c.h$166$3$84 ==.
                                   1757 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1758 00104$:
      00020A C0 07            [24] 1759 	push	ar7
      00020C C0 06            [24] 1760 	push	ar6
      00020E C0 05            [24] 1761 	push	ar5
      000210 12r01r1A         [24] 1762 	lcall	_read_keypad
      000213 AC 82            [24] 1763 	mov	r4,dpl
      000215 D0 05            [24] 1764 	pop	ar5
      000217 D0 06            [24] 1765 	pop	ar6
      000219 D0 07            [24] 1766 	pop	ar7
      00021B 8C 03            [24] 1767 	mov	ar3,r4
      00021D BC FF 02         [24] 1768 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1769 	sjmp	00105$
      000222                       1770 00146$:
      000222 BB 2A 17         [24] 1771 	cjne	r3,#0x2A,00106$
      000225                       1772 00105$:
      000225 90 27 10         [24] 1773 	mov	dptr,#0x2710
      000228 E4               [12] 1774 	clr	a
      000229 F5 F0            [12] 1775 	mov	b,a
      00022B C0 07            [24] 1776 	push	ar7
      00022D C0 06            [24] 1777 	push	ar6
      00022F C0 05            [24] 1778 	push	ar5
      000231 12r03r0D         [24] 1779 	lcall	_delay_time
      000234 D0 05            [24] 1780 	pop	ar5
      000236 D0 06            [24] 1781 	pop	ar6
      000238 D0 07            [24] 1782 	pop	ar7
      00023A 80 CE            [24] 1783 	sjmp	00104$
      00023C                       1784 00106$:
                           00023C  1785 	C$i2c.h$167$2$82 ==.
                                   1786 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1787 	cjne	r3,#0x23,00114$
                           00023F  1788 	C$i2c.h$169$3$83 ==.
                                   1789 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1790 00107$:
      00023F C0 06            [24] 1791 	push	ar6
      000241 C0 05            [24] 1792 	push	ar5
      000243 12r01r1A         [24] 1793 	lcall	_read_keypad
      000246 AC 82            [24] 1794 	mov	r4,dpl
      000248 D0 05            [24] 1795 	pop	ar5
      00024A D0 06            [24] 1796 	pop	ar6
      00024C BC 23 13         [24] 1797 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1798 	mov	dptr,#0x2710
      000252 E4               [12] 1799 	clr	a
      000253 F5 F0            [12] 1800 	mov	b,a
      000255 C0 06            [24] 1801 	push	ar6
      000257 C0 05            [24] 1802 	push	ar5
      000259 12r03r0D         [24] 1803 	lcall	_delay_time
      00025C D0 05            [24] 1804 	pop	ar5
      00025E D0 06            [24] 1805 	pop	ar6
      000260 80 DD            [24] 1806 	sjmp	00107$
      000262                       1807 00109$:
                           000262  1808 	C$i2c.h$170$3$83 ==.
                                   1809 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1810 	mov	dpl,r5
      000264 8E 83            [24] 1811 	mov	dph,r6
      000266 02r03r0C         [24] 1812 	ljmp	00119$
      000269                       1813 00114$:
                           000269  1814 	C$i2c.h$174$3$84 ==.
                                   1815 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1816 	mov	a,r3
      00026A FA               [12] 1817 	mov	r2,a
      00026B 33               [12] 1818 	rlc	a
      00026C 95 E0            [12] 1819 	subb	a,acc
      00026E FC               [12] 1820 	mov	r4,a
      00026F C0 07            [24] 1821 	push	ar7
      000271 C0 06            [24] 1822 	push	ar6
      000273 C0 05            [24] 1823 	push	ar5
      000275 C0 04            [24] 1824 	push	ar4
      000277 C0 03            [24] 1825 	push	ar3
      000279 C0 02            [24] 1826 	push	ar2
      00027B C0 02            [24] 1827 	push	ar2
      00027D C0 04            [24] 1828 	push	ar4
      00027F 74r26            [12] 1829 	mov	a,#___str_2
      000281 C0 E0            [24] 1830 	push	acc
      000283 74s00            [12] 1831 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1832 	push	acc
      000287 74 80            [12] 1833 	mov	a,#0x80
      000289 C0 E0            [24] 1834 	push	acc
      00028B 12r00r5C         [24] 1835 	lcall	_lcd_print
      00028E E5 81            [12] 1836 	mov	a,sp
      000290 24 FB            [12] 1837 	add	a,#0xfb
      000292 F5 81            [12] 1838 	mov	sp,a
      000294 D0 02            [24] 1839 	pop	ar2
      000296 D0 03            [24] 1840 	pop	ar3
      000298 D0 04            [24] 1841 	pop	ar4
      00029A D0 05            [24] 1842 	pop	ar5
      00029C D0 06            [24] 1843 	pop	ar6
                           00029E  1844 	C$i2c.h$175$1$81 ==.
                                   1845 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1846 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1847 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1848 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1849 	push	ar4
      0002A7 C0 03            [24] 1850 	push	ar3
      0002A9 C0 02            [24] 1851 	push	ar2
      0002AB 12r00r00         [24] 1852 	lcall	__mulint
      0002AE A8 82            [24] 1853 	mov	r0,dpl
      0002B0 A9 83            [24] 1854 	mov	r1,dph
      0002B2 D0 02            [24] 1855 	pop	ar2
      0002B4 D0 03            [24] 1856 	pop	ar3
      0002B6 D0 04            [24] 1857 	pop	ar4
      0002B8 D0 07            [24] 1858 	pop	ar7
      0002BA EA               [12] 1859 	mov	a,r2
      0002BB 28               [12] 1860 	add	a,r0
      0002BC F8               [12] 1861 	mov	r0,a
      0002BD EC               [12] 1862 	mov	a,r4
      0002BE 39               [12] 1863 	addc	a,r1
      0002BF F9               [12] 1864 	mov	r1,a
      0002C0 E8               [12] 1865 	mov	a,r0
      0002C1 24 D0            [12] 1866 	add	a,#0xD0
      0002C3 FD               [12] 1867 	mov	r5,a
      0002C4 E9               [12] 1868 	mov	a,r1
      0002C5 34 FF            [12] 1869 	addc	a,#0xFF
      0002C7 FE               [12] 1870 	mov	r6,a
                           0002C8  1871 	C$i2c.h$176$3$84 ==.
                                   1872 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1873 00110$:
      0002C8 C0 07            [24] 1874 	push	ar7
      0002CA C0 06            [24] 1875 	push	ar6
      0002CC C0 05            [24] 1876 	push	ar5
      0002CE C0 03            [24] 1877 	push	ar3
      0002D0 12r01r1A         [24] 1878 	lcall	_read_keypad
      0002D3 AC 82            [24] 1879 	mov	r4,dpl
      0002D5 D0 03            [24] 1880 	pop	ar3
      0002D7 D0 05            [24] 1881 	pop	ar5
      0002D9 D0 06            [24] 1882 	pop	ar6
      0002DB D0 07            [24] 1883 	pop	ar7
      0002DD EC               [12] 1884 	mov	a,r4
      0002DE B5 03 1B         [24] 1885 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1886 	mov	dptr,#0x2710
      0002E4 E4               [12] 1887 	clr	a
      0002E5 F5 F0            [12] 1888 	mov	b,a
      0002E7 C0 07            [24] 1889 	push	ar7
      0002E9 C0 06            [24] 1890 	push	ar6
      0002EB C0 05            [24] 1891 	push	ar5
      0002ED C0 03            [24] 1892 	push	ar3
      0002EF 12r03r0D         [24] 1893 	lcall	_delay_time
      0002F2 D0 03            [24] 1894 	pop	ar3
      0002F4 D0 05            [24] 1895 	pop	ar5
      0002F6 D0 06            [24] 1896 	pop	ar6
      0002F8 D0 07            [24] 1897 	pop	ar7
      0002FA 80 CC            [24] 1898 	sjmp	00110$
      0002FC                       1899 00118$:
                           0002FC  1900 	C$i2c.h$164$1$81 ==.
                                   1901 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1902 	inc	r7
      0002FD C3               [12] 1903 	clr	c
      0002FE EF               [12] 1904 	mov	a,r7
      0002FF 64 80            [12] 1905 	xrl	a,#0x80
      000301 94 85            [12] 1906 	subb	a,#0x85
      000303 50 03            [24] 1907 	jnc	00155$
      000305 02r02r0A         [24] 1908 	ljmp	00104$
      000308                       1909 00155$:
                           000308  1910 	C$i2c.h$179$1$81 ==.
                                   1911 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1912 	mov	dpl,r5
      00030A 8E 83            [24] 1913 	mov	dph,r6
      00030C                       1914 00119$:
                           00030C  1915 	C$i2c.h$180$1$81 ==.
                           00030C  1916 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1917 	ret
                                   1918 ;------------------------------------------------------------
                                   1919 ;Allocation info for local variables in function 'delay_time'
                                   1920 ;------------------------------------------------------------
                                   1921 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1922 ;index                     Allocated to registers 
                                   1923 ;------------------------------------------------------------
                           00030D  1924 	G$delay_time$0$0 ==.
                           00030D  1925 	C$i2c.h$189$1$81 ==.
                                   1926 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1927 ;	-----------------------------------------
                                   1928 ;	 function delay_time
                                   1929 ;	-----------------------------------------
      00030D                       1930 _delay_time:
      00030D AC 82            [24] 1931 	mov	r4,dpl
      00030F AD 83            [24] 1932 	mov	r5,dph
      000311 AE F0            [24] 1933 	mov	r6,b
      000313 FF               [12] 1934 	mov	r7,a
                           000314  1935 	C$i2c.h$192$1$86 ==.
                                   1936 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1937 	mov	r0,#0x00
      000316 79 00            [12] 1938 	mov	r1,#0x00
      000318 7A 00            [12] 1939 	mov	r2,#0x00
      00031A 7B 00            [12] 1940 	mov	r3,#0x00
      00031C                       1941 00103$:
      00031C C3               [12] 1942 	clr	c
      00031D E8               [12] 1943 	mov	a,r0
      00031E 9C               [12] 1944 	subb	a,r4
      00031F E9               [12] 1945 	mov	a,r1
      000320 9D               [12] 1946 	subb	a,r5
      000321 EA               [12] 1947 	mov	a,r2
      000322 9E               [12] 1948 	subb	a,r6
      000323 EB               [12] 1949 	mov	a,r3
      000324 9F               [12] 1950 	subb	a,r7
      000325 50 0F            [24] 1951 	jnc	00105$
      000327 08               [12] 1952 	inc	r0
      000328 B8 00 09         [24] 1953 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1954 	inc	r1
      00032C B9 00 05         [24] 1955 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1956 	inc	r2
      000330 BA 00 E9         [24] 1957 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1958 	inc	r3
      000334                       1959 00115$:
      000334 80 E6            [24] 1960 	sjmp	00103$
      000336                       1961 00105$:
                           000336  1962 	C$i2c.h$193$1$86 ==.
                           000336  1963 	XG$delay_time$0$0 ==.
      000336 22               [24] 1964 	ret
                                   1965 ;------------------------------------------------------------
                                   1966 ;Allocation info for local variables in function 'i2c_start'
                                   1967 ;------------------------------------------------------------
                           000337  1968 	G$i2c_start$0$0 ==.
                           000337  1969 	C$i2c.h$196$1$86 ==.
                                   1970 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1971 ;	-----------------------------------------
                                   1972 ;	 function i2c_start
                                   1973 ;	-----------------------------------------
      000337                       1974 _i2c_start:
                           000337  1975 	C$i2c.h$198$1$88 ==.
                                   1976 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1977 00101$:
      000337 20 C7 FD         [24] 1978 	jb	_BUSY,00101$
                           00033A  1979 	C$i2c.h$199$1$88 ==.
                                   1980 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1981 	setb	_STA
                           00033C  1982 	C$i2c.h$200$1$88 ==.
                                   1983 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1984 00104$:
      00033C 30 C3 FD         [24] 1985 	jnb	_SI,00104$
                           00033F  1986 	C$i2c.h$201$1$88 ==.
                                   1987 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1988 	clr	_STA
                           000341  1989 	C$i2c.h$202$1$88 ==.
                                   1990 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1991 	clr	_SI
                           000343  1992 	C$i2c.h$203$1$88 ==.
                           000343  1993 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1994 	ret
                                   1995 ;------------------------------------------------------------
                                   1996 ;Allocation info for local variables in function 'i2c_write'
                                   1997 ;------------------------------------------------------------
                                   1998 ;output_data               Allocated to registers 
                                   1999 ;------------------------------------------------------------
                           000344  2000 	G$i2c_write$0$0 ==.
                           000344  2001 	C$i2c.h$206$1$88 ==.
                                   2002 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2003 ;	-----------------------------------------
                                   2004 ;	 function i2c_write
                                   2005 ;	-----------------------------------------
      000344                       2006 _i2c_write:
      000344 85 82 C2         [24] 2007 	mov	_SMB0DAT,dpl
                           000347  2008 	C$i2c.h$209$1$90 ==.
                                   2009 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2010 00101$:
                           000347  2011 	C$i2c.h$210$1$90 ==.
                                   2012 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2013 	jbc	_SI,00112$
      00034A 80 FB            [24] 2014 	sjmp	00101$
      00034C                       2015 00112$:
                           00034C  2016 	C$i2c.h$211$1$90 ==.
                           00034C  2017 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2018 	ret
                                   2019 ;------------------------------------------------------------
                                   2020 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2021 ;------------------------------------------------------------
                                   2022 ;output_data               Allocated to registers 
                                   2023 ;------------------------------------------------------------
                           00034D  2024 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2025 	C$i2c.h$214$1$90 ==.
                                   2026 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2027 ;	-----------------------------------------
                                   2028 ;	 function i2c_write_and_stop
                                   2029 ;	-----------------------------------------
      00034D                       2030 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2031 	mov	_SMB0DAT,dpl
                           000350  2032 	C$i2c.h$217$1$92 ==.
                                   2033 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2034 	setb	_STO
                           000352  2035 	C$i2c.h$218$1$92 ==.
                                   2036 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2037 00101$:
                           000352  2038 	C$i2c.h$219$1$92 ==.
                                   2039 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2040 	jbc	_SI,00112$
      000355 80 FB            [24] 2041 	sjmp	00101$
      000357                       2042 00112$:
                           000357  2043 	C$i2c.h$220$1$92 ==.
                           000357  2044 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2045 	ret
                                   2046 ;------------------------------------------------------------
                                   2047 ;Allocation info for local variables in function 'i2c_read'
                                   2048 ;------------------------------------------------------------
                                   2049 ;input_data                Allocated to registers 
                                   2050 ;------------------------------------------------------------
                           000358  2051 	G$i2c_read$0$0 ==.
                           000358  2052 	C$i2c.h$223$1$92 ==.
                                   2053 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2054 ;	-----------------------------------------
                                   2055 ;	 function i2c_read
                                   2056 ;	-----------------------------------------
      000358                       2057 _i2c_read:
                           000358  2058 	C$i2c.h$226$1$94 ==.
                                   2059 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2060 00101$:
      000358 30 C3 FD         [24] 2061 	jnb	_SI,00101$
                           00035B  2062 	C$i2c.h$227$1$94 ==.
                                   2063 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2064 	mov	dpl,_SMB0DAT
                           00035E  2065 	C$i2c.h$228$1$94 ==.
                                   2066 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2067 	clr	_SI
                           000360  2068 	C$i2c.h$229$1$94 ==.
                                   2069 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2070 	C$i2c.h$230$1$94 ==.
                           000360  2071 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2072 	ret
                                   2073 ;------------------------------------------------------------
                                   2074 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2075 ;------------------------------------------------------------
                                   2076 ;input_data                Allocated to registers r7 
                                   2077 ;------------------------------------------------------------
                           000361  2078 	G$i2c_read_and_stop$0$0 ==.
                           000361  2079 	C$i2c.h$233$1$94 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2081 ;	-----------------------------------------
                                   2082 ;	 function i2c_read_and_stop
                                   2083 ;	-----------------------------------------
      000361                       2084 _i2c_read_and_stop:
                           000361  2085 	C$i2c.h$236$1$96 ==.
                                   2086 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2087 00101$:
      000361 30 C3 FD         [24] 2088 	jnb	_SI,00101$
                           000364  2089 	C$i2c.h$237$1$96 ==.
                                   2090 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2091 	mov	r7,_SMB0DAT
                           000366  2092 	C$i2c.h$238$1$96 ==.
                                   2093 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2094 	clr	_SI
                           000368  2095 	C$i2c.h$239$1$96 ==.
                                   2096 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2097 	setb	_STO
                           00036A  2098 	C$i2c.h$240$1$96 ==.
                                   2099 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2100 00104$:
                           00036A  2101 	C$i2c.h$241$1$96 ==.
                                   2102 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2103 	jbc	_SI,00122$
      00036D 80 FB            [24] 2104 	sjmp	00104$
      00036F                       2105 00122$:
                           00036F  2106 	C$i2c.h$242$1$96 ==.
                                   2107 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2108 	mov	dpl,r7
                           000371  2109 	C$i2c.h$243$1$96 ==.
                           000371  2110 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2111 	ret
                                   2112 ;------------------------------------------------------------
                                   2113 ;Allocation info for local variables in function 'i2c_write_data'
                                   2114 ;------------------------------------------------------------
                                   2115 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2116 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2117 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2118 ;addr                      Allocated to registers r7 
                                   2119 ;i                         Allocated to registers 
                                   2120 ;------------------------------------------------------------
                           000372  2121 	G$i2c_write_data$0$0 ==.
                           000372  2122 	C$i2c.h$246$1$96 ==.
                                   2123 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2124 ;	-----------------------------------------
                                   2125 ;	 function i2c_write_data
                                   2126 ;	-----------------------------------------
      000372                       2127 _i2c_write_data:
      000372 AF 82            [24] 2128 	mov	r7,dpl
                           000374  2129 	C$i2c.h$250$1$98 ==.
                                   2130 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2131 	push	ar7
      000376 12r03r37         [24] 2132 	lcall	_i2c_start
      000379 D0 07            [24] 2133 	pop	ar7
                           00037B  2134 	C$i2c.h$251$1$98 ==.
                                   2135 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2136 	mov	a,#0xFE
      00037D 5F               [12] 2137 	anl	a,r7
      00037E F5 82            [12] 2138 	mov	dpl,a
      000380 12r03r44         [24] 2139 	lcall	_i2c_write
                           000383  2140 	C$i2c.h$252$1$98 ==.
                                   2141 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2142 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2143 	lcall	_i2c_write
                           000389  2144 	C$i2c.h$253$1$98 ==.
                                   2145 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2146 	mov	r7,#0x00
      00038B                       2147 00103$:
      00038B AD*09            [24] 2148 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2149 	mov	r6,#0x00
      00038F 1D               [12] 2150 	dec	r5
      000390 BD FF 01         [24] 2151 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2152 	dec	r6
      000394                       2153 00114$:
      000394 8F 03            [24] 2154 	mov	ar3,r7
      000396 7C 00            [12] 2155 	mov	r4,#0x00
      000398 C3               [12] 2156 	clr	c
      000399 EB               [12] 2157 	mov	a,r3
      00039A 9D               [12] 2158 	subb	a,r5
      00039B EC               [12] 2159 	mov	a,r4
      00039C 64 80            [12] 2160 	xrl	a,#0x80
      00039E 8E F0            [24] 2161 	mov	b,r6
      0003A0 63 F0 80         [24] 2162 	xrl	b,#0x80
      0003A3 95 F0            [12] 2163 	subb	a,b
      0003A5 50 1F            [24] 2164 	jnc	00101$
                           0003A7  2165 	C$i2c.h$254$1$98 ==.
                                   2166 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2167 	mov	a,r7
      0003A8 25*06            [12] 2168 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2169 	mov	r4,a
      0003AB E4               [12] 2170 	clr	a
      0003AC 35*07            [12] 2171 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2172 	mov	r5,a
      0003AF AE*08            [24] 2173 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2174 	mov	dpl,r4
      0003B3 8D 83            [24] 2175 	mov	dph,r5
      0003B5 8E F0            [24] 2176 	mov	b,r6
      0003B7 12r00r00         [24] 2177 	lcall	__gptrget
      0003BA F5 82            [12] 2178 	mov	dpl,a
      0003BC C0 07            [24] 2179 	push	ar7
      0003BE 12r03r44         [24] 2180 	lcall	_i2c_write
      0003C1 D0 07            [24] 2181 	pop	ar7
                           0003C3  2182 	C$i2c.h$253$1$98 ==.
                                   2183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2184 	inc	r7
      0003C4 80 C5            [24] 2185 	sjmp	00103$
      0003C6                       2186 00101$:
                           0003C6  2187 	C$i2c.h$255$1$98 ==.
                                   2188 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2189 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2190 	mov	r7,#0x00
      0003CA 1E               [12] 2191 	dec	r6
      0003CB BE FF 01         [24] 2192 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2193 	dec	r7
      0003CF                       2194 00116$:
      0003CF EE               [12] 2195 	mov	a,r6
      0003D0 25*06            [12] 2196 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2197 	mov	r6,a
      0003D3 EF               [12] 2198 	mov	a,r7
      0003D4 35*07            [12] 2199 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2200 	mov	r7,a
      0003D7 AD*08            [24] 2201 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2202 	mov	dpl,r6
      0003DB 8F 83            [24] 2203 	mov	dph,r7
      0003DD 8D F0            [24] 2204 	mov	b,r5
      0003DF 12r00r00         [24] 2205 	lcall	__gptrget
      0003E2 F5 82            [12] 2206 	mov	dpl,a
      0003E4 12r03r4D         [24] 2207 	lcall	_i2c_write_and_stop
                           0003E7  2208 	C$i2c.h$256$1$98 ==.
                           0003E7  2209 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2210 	ret
                                   2211 ;------------------------------------------------------------
                                   2212 ;Allocation info for local variables in function 'i2c_read_data'
                                   2213 ;------------------------------------------------------------
                                   2214 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2215 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2216 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2217 ;addr                      Allocated to registers r7 
                                   2218 ;j                         Allocated to registers 
                                   2219 ;------------------------------------------------------------
                           0003E8  2220 	G$i2c_read_data$0$0 ==.
                           0003E8  2221 	C$i2c.h$259$1$98 ==.
                                   2222 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2223 ;	-----------------------------------------
                                   2224 ;	 function i2c_read_data
                                   2225 ;	-----------------------------------------
      0003E8                       2226 _i2c_read_data:
      0003E8 AF 82            [24] 2227 	mov	r7,dpl
                           0003EA  2228 	C$i2c.h$262$1$100 ==.
                                   2229 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2230 	push	ar7
      0003EC 12r03r37         [24] 2231 	lcall	_i2c_start
      0003EF D0 07            [24] 2232 	pop	ar7
                           0003F1  2233 	C$i2c.h$263$1$100 ==.
                                   2234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2235 	mov	ar6,r7
      0003F3 74 FE            [12] 2236 	mov	a,#0xFE
      0003F5 5E               [12] 2237 	anl	a,r6
      0003F6 F5 82            [12] 2238 	mov	dpl,a
      0003F8 C0 07            [24] 2239 	push	ar7
      0003FA 12r03r44         [24] 2240 	lcall	_i2c_write
                           0003FD  2241 	C$i2c.h$264$1$100 ==.
                                   2242 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2243 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2244 	lcall	_i2c_write_and_stop
                           000403  2245 	C$i2c.h$265$1$100 ==.
                                   2246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2247 	lcall	_i2c_start
      000406 D0 07            [24] 2248 	pop	ar7
                           000408  2249 	C$i2c.h$266$1$100 ==.
                                   2250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2251 	mov	a,#0x01
      00040A 4F               [12] 2252 	orl	a,r7
      00040B F5 82            [12] 2253 	mov	dpl,a
      00040D 12r03r44         [24] 2254 	lcall	_i2c_write
                           000410  2255 	C$i2c.h$267$1$100 ==.
                                   2256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2257 	mov	r7,#0x00
      000412                       2258 00103$:
      000412 AD*0E            [24] 2259 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2260 	mov	r6,#0x00
      000416 1D               [12] 2261 	dec	r5
      000417 BD FF 01         [24] 2262 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2263 	dec	r6
      00041B                       2264 00114$:
      00041B 8F 03            [24] 2265 	mov	ar3,r7
      00041D 7C 00            [12] 2266 	mov	r4,#0x00
      00041F C3               [12] 2267 	clr	c
      000420 EB               [12] 2268 	mov	a,r3
      000421 9D               [12] 2269 	subb	a,r5
      000422 EC               [12] 2270 	mov	a,r4
      000423 64 80            [12] 2271 	xrl	a,#0x80
      000425 8E F0            [24] 2272 	mov	b,r6
      000427 63 F0 80         [24] 2273 	xrl	b,#0x80
      00042A 95 F0            [12] 2274 	subb	a,b
      00042C 50 2E            [24] 2275 	jnc	00101$
                           00042E  2276 	C$i2c.h$269$2$101 ==.
                                   2277 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2278 	setb	_AA
                           000430  2279 	C$i2c.h$270$2$101 ==.
                                   2280 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2281 	mov	a,r7
      000431 25*0B            [12] 2282 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2283 	mov	r4,a
      000434 E4               [12] 2284 	clr	a
      000435 35*0C            [12] 2285 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2286 	mov	r5,a
      000438 AE*0D            [24] 2287 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2288 	push	ar7
      00043C C0 06            [24] 2289 	push	ar6
      00043E C0 05            [24] 2290 	push	ar5
      000440 C0 04            [24] 2291 	push	ar4
      000442 12r03r58         [24] 2292 	lcall	_i2c_read
      000445 AB 82            [24] 2293 	mov	r3,dpl
      000447 D0 04            [24] 2294 	pop	ar4
      000449 D0 05            [24] 2295 	pop	ar5
      00044B D0 06            [24] 2296 	pop	ar6
      00044D D0 07            [24] 2297 	pop	ar7
      00044F 8C 82            [24] 2298 	mov	dpl,r4
      000451 8D 83            [24] 2299 	mov	dph,r5
      000453 8E F0            [24] 2300 	mov	b,r6
      000455 EB               [12] 2301 	mov	a,r3
      000456 12r00r00         [24] 2302 	lcall	__gptrput
                           000459  2303 	C$i2c.h$267$1$100 ==.
                                   2304 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2305 	inc	r7
      00045A 80 B6            [24] 2306 	sjmp	00103$
      00045C                       2307 00101$:
                           00045C  2308 	C$i2c.h$272$1$100 ==.
                                   2309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2310 	clr	_AA
                           00045E  2311 	C$i2c.h$273$1$100 ==.
                                   2312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2313 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2314 	mov	r7,#0x00
      000462 1E               [12] 2315 	dec	r6
      000463 BE FF 01         [24] 2316 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2317 	dec	r7
      000467                       2318 00116$:
      000467 EE               [12] 2319 	mov	a,r6
      000468 25*0B            [12] 2320 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2321 	mov	r6,a
      00046B EF               [12] 2322 	mov	a,r7
      00046C 35*0C            [12] 2323 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2324 	mov	r7,a
      00046F AD*0D            [24] 2325 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2326 	push	ar7
      000473 C0 06            [24] 2327 	push	ar6
      000475 C0 05            [24] 2328 	push	ar5
      000477 12r03r61         [24] 2329 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2330 	mov	r4,dpl
      00047C D0 05            [24] 2331 	pop	ar5
      00047E D0 06            [24] 2332 	pop	ar6
      000480 D0 07            [24] 2333 	pop	ar7
      000482 8E 82            [24] 2334 	mov	dpl,r6
      000484 8F 83            [24] 2335 	mov	dph,r7
      000486 8D F0            [24] 2336 	mov	b,r5
      000488 EC               [12] 2337 	mov	a,r4
      000489 12r00r00         [24] 2338 	lcall	__gptrput
                           00048C  2339 	C$i2c.h$274$1$100 ==.
                           00048C  2340 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2341 	ret
                                   2342 ;------------------------------------------------------------
                                   2343 ;Allocation info for local variables in function 'Accel_Init'
                                   2344 ;------------------------------------------------------------
                                   2345 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2346 ;------------------------------------------------------------
                           00048D  2347 	G$Accel_Init$0$0 ==.
                           00048D  2348 	C$i2c.h$283$1$100 ==.
                                   2349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2350 ;	-----------------------------------------
                                   2351 ;	 function Accel_Init
                                   2352 ;	-----------------------------------------
      00048D                       2353 _Accel_Init:
                           00048D  2354 	C$i2c.h$287$1$103 ==.
                                   2355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2356 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2357 	C$i2c.h$289$1$103 ==.
                                   2358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2359 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2360 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2361 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2362 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2363 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2364 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2365 	lcall	_i2c_write_data
                           0004A5  2366 	C$i2c.h$290$1$103 ==.
                                   2367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2368 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2369 	C$i2c.h$292$1$103 ==.
                                   2370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2371 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2372 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2373 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2374 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2375 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2376 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2377 	lcall	_i2c_write_data
                           0004BD  2378 	C$i2c.h$293$1$103 ==.
                                   2379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2380 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2381 	C$i2c.h$294$1$103 ==.
                                   2382 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2383 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2384 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2385 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2386 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2387 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2388 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2389 	lcall	_i2c_write_data
                           0004D5  2390 	C$i2c.h$298$1$103 ==.
                           0004D5  2391 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2392 	ret
                                   2393 ;------------------------------------------------------------
                                   2394 ;Allocation info for local variables in function 'main'
                                   2395 ;------------------------------------------------------------
                           0004D6  2396 	G$main$0$0 ==.
                           0004D6  2397 	C$Squiggles.c$66$1$103 ==.
                                   2398 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:66: void main(void)
                                   2399 ;	-----------------------------------------
                                   2400 ;	 function main
                                   2401 ;	-----------------------------------------
      0004D6                       2402 _main:
                           0004D6  2403 	C$Squiggles.c$68$1$120 ==.
                                   2404 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:68: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2405 	lcall	_Sys_Init
                           0004D9  2406 	C$Squiggles.c$69$1$120 ==.
                                   2407 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:69: Port_Init();    
      0004D9 12r06r8D         [24] 2408 	lcall	_Port_Init
                           0004DC  2409 	C$Squiggles.c$70$1$120 ==.
                                   2410 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:70: Interrupt_Init();   
      0004DC 12r06rAB         [24] 2411 	lcall	_Interrupt_Init
                           0004DF  2412 	C$Squiggles.c$71$1$120 ==.
                                   2413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:71: PCA_Init();
      0004DF 12r06rB4         [24] 2414 	lcall	_PCA_Init
                           0004E2  2415 	C$Squiggles.c$72$1$120 ==.
                                   2416 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:72: ADC_Init();
      0004E2 12r07r13         [24] 2417 	lcall	_ADC_Init
                           0004E5  2418 	C$Squiggles.c$73$1$120 ==.
                                   2419 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:73: SMB0_Init();
      0004E5 12r06rC1         [24] 2420 	lcall	_SMB0_Init
                           0004E8  2421 	C$Squiggles.c$74$1$120 ==.
                                   2422 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:74: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2423 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2424 	lcall	_putchar
                           0004EE  2425 	C$Squiggles.c$75$1$120 ==.
                                   2426 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:75: printf("\nStart\r\n");
      0004EE 74r29            [12] 2427 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2428 	push	acc
      0004F2 74s00            [12] 2429 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2430 	push	acc
      0004F6 74 80            [12] 2431 	mov	a,#0x80
      0004F8 C0 E0            [24] 2432 	push	acc
      0004FA 12r00r00         [24] 2433 	lcall	_printf
      0004FD 15 81            [12] 2434 	dec	sp
      0004FF 15 81            [12] 2435 	dec	sp
      000501 15 81            [12] 2436 	dec	sp
                           000503  2437 	C$Squiggles.c$76$1$120 ==.
                                   2438 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:76: PCA0CP0 = 0xFFFF - COMPASS_CENTER;
      000503 75 EA 37         [24] 2439 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000506 75 FA F5         [24] 2440 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2441 	C$Squiggles.c$77$1$120 ==.
                                   2442 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:77: PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Car isn't moving to start
      000509 75 EC 37         [24] 2443 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00050C 75 FC F5         [24] 2444 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           00050F  2445 	C$Squiggles.c$79$1$120 ==.
                                   2446 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:79: Counts = 0;
      00050F E4               [12] 2447 	clr	a
      000510 F5*10            [12] 2448 	mov	_Counts,a
      000512 F5*11            [12] 2449 	mov	(_Counts + 1),a
                           000514  2450 	C$Squiggles.c$80$1$120 ==.
                                   2451 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:80: while (Counts < 1); //{ printf("\r%u\n", nCounts); } // Wait a long time (1s) for keypad & LCD to initialize
      000514                       2452 00101$:
      000514 C3               [12] 2453 	clr	c
      000515 E5*10            [12] 2454 	mov	a,_Counts
      000517 94 01            [12] 2455 	subb	a,#0x01
      000519 E5*11            [12] 2456 	mov	a,(_Counts + 1)
      00051B 94 00            [12] 2457 	subb	a,#0x00
      00051D 40 F5            [24] 2458 	jc	00101$
                           00051F  2459 	C$Squiggles.c$82$1$120 ==.
                                   2460 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:82: printf("\n\rPlease input data on the LCD.\n");
      00051F 74r32            [12] 2461 	mov	a,#___str_4
      000521 C0 E0            [24] 2462 	push	acc
      000523 74s00            [12] 2463 	mov	a,#(___str_4 >> 8)
      000525 C0 E0            [24] 2464 	push	acc
      000527 74 80            [12] 2465 	mov	a,#0x80
      000529 C0 E0            [24] 2466 	push	acc
      00052B 12r00r00         [24] 2467 	lcall	_printf
      00052E 15 81            [12] 2468 	dec	sp
      000530 15 81            [12] 2469 	dec	sp
      000532 15 81            [12] 2470 	dec	sp
                           000534  2471 	C$Squiggles.c$83$1$120 ==.
                                   2472 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:83: Pick_Heading();
      000534 12r07r33         [24] 2473 	lcall	_Pick_Heading
                           000537  2474 	C$Squiggles.c$84$1$120 ==.
                                   2475 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:84: Pick_Compass_Gain();
      000537 12r07rC6         [24] 2476 	lcall	_Pick_Compass_Gain
                           00053A  2477 	C$Squiggles.c$85$1$120 ==.
                                   2478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:85: printf("\n\r------------DATA COLLECTION------------\n");
      00053A 74r53            [12] 2479 	mov	a,#___str_5
      00053C C0 E0            [24] 2480 	push	acc
      00053E 74s00            [12] 2481 	mov	a,#(___str_5 >> 8)
      000540 C0 E0            [24] 2482 	push	acc
      000542 74 80            [12] 2483 	mov	a,#0x80
      000544 C0 E0            [24] 2484 	push	acc
      000546 12r00r00         [24] 2485 	lcall	_printf
      000549 15 81            [12] 2486 	dec	sp
      00054B 15 81            [12] 2487 	dec	sp
      00054D 15 81            [12] 2488 	dec	sp
                           00054F  2489 	C$Squiggles.c$88$2$121 ==.
                                   2490 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:88: while(!RANGER_SWITCH && !COMPASS_SWITCH)
      00054F                       2491 00117$:
      00054F 30 B6 03         [24] 2492 	jnb	_RANGER_SWITCH,00162$
      000552 02r06r71         [24] 2493 	ljmp	00119$
      000555                       2494 00162$:
      000555 30 B7 03         [24] 2495 	jnb	_COMPASS_SWITCH,00163$
      000558 02r06r71         [24] 2496 	ljmp	00119$
      00055B                       2497 00163$:
                           00055B  2498 	C$Squiggles.c$90$3$122 ==.
                                   2499 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:90: if ((new_range)) // enough overflow for a new range
      00055B E5*1E            [12] 2500 	mov	a,_new_range
      00055D 60 38            [24] 2501 	jz	00111$
                           00055F  2502 	C$Squiggles.c$92$4$123 ==.
                                   2503 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:92: new_range = 0;	//clear and wait for next ping
      00055F 75*1E 00         [24] 2504 	mov	_new_range,#0x00
                           000562  2505 	C$Squiggles.c$93$4$123 ==.
                                   2506 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:93: range = read_ranger();	// Read the distance
      000562 12r09r12         [24] 2507 	lcall	_read_ranger
      000565 85 82*21         [24] 2508 	mov	_range,dpl
      000568 85 83*22         [24] 2509 	mov	(_range + 1),dph
                           00056B  2510 	C$Squiggles.c$95$4$123 ==.
                                   2511 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:95: if (range != 0xFFFF) //Ignores dummy values from the ranger
      00056B 74 FF            [12] 2512 	mov	a,#0xFF
      00056D B5*21 07         [24] 2513 	cjne	a,_range,00165$
      000570 74 FF            [12] 2514 	mov	a,#0xFF
      000572 B5*22 02         [24] 2515 	cjne	a,(_range + 1),00165$
      000575 80 1B            [24] 2516 	sjmp	00108$
      000577                       2517 00165$:
                           000577  2518 	C$Squiggles.c$97$5$124 ==.
                                   2519 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:97: if(range < 18) PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Stop if near an object
      000577 C3               [12] 2520 	clr	c
      000578 E5*21            [12] 2521 	mov	a,_range
      00057A 94 12            [12] 2522 	subb	a,#0x12
      00057C E5*22            [12] 2523 	mov	a,(_range + 1)
      00057E 94 00            [12] 2524 	subb	a,#0x00
      000580 50 08            [24] 2525 	jnc	00105$
      000582 75 EC 37         [24] 2526 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000585 75 FC F5         [24] 2527 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
      000588 80 0D            [24] 2528 	sjmp	00111$
      00058A                       2529 00105$:
                           00058A  2530 	C$Squiggles.c$98$5$124 ==.
                                   2531 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:98: else PCA0CP2 = 0xFFFF - 3300; //Car moves at a constant speed otherwise
      00058A 75 EC 1B         [24] 2532 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x1B
      00058D 75 FC F3         [24] 2533 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF3
      000590 80 05            [24] 2534 	sjmp	00111$
      000592                       2535 00108$:
                           000592  2536 	C$Squiggles.c$106$5$125 ==.
                                   2537 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:106: range_adj = 0;
      000592 E4               [12] 2538 	clr	a
      000593 F5*25            [12] 2539 	mov	_range_adj,a
      000595 F5*26            [12] 2540 	mov	(_range_adj + 1),a
      000597                       2541 00111$:
                           000597  2542 	C$Squiggles.c$109$3$122 ==.
                                   2543 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:109: AD_Result = read_AD_input(5); //Read analog input on pin 1.5
      000597 75 82 05         [24] 2544 	mov	dpl,#0x05
      00059A 12r07r1D         [24] 2545 	lcall	_read_AD_input
                           00059D  2546 	C$Squiggles.c$110$1$120 ==.
                                   2547 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:110: voltage = ((14.4/255)*AD_Result); //Convert back to input voltage
      00059D 85 82*2A         [24] 2548 	mov  _AD_Result,dpl
      0005A0 12r00r00         [24] 2549 	lcall	___uchar2fs
      0005A3 AC 82            [24] 2550 	mov	r4,dpl
      0005A5 AD 83            [24] 2551 	mov	r5,dph
      0005A7 AE F0            [24] 2552 	mov	r6,b
      0005A9 FF               [12] 2553 	mov	r7,a
      0005AA C0 04            [24] 2554 	push	ar4
      0005AC C0 05            [24] 2555 	push	ar5
      0005AE C0 06            [24] 2556 	push	ar6
      0005B0 C0 07            [24] 2557 	push	ar7
      0005B2 90 4D B4         [24] 2558 	mov	dptr,#0x4DB4
      0005B5 75 F0 67         [24] 2559 	mov	b,#0x67
      0005B8 74 3D            [12] 2560 	mov	a,#0x3D
      0005BA 12r00r00         [24] 2561 	lcall	___fsmul
      0005BD AC 82            [24] 2562 	mov	r4,dpl
      0005BF AD 83            [24] 2563 	mov	r5,dph
      0005C1 AE F0            [24] 2564 	mov	r6,b
      0005C3 FF               [12] 2565 	mov	r7,a
      0005C4 E5 81            [12] 2566 	mov	a,sp
      0005C6 24 FC            [12] 2567 	add	a,#0xfc
      0005C8 F5 81            [12] 2568 	mov	sp,a
      0005CA 8C 82            [24] 2569 	mov	dpl,r4
      0005CC 8D 83            [24] 2570 	mov	dph,r5
      0005CE 8E F0            [24] 2571 	mov	b,r6
      0005D0 EF               [12] 2572 	mov	a,r7
      0005D1 12r00r00         [24] 2573 	lcall	___fs2uchar
      0005D4 85 82*2B         [24] 2574 	mov	_voltage,dpl
                           0005D7  2575 	C$Squiggles.c$111$3$122 ==.
                                   2576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:111: if((new_heading))	// enough overflow for a new heading
      0005D7 E5*1D            [12] 2577 	mov	a,_new_heading
      0005D9 60 0F            [24] 2578 	jz	00113$
                           0005DB  2579 	C$Squiggles.c$113$4$126 ==.
                                   2580 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:113: new_heading = 0;
      0005DB 75*1D 00         [24] 2581 	mov	_new_heading,#0x00
                           0005DE  2582 	C$Squiggles.c$114$4$126 ==.
                                   2583 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:114: heading = read_compass();	
      0005DE 12r08rEC         [24] 2584 	lcall	_read_compass
      0005E1 85 82*1F         [24] 2585 	mov	_heading,dpl
      0005E4 85 83*20         [24] 2586 	mov	(_heading + 1),dph
                           0005E7  2587 	C$Squiggles.c$116$4$126 ==.
                                   2588 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:116: set_COMPASS_PW(); // Adjust pulsewidth based on error function
      0005E7 12r09rDD         [24] 2589 	lcall	_set_COMPASS_PW
      0005EA                       2590 00113$:
                           0005EA  2591 	C$Squiggles.c$118$3$122 ==.
                                   2592 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:118: if(print_delay == 20)
      0005EA 74 14            [12] 2593 	mov	a,#0x14
      0005EC B5*2E 02         [24] 2594 	cjne	a,_print_delay,00168$
      0005EF 80 03            [24] 2595 	sjmp	00169$
      0005F1                       2596 00168$:
      0005F1 02r05r4F         [24] 2597 	ljmp	00117$
      0005F4                       2598 00169$:
                           0005F4  2599 	C$Squiggles.c$122$1$120 ==.
                                   2600 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:122: printf("\rHeading: %u\n", heading/10);
      0005F4 75*00 0A         [24] 2601 	mov	__divuint_PARM_2,#0x0A
      0005F7 75*01 00         [24] 2602 	mov	(__divuint_PARM_2 + 1),#0x00
      0005FA 85*1F 82         [24] 2603 	mov	dpl,_heading
      0005FD 85*20 83         [24] 2604 	mov	dph,(_heading + 1)
      000600 12r00r00         [24] 2605 	lcall	__divuint
      000603 AE 82            [24] 2606 	mov	r6,dpl
      000605 AF 83            [24] 2607 	mov	r7,dph
      000607 C0 06            [24] 2608 	push	ar6
      000609 C0 07            [24] 2609 	push	ar7
      00060B 74r7E            [12] 2610 	mov	a,#___str_6
      00060D C0 E0            [24] 2611 	push	acc
      00060F 74s00            [12] 2612 	mov	a,#(___str_6 >> 8)
      000611 C0 E0            [24] 2613 	push	acc
      000613 74 80            [12] 2614 	mov	a,#0x80
      000615 C0 E0            [24] 2615 	push	acc
      000617 12r00r00         [24] 2616 	lcall	_printf
      00061A E5 81            [12] 2617 	mov	a,sp
      00061C 24 FB            [12] 2618 	add	a,#0xfb
      00061E F5 81            [12] 2619 	mov	sp,a
                           000620  2620 	C$Squiggles.c$124$4$127 ==.
                                   2621 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:124: printf("\rOverflows: %u\n", nCounts);
      000620 C0*12            [24] 2622 	push	_nCounts
      000622 C0*13            [24] 2623 	push	(_nCounts + 1)
      000624 74r8C            [12] 2624 	mov	a,#___str_7
      000626 C0 E0            [24] 2625 	push	acc
      000628 74s00            [12] 2626 	mov	a,#(___str_7 >> 8)
      00062A C0 E0            [24] 2627 	push	acc
      00062C 74 80            [12] 2628 	mov	a,#0x80
      00062E C0 E0            [24] 2629 	push	acc
      000630 12r00r00         [24] 2630 	lcall	_printf
      000633 E5 81            [12] 2631 	mov	a,sp
      000635 24 FB            [12] 2632 	add	a,#0xfb
      000637 F5 81            [12] 2633 	mov	sp,a
                           000639  2634 	C$Squiggles.c$125$4$127 ==.
                                   2635 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:125: printf("\rHeading Error: %d\n", Error);
      000639 C0*2F            [24] 2636 	push	_Error
      00063B C0*30            [24] 2637 	push	(_Error + 1)
      00063D 74r9C            [12] 2638 	mov	a,#___str_8
      00063F C0 E0            [24] 2639 	push	acc
      000641 74s00            [12] 2640 	mov	a,#(___str_8 >> 8)
      000643 C0 E0            [24] 2641 	push	acc
      000645 74 80            [12] 2642 	mov	a,#0x80
      000647 C0 E0            [24] 2643 	push	acc
      000649 12r00r00         [24] 2644 	lcall	_printf
      00064C E5 81            [12] 2645 	mov	a,sp
      00064E 24 FB            [12] 2646 	add	a,#0xfb
      000650 F5 81            [12] 2647 	mov	sp,a
                           000652  2648 	C$Squiggles.c$126$4$127 ==.
                                   2649 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:126: printf("\rSteering Pulsewidth: %u\n", COMPASS_PW);
      000652 C0*23            [24] 2650 	push	_COMPASS_PW
      000654 C0*24            [24] 2651 	push	(_COMPASS_PW + 1)
      000656 74rB0            [12] 2652 	mov	a,#___str_9
      000658 C0 E0            [24] 2653 	push	acc
      00065A 74s00            [12] 2654 	mov	a,#(___str_9 >> 8)
      00065C C0 E0            [24] 2655 	push	acc
      00065E 74 80            [12] 2656 	mov	a,#0x80
      000660 C0 E0            [24] 2657 	push	acc
      000662 12r00r00         [24] 2658 	lcall	_printf
      000665 E5 81            [12] 2659 	mov	a,sp
      000667 24 FB            [12] 2660 	add	a,#0xfb
      000669 F5 81            [12] 2661 	mov	sp,a
                           00066B  2662 	C$Squiggles.c$127$4$127 ==.
                                   2663 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:127: print_delay = 0;
      00066B 75*2E 00         [24] 2664 	mov	_print_delay,#0x00
      00066E 02r05r4F         [24] 2665 	ljmp	00117$
      000671                       2666 00119$:
                           000671  2667 	C$Squiggles.c$135$2$121 ==.
                                   2668 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:135: if(RANGER_SWITCH || COMPASS_SWITCH)
      000671 20 B6 06         [24] 2669 	jb	_RANGER_SWITCH,00120$
      000674 20 B7 03         [24] 2670 	jb	_COMPASS_SWITCH,00171$
      000677 02r05r4F         [24] 2671 	ljmp	00117$
      00067A                       2672 00171$:
      00067A                       2673 00120$:
                           00067A  2674 	C$Squiggles.c$137$3$128 ==.
                                   2675 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:137: PCA0CP0 = 0xFFFF - 2760;
      00067A 75 EA 37         [24] 2676 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      00067D 75 FA F5         [24] 2677 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000680  2678 	C$Squiggles.c$138$3$128 ==.
                                   2679 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:138: PCA0CP2 = 0xFFFF - 2760;
      000680 75 EC 37         [24] 2680 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000683 75 FC F5         [24] 2681 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000686  2682 	C$Squiggles.c$142$3$128 ==.
                                   2683 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:142: Pick_Compass_Gain();
      000686 12r07rC6         [24] 2684 	lcall	_Pick_Compass_Gain
      000689 02r05r4F         [24] 2685 	ljmp	00117$
                           00068C  2686 	C$Squiggles.c$145$1$120 ==.
                           00068C  2687 	XG$main$0$0 ==.
      00068C 22               [24] 2688 	ret
                                   2689 ;------------------------------------------------------------
                                   2690 ;Allocation info for local variables in function 'Port_Init'
                                   2691 ;------------------------------------------------------------
                           00068D  2692 	G$Port_Init$0$0 ==.
                           00068D  2693 	C$Squiggles.c$149$1$120 ==.
                                   2694 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:149: void Port_Init(void)	
                                   2695 ;	-----------------------------------------
                                   2696 ;	 function Port_Init
                                   2697 ;	-----------------------------------------
      00068D                       2698 _Port_Init:
                           00068D  2699 	C$Squiggles.c$151$1$130 ==.
                                   2700 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:151: XBR0 = 0x27;
      00068D 75 E1 27         [24] 2701 	mov	_XBR0,#0x27
                           000690  2702 	C$Squiggles.c$152$1$130 ==.
                                   2703 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:152: P1MDIN 	&= 0xDF;	// set pin 1.3 for analog input	
      000690 53 BD DF         [24] 2704 	anl	_P1MDIN,#0xDF
                           000693  2705 	C$Squiggles.c$153$1$130 ==.
                                   2706 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:153: P1MDOUT |= 0x05;	//set output pin for CEX0 in push-pull mode
      000693 43 A5 05         [24] 2707 	orl	_P1MDOUT,#0x05
                           000696  2708 	C$Squiggles.c$154$1$130 ==.
                                   2709 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:154: P1MDOUT &= 0xDF;	// set input pin for 1.3 to open-drain
      000696 53 A5 DF         [24] 2710 	anl	_P1MDOUT,#0xDF
                           000699  2711 	C$Squiggles.c$155$1$130 ==.
                                   2712 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:155: P1		|= ~0xDF;	// set input pin for 1.3 to high impedence
      000699 AF 90            [24] 2713 	mov	r7,_P1
      00069B 74 20            [12] 2714 	mov	a,#0x20
      00069D 4F               [12] 2715 	orl	a,r7
      00069E F5 90            [12] 2716 	mov	_P1,a
                           0006A0  2717 	C$Squiggles.c$156$1$130 ==.
                                   2718 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:156: P3MDOUT &= 0x7F;	// set input pin for 3.7 to open-drain
      0006A0 53 A7 7F         [24] 2719 	anl	_P3MDOUT,#0x7F
                           0006A3  2720 	C$Squiggles.c$157$1$130 ==.
                                   2721 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:157: P3		|= ~0x7F;	// set input pin for 3.7 to high impedence
      0006A3 AF B0            [24] 2722 	mov	r7,_P3
      0006A5 74 80            [12] 2723 	mov	a,#0x80
      0006A7 4F               [12] 2724 	orl	a,r7
      0006A8 F5 B0            [12] 2725 	mov	_P3,a
                           0006AA  2726 	C$Squiggles.c$159$1$130 ==.
                           0006AA  2727 	XG$Port_Init$0$0 ==.
      0006AA 22               [24] 2728 	ret
                                   2729 ;------------------------------------------------------------
                                   2730 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2731 ;------------------------------------------------------------
                           0006AB  2732 	G$Interrupt_Init$0$0 ==.
                           0006AB  2733 	C$Squiggles.c$163$1$130 ==.
                                   2734 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:163: void Interrupt_Init(void)
                                   2735 ;	-----------------------------------------
                                   2736 ;	 function Interrupt_Init
                                   2737 ;	-----------------------------------------
      0006AB                       2738 _Interrupt_Init:
                           0006AB  2739 	C$Squiggles.c$165$1$132 ==.
                                   2740 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:165: IE |= 0x02;
      0006AB 43 A8 02         [24] 2741 	orl	_IE,#0x02
                           0006AE  2742 	C$Squiggles.c$166$1$132 ==.
                                   2743 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:166: EIE1 |= 0x08;
      0006AE 43 E6 08         [24] 2744 	orl	_EIE1,#0x08
                           0006B1  2745 	C$Squiggles.c$167$1$132 ==.
                                   2746 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:167: EA = 1;
      0006B1 D2 AF            [12] 2747 	setb	_EA
                           0006B3  2748 	C$Squiggles.c$168$1$132 ==.
                           0006B3  2749 	XG$Interrupt_Init$0$0 ==.
      0006B3 22               [24] 2750 	ret
                                   2751 ;------------------------------------------------------------
                                   2752 ;Allocation info for local variables in function 'PCA_Init'
                                   2753 ;------------------------------------------------------------
                           0006B4  2754 	G$PCA_Init$0$0 ==.
                           0006B4  2755 	C$Squiggles.c$172$1$132 ==.
                                   2756 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:172: void PCA_Init(void)
                                   2757 ;	-----------------------------------------
                                   2758 ;	 function PCA_Init
                                   2759 ;	-----------------------------------------
      0006B4                       2760 _PCA_Init:
                           0006B4  2761 	C$Squiggles.c$174$1$134 ==.
                                   2762 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:174: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      0006B4 75 D9 81         [24] 2763 	mov	_PCA0MD,#0x81
                           0006B7  2764 	C$Squiggles.c$175$1$134 ==.
                                   2765 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:175: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      0006B7 75 DA C2         [24] 2766 	mov	_PCA0CPM0,#0xC2
                           0006BA  2767 	C$Squiggles.c$176$1$134 ==.
                                   2768 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:176: PCA0CPM2 = 0xC2;
      0006BA 75 DC C2         [24] 2769 	mov	_PCA0CPM2,#0xC2
                           0006BD  2770 	C$Squiggles.c$177$1$134 ==.
                                   2771 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:177: PCA0CN = 0x40;     // enable PCA
      0006BD 75 D8 40         [24] 2772 	mov	_PCA0CN,#0x40
                           0006C0  2773 	C$Squiggles.c$178$1$134 ==.
                           0006C0  2774 	XG$PCA_Init$0$0 ==.
      0006C0 22               [24] 2775 	ret
                                   2776 ;------------------------------------------------------------
                                   2777 ;Allocation info for local variables in function 'SMB0_Init'
                                   2778 ;------------------------------------------------------------
                           0006C1  2779 	G$SMB0_Init$0$0 ==.
                           0006C1  2780 	C$Squiggles.c$182$1$134 ==.
                                   2781 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:182: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2782 ;	-----------------------------------------
                                   2783 ;	 function SMB0_Init
                                   2784 ;	-----------------------------------------
      0006C1                       2785 _SMB0_Init:
                           0006C1  2786 	C$Squiggles.c$184$1$136 ==.
                                   2787 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:184: SMB0CR = 0x93;      // Set SCL to 100KHz
      0006C1 75 CF 93         [24] 2788 	mov	_SMB0CR,#0x93
                           0006C4  2789 	C$Squiggles.c$185$1$136 ==.
                                   2790 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:185: ENSMB = 1;          // Enable SMBUS0
      0006C4 D2 C6            [12] 2791 	setb	_ENSMB
                           0006C6  2792 	C$Squiggles.c$186$1$136 ==.
                           0006C6  2793 	XG$SMB0_Init$0$0 ==.
      0006C6 22               [24] 2794 	ret
                                   2795 ;------------------------------------------------------------
                                   2796 ;Allocation info for local variables in function 'PCA_ISR'
                                   2797 ;------------------------------------------------------------
                           0006C7  2798 	G$PCA_ISR$0$0 ==.
                           0006C7  2799 	C$Squiggles.c$190$1$136 ==.
                                   2800 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:190: void PCA_ISR(void) __interrupt 9
                                   2801 ;	-----------------------------------------
                                   2802 ;	 function PCA_ISR
                                   2803 ;	-----------------------------------------
      0006C7                       2804 _PCA_ISR:
      0006C7 C0 E0            [24] 2805 	push	acc
      0006C9 C0 D0            [24] 2806 	push	psw
                           0006CB  2807 	C$Squiggles.c$192$1$138 ==.
                                   2808 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:192: if (CF)
                           0006CB  2809 	C$Squiggles.c$194$2$139 ==.
                                   2810 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:194: CF = 0;                     // clear the interrupt flag
      0006CB 10 DF 02         [24] 2811 	jbc	_CF,00123$
      0006CE 80 3E            [24] 2812 	sjmp	00109$
      0006D0                       2813 00123$:
                           0006D0  2814 	C$Squiggles.c$195$2$139 ==.
                                   2815 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:195: nCounts++;					// Counts overflows for initial delay
      0006D0 05*12            [12] 2816 	inc	_nCounts
      0006D2 E4               [12] 2817 	clr	a
      0006D3 B5*12 02         [24] 2818 	cjne	a,_nCounts,00124$
      0006D6 05*13            [12] 2819 	inc	(_nCounts + 1)
      0006D8                       2820 00124$:
                           0006D8  2821 	C$Squiggles.c$196$2$139 ==.
                                   2822 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:196: PCA0 = PCA_START;
      0006D8 75 E9 00         [24] 2823 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0006DB 75 F9 70         [24] 2824 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0006DE  2825 	C$Squiggles.c$197$2$139 ==.
                                   2826 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:197: if (nCounts > 50)
      0006DE C3               [12] 2827 	clr	c
      0006DF 74 32            [12] 2828 	mov	a,#0x32
      0006E1 95*12            [12] 2829 	subb	a,_nCounts
      0006E3 E4               [12] 2830 	clr	a
      0006E4 95*13            [12] 2831 	subb	a,(_nCounts + 1)
      0006E6 50 08            [24] 2832 	jnc	00102$
                           0006E8  2833 	C$Squiggles.c$200$3$140 ==.
                                   2834 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:200: Counts++;               // seconds counter
      0006E8 05*10            [12] 2835 	inc	_Counts
      0006EA E4               [12] 2836 	clr	a
      0006EB B5*10 02         [24] 2837 	cjne	a,_Counts,00126$
      0006EE 05*11            [12] 2838 	inc	(_Counts + 1)
      0006F0                       2839 00126$:
      0006F0                       2840 00102$:
                           0006F0  2841 	C$Squiggles.c$202$2$139 ==.
                                   2842 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:202: h_count++;					// delay 
      0006F0 05*1A            [12] 2843 	inc	_h_count
                           0006F2  2844 	C$Squiggles.c$203$2$139 ==.
                                   2845 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:203: if (h_count>=8)
      0006F2 74 F8            [12] 2846 	mov	a,#0x100 - 0x08
      0006F4 25*1A            [12] 2847 	add	a,_h_count
      0006F6 50 06            [24] 2848 	jnc	00104$
                           0006F8  2849 	C$Squiggles.c$205$3$141 ==.
                                   2850 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:205: new_heading=1;
      0006F8 75*1D 01         [24] 2851 	mov	_new_heading,#0x01
                           0006FB  2852 	C$Squiggles.c$206$3$141 ==.
                                   2853 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:206: h_count = 0;
      0006FB 75*1A 00         [24] 2854 	mov	_h_count,#0x00
      0006FE                       2855 00104$:
                           0006FE  2856 	C$Squiggles.c$208$2$139 ==.
                                   2857 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:208: print_delay++;
      0006FE 05*2E            [12] 2858 	inc	_print_delay
                           000700  2859 	C$Squiggles.c$210$2$139 ==.
                                   2860 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:210: r_count++;
      000700 05*1B            [12] 2861 	inc	_r_count
                           000702  2862 	C$Squiggles.c$211$2$139 ==.
                                   2863 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:211: if (r_count>=12)
      000702 74 F4            [12] 2864 	mov	a,#0x100 - 0x0C
      000704 25*1B            [12] 2865 	add	a,_r_count
      000706 50 06            [24] 2866 	jnc	00109$
                           000708  2867 	C$Squiggles.c$213$3$142 ==.
                                   2868 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:213: new_range = 1;
      000708 75*1E 01         [24] 2869 	mov	_new_range,#0x01
                           00070B  2870 	C$Squiggles.c$214$3$142 ==.
                                   2871 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:214: r_count = 0;
      00070B 75*1B 00         [24] 2872 	mov	_r_count,#0x00
      00070E                       2873 00109$:
      00070E D0 D0            [24] 2874 	pop	psw
      000710 D0 E0            [24] 2875 	pop	acc
                           000712  2876 	C$Squiggles.c$218$1$138 ==.
                           000712  2877 	XG$PCA_ISR$0$0 ==.
      000712 32               [24] 2878 	reti
                                   2879 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2880 ;	eliminated unneeded push/pop dpl
                                   2881 ;	eliminated unneeded push/pop dph
                                   2882 ;	eliminated unneeded push/pop b
                                   2883 ;------------------------------------------------------------
                                   2884 ;Allocation info for local variables in function 'ADC_Init'
                                   2885 ;------------------------------------------------------------
                           000713  2886 	G$ADC_Init$0$0 ==.
                           000713  2887 	C$Squiggles.c$223$1$138 ==.
                                   2888 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:223: void ADC_Init(void)
                                   2889 ;	-----------------------------------------
                                   2890 ;	 function ADC_Init
                                   2891 ;	-----------------------------------------
      000713                       2892 _ADC_Init:
                           000713  2893 	C$Squiggles.c$225$1$144 ==.
                                   2894 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:225: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000713 75 D1 03         [24] 2895 	mov	_REF0CN,#0x03
                           000716  2896 	C$Squiggles.c$226$1$144 ==.
                                   2897 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:226: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      000716 75 AA 80         [24] 2898 	mov	_ADC1CN,#0x80
                           000719  2899 	C$Squiggles.c$227$1$144 ==.
                                   2900 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:227: ADC1CF |= 0x01; // Set A/D converter gain to 1
      000719 43 AB 01         [24] 2901 	orl	_ADC1CF,#0x01
                           00071C  2902 	C$Squiggles.c$228$1$144 ==.
                           00071C  2903 	XG$ADC_Init$0$0 ==.
      00071C 22               [24] 2904 	ret
                                   2905 ;------------------------------------------------------------
                                   2906 ;Allocation info for local variables in function 'read_AD_input'
                                   2907 ;------------------------------------------------------------
                                   2908 ;n                         Allocated to registers 
                                   2909 ;------------------------------------------------------------
                           00071D  2910 	G$read_AD_input$0$0 ==.
                           00071D  2911 	C$Squiggles.c$232$1$144 ==.
                                   2912 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:232: unsigned char read_AD_input(unsigned char n)
                                   2913 ;	-----------------------------------------
                                   2914 ;	 function read_AD_input
                                   2915 ;	-----------------------------------------
      00071D                       2916 _read_AD_input:
      00071D 85 82 AC         [24] 2917 	mov	_AMX1SL,dpl
                           000720  2918 	C$Squiggles.c$235$1$146 ==.
                                   2919 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:235: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      000720 AF AA            [24] 2920 	mov	r7,_ADC1CN
      000722 74 DF            [12] 2921 	mov	a,#0xDF
      000724 5F               [12] 2922 	anl	a,r7
      000725 F5 AA            [12] 2923 	mov	_ADC1CN,a
                           000727  2924 	C$Squiggles.c$236$1$146 ==.
                                   2925 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:236: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      000727 43 AA 10         [24] 2926 	orl	_ADC1CN,#0x10
                           00072A  2927 	C$Squiggles.c$238$1$146 ==.
                                   2928 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:238: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      00072A                       2929 00101$:
      00072A E5 AA            [12] 2930 	mov	a,_ADC1CN
      00072C 30 E5 FB         [24] 2931 	jnb	acc.5,00101$
                           00072F  2932 	C$Squiggles.c$240$1$146 ==.
                                   2933 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:240: return ADC1; // Return digital value in ADC1 register
      00072F 85 9C 82         [24] 2934 	mov	dpl,_ADC1
                           000732  2935 	C$Squiggles.c$241$1$146 ==.
                           000732  2936 	XG$read_AD_input$0$0 ==.
      000732 22               [24] 2937 	ret
                                   2938 ;------------------------------------------------------------
                                   2939 ;Allocation info for local variables in function 'Pick_Heading'
                                   2940 ;------------------------------------------------------------
                                   2941 ;input                     Allocated to registers r7 
                                   2942 ;------------------------------------------------------------
                           000733  2943 	G$Pick_Heading$0$0 ==.
                           000733  2944 	C$Squiggles.c$245$1$146 ==.
                                   2945 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:245: void Pick_Heading(void)
                                   2946 ;	-----------------------------------------
                                   2947 ;	 function Pick_Heading
                                   2948 ;	-----------------------------------------
      000733                       2949 _Pick_Heading:
                           000733  2950 	C$Squiggles.c$263$1$148 ==.
                                   2951 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:263: printf("\rPlease enter a desired heading.\n");
      000733 74rCA            [12] 2952 	mov	a,#___str_10
      000735 C0 E0            [24] 2953 	push	acc
      000737 74s00            [12] 2954 	mov	a,#(___str_10 >> 8)
      000739 C0 E0            [24] 2955 	push	acc
      00073B 74 80            [12] 2956 	mov	a,#0x80
      00073D C0 E0            [24] 2957 	push	acc
      00073F 12r00r00         [24] 2958 	lcall	_printf
      000742 15 81            [12] 2959 	dec	sp
      000744 15 81            [12] 2960 	dec	sp
      000746 15 81            [12] 2961 	dec	sp
                           000748  2962 	C$Squiggles.c$264$1$148 ==.
                                   2963 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:264: printf("\r'u' will increment by 5 degrees. 'd' will decrement by 5 degrees.\n");
      000748 74rEC            [12] 2964 	mov	a,#___str_11
      00074A C0 E0            [24] 2965 	push	acc
      00074C 74s00            [12] 2966 	mov	a,#(___str_11 >> 8)
      00074E C0 E0            [24] 2967 	push	acc
      000750 74 80            [12] 2968 	mov	a,#0x80
      000752 C0 E0            [24] 2969 	push	acc
      000754 12r00r00         [24] 2970 	lcall	_printf
      000757 15 81            [12] 2971 	dec	sp
      000759 15 81            [12] 2972 	dec	sp
      00075B 15 81            [12] 2973 	dec	sp
                           00075D  2974 	C$Squiggles.c$265$1$148 ==.
                                   2975 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:265: printf("\r'f' when finished.\n");
      00075D 74r30            [12] 2976 	mov	a,#___str_12
      00075F C0 E0            [24] 2977 	push	acc
      000761 74s01            [12] 2978 	mov	a,#(___str_12 >> 8)
      000763 C0 E0            [24] 2979 	push	acc
      000765 74 80            [12] 2980 	mov	a,#0x80
      000767 C0 E0            [24] 2981 	push	acc
      000769 12r00r00         [24] 2982 	lcall	_printf
      00076C 15 81            [12] 2983 	dec	sp
      00076E 15 81            [12] 2984 	dec	sp
      000770 15 81            [12] 2985 	dec	sp
                           000772  2986 	C$Squiggles.c$266$2$149 ==.
                                   2987 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:266: while(1)
      000772                       2988 00110$:
                           000772  2989 	C$Squiggles.c$268$2$149 ==.
                                   2990 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:268: input = getchar();
      000772 12r00r4D         [24] 2991 	lcall	_getchar
      000775 AF 82            [24] 2992 	mov	r7,dpl
                           000777  2993 	C$Squiggles.c$269$2$149 ==.
                                   2994 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:269: if(input == 'u') desired_heading += 50;
      000777 BF 75 0B         [24] 2995 	cjne	r7,#0x75,00102$
      00077A 74 32            [12] 2996 	mov	a,#0x32
      00077C 25*14            [12] 2997 	add	a,_desired_heading
      00077E F5*14            [12] 2998 	mov	_desired_heading,a
      000780 E4               [12] 2999 	clr	a
      000781 35*15            [12] 3000 	addc	a,(_desired_heading + 1)
      000783 F5*15            [12] 3001 	mov	(_desired_heading + 1),a
      000785                       3002 00102$:
                           000785  3003 	C$Squiggles.c$270$2$149 ==.
                                   3004 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:270: if(input == 'd') desired_heading -= 50;
      000785 BF 64 0C         [24] 3005 	cjne	r7,#0x64,00104$
      000788 E5*14            [12] 3006 	mov	a,_desired_heading
      00078A 24 CE            [12] 3007 	add	a,#0xCE
      00078C F5*14            [12] 3008 	mov	_desired_heading,a
      00078E E5*15            [12] 3009 	mov	a,(_desired_heading + 1)
      000790 34 FF            [12] 3010 	addc	a,#0xFF
      000792 F5*15            [12] 3011 	mov	(_desired_heading + 1),a
      000794                       3012 00104$:
                           000794  3013 	C$Squiggles.c$271$2$149 ==.
                                   3014 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:271: if(input == 'f') return;
      000794 BF 66 02         [24] 3015 	cjne	r7,#0x66,00106$
      000797 80 2C            [24] 3016 	sjmp	00112$
      000799                       3017 00106$:
                           000799  3018 	C$Squiggles.c$272$2$149 ==.
                                   3019 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:272: if(desired_heading >= 3600) desired_heading = 3600;
      000799 C3               [12] 3020 	clr	c
      00079A E5*14            [12] 3021 	mov	a,_desired_heading
      00079C 94 10            [12] 3022 	subb	a,#0x10
      00079E E5*15            [12] 3023 	mov	a,(_desired_heading + 1)
      0007A0 94 0E            [12] 3024 	subb	a,#0x0E
      0007A2 40 06            [24] 3025 	jc	00108$
      0007A4 75*14 10         [24] 3026 	mov	_desired_heading,#0x10
      0007A7 75*15 0E         [24] 3027 	mov	(_desired_heading + 1),#0x0E
      0007AA                       3028 00108$:
                           0007AA  3029 	C$Squiggles.c$273$2$149 ==.
                                   3030 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:273: printf("\rDesired heading: %u\n", desired_heading);
      0007AA C0*14            [24] 3031 	push	_desired_heading
      0007AC C0*15            [24] 3032 	push	(_desired_heading + 1)
      0007AE 74r45            [12] 3033 	mov	a,#___str_13
      0007B0 C0 E0            [24] 3034 	push	acc
      0007B2 74s01            [12] 3035 	mov	a,#(___str_13 >> 8)
      0007B4 C0 E0            [24] 3036 	push	acc
      0007B6 74 80            [12] 3037 	mov	a,#0x80
      0007B8 C0 E0            [24] 3038 	push	acc
      0007BA 12r00r00         [24] 3039 	lcall	_printf
      0007BD E5 81            [12] 3040 	mov	a,sp
      0007BF 24 FB            [12] 3041 	add	a,#0xfb
      0007C1 F5 81            [12] 3042 	mov	sp,a
      0007C3 80 AD            [24] 3043 	sjmp	00110$
      0007C5                       3044 00112$:
                           0007C5  3045 	C$Squiggles.c$276$1$148 ==.
                           0007C5  3046 	XG$Pick_Heading$0$0 ==.
      0007C5 22               [24] 3047 	ret
                                   3048 ;------------------------------------------------------------
                                   3049 ;Allocation info for local variables in function 'Pick_Compass_Gain'
                                   3050 ;------------------------------------------------------------
                                   3051 ;input                     Allocated to registers r7 
                                   3052 ;------------------------------------------------------------
                           0007C6  3053 	G$Pick_Compass_Gain$0$0 ==.
                           0007C6  3054 	C$Squiggles.c$280$1$148 ==.
                                   3055 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:280: void Pick_Compass_Gain(void)
                                   3056 ;	-----------------------------------------
                                   3057 ;	 function Pick_Compass_Gain
                                   3058 ;	-----------------------------------------
      0007C6                       3059 _Pick_Compass_Gain:
                           0007C6  3060 	C$Squiggles.c$290$1$151 ==.
                                   3061 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:290: printf("\rPlease select a desired compass gain.\n");
      0007C6 74r5B            [12] 3062 	mov	a,#___str_14
      0007C8 C0 E0            [24] 3063 	push	acc
      0007CA 74s01            [12] 3064 	mov	a,#(___str_14 >> 8)
      0007CC C0 E0            [24] 3065 	push	acc
      0007CE 74 80            [12] 3066 	mov	a,#0x80
      0007D0 C0 E0            [24] 3067 	push	acc
      0007D2 12r00r00         [24] 3068 	lcall	_printf
      0007D5 15 81            [12] 3069 	dec	sp
      0007D7 15 81            [12] 3070 	dec	sp
      0007D9 15 81            [12] 3071 	dec	sp
                           0007DB  3072 	C$Squiggles.c$291$1$151 ==.
                                   3073 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:291: printf("\r'u' will increment by 0.1. 'd' will decrement by 0.1.\n");
      0007DB 74r83            [12] 3074 	mov	a,#___str_15
      0007DD C0 E0            [24] 3075 	push	acc
      0007DF 74s01            [12] 3076 	mov	a,#(___str_15 >> 8)
      0007E1 C0 E0            [24] 3077 	push	acc
      0007E3 74 80            [12] 3078 	mov	a,#0x80
      0007E5 C0 E0            [24] 3079 	push	acc
      0007E7 12r00r00         [24] 3080 	lcall	_printf
      0007EA 15 81            [12] 3081 	dec	sp
      0007EC 15 81            [12] 3082 	dec	sp
      0007EE 15 81            [12] 3083 	dec	sp
                           0007F0  3084 	C$Squiggles.c$292$1$151 ==.
                                   3085 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:292: printf("\r'f' when finished\n");
      0007F0 74rBB            [12] 3086 	mov	a,#___str_16
      0007F2 C0 E0            [24] 3087 	push	acc
      0007F4 74s01            [12] 3088 	mov	a,#(___str_16 >> 8)
      0007F6 C0 E0            [24] 3089 	push	acc
      0007F8 74 80            [12] 3090 	mov	a,#0x80
      0007FA C0 E0            [24] 3091 	push	acc
      0007FC 12r00r00         [24] 3092 	lcall	_printf
      0007FF 15 81            [12] 3093 	dec	sp
      000801 15 81            [12] 3094 	dec	sp
      000803 15 81            [12] 3095 	dec	sp
                           000805  3096 	C$Squiggles.c$293$1$151 ==.
                                   3097 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:293: while(1)
      000805                       3098 00112$:
                           000805  3099 	C$Squiggles.c$295$2$152 ==.
                                   3100 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:295: input = getchar();
      000805 12r00r4D         [24] 3101 	lcall	_getchar
      000808 AF 82            [24] 3102 	mov	r7,dpl
                           00080A  3103 	C$Squiggles.c$296$2$152 ==.
                                   3104 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:296: if(input == 'u') compass_gain += 0.1;
      00080A BF 75 30         [24] 3105 	cjne	r7,#0x75,00102$
      00080D C0 07            [24] 3106 	push	ar7
      00080F 74 CD            [12] 3107 	mov	a,#0xCD
      000811 C0 E0            [24] 3108 	push	acc
      000813 14               [12] 3109 	dec	a
      000814 C0 E0            [24] 3110 	push	acc
      000816 C0 E0            [24] 3111 	push	acc
      000818 74 3D            [12] 3112 	mov	a,#0x3D
      00081A C0 E0            [24] 3113 	push	acc
      00081C 85*16 82         [24] 3114 	mov	dpl,_compass_gain
      00081F 85*17 83         [24] 3115 	mov	dph,(_compass_gain + 1)
      000822 85*18 F0         [24] 3116 	mov	b,(_compass_gain + 2)
      000825 E5*19            [12] 3117 	mov	a,(_compass_gain + 3)
      000827 12r00r00         [24] 3118 	lcall	___fsadd
      00082A 85 82*16         [24] 3119 	mov	_compass_gain,dpl
      00082D 85 83*17         [24] 3120 	mov	(_compass_gain + 1),dph
      000830 85 F0*18         [24] 3121 	mov	(_compass_gain + 2),b
      000833 F5*19            [12] 3122 	mov	(_compass_gain + 3),a
      000835 E5 81            [12] 3123 	mov	a,sp
      000837 24 FC            [12] 3124 	add	a,#0xfc
      000839 F5 81            [12] 3125 	mov	sp,a
      00083B D0 07            [24] 3126 	pop	ar7
      00083D                       3127 00102$:
                           00083D  3128 	C$Squiggles.c$297$2$152 ==.
                                   3129 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:297: if(input == 'd') compass_gain -= 0.1;
      00083D BF 64 30         [24] 3130 	cjne	r7,#0x64,00104$
      000840 C0 07            [24] 3131 	push	ar7
      000842 74 CD            [12] 3132 	mov	a,#0xCD
      000844 C0 E0            [24] 3133 	push	acc
      000846 14               [12] 3134 	dec	a
      000847 C0 E0            [24] 3135 	push	acc
      000849 C0 E0            [24] 3136 	push	acc
      00084B 74 3D            [12] 3137 	mov	a,#0x3D
      00084D C0 E0            [24] 3138 	push	acc
      00084F 85*16 82         [24] 3139 	mov	dpl,_compass_gain
      000852 85*17 83         [24] 3140 	mov	dph,(_compass_gain + 1)
      000855 85*18 F0         [24] 3141 	mov	b,(_compass_gain + 2)
      000858 E5*19            [12] 3142 	mov	a,(_compass_gain + 3)
      00085A 12r00r00         [24] 3143 	lcall	___fssub
      00085D 85 82*16         [24] 3144 	mov	_compass_gain,dpl
      000860 85 83*17         [24] 3145 	mov	(_compass_gain + 1),dph
      000863 85 F0*18         [24] 3146 	mov	(_compass_gain + 2),b
      000866 F5*19            [12] 3147 	mov	(_compass_gain + 3),a
      000868 E5 81            [12] 3148 	mov	a,sp
      00086A 24 FC            [12] 3149 	add	a,#0xfc
      00086C F5 81            [12] 3150 	mov	sp,a
      00086E D0 07            [24] 3151 	pop	ar7
      000870                       3152 00104$:
                           000870  3153 	C$Squiggles.c$298$2$152 ==.
                                   3154 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:298: if(input == 'f') return;
      000870 BF 66 02         [24] 3155 	cjne	r7,#0x66,00106$
      000873 80 76            [24] 3156 	sjmp	00114$
      000875                       3157 00106$:
                           000875  3158 	C$Squiggles.c$299$1$151 ==.
                                   3159 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:299: if(compass_gain >= 11.5) compass_gain = 11.5;
      000875 E4               [12] 3160 	clr	a
      000876 C0 E0            [24] 3161 	push	acc
      000878 C0 E0            [24] 3162 	push	acc
      00087A 74 38            [12] 3163 	mov	a,#0x38
      00087C C0 E0            [24] 3164 	push	acc
      00087E 74 41            [12] 3165 	mov	a,#0x41
      000880 C0 E0            [24] 3166 	push	acc
      000882 85*16 82         [24] 3167 	mov	dpl,_compass_gain
      000885 85*17 83         [24] 3168 	mov	dph,(_compass_gain + 1)
      000888 85*18 F0         [24] 3169 	mov	b,(_compass_gain + 2)
      00088B E5*19            [12] 3170 	mov	a,(_compass_gain + 3)
      00088D 12r00r00         [24] 3171 	lcall	___fslt
      000890 AF 82            [24] 3172 	mov	r7,dpl
      000892 E5 81            [12] 3173 	mov	a,sp
      000894 24 FC            [12] 3174 	add	a,#0xfc
      000896 F5 81            [12] 3175 	mov	sp,a
      000898 EF               [12] 3176 	mov	a,r7
      000899 70 0A            [24] 3177 	jnz	00108$
      00089B F5*16            [12] 3178 	mov	_compass_gain,a
      00089D F5*17            [12] 3179 	mov	(_compass_gain + 1),a
      00089F 75*18 38         [24] 3180 	mov	(_compass_gain + 2),#0x38
      0008A2 75*19 41         [24] 3181 	mov	(_compass_gain + 3),#0x41
      0008A5                       3182 00108$:
                           0008A5  3183 	C$Squiggles.c$300$1$151 ==.
                                   3184 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:300: if(compass_gain <= 0) compass_gain = 0;
      0008A5 E4               [12] 3185 	clr	a
      0008A6 C0 E0            [24] 3186 	push	acc
      0008A8 C0 E0            [24] 3187 	push	acc
      0008AA C0 E0            [24] 3188 	push	acc
      0008AC C0 E0            [24] 3189 	push	acc
      0008AE 85*16 82         [24] 3190 	mov	dpl,_compass_gain
      0008B1 85*17 83         [24] 3191 	mov	dph,(_compass_gain + 1)
      0008B4 85*18 F0         [24] 3192 	mov	b,(_compass_gain + 2)
      0008B7 E5*19            [12] 3193 	mov	a,(_compass_gain + 3)
      0008B9 12r00r00         [24] 3194 	lcall	___fsgt
      0008BC AF 82            [24] 3195 	mov	r7,dpl
      0008BE E5 81            [12] 3196 	mov	a,sp
      0008C0 24 FC            [12] 3197 	add	a,#0xfc
      0008C2 F5 81            [12] 3198 	mov	sp,a
      0008C4 EF               [12] 3199 	mov	a,r7
      0008C5 70 08            [24] 3200 	jnz	00110$
      0008C7 F5*16            [12] 3201 	mov	_compass_gain,a
      0008C9 F5*17            [12] 3202 	mov	(_compass_gain + 1),a
      0008CB F5*18            [12] 3203 	mov	(_compass_gain + 2),a
      0008CD F5*19            [12] 3204 	mov	(_compass_gain + 3),a
      0008CF                       3205 00110$:
                           0008CF  3206 	C$Squiggles.c$301$2$152 ==.
                                   3207 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:301: printf_fast_f("\rDesired compass gain: %2.1f\n", compass_gain);
      0008CF C0*16            [24] 3208 	push	_compass_gain
      0008D1 C0*17            [24] 3209 	push	(_compass_gain + 1)
      0008D3 C0*18            [24] 3210 	push	(_compass_gain + 2)
      0008D5 C0*19            [24] 3211 	push	(_compass_gain + 3)
      0008D7 74rCF            [12] 3212 	mov	a,#___str_17
      0008D9 C0 E0            [24] 3213 	push	acc
      0008DB 74s01            [12] 3214 	mov	a,#(___str_17 >> 8)
      0008DD C0 E0            [24] 3215 	push	acc
      0008DF 12r00r00         [24] 3216 	lcall	_printf_fast_f
      0008E2 E5 81            [12] 3217 	mov	a,sp
      0008E4 24 FA            [12] 3218 	add	a,#0xfa
      0008E6 F5 81            [12] 3219 	mov	sp,a
      0008E8 02r08r05         [24] 3220 	ljmp	00112$
      0008EB                       3221 00114$:
                           0008EB  3222 	C$Squiggles.c$303$1$151 ==.
                           0008EB  3223 	XG$Pick_Compass_Gain$0$0 ==.
      0008EB 22               [24] 3224 	ret
                                   3225 ;------------------------------------------------------------
                                   3226 ;Allocation info for local variables in function 'read_compass'
                                   3227 ;------------------------------------------------------------
                                   3228 ;addr                      Allocated to registers 
                                   3229 ;Data                      Allocated with name '_read_compass_Data_1_154'
                                   3230 ;read_heading              Allocated to registers 
                                   3231 ;------------------------------------------------------------
                           0008EC  3232 	G$read_compass$0$0 ==.
                           0008EC  3233 	C$Squiggles.c$307$1$151 ==.
                                   3234 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:307: int read_compass(void)
                                   3235 ;	-----------------------------------------
                                   3236 ;	 function read_compass
                                   3237 ;	-----------------------------------------
      0008EC                       3238 _read_compass:
                           0008EC  3239 	C$Squiggles.c$312$1$154 ==.
                                   3240 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:312: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0008EC 75*0Br31         [24] 3241 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_154
      0008EF 75*0C 00         [24] 3242 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008F2 75*0D 40         [24] 3243 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008F5 75*0A 02         [24] 3244 	mov	_i2c_read_data_PARM_2,#0x02
      0008F8 75*0E 02         [24] 3245 	mov	_i2c_read_data_PARM_4,#0x02
      0008FB 75 82 C0         [24] 3246 	mov	dpl,#0xC0
      0008FE 12r03rE8         [24] 3247 	lcall	_i2c_read_data
                           000901  3248 	C$Squiggles.c$313$1$154 ==.
                                   3249 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:313: read_heading =((Data[0] << 8) | Data[1]); //combine the two values
      000901 AF*31            [24] 3250 	mov	r7,_read_compass_Data_1_154
      000903 7E 00            [12] 3251 	mov	r6,#0x00
      000905 AC*32            [24] 3252 	mov	r4,(_read_compass_Data_1_154 + 0x0001)
      000907 7D 00            [12] 3253 	mov	r5,#0x00
      000909 EC               [12] 3254 	mov	a,r4
      00090A 4E               [12] 3255 	orl	a,r6
      00090B F5 82            [12] 3256 	mov	dpl,a
      00090D ED               [12] 3257 	mov	a,r5
      00090E 4F               [12] 3258 	orl	a,r7
      00090F F5 83            [12] 3259 	mov	dph,a
                           000911  3260 	C$Squiggles.c$314$1$154 ==.
                                   3261 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:314: return read_heading; // the heading returned in degrees between 0 and 3599
                           000911  3262 	C$Squiggles.c$315$1$154 ==.
                           000911  3263 	XG$read_compass$0$0 ==.
      000911 22               [24] 3264 	ret
                                   3265 ;------------------------------------------------------------
                                   3266 ;Allocation info for local variables in function 'read_ranger'
                                   3267 ;------------------------------------------------------------
                                   3268 ;addr                      Allocated to registers 
                                   3269 ;st_range                  Allocated to registers r6 r7 
                                   3270 ;------------------------------------------------------------
                           000912  3271 	G$read_ranger$0$0 ==.
                           000912  3272 	C$Squiggles.c$319$1$154 ==.
                                   3273 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:319: int read_ranger(void)
                                   3274 ;	-----------------------------------------
                                   3275 ;	 function read_ranger
                                   3276 ;	-----------------------------------------
      000912                       3277 _read_ranger:
                           000912  3278 	C$Squiggles.c$323$1$156 ==.
                                   3279 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:323: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      000912 75*0Br2C         [24] 3280 	mov	_i2c_read_data_PARM_3,#_Data
      000915 75*0C 00         [24] 3281 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000918 75*0D 40         [24] 3282 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00091B 75*0A 02         [24] 3283 	mov	_i2c_read_data_PARM_2,#0x02
      00091E 75*0E 02         [24] 3284 	mov	_i2c_read_data_PARM_4,#0x02
      000921 75 82 E0         [24] 3285 	mov	dpl,#0xE0
      000924 12r03rE8         [24] 3286 	lcall	_i2c_read_data
                           000927  3287 	C$Squiggles.c$324$1$156 ==.
                                   3288 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:324: st_range =((Data[0] << 8) | Data[1]); //combine the two values
      000927 AF*2C            [24] 3289 	mov	r7,_Data
      000929 7E 00            [12] 3290 	mov	r6,#0x00
      00092B AC*2D            [24] 3291 	mov	r4,(_Data + 0x0001)
      00092D 7D 00            [12] 3292 	mov	r5,#0x00
      00092F EC               [12] 3293 	mov	a,r4
      000930 42 06            [12] 3294 	orl	ar6,a
      000932 ED               [12] 3295 	mov	a,r5
      000933 42 07            [12] 3296 	orl	ar7,a
                           000935  3297 	C$Squiggles.c$326$1$156 ==.
                                   3298 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:326: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      000935 75*2C 51         [24] 3299 	mov	_Data,#0x51
                           000938  3300 	C$Squiggles.c$327$1$156 ==.
                                   3301 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:327: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      000938 75*06r2C         [24] 3302 	mov	_i2c_write_data_PARM_3,#_Data
      00093B 75*07 00         [24] 3303 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00093E 75*08 40         [24] 3304 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000941 75*05 00         [24] 3305 	mov	_i2c_write_data_PARM_2,#0x00
      000944 75*09 01         [24] 3306 	mov	_i2c_write_data_PARM_4,#0x01
      000947 75 82 E0         [24] 3307 	mov	dpl,#0xE0
      00094A C0 07            [24] 3308 	push	ar7
      00094C C0 06            [24] 3309 	push	ar6
      00094E 12r03r72         [24] 3310 	lcall	_i2c_write_data
      000951 D0 06            [24] 3311 	pop	ar6
      000953 D0 07            [24] 3312 	pop	ar7
                           000955  3313 	C$Squiggles.c$328$1$156 ==.
                                   3314 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:328: return st_range;
      000955 8E 82            [24] 3315 	mov	dpl,r6
      000957 8F 83            [24] 3316 	mov	dph,r7
                           000959  3317 	C$Squiggles.c$329$1$156 ==.
                           000959  3318 	XG$read_ranger$0$0 ==.
      000959 22               [24] 3319 	ret
                                   3320 ;------------------------------------------------------------
                                   3321 ;Allocation info for local variables in function 'Update_Value'
                                   3322 ;------------------------------------------------------------
                                   3323 ;incr                      Allocated with name '_Update_Value_PARM_2'
                                   3324 ;maxval                    Allocated with name '_Update_Value_PARM_3'
                                   3325 ;minval                    Allocated with name '_Update_Value_PARM_4'
                                   3326 ;Constant                  Allocated to registers r6 r7 
                                   3327 ;deflt                     Allocated to registers r4 r5 
                                   3328 ;input                     Allocated to registers r3 
                                   3329 ;------------------------------------------------------------
                           00095A  3330 	G$Update_Value$0$0 ==.
                           00095A  3331 	C$Squiggles.c$332$1$156 ==.
                                   3332 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:332: int Update_Value(int Constant, unsigned char incr, int maxval, int minval)
                                   3333 ;	-----------------------------------------
                                   3334 ;	 function Update_Value
                                   3335 ;	-----------------------------------------
      00095A                       3336 _Update_Value:
      00095A AE 82            [24] 3337 	mov	r6,dpl
      00095C AF 83            [24] 3338 	mov	r7,dph
                           00095E  3339 	C$Squiggles.c$337$1$158 ==.
                                   3340 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:337: deflt = (Constant*10);
      00095E 8E*00            [24] 3341 	mov	__mulint_PARM_2,r6
      000960 8F*01            [24] 3342 	mov	(__mulint_PARM_2 + 1),r7
      000962 90 00 0A         [24] 3343 	mov	dptr,#0x000A
      000965 C0 07            [24] 3344 	push	ar7
      000967 C0 06            [24] 3345 	push	ar6
      000969 12r00r00         [24] 3346 	lcall	__mulint
      00096C AC 82            [24] 3347 	mov	r4,dpl
      00096E AD 83            [24] 3348 	mov	r5,dph
      000970 D0 06            [24] 3349 	pop	ar6
      000972 D0 07            [24] 3350 	pop	ar7
                           000974  3351 	C$Squiggles.c$338$1$158 ==.
                                   3352 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:338: while(1)
      000974                       3353 00114$:
                           000974  3354 	C$Squiggles.c$340$2$159 ==.
                                   3355 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:340: input = getchar();
      000974 C0 07            [24] 3356 	push	ar7
      000976 C0 06            [24] 3357 	push	ar6
      000978 C0 05            [24] 3358 	push	ar5
      00097A C0 04            [24] 3359 	push	ar4
      00097C 12r00r4D         [24] 3360 	lcall	_getchar
      00097F AB 82            [24] 3361 	mov	r3,dpl
      000981 D0 04            [24] 3362 	pop	ar4
      000983 D0 05            [24] 3363 	pop	ar5
      000985 D0 06            [24] 3364 	pop	ar6
      000987 D0 07            [24] 3365 	pop	ar7
                           000989  3366 	C$Squiggles.c$341$2$159 ==.
                                   3367 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:341: if (input == 'c') Constant = deflt;
      000989 BB 63 04         [24] 3368 	cjne	r3,#0x63,00102$
      00098C 8C 06            [24] 3369 	mov	ar6,r4
      00098E 8D 07            [24] 3370 	mov	ar7,r5
      000990                       3371 00102$:
                           000990  3372 	C$Squiggles.c$342$2$159 ==.
                                   3373 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:342: if (input == 'i')
      000990 BB 69 1F         [24] 3374 	cjne	r3,#0x69,00106$
                           000993  3375 	C$Squiggles.c$344$3$160 ==.
                                   3376 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:344: Constant += incr;
      000993 A9*33            [24] 3377 	mov	r1,_Update_Value_PARM_2
      000995 7A 00            [12] 3378 	mov	r2,#0x00
      000997 E9               [12] 3379 	mov	a,r1
      000998 2E               [12] 3380 	add	a,r6
      000999 FE               [12] 3381 	mov	r6,a
      00099A EA               [12] 3382 	mov	a,r2
      00099B 3F               [12] 3383 	addc	a,r7
      00099C FF               [12] 3384 	mov	r7,a
                           00099D  3385 	C$Squiggles.c$345$3$160 ==.
                                   3386 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:345: if (Constant > maxval) Constant = maxval;
      00099D C3               [12] 3387 	clr	c
      00099E E5*34            [12] 3388 	mov	a,_Update_Value_PARM_3
      0009A0 9E               [12] 3389 	subb	a,r6
      0009A1 E5*35            [12] 3390 	mov	a,(_Update_Value_PARM_3 + 1)
      0009A3 64 80            [12] 3391 	xrl	a,#0x80
      0009A5 8F F0            [24] 3392 	mov	b,r7
      0009A7 63 F0 80         [24] 3393 	xrl	b,#0x80
      0009AA 95 F0            [12] 3394 	subb	a,b
      0009AC 50 04            [24] 3395 	jnc	00106$
      0009AE AE*34            [24] 3396 	mov	r6,_Update_Value_PARM_3
      0009B0 AF*35            [24] 3397 	mov	r7,(_Update_Value_PARM_3 + 1)
      0009B2                       3398 00106$:
                           0009B2  3399 	C$Squiggles.c$347$2$159 ==.
                                   3400 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:347: if (input == 'd')
      0009B2 BB 64 20         [24] 3401 	cjne	r3,#0x64,00110$
                           0009B5  3402 	C$Squiggles.c$349$3$161 ==.
                                   3403 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:349: Constant -= incr;
      0009B5 A9*33            [24] 3404 	mov	r1,_Update_Value_PARM_2
      0009B7 7A 00            [12] 3405 	mov	r2,#0x00
      0009B9 EE               [12] 3406 	mov	a,r6
      0009BA C3               [12] 3407 	clr	c
      0009BB 99               [12] 3408 	subb	a,r1
      0009BC FE               [12] 3409 	mov	r6,a
      0009BD EF               [12] 3410 	mov	a,r7
      0009BE 9A               [12] 3411 	subb	a,r2
      0009BF FF               [12] 3412 	mov	r7,a
                           0009C0  3413 	C$Squiggles.c$350$3$161 ==.
                                   3414 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:350: if (Constant < minval) Constant = minval;
      0009C0 C3               [12] 3415 	clr	c
      0009C1 EE               [12] 3416 	mov	a,r6
      0009C2 95*36            [12] 3417 	subb	a,_Update_Value_PARM_4
      0009C4 EF               [12] 3418 	mov	a,r7
      0009C5 64 80            [12] 3419 	xrl	a,#0x80
      0009C7 85*37 F0         [24] 3420 	mov	b,(_Update_Value_PARM_4 + 1)
      0009CA 63 F0 80         [24] 3421 	xrl	b,#0x80
      0009CD 95 F0            [12] 3422 	subb	a,b
      0009CF 50 04            [24] 3423 	jnc	00110$
      0009D1 AE*36            [24] 3424 	mov	r6,_Update_Value_PARM_4
      0009D3 AF*37            [24] 3425 	mov	r7,(_Update_Value_PARM_4 + 1)
      0009D5                       3426 00110$:
                           0009D5  3427 	C$Squiggles.c$352$2$159 ==.
                                   3428 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:352: if (input == 'u') return Constant;
      0009D5 BB 75 9C         [24] 3429 	cjne	r3,#0x75,00114$
      0009D8 8E 82            [24] 3430 	mov	dpl,r6
      0009DA 8F 83            [24] 3431 	mov	dph,r7
                           0009DC  3432 	C$Squiggles.c$354$1$158 ==.
                           0009DC  3433 	XG$Update_Value$0$0 ==.
      0009DC 22               [24] 3434 	ret
                                   3435 ;------------------------------------------------------------
                                   3436 ;Allocation info for local variables in function 'set_COMPASS_PW'
                                   3437 ;------------------------------------------------------------
                           0009DD  3438 	G$set_COMPASS_PW$0$0 ==.
                           0009DD  3439 	C$Squiggles.c$358$1$158 ==.
                                   3440 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:358: void set_COMPASS_PW(void)
                                   3441 ;	-----------------------------------------
                                   3442 ;	 function set_COMPASS_PW
                                   3443 ;	-----------------------------------------
      0009DD                       3444 _set_COMPASS_PW:
                           0009DD  3445 	C$Squiggles.c$362$1$163 ==.
                                   3446 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:362: Error = (desired_heading) - heading;	//Calculate the error
      0009DD E5*14            [12] 3447 	mov	a,_desired_heading
      0009DF C3               [12] 3448 	clr	c
      0009E0 95*1F            [12] 3449 	subb	a,_heading
      0009E2 F5*2F            [12] 3450 	mov	_Error,a
      0009E4 E5*15            [12] 3451 	mov	a,(_desired_heading + 1)
      0009E6 95*20            [12] 3452 	subb	a,(_heading + 1)
      0009E8 F5*30            [12] 3453 	mov	(_Error + 1),a
                           0009EA  3454 	C$Squiggles.c$363$1$163 ==.
                                   3455 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:363: if(Error < -1800) Error = Error + 3600; //Adjust error so that we turn efficiently
      0009EA C3               [12] 3456 	clr	c
      0009EB E5*2F            [12] 3457 	mov	a,_Error
      0009ED 94 F8            [12] 3458 	subb	a,#0xF8
      0009EF E5*30            [12] 3459 	mov	a,(_Error + 1)
      0009F1 64 80            [12] 3460 	xrl	a,#0x80
      0009F3 94 78            [12] 3461 	subb	a,#0x78
      0009F5 50 0C            [24] 3462 	jnc	00102$
      0009F7 74 10            [12] 3463 	mov	a,#0x10
      0009F9 25*2F            [12] 3464 	add	a,_Error
      0009FB F5*2F            [12] 3465 	mov	_Error,a
      0009FD 74 0E            [12] 3466 	mov	a,#0x0E
      0009FF 35*30            [12] 3467 	addc	a,(_Error + 1)
      000A01 F5*30            [12] 3468 	mov	(_Error + 1),a
      000A03                       3469 00102$:
                           000A03  3470 	C$Squiggles.c$364$1$163 ==.
                                   3471 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:364: if(Error > 1800) Error = Error - 3600;
      000A03 C3               [12] 3472 	clr	c
      000A04 74 08            [12] 3473 	mov	a,#0x08
      000A06 95*2F            [12] 3474 	subb	a,_Error
      000A08 74 87            [12] 3475 	mov	a,#(0x07 ^ 0x80)
      000A0A 85*30 F0         [24] 3476 	mov	b,(_Error + 1)
      000A0D 63 F0 80         [24] 3477 	xrl	b,#0x80
      000A10 95 F0            [12] 3478 	subb	a,b
      000A12 50 0C            [24] 3479 	jnc	00104$
      000A14 E5*2F            [12] 3480 	mov	a,_Error
      000A16 24 F0            [12] 3481 	add	a,#0xF0
      000A18 F5*2F            [12] 3482 	mov	_Error,a
      000A1A E5*30            [12] 3483 	mov	a,(_Error + 1)
      000A1C 34 F1            [12] 3484 	addc	a,#0xF1
      000A1E F5*30            [12] 3485 	mov	(_Error + 1),a
      000A20                       3486 00104$:
                           000A20  3487 	C$Squiggles.c$366$1$163 ==.
                                   3488 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:366: if (range > MAX_RANGE) 
      000A20 C3               [12] 3489 	clr	c
      000A21 74 37            [12] 3490 	mov	a,#0x37
      000A23 95*21            [12] 3491 	subb	a,_range
      000A25 E4               [12] 3492 	clr	a
      000A26 95*22            [12] 3493 	subb	a,(_range + 1)
      000A28 50 07            [24] 3494 	jnc	00106$
                           000A2A  3495 	C$Squiggles.c$368$2$164 ==.
                                   3496 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:368: range_adj = 0; //no obstacle in range, no change
      000A2A E4               [12] 3497 	clr	a
      000A2B F5*25            [12] 3498 	mov	_range_adj,a
      000A2D F5*26            [12] 3499 	mov	(_range_adj + 1),a
      000A2F 80 1F            [24] 3500 	sjmp	00107$
      000A31                       3501 00106$:
                           000A31  3502 	C$Squiggles.c$373$2$165 ==.
                                   3503 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:373: range_adj = (int)(ranger_gain * (55 - range)); //weight adjustment by distance
      000A31 74 37            [12] 3504 	mov	a,#0x37
      000A33 C3               [12] 3505 	clr	c
      000A34 95*21            [12] 3506 	subb	a,_range
      000A36 F5*00            [12] 3507 	mov	__mulint_PARM_2,a
      000A38 E4               [12] 3508 	clr	a
      000A39 95*22            [12] 3509 	subb	a,(_range + 1)
      000A3B F5*01            [12] 3510 	mov	(__mulint_PARM_2 + 1),a
      000A3D AE*29            [24] 3511 	mov	r6,_ranger_gain
      000A3F 7F 00            [12] 3512 	mov	r7,#0x00
      000A41 8E 82            [24] 3513 	mov	dpl,r6
      000A43 8F 83            [24] 3514 	mov	dph,r7
      000A45 12r00r00         [24] 3515 	lcall	__mulint
      000A48 AE 82            [24] 3516 	mov	r6,dpl
      000A4A AF 83            [24] 3517 	mov	r7,dph
      000A4C 8E*25            [24] 3518 	mov	_range_adj,r6
      000A4E 8F*26            [24] 3519 	mov	(_range_adj + 1),r7
      000A50                       3520 00107$:
                           000A50  3521 	C$Squiggles.c$377$1$163 ==.
                                   3522 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:377: COMPASS_PW = 2760 + (int)(compass_gain*Error) - range_adj;
      000A50 85*2F 82         [24] 3523 	mov	dpl,_Error
      000A53 85*30 83         [24] 3524 	mov	dph,(_Error + 1)
      000A56 12r00r00         [24] 3525 	lcall	___sint2fs
      000A59 AC 82            [24] 3526 	mov	r4,dpl
      000A5B AD 83            [24] 3527 	mov	r5,dph
      000A5D AE F0            [24] 3528 	mov	r6,b
      000A5F FF               [12] 3529 	mov	r7,a
      000A60 C0 04            [24] 3530 	push	ar4
      000A62 C0 05            [24] 3531 	push	ar5
      000A64 C0 06            [24] 3532 	push	ar6
      000A66 C0 07            [24] 3533 	push	ar7
      000A68 85*16 82         [24] 3534 	mov	dpl,_compass_gain
      000A6B 85*17 83         [24] 3535 	mov	dph,(_compass_gain + 1)
      000A6E 85*18 F0         [24] 3536 	mov	b,(_compass_gain + 2)
      000A71 E5*19            [12] 3537 	mov	a,(_compass_gain + 3)
      000A73 12r00r00         [24] 3538 	lcall	___fsmul
      000A76 AC 82            [24] 3539 	mov	r4,dpl
      000A78 AD 83            [24] 3540 	mov	r5,dph
      000A7A AE F0            [24] 3541 	mov	r6,b
      000A7C FF               [12] 3542 	mov	r7,a
      000A7D E5 81            [12] 3543 	mov	a,sp
      000A7F 24 FC            [12] 3544 	add	a,#0xfc
      000A81 F5 81            [12] 3545 	mov	sp,a
      000A83 8C 82            [24] 3546 	mov	dpl,r4
      000A85 8D 83            [24] 3547 	mov	dph,r5
      000A87 8E F0            [24] 3548 	mov	b,r6
      000A89 EF               [12] 3549 	mov	a,r7
      000A8A 12r00r00         [24] 3550 	lcall	___fs2sint
      000A8D E5 82            [12] 3551 	mov	a,dpl
      000A8F 85 83 F0         [24] 3552 	mov	b,dph
      000A92 24 C8            [12] 3553 	add	a,#0xC8
      000A94 FE               [12] 3554 	mov	r6,a
      000A95 74 0A            [12] 3555 	mov	a,#0x0A
      000A97 35 F0            [12] 3556 	addc	a,b
      000A99 FF               [12] 3557 	mov	r7,a
      000A9A EE               [12] 3558 	mov	a,r6
      000A9B C3               [12] 3559 	clr	c
      000A9C 95*25            [12] 3560 	subb	a,_range_adj
      000A9E F5*23            [12] 3561 	mov	_COMPASS_PW,a
      000AA0 EF               [12] 3562 	mov	a,r7
      000AA1 95*26            [12] 3563 	subb	a,(_range_adj + 1)
      000AA3 F5*24            [12] 3564 	mov	(_COMPASS_PW + 1),a
                           000AA5  3565 	C$Squiggles.c$380$1$163 ==.
                                   3566 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:380: if(COMPASS_PW < 2100)
      000AA5 C3               [12] 3567 	clr	c
      000AA6 E5*23            [12] 3568 	mov	a,_COMPASS_PW
      000AA8 94 34            [12] 3569 	subb	a,#0x34
      000AAA E5*24            [12] 3570 	mov	a,(_COMPASS_PW + 1)
      000AAC 94 08            [12] 3571 	subb	a,#0x08
      000AAE 50 06            [24] 3572 	jnc	00109$
                           000AB0  3573 	C$Squiggles.c$382$2$166 ==.
                                   3574 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:382: COMPASS_PW = 2100;
      000AB0 75*23 34         [24] 3575 	mov	_COMPASS_PW,#0x34
      000AB3 75*24 08         [24] 3576 	mov	(_COMPASS_PW + 1),#0x08
      000AB6                       3577 00109$:
                           000AB6  3578 	C$Squiggles.c$384$1$163 ==.
                                   3579 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:384: if(COMPASS_PW > 3400)
      000AB6 C3               [12] 3580 	clr	c
      000AB7 74 48            [12] 3581 	mov	a,#0x48
      000AB9 95*23            [12] 3582 	subb	a,_COMPASS_PW
      000ABB 74 0D            [12] 3583 	mov	a,#0x0D
      000ABD 95*24            [12] 3584 	subb	a,(_COMPASS_PW + 1)
      000ABF 50 06            [24] 3585 	jnc	00111$
                           000AC1  3586 	C$Squiggles.c$386$2$167 ==.
                                   3587 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:386: COMPASS_PW = 3400;
      000AC1 75*23 48         [24] 3588 	mov	_COMPASS_PW,#0x48
      000AC4 75*24 0D         [24] 3589 	mov	(_COMPASS_PW + 1),#0x0D
      000AC7                       3590 00111$:
                           000AC7  3591 	C$Squiggles.c$388$1$163 ==.
                                   3592 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:388: PCA0CP0 = 0xFFFF - COMPASS_PW; // Change pulse width
      000AC7 74 FF            [12] 3593 	mov	a,#0xFF
      000AC9 C3               [12] 3594 	clr	c
      000ACA 95*23            [12] 3595 	subb	a,_COMPASS_PW
      000ACC F5 EA            [12] 3596 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      000ACE 74 FF            [12] 3597 	mov	a,#0xFF
      000AD0 95*24            [12] 3598 	subb	a,(_COMPASS_PW + 1)
      000AD2 F5 FA            [12] 3599 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000AD4  3600 	C$Squiggles.c$389$1$163 ==.
                           000AD4  3601 	XG$set_COMPASS_PW$0$0 ==.
      000AD4 22               [24] 3602 	ret
                                   3603 	.area CSEG    (CODE)
                                   3604 	.area CONST   (CODE)
                           000000  3605 FSquiggles$__str_0$0$0 == .
      000000                       3606 ___str_0:
      000000 0A                    3607 	.db 0x0A
      000001 54 79 70 65 20 64 69  3608 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3609 	.db 0x00
                           000016  3610 FSquiggles$__str_1$0$0 == .
      000016                       3611 ___str_1:
      000016 20 20 20 20 20 25 63  3612 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3613 	.db 0x00
                           000026  3614 FSquiggles$__str_2$0$0 == .
      000026                       3615 ___str_2:
      000026 25 63                 3616 	.ascii "%c"
      000028 00                    3617 	.db 0x00
                           000029  3618 FSquiggles$__str_3$0$0 == .
      000029                       3619 ___str_3:
      000029 0A                    3620 	.db 0x0A
      00002A 53 74 61 72 74        3621 	.ascii "Start"
      00002F 0D                    3622 	.db 0x0D
      000030 0A                    3623 	.db 0x0A
      000031 00                    3624 	.db 0x00
                           000032  3625 FSquiggles$__str_4$0$0 == .
      000032                       3626 ___str_4:
      000032 0A                    3627 	.db 0x0A
      000033 0D                    3628 	.db 0x0D
      000034 50 6C 65 61 73 65 20  3629 	.ascii "Please input data on the LCD."
             69 6E 70 75 74 20 64
             61 74 61 20 6F 6E 20
             74 68 65 20 4C 43 44
             2E
      000051 0A                    3630 	.db 0x0A
      000052 00                    3631 	.db 0x00
                           000053  3632 FSquiggles$__str_5$0$0 == .
      000053                       3633 ___str_5:
      000053 0A                    3634 	.db 0x0A
      000054 0D                    3635 	.db 0x0D
      000055 2D 2D 2D 2D 2D 2D 2D  3636 	.ascii "------------DATA COLLECTION------------"
             2D 2D 2D 2D 2D 44 41
             54 41 20 43 4F 4C 4C
             45 43 54 49 4F 4E 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      00007C 0A                    3637 	.db 0x0A
      00007D 00                    3638 	.db 0x00
                           00007E  3639 FSquiggles$__str_6$0$0 == .
      00007E                       3640 ___str_6:
      00007E 0D                    3641 	.db 0x0D
      00007F 48 65 61 64 69 6E 67  3642 	.ascii "Heading: %u"
             3A 20 25 75
      00008A 0A                    3643 	.db 0x0A
      00008B 00                    3644 	.db 0x00
                           00008C  3645 FSquiggles$__str_7$0$0 == .
      00008C                       3646 ___str_7:
      00008C 0D                    3647 	.db 0x0D
      00008D 4F 76 65 72 66 6C 6F  3648 	.ascii "Overflows: %u"
             77 73 3A 20 25 75
      00009A 0A                    3649 	.db 0x0A
      00009B 00                    3650 	.db 0x00
                           00009C  3651 FSquiggles$__str_8$0$0 == .
      00009C                       3652 ___str_8:
      00009C 0D                    3653 	.db 0x0D
      00009D 48 65 61 64 69 6E 67  3654 	.ascii "Heading Error: %d"
             20 45 72 72 6F 72 3A
             20 25 64
      0000AE 0A                    3655 	.db 0x0A
      0000AF 00                    3656 	.db 0x00
                           0000B0  3657 FSquiggles$__str_9$0$0 == .
      0000B0                       3658 ___str_9:
      0000B0 0D                    3659 	.db 0x0D
      0000B1 53 74 65 65 72 69 6E  3660 	.ascii "Steering Pulsewidth: %u"
             67 20 50 75 6C 73 65
             77 69 64 74 68 3A 20
             25 75
      0000C8 0A                    3661 	.db 0x0A
      0000C9 00                    3662 	.db 0x00
                           0000CA  3663 FSquiggles$__str_10$0$0 == .
      0000CA                       3664 ___str_10:
      0000CA 0D                    3665 	.db 0x0D
      0000CB 50 6C 65 61 73 65 20  3666 	.ascii "Please enter a desired heading."
             65 6E 74 65 72 20 61
             20 64 65 73 69 72 65
             64 20 68 65 61 64 69
             6E 67 2E
      0000EA 0A                    3667 	.db 0x0A
      0000EB 00                    3668 	.db 0x00
                           0000EC  3669 FSquiggles$__str_11$0$0 == .
      0000EC                       3670 ___str_11:
      0000EC 0D                    3671 	.db 0x0D
      0000ED 27 75 27 20 77 69 6C  3672 	.ascii "'u' will increment by 5 degrees. 'd' will decrement by 5 de"
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 35 20 64 65 67 72
             65 65 73 2E 20 27 64
             27 20 77 69 6C 6C 20
             64 65 63 72 65 6D 65
             6E 74 20 62 79 20 35
             20 64 65
      000128 67 72 65 65 73 2E     3673 	.ascii "grees."
      00012E 0A                    3674 	.db 0x0A
      00012F 00                    3675 	.db 0x00
                           000130  3676 FSquiggles$__str_12$0$0 == .
      000130                       3677 ___str_12:
      000130 0D                    3678 	.db 0x0D
      000131 27 66 27 20 77 68 65  3679 	.ascii "'f' when finished."
             6E 20 66 69 6E 69 73
             68 65 64 2E
      000143 0A                    3680 	.db 0x0A
      000144 00                    3681 	.db 0x00
                           000145  3682 FSquiggles$__str_13$0$0 == .
      000145                       3683 ___str_13:
      000145 0D                    3684 	.db 0x0D
      000146 44 65 73 69 72 65 64  3685 	.ascii "Desired heading: %u"
             20 68 65 61 64 69 6E
             67 3A 20 25 75
      000159 0A                    3686 	.db 0x0A
      00015A 00                    3687 	.db 0x00
                           00015B  3688 FSquiggles$__str_14$0$0 == .
      00015B                       3689 ___str_14:
      00015B 0D                    3690 	.db 0x0D
      00015C 50 6C 65 61 73 65 20  3691 	.ascii "Please select a desired compass gain."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 63 6F 6D 70
             61 73 73 20 67 61 69
             6E 2E
      000181 0A                    3692 	.db 0x0A
      000182 00                    3693 	.db 0x00
                           000183  3694 FSquiggles$__str_15$0$0 == .
      000183                       3695 ___str_15:
      000183 0D                    3696 	.db 0x0D
      000184 27 75 27 20 77 69 6C  3697 	.ascii "'u' will increment by 0.1. 'd' will decrement by 0.1."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 30 2E 31 2E 20 27
             64 27 20 77 69 6C 6C
             20 64 65 63 72 65 6D
             65 6E 74 20 62 79 20
             30 2E 31 2E
      0001B9 0A                    3698 	.db 0x0A
      0001BA 00                    3699 	.db 0x00
                           0001BB  3700 FSquiggles$__str_16$0$0 == .
      0001BB                       3701 ___str_16:
      0001BB 0D                    3702 	.db 0x0D
      0001BC 27 66 27 20 77 68 65  3703 	.ascii "'f' when finished"
             6E 20 66 69 6E 69 73
             68 65 64
      0001CD 0A                    3704 	.db 0x0A
      0001CE 00                    3705 	.db 0x00
                           0001CF  3706 FSquiggles$__str_17$0$0 == .
      0001CF                       3707 ___str_17:
      0001CF 0D                    3708 	.db 0x0D
      0001D0 44 65 73 69 72 65 64  3709 	.ascii "Desired compass gain: %2.1f"
             20 63 6F 6D 70 61 73
             73 20 67 61 69 6E 3A
             20 25 32 2E 31 66
      0001EB 0A                    3710 	.db 0x0A
      0001EC 00                    3711 	.db 0x00
                                   3712 	.area XINIT   (CODE)
                                   3713 	.area CABS    (ABS,CODE)
