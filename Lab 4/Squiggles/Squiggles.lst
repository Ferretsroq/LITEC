                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Tue Apr 21 13:38:15 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Squiggles
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _Sys_Init
                                     16 	.globl _UART0_Init
                                     17 	.globl _SYSCLK_Init
                                     18 	.globl _vsprintf
                                     19 	.globl _printf
                                     20 	.globl _RANGER_SWITCH
                                     21 	.globl _COMPASS_SWITCH
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _Update_Value_PARM_4
                                    308 	.globl _Update_Value_PARM_3
                                    309 	.globl _Update_Value_PARM_2
                                    310 	.globl _print_delay
                                    311 	.globl _Data
                                    312 	.globl _voltage
                                    313 	.globl _AD_Result
                                    314 	.globl _ranger_gain
                                    315 	.globl _compass_adj
                                    316 	.globl _range_adj
                                    317 	.globl _COMPASS_PW
                                    318 	.globl _range
                                    319 	.globl _heading
                                    320 	.globl _new_range
                                    321 	.globl _new_heading
                                    322 	.globl _delay
                                    323 	.globl _r_count
                                    324 	.globl _h_count
                                    325 	.globl _compass_gain
                                    326 	.globl _desired_heading
                                    327 	.globl _nOverflows
                                    328 	.globl _nCounts
                                    329 	.globl _Counts
                                    330 	.globl _i2c_read_data_PARM_4
                                    331 	.globl _i2c_read_data_PARM_3
                                    332 	.globl _i2c_read_data_PARM_2
                                    333 	.globl _i2c_write_data_PARM_4
                                    334 	.globl _i2c_write_data_PARM_3
                                    335 	.globl _i2c_write_data_PARM_2
                                    336 	.globl _putchar
                                    337 	.globl _getchar
                                    338 	.globl _lcd_print
                                    339 	.globl _lcd_clear
                                    340 	.globl _kpd_input
                                    341 	.globl _delay_time
                                    342 	.globl _i2c_start
                                    343 	.globl _i2c_write
                                    344 	.globl _i2c_write_and_stop
                                    345 	.globl _i2c_read
                                    346 	.globl _i2c_read_and_stop
                                    347 	.globl _i2c_write_data
                                    348 	.globl _i2c_read_data
                                    349 	.globl _Accel_Init
                                    350 	.globl _Port_Init
                                    351 	.globl _Interrupt_Init
                                    352 	.globl _PCA_Init
                                    353 	.globl _SMB0_Init
                                    354 	.globl _PCA_ISR
                                    355 	.globl _ADC_Init
                                    356 	.globl _read_AD_input
                                    357 	.globl _Pick_Heading
                                    358 	.globl _read_compass
                                    359 	.globl _read_ranger
                                    360 	.globl _Update_Value
                                    361 	.globl _set_COMPASS_PW
                                    362 ;--------------------------------------------------------
                                    363 ; special function registers
                                    364 ;--------------------------------------------------------
                                    365 	.area RSEG    (ABS,DATA)
      000000                        366 	.org 0x0000
                           000080   367 G$P0$0$0 == 0x0080
                           000080   368 _P0	=	0x0080
                           000081   369 G$SP$0$0 == 0x0081
                           000081   370 _SP	=	0x0081
                           000082   371 G$DPL$0$0 == 0x0082
                           000082   372 _DPL	=	0x0082
                           000083   373 G$DPH$0$0 == 0x0083
                           000083   374 _DPH	=	0x0083
                           000084   375 G$P4$0$0 == 0x0084
                           000084   376 _P4	=	0x0084
                           000085   377 G$P5$0$0 == 0x0085
                           000085   378 _P5	=	0x0085
                           000086   379 G$P6$0$0 == 0x0086
                           000086   380 _P6	=	0x0086
                           000087   381 G$PCON$0$0 == 0x0087
                           000087   382 _PCON	=	0x0087
                           000088   383 G$TCON$0$0 == 0x0088
                           000088   384 _TCON	=	0x0088
                           000089   385 G$TMOD$0$0 == 0x0089
                           000089   386 _TMOD	=	0x0089
                           00008A   387 G$TL0$0$0 == 0x008a
                           00008A   388 _TL0	=	0x008a
                           00008B   389 G$TL1$0$0 == 0x008b
                           00008B   390 _TL1	=	0x008b
                           00008C   391 G$TH0$0$0 == 0x008c
                           00008C   392 _TH0	=	0x008c
                           00008D   393 G$TH1$0$0 == 0x008d
                           00008D   394 _TH1	=	0x008d
                           00008E   395 G$CKCON$0$0 == 0x008e
                           00008E   396 _CKCON	=	0x008e
                           00008F   397 G$PSCTL$0$0 == 0x008f
                           00008F   398 _PSCTL	=	0x008f
                           000090   399 G$P1$0$0 == 0x0090
                           000090   400 _P1	=	0x0090
                           000091   401 G$TMR3CN$0$0 == 0x0091
                           000091   402 _TMR3CN	=	0x0091
                           000092   403 G$TMR3RLL$0$0 == 0x0092
                           000092   404 _TMR3RLL	=	0x0092
                           000093   405 G$TMR3RLH$0$0 == 0x0093
                           000093   406 _TMR3RLH	=	0x0093
                           000094   407 G$TMR3L$0$0 == 0x0094
                           000094   408 _TMR3L	=	0x0094
                           000095   409 G$TMR3H$0$0 == 0x0095
                           000095   410 _TMR3H	=	0x0095
                           000096   411 G$P7$0$0 == 0x0096
                           000096   412 _P7	=	0x0096
                           000098   413 G$SCON$0$0 == 0x0098
                           000098   414 _SCON	=	0x0098
                           000098   415 G$SCON0$0$0 == 0x0098
                           000098   416 _SCON0	=	0x0098
                           000099   417 G$SBUF$0$0 == 0x0099
                           000099   418 _SBUF	=	0x0099
                           000099   419 G$SBUF0$0$0 == 0x0099
                           000099   420 _SBUF0	=	0x0099
                           00009A   421 G$SPI0CFG$0$0 == 0x009a
                           00009A   422 _SPI0CFG	=	0x009a
                           00009B   423 G$SPI0DAT$0$0 == 0x009b
                           00009B   424 _SPI0DAT	=	0x009b
                           00009C   425 G$ADC1$0$0 == 0x009c
                           00009C   426 _ADC1	=	0x009c
                           00009D   427 G$SPI0CKR$0$0 == 0x009d
                           00009D   428 _SPI0CKR	=	0x009d
                           00009E   429 G$CPT0CN$0$0 == 0x009e
                           00009E   430 _CPT0CN	=	0x009e
                           00009F   431 G$CPT1CN$0$0 == 0x009f
                           00009F   432 _CPT1CN	=	0x009f
                           0000A0   433 G$P2$0$0 == 0x00a0
                           0000A0   434 _P2	=	0x00a0
                           0000A1   435 G$EMI0TC$0$0 == 0x00a1
                           0000A1   436 _EMI0TC	=	0x00a1
                           0000A3   437 G$EMI0CF$0$0 == 0x00a3
                           0000A3   438 _EMI0CF	=	0x00a3
                           0000A4   439 G$PRT0CF$0$0 == 0x00a4
                           0000A4   440 _PRT0CF	=	0x00a4
                           0000A4   441 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   442 _P0MDOUT	=	0x00a4
                           0000A5   443 G$PRT1CF$0$0 == 0x00a5
                           0000A5   444 _PRT1CF	=	0x00a5
                           0000A5   445 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   446 _P1MDOUT	=	0x00a5
                           0000A6   447 G$PRT2CF$0$0 == 0x00a6
                           0000A6   448 _PRT2CF	=	0x00a6
                           0000A6   449 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   450 _P2MDOUT	=	0x00a6
                           0000A7   451 G$PRT3CF$0$0 == 0x00a7
                           0000A7   452 _PRT3CF	=	0x00a7
                           0000A7   453 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   454 _P3MDOUT	=	0x00a7
                           0000A8   455 G$IE$0$0 == 0x00a8
                           0000A8   456 _IE	=	0x00a8
                           0000A9   457 G$SADDR0$0$0 == 0x00a9
                           0000A9   458 _SADDR0	=	0x00a9
                           0000AA   459 G$ADC1CN$0$0 == 0x00aa
                           0000AA   460 _ADC1CN	=	0x00aa
                           0000AB   461 G$ADC1CF$0$0 == 0x00ab
                           0000AB   462 _ADC1CF	=	0x00ab
                           0000AC   463 G$AMX1SL$0$0 == 0x00ac
                           0000AC   464 _AMX1SL	=	0x00ac
                           0000AD   465 G$P3IF$0$0 == 0x00ad
                           0000AD   466 _P3IF	=	0x00ad
                           0000AE   467 G$SADEN1$0$0 == 0x00ae
                           0000AE   468 _SADEN1	=	0x00ae
                           0000AF   469 G$EMI0CN$0$0 == 0x00af
                           0000AF   470 _EMI0CN	=	0x00af
                           0000AF   471 G$_XPAGE$0$0 == 0x00af
                           0000AF   472 __XPAGE	=	0x00af
                           0000B0   473 G$P3$0$0 == 0x00b0
                           0000B0   474 _P3	=	0x00b0
                           0000B1   475 G$OSCXCN$0$0 == 0x00b1
                           0000B1   476 _OSCXCN	=	0x00b1
                           0000B2   477 G$OSCICN$0$0 == 0x00b2
                           0000B2   478 _OSCICN	=	0x00b2
                           0000B5   479 G$P74OUT$0$0 == 0x00b5
                           0000B5   480 _P74OUT	=	0x00b5
                           0000B6   481 G$FLSCL$0$0 == 0x00b6
                           0000B6   482 _FLSCL	=	0x00b6
                           0000B7   483 G$FLACL$0$0 == 0x00b7
                           0000B7   484 _FLACL	=	0x00b7
                           0000B8   485 G$IP$0$0 == 0x00b8
                           0000B8   486 _IP	=	0x00b8
                           0000B9   487 G$SADEN0$0$0 == 0x00b9
                           0000B9   488 _SADEN0	=	0x00b9
                           0000BA   489 G$AMX0CF$0$0 == 0x00ba
                           0000BA   490 _AMX0CF	=	0x00ba
                           0000BB   491 G$AMX0SL$0$0 == 0x00bb
                           0000BB   492 _AMX0SL	=	0x00bb
                           0000BC   493 G$ADC0CF$0$0 == 0x00bc
                           0000BC   494 _ADC0CF	=	0x00bc
                           0000BD   495 G$P1MDIN$0$0 == 0x00bd
                           0000BD   496 _P1MDIN	=	0x00bd
                           0000BE   497 G$ADC0L$0$0 == 0x00be
                           0000BE   498 _ADC0L	=	0x00be
                           0000BF   499 G$ADC0H$0$0 == 0x00bf
                           0000BF   500 _ADC0H	=	0x00bf
                           0000C0   501 G$SMB0CN$0$0 == 0x00c0
                           0000C0   502 _SMB0CN	=	0x00c0
                           0000C1   503 G$SMB0STA$0$0 == 0x00c1
                           0000C1   504 _SMB0STA	=	0x00c1
                           0000C2   505 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   506 _SMB0DAT	=	0x00c2
                           0000C3   507 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   508 _SMB0ADR	=	0x00c3
                           0000C4   509 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   510 _ADC0GTL	=	0x00c4
                           0000C5   511 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   512 _ADC0GTH	=	0x00c5
                           0000C6   513 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   514 _ADC0LTL	=	0x00c6
                           0000C7   515 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   516 _ADC0LTH	=	0x00c7
                           0000C8   517 G$T2CON$0$0 == 0x00c8
                           0000C8   518 _T2CON	=	0x00c8
                           0000C9   519 G$T4CON$0$0 == 0x00c9
                           0000C9   520 _T4CON	=	0x00c9
                           0000CA   521 G$RCAP2L$0$0 == 0x00ca
                           0000CA   522 _RCAP2L	=	0x00ca
                           0000CB   523 G$RCAP2H$0$0 == 0x00cb
                           0000CB   524 _RCAP2H	=	0x00cb
                           0000CC   525 G$TL2$0$0 == 0x00cc
                           0000CC   526 _TL2	=	0x00cc
                           0000CD   527 G$TH2$0$0 == 0x00cd
                           0000CD   528 _TH2	=	0x00cd
                           0000CF   529 G$SMB0CR$0$0 == 0x00cf
                           0000CF   530 _SMB0CR	=	0x00cf
                           0000D0   531 G$PSW$0$0 == 0x00d0
                           0000D0   532 _PSW	=	0x00d0
                           0000D1   533 G$REF0CN$0$0 == 0x00d1
                           0000D1   534 _REF0CN	=	0x00d1
                           0000D2   535 G$DAC0L$0$0 == 0x00d2
                           0000D2   536 _DAC0L	=	0x00d2
                           0000D3   537 G$DAC0H$0$0 == 0x00d3
                           0000D3   538 _DAC0H	=	0x00d3
                           0000D4   539 G$DAC0CN$0$0 == 0x00d4
                           0000D4   540 _DAC0CN	=	0x00d4
                           0000D5   541 G$DAC1L$0$0 == 0x00d5
                           0000D5   542 _DAC1L	=	0x00d5
                           0000D6   543 G$DAC1H$0$0 == 0x00d6
                           0000D6   544 _DAC1H	=	0x00d6
                           0000D7   545 G$DAC1CN$0$0 == 0x00d7
                           0000D7   546 _DAC1CN	=	0x00d7
                           0000D8   547 G$PCA0CN$0$0 == 0x00d8
                           0000D8   548 _PCA0CN	=	0x00d8
                           0000D9   549 G$PCA0MD$0$0 == 0x00d9
                           0000D9   550 _PCA0MD	=	0x00d9
                           0000DA   551 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   552 _PCA0CPM0	=	0x00da
                           0000DB   553 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   554 _PCA0CPM1	=	0x00db
                           0000DC   555 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   556 _PCA0CPM2	=	0x00dc
                           0000DD   557 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   558 _PCA0CPM3	=	0x00dd
                           0000DE   559 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   560 _PCA0CPM4	=	0x00de
                           0000E0   561 G$ACC$0$0 == 0x00e0
                           0000E0   562 _ACC	=	0x00e0
                           0000E1   563 G$XBR0$0$0 == 0x00e1
                           0000E1   564 _XBR0	=	0x00e1
                           0000E2   565 G$XBR1$0$0 == 0x00e2
                           0000E2   566 _XBR1	=	0x00e2
                           0000E3   567 G$XBR2$0$0 == 0x00e3
                           0000E3   568 _XBR2	=	0x00e3
                           0000E4   569 G$RCAP4L$0$0 == 0x00e4
                           0000E4   570 _RCAP4L	=	0x00e4
                           0000E5   571 G$RCAP4H$0$0 == 0x00e5
                           0000E5   572 _RCAP4H	=	0x00e5
                           0000E6   573 G$EIE1$0$0 == 0x00e6
                           0000E6   574 _EIE1	=	0x00e6
                           0000E7   575 G$EIE2$0$0 == 0x00e7
                           0000E7   576 _EIE2	=	0x00e7
                           0000E8   577 G$ADC0CN$0$0 == 0x00e8
                           0000E8   578 _ADC0CN	=	0x00e8
                           0000E9   579 G$PCA0L$0$0 == 0x00e9
                           0000E9   580 _PCA0L	=	0x00e9
                           0000EA   581 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   582 _PCA0CPL0	=	0x00ea
                           0000EB   583 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   584 _PCA0CPL1	=	0x00eb
                           0000EC   585 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   586 _PCA0CPL2	=	0x00ec
                           0000ED   587 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   588 _PCA0CPL3	=	0x00ed
                           0000EE   589 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   590 _PCA0CPL4	=	0x00ee
                           0000EF   591 G$RSTSRC$0$0 == 0x00ef
                           0000EF   592 _RSTSRC	=	0x00ef
                           0000F0   593 G$B$0$0 == 0x00f0
                           0000F0   594 _B	=	0x00f0
                           0000F1   595 G$SCON1$0$0 == 0x00f1
                           0000F1   596 _SCON1	=	0x00f1
                           0000F2   597 G$SBUF1$0$0 == 0x00f2
                           0000F2   598 _SBUF1	=	0x00f2
                           0000F3   599 G$SADDR1$0$0 == 0x00f3
                           0000F3   600 _SADDR1	=	0x00f3
                           0000F4   601 G$TL4$0$0 == 0x00f4
                           0000F4   602 _TL4	=	0x00f4
                           0000F5   603 G$TH4$0$0 == 0x00f5
                           0000F5   604 _TH4	=	0x00f5
                           0000F6   605 G$EIP1$0$0 == 0x00f6
                           0000F6   606 _EIP1	=	0x00f6
                           0000F7   607 G$EIP2$0$0 == 0x00f7
                           0000F7   608 _EIP2	=	0x00f7
                           0000F8   609 G$SPI0CN$0$0 == 0x00f8
                           0000F8   610 _SPI0CN	=	0x00f8
                           0000F9   611 G$PCA0H$0$0 == 0x00f9
                           0000F9   612 _PCA0H	=	0x00f9
                           0000FA   613 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   614 _PCA0CPH0	=	0x00fa
                           0000FB   615 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   616 _PCA0CPH1	=	0x00fb
                           0000FC   617 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   618 _PCA0CPH2	=	0x00fc
                           0000FD   619 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   620 _PCA0CPH3	=	0x00fd
                           0000FE   621 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   622 _PCA0CPH4	=	0x00fe
                           0000FF   623 G$WDTCN$0$0 == 0x00ff
                           0000FF   624 _WDTCN	=	0x00ff
                           008C8A   625 G$TMR0$0$0 == 0x8c8a
                           008C8A   626 _TMR0	=	0x8c8a
                           008D8B   627 G$TMR1$0$0 == 0x8d8b
                           008D8B   628 _TMR1	=	0x8d8b
                           00CDCC   629 G$TMR2$0$0 == 0xcdcc
                           00CDCC   630 _TMR2	=	0xcdcc
                           00CBCA   631 G$RCAP2$0$0 == 0xcbca
                           00CBCA   632 _RCAP2	=	0xcbca
                           009594   633 G$TMR3$0$0 == 0x9594
                           009594   634 _TMR3	=	0x9594
                           009392   635 G$TMR3RL$0$0 == 0x9392
                           009392   636 _TMR3RL	=	0x9392
                           00F5F4   637 G$TMR4$0$0 == 0xf5f4
                           00F5F4   638 _TMR4	=	0xf5f4
                           00E5E4   639 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   640 _RCAP4	=	0xe5e4
                           00BFBE   641 G$ADC0$0$0 == 0xbfbe
                           00BFBE   642 _ADC0	=	0xbfbe
                           00C5C4   643 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   644 _ADC0GT	=	0xc5c4
                           00C7C6   645 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   646 _ADC0LT	=	0xc7c6
                           00D3D2   647 G$DAC0$0$0 == 0xd3d2
                           00D3D2   648 _DAC0	=	0xd3d2
                           00D6D5   649 G$DAC1$0$0 == 0xd6d5
                           00D6D5   650 _DAC1	=	0xd6d5
                           00F9E9   651 G$PCA0$0$0 == 0xf9e9
                           00F9E9   652 _PCA0	=	0xf9e9
                           00FAEA   653 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   654 _PCA0CP0	=	0xfaea
                           00FBEB   655 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   656 _PCA0CP1	=	0xfbeb
                           00FCEC   657 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   658 _PCA0CP2	=	0xfcec
                           00FDED   659 G$PCA0CP3$0$0 == 0xfded
                           00FDED   660 _PCA0CP3	=	0xfded
                           00FEEE   661 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   662 _PCA0CP4	=	0xfeee
                                    663 ;--------------------------------------------------------
                                    664 ; special function bits
                                    665 ;--------------------------------------------------------
                                    666 	.area RSEG    (ABS,DATA)
      000000                        667 	.org 0x0000
                           000080   668 G$P0_0$0$0 == 0x0080
                           000080   669 _P0_0	=	0x0080
                           000081   670 G$P0_1$0$0 == 0x0081
                           000081   671 _P0_1	=	0x0081
                           000082   672 G$P0_2$0$0 == 0x0082
                           000082   673 _P0_2	=	0x0082
                           000083   674 G$P0_3$0$0 == 0x0083
                           000083   675 _P0_3	=	0x0083
                           000084   676 G$P0_4$0$0 == 0x0084
                           000084   677 _P0_4	=	0x0084
                           000085   678 G$P0_5$0$0 == 0x0085
                           000085   679 _P0_5	=	0x0085
                           000086   680 G$P0_6$0$0 == 0x0086
                           000086   681 _P0_6	=	0x0086
                           000087   682 G$P0_7$0$0 == 0x0087
                           000087   683 _P0_7	=	0x0087
                           000088   684 G$IT0$0$0 == 0x0088
                           000088   685 _IT0	=	0x0088
                           000089   686 G$IE0$0$0 == 0x0089
                           000089   687 _IE0	=	0x0089
                           00008A   688 G$IT1$0$0 == 0x008a
                           00008A   689 _IT1	=	0x008a
                           00008B   690 G$IE1$0$0 == 0x008b
                           00008B   691 _IE1	=	0x008b
                           00008C   692 G$TR0$0$0 == 0x008c
                           00008C   693 _TR0	=	0x008c
                           00008D   694 G$TF0$0$0 == 0x008d
                           00008D   695 _TF0	=	0x008d
                           00008E   696 G$TR1$0$0 == 0x008e
                           00008E   697 _TR1	=	0x008e
                           00008F   698 G$TF1$0$0 == 0x008f
                           00008F   699 _TF1	=	0x008f
                           000090   700 G$P1_0$0$0 == 0x0090
                           000090   701 _P1_0	=	0x0090
                           000091   702 G$P1_1$0$0 == 0x0091
                           000091   703 _P1_1	=	0x0091
                           000092   704 G$P1_2$0$0 == 0x0092
                           000092   705 _P1_2	=	0x0092
                           000093   706 G$P1_3$0$0 == 0x0093
                           000093   707 _P1_3	=	0x0093
                           000094   708 G$P1_4$0$0 == 0x0094
                           000094   709 _P1_4	=	0x0094
                           000095   710 G$P1_5$0$0 == 0x0095
                           000095   711 _P1_5	=	0x0095
                           000096   712 G$P1_6$0$0 == 0x0096
                           000096   713 _P1_6	=	0x0096
                           000097   714 G$P1_7$0$0 == 0x0097
                           000097   715 _P1_7	=	0x0097
                           000098   716 G$RI$0$0 == 0x0098
                           000098   717 _RI	=	0x0098
                           000098   718 G$RI0$0$0 == 0x0098
                           000098   719 _RI0	=	0x0098
                           000099   720 G$TI$0$0 == 0x0099
                           000099   721 _TI	=	0x0099
                           000099   722 G$TI0$0$0 == 0x0099
                           000099   723 _TI0	=	0x0099
                           00009A   724 G$RB8$0$0 == 0x009a
                           00009A   725 _RB8	=	0x009a
                           00009A   726 G$RB80$0$0 == 0x009a
                           00009A   727 _RB80	=	0x009a
                           00009B   728 G$TB8$0$0 == 0x009b
                           00009B   729 _TB8	=	0x009b
                           00009B   730 G$TB80$0$0 == 0x009b
                           00009B   731 _TB80	=	0x009b
                           00009C   732 G$REN$0$0 == 0x009c
                           00009C   733 _REN	=	0x009c
                           00009C   734 G$REN0$0$0 == 0x009c
                           00009C   735 _REN0	=	0x009c
                           00009D   736 G$SM2$0$0 == 0x009d
                           00009D   737 _SM2	=	0x009d
                           00009D   738 G$SM20$0$0 == 0x009d
                           00009D   739 _SM20	=	0x009d
                           00009D   740 G$MCE0$0$0 == 0x009d
                           00009D   741 _MCE0	=	0x009d
                           00009E   742 G$SM1$0$0 == 0x009e
                           00009E   743 _SM1	=	0x009e
                           00009E   744 G$SM10$0$0 == 0x009e
                           00009E   745 _SM10	=	0x009e
                           00009F   746 G$SM0$0$0 == 0x009f
                           00009F   747 _SM0	=	0x009f
                           00009F   748 G$SM00$0$0 == 0x009f
                           00009F   749 _SM00	=	0x009f
                           00009F   750 G$S0MODE$0$0 == 0x009f
                           00009F   751 _S0MODE	=	0x009f
                           0000A0   752 G$P2_0$0$0 == 0x00a0
                           0000A0   753 _P2_0	=	0x00a0
                           0000A1   754 G$P2_1$0$0 == 0x00a1
                           0000A1   755 _P2_1	=	0x00a1
                           0000A2   756 G$P2_2$0$0 == 0x00a2
                           0000A2   757 _P2_2	=	0x00a2
                           0000A3   758 G$P2_3$0$0 == 0x00a3
                           0000A3   759 _P2_3	=	0x00a3
                           0000A4   760 G$P2_4$0$0 == 0x00a4
                           0000A4   761 _P2_4	=	0x00a4
                           0000A5   762 G$P2_5$0$0 == 0x00a5
                           0000A5   763 _P2_5	=	0x00a5
                           0000A6   764 G$P2_6$0$0 == 0x00a6
                           0000A6   765 _P2_6	=	0x00a6
                           0000A7   766 G$P2_7$0$0 == 0x00a7
                           0000A7   767 _P2_7	=	0x00a7
                           0000A8   768 G$EX0$0$0 == 0x00a8
                           0000A8   769 _EX0	=	0x00a8
                           0000A9   770 G$ET0$0$0 == 0x00a9
                           0000A9   771 _ET0	=	0x00a9
                           0000AA   772 G$EX1$0$0 == 0x00aa
                           0000AA   773 _EX1	=	0x00aa
                           0000AB   774 G$ET1$0$0 == 0x00ab
                           0000AB   775 _ET1	=	0x00ab
                           0000AC   776 G$ES0$0$0 == 0x00ac
                           0000AC   777 _ES0	=	0x00ac
                           0000AC   778 G$ES$0$0 == 0x00ac
                           0000AC   779 _ES	=	0x00ac
                           0000AD   780 G$ET2$0$0 == 0x00ad
                           0000AD   781 _ET2	=	0x00ad
                           0000AF   782 G$EA$0$0 == 0x00af
                           0000AF   783 _EA	=	0x00af
                           0000B0   784 G$P3_0$0$0 == 0x00b0
                           0000B0   785 _P3_0	=	0x00b0
                           0000B1   786 G$P3_1$0$0 == 0x00b1
                           0000B1   787 _P3_1	=	0x00b1
                           0000B2   788 G$P3_2$0$0 == 0x00b2
                           0000B2   789 _P3_2	=	0x00b2
                           0000B3   790 G$P3_3$0$0 == 0x00b3
                           0000B3   791 _P3_3	=	0x00b3
                           0000B4   792 G$P3_4$0$0 == 0x00b4
                           0000B4   793 _P3_4	=	0x00b4
                           0000B5   794 G$P3_5$0$0 == 0x00b5
                           0000B5   795 _P3_5	=	0x00b5
                           0000B6   796 G$P3_6$0$0 == 0x00b6
                           0000B6   797 _P3_6	=	0x00b6
                           0000B7   798 G$P3_7$0$0 == 0x00b7
                           0000B7   799 _P3_7	=	0x00b7
                           0000B8   800 G$PX0$0$0 == 0x00b8
                           0000B8   801 _PX0	=	0x00b8
                           0000B9   802 G$PT0$0$0 == 0x00b9
                           0000B9   803 _PT0	=	0x00b9
                           0000BA   804 G$PX1$0$0 == 0x00ba
                           0000BA   805 _PX1	=	0x00ba
                           0000BB   806 G$PT1$0$0 == 0x00bb
                           0000BB   807 _PT1	=	0x00bb
                           0000BC   808 G$PS0$0$0 == 0x00bc
                           0000BC   809 _PS0	=	0x00bc
                           0000BC   810 G$PS$0$0 == 0x00bc
                           0000BC   811 _PS	=	0x00bc
                           0000BD   812 G$PT2$0$0 == 0x00bd
                           0000BD   813 _PT2	=	0x00bd
                           0000C0   814 G$SMBTOE$0$0 == 0x00c0
                           0000C0   815 _SMBTOE	=	0x00c0
                           0000C1   816 G$SMBFTE$0$0 == 0x00c1
                           0000C1   817 _SMBFTE	=	0x00c1
                           0000C2   818 G$AA$0$0 == 0x00c2
                           0000C2   819 _AA	=	0x00c2
                           0000C3   820 G$SI$0$0 == 0x00c3
                           0000C3   821 _SI	=	0x00c3
                           0000C4   822 G$STO$0$0 == 0x00c4
                           0000C4   823 _STO	=	0x00c4
                           0000C5   824 G$STA$0$0 == 0x00c5
                           0000C5   825 _STA	=	0x00c5
                           0000C6   826 G$ENSMB$0$0 == 0x00c6
                           0000C6   827 _ENSMB	=	0x00c6
                           0000C7   828 G$BUSY$0$0 == 0x00c7
                           0000C7   829 _BUSY	=	0x00c7
                           0000C8   830 G$CPRL2$0$0 == 0x00c8
                           0000C8   831 _CPRL2	=	0x00c8
                           0000C9   832 G$CT2$0$0 == 0x00c9
                           0000C9   833 _CT2	=	0x00c9
                           0000CA   834 G$TR2$0$0 == 0x00ca
                           0000CA   835 _TR2	=	0x00ca
                           0000CB   836 G$EXEN2$0$0 == 0x00cb
                           0000CB   837 _EXEN2	=	0x00cb
                           0000CC   838 G$TCLK$0$0 == 0x00cc
                           0000CC   839 _TCLK	=	0x00cc
                           0000CD   840 G$RCLK$0$0 == 0x00cd
                           0000CD   841 _RCLK	=	0x00cd
                           0000CE   842 G$EXF2$0$0 == 0x00ce
                           0000CE   843 _EXF2	=	0x00ce
                           0000CF   844 G$TF2$0$0 == 0x00cf
                           0000CF   845 _TF2	=	0x00cf
                           0000D0   846 G$P$0$0 == 0x00d0
                           0000D0   847 _P	=	0x00d0
                           0000D1   848 G$F1$0$0 == 0x00d1
                           0000D1   849 _F1	=	0x00d1
                           0000D2   850 G$OV$0$0 == 0x00d2
                           0000D2   851 _OV	=	0x00d2
                           0000D3   852 G$RS0$0$0 == 0x00d3
                           0000D3   853 _RS0	=	0x00d3
                           0000D4   854 G$RS1$0$0 == 0x00d4
                           0000D4   855 _RS1	=	0x00d4
                           0000D5   856 G$F0$0$0 == 0x00d5
                           0000D5   857 _F0	=	0x00d5
                           0000D6   858 G$AC$0$0 == 0x00d6
                           0000D6   859 _AC	=	0x00d6
                           0000D7   860 G$CY$0$0 == 0x00d7
                           0000D7   861 _CY	=	0x00d7
                           0000D8   862 G$CCF0$0$0 == 0x00d8
                           0000D8   863 _CCF0	=	0x00d8
                           0000D9   864 G$CCF1$0$0 == 0x00d9
                           0000D9   865 _CCF1	=	0x00d9
                           0000DA   866 G$CCF2$0$0 == 0x00da
                           0000DA   867 _CCF2	=	0x00da
                           0000DB   868 G$CCF3$0$0 == 0x00db
                           0000DB   869 _CCF3	=	0x00db
                           0000DC   870 G$CCF4$0$0 == 0x00dc
                           0000DC   871 _CCF4	=	0x00dc
                           0000DE   872 G$CR$0$0 == 0x00de
                           0000DE   873 _CR	=	0x00de
                           0000DF   874 G$CF$0$0 == 0x00df
                           0000DF   875 _CF	=	0x00df
                           0000E8   876 G$ADLJST$0$0 == 0x00e8
                           0000E8   877 _ADLJST	=	0x00e8
                           0000E8   878 G$AD0LJST$0$0 == 0x00e8
                           0000E8   879 _AD0LJST	=	0x00e8
                           0000E9   880 G$ADWINT$0$0 == 0x00e9
                           0000E9   881 _ADWINT	=	0x00e9
                           0000E9   882 G$AD0WINT$0$0 == 0x00e9
                           0000E9   883 _AD0WINT	=	0x00e9
                           0000EA   884 G$ADSTM0$0$0 == 0x00ea
                           0000EA   885 _ADSTM0	=	0x00ea
                           0000EA   886 G$AD0CM0$0$0 == 0x00ea
                           0000EA   887 _AD0CM0	=	0x00ea
                           0000EB   888 G$ADSTM1$0$0 == 0x00eb
                           0000EB   889 _ADSTM1	=	0x00eb
                           0000EB   890 G$AD0CM1$0$0 == 0x00eb
                           0000EB   891 _AD0CM1	=	0x00eb
                           0000EC   892 G$ADBUSY$0$0 == 0x00ec
                           0000EC   893 _ADBUSY	=	0x00ec
                           0000EC   894 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   895 _AD0BUSY	=	0x00ec
                           0000ED   896 G$ADCINT$0$0 == 0x00ed
                           0000ED   897 _ADCINT	=	0x00ed
                           0000ED   898 G$AD0INT$0$0 == 0x00ed
                           0000ED   899 _AD0INT	=	0x00ed
                           0000EE   900 G$ADCTM$0$0 == 0x00ee
                           0000EE   901 _ADCTM	=	0x00ee
                           0000EE   902 G$AD0TM$0$0 == 0x00ee
                           0000EE   903 _AD0TM	=	0x00ee
                           0000EF   904 G$ADCEN$0$0 == 0x00ef
                           0000EF   905 _ADCEN	=	0x00ef
                           0000EF   906 G$AD0EN$0$0 == 0x00ef
                           0000EF   907 _AD0EN	=	0x00ef
                           0000F8   908 G$SPIEN$0$0 == 0x00f8
                           0000F8   909 _SPIEN	=	0x00f8
                           0000F9   910 G$MSTEN$0$0 == 0x00f9
                           0000F9   911 _MSTEN	=	0x00f9
                           0000FA   912 G$SLVSEL$0$0 == 0x00fa
                           0000FA   913 _SLVSEL	=	0x00fa
                           0000FB   914 G$TXBSY$0$0 == 0x00fb
                           0000FB   915 _TXBSY	=	0x00fb
                           0000FC   916 G$RXOVRN$0$0 == 0x00fc
                           0000FC   917 _RXOVRN	=	0x00fc
                           0000FD   918 G$MODF$0$0 == 0x00fd
                           0000FD   919 _MODF	=	0x00fd
                           0000FE   920 G$WCOL$0$0 == 0x00fe
                           0000FE   921 _WCOL	=	0x00fe
                           0000FF   922 G$SPIF$0$0 == 0x00ff
                           0000FF   923 _SPIF	=	0x00ff
                           0000C7   924 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   925 _BUS_BUSY	=	0x00c7
                           0000C6   926 G$BUS_EN$0$0 == 0x00c6
                           0000C6   927 _BUS_EN	=	0x00c6
                           0000C5   928 G$BUS_START$0$0 == 0x00c5
                           0000C5   929 _BUS_START	=	0x00c5
                           0000C4   930 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   931 _BUS_STOP	=	0x00c4
                           0000C3   932 G$BUS_INT$0$0 == 0x00c3
                           0000C3   933 _BUS_INT	=	0x00c3
                           0000C2   934 G$BUS_AA$0$0 == 0x00c2
                           0000C2   935 _BUS_AA	=	0x00c2
                           0000C1   936 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   937 _BUS_FTE	=	0x00c1
                           0000C0   938 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   939 _BUS_TOE	=	0x00c0
                           000083   940 G$BUS_SCL$0$0 == 0x0083
                           000083   941 _BUS_SCL	=	0x0083
                           0000B7   942 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   943 _COMPASS_SWITCH	=	0x00b7
                           0000B6   944 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   945 _RANGER_SWITCH	=	0x00b6
                                    946 ;--------------------------------------------------------
                                    947 ; overlayable register banks
                                    948 ;--------------------------------------------------------
                                    949 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        950 	.ds 8
                                    951 ;--------------------------------------------------------
                                    952 ; internal ram data
                                    953 ;--------------------------------------------------------
                                    954 	.area DSEG    (DATA)
                           000000   955 LSquiggles.lcd_clear$NumBytes$1$77==.
      000000                        956 _lcd_clear_NumBytes_1_77:
      000000                        957 	.ds 1
                           000001   958 LSquiggles.lcd_clear$Cmd$1$77==.
      000001                        959 _lcd_clear_Cmd_1_77:
      000001                        960 	.ds 2
                           000003   961 LSquiggles.read_keypad$Data$1$78==.
      000003                        962 _read_keypad_Data_1_78:
      000003                        963 	.ds 2
                           000005   964 LSquiggles.i2c_write_data$start_reg$1$97==.
      000005                        965 _i2c_write_data_PARM_2:
      000005                        966 	.ds 1
                           000006   967 LSquiggles.i2c_write_data$buffer$1$97==.
      000006                        968 _i2c_write_data_PARM_3:
      000006                        969 	.ds 3
                           000009   970 LSquiggles.i2c_write_data$num_bytes$1$97==.
      000009                        971 _i2c_write_data_PARM_4:
      000009                        972 	.ds 1
                           00000A   973 LSquiggles.i2c_read_data$start_reg$1$99==.
      00000A                        974 _i2c_read_data_PARM_2:
      00000A                        975 	.ds 1
                           00000B   976 LSquiggles.i2c_read_data$buffer$1$99==.
      00000B                        977 _i2c_read_data_PARM_3:
      00000B                        978 	.ds 3
                           00000E   979 LSquiggles.i2c_read_data$num_bytes$1$99==.
      00000E                        980 _i2c_read_data_PARM_4:
      00000E                        981 	.ds 1
                           00000F   982 LSquiggles.Accel_Init$Data2$1$103==.
      00000F                        983 _Accel_Init_Data2_1_103:
      00000F                        984 	.ds 1
                           000010   985 G$Counts$0$0==.
      000010                        986 _Counts::
      000010                        987 	.ds 2
                           000012   988 G$nCounts$0$0==.
      000012                        989 _nCounts::
      000012                        990 	.ds 2
                           000014   991 G$nOverflows$0$0==.
      000014                        992 _nOverflows::
      000014                        993 	.ds 2
                           000016   994 G$desired_heading$0$0==.
      000016                        995 _desired_heading::
      000016                        996 	.ds 2
                           000018   997 G$compass_gain$0$0==.
      000018                        998 _compass_gain::
      000018                        999 	.ds 4
                           00001C  1000 G$h_count$0$0==.
      00001C                       1001 _h_count::
      00001C                       1002 	.ds 1
                           00001D  1003 G$r_count$0$0==.
      00001D                       1004 _r_count::
      00001D                       1005 	.ds 1
                           00001E  1006 G$delay$0$0==.
      00001E                       1007 _delay::
      00001E                       1008 	.ds 1
                           00001F  1009 G$new_heading$0$0==.
      00001F                       1010 _new_heading::
      00001F                       1011 	.ds 1
                           000020  1012 G$new_range$0$0==.
      000020                       1013 _new_range::
      000020                       1014 	.ds 1
                           000021  1015 G$heading$0$0==.
      000021                       1016 _heading::
      000021                       1017 	.ds 2
                           000023  1018 G$range$0$0==.
      000023                       1019 _range::
      000023                       1020 	.ds 2
                           000025  1021 G$COMPASS_PW$0$0==.
      000025                       1022 _COMPASS_PW::
      000025                       1023 	.ds 2
                           000027  1024 G$range_adj$0$0==.
      000027                       1025 _range_adj::
      000027                       1026 	.ds 2
                           000029  1027 G$compass_adj$0$0==.
      000029                       1028 _compass_adj::
      000029                       1029 	.ds 2
                           00002B  1030 G$ranger_gain$0$0==.
      00002B                       1031 _ranger_gain::
      00002B                       1032 	.ds 1
                           00002C  1033 G$AD_Result$0$0==.
      00002C                       1034 _AD_Result::
      00002C                       1035 	.ds 1
                           00002D  1036 G$voltage$0$0==.
      00002D                       1037 _voltage::
      00002D                       1038 	.ds 1
                           00002E  1039 G$Data$0$0==.
      00002E                       1040 _Data::
      00002E                       1041 	.ds 2
                           000030  1042 G$print_delay$0$0==.
      000030                       1043 _print_delay::
      000030                       1044 	.ds 1
                           000031  1045 LSquiggles.read_compass$Data$1$152==.
      000031                       1046 _read_compass_Data_1_152:
      000031                       1047 	.ds 2
                           000033  1048 LSquiggles.Update_Value$incr$1$155==.
      000033                       1049 _Update_Value_PARM_2:
      000033                       1050 	.ds 1
                           000034  1051 LSquiggles.Update_Value$maxval$1$155==.
      000034                       1052 _Update_Value_PARM_3:
      000034                       1053 	.ds 2
                           000036  1054 LSquiggles.Update_Value$minval$1$155==.
      000036                       1055 _Update_Value_PARM_4:
      000036                       1056 	.ds 2
                                   1057 ;--------------------------------------------------------
                                   1058 ; overlayable items in internal ram 
                                   1059 ;--------------------------------------------------------
                                   1060 	.area	OSEG    (OVR,DATA)
                                   1061 	.area	OSEG    (OVR,DATA)
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 	.area	OSEG    (OVR,DATA)
                                   1064 	.area	OSEG    (OVR,DATA)
                                   1065 	.area	OSEG    (OVR,DATA)
                                   1066 	.area	OSEG    (OVR,DATA)
                                   1067 	.area	OSEG    (OVR,DATA)
                                   1068 ;--------------------------------------------------------
                                   1069 ; Stack segment in internal ram 
                                   1070 ;--------------------------------------------------------
                                   1071 	.area	SSEG
      000000                       1072 __start__stack:
      000000                       1073 	.ds	1
                                   1074 
                                   1075 ;--------------------------------------------------------
                                   1076 ; indirectly addressable internal ram data
                                   1077 ;--------------------------------------------------------
                                   1078 	.area ISEG    (DATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; absolute internal ram data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area IABS    (ABS,DATA)
                                   1083 	.area IABS    (ABS,DATA)
                                   1084 ;--------------------------------------------------------
                                   1085 ; bit data
                                   1086 ;--------------------------------------------------------
                                   1087 	.area BSEG    (BIT)
                                   1088 ;--------------------------------------------------------
                                   1089 ; paged external ram data
                                   1090 ;--------------------------------------------------------
                                   1091 	.area PSEG    (PAG,XDATA)
                                   1092 ;--------------------------------------------------------
                                   1093 ; external ram data
                                   1094 ;--------------------------------------------------------
                                   1095 	.area XSEG    (XDATA)
                           000000  1096 LSquiggles.lcd_print$text$1$73==.
      000000                       1097 _lcd_print_text_1_73:
      000000                       1098 	.ds 80
                                   1099 ;--------------------------------------------------------
                                   1100 ; absolute external ram data
                                   1101 ;--------------------------------------------------------
                                   1102 	.area XABS    (ABS,XDATA)
                                   1103 ;--------------------------------------------------------
                                   1104 ; external initialized ram data
                                   1105 ;--------------------------------------------------------
                                   1106 	.area XISEG   (XDATA)
                                   1107 	.area HOME    (CODE)
                                   1108 	.area GSINIT0 (CODE)
                                   1109 	.area GSINIT1 (CODE)
                                   1110 	.area GSINIT2 (CODE)
                                   1111 	.area GSINIT3 (CODE)
                                   1112 	.area GSINIT4 (CODE)
                                   1113 	.area GSINIT5 (CODE)
                                   1114 	.area GSINIT  (CODE)
                                   1115 	.area GSFINAL (CODE)
                                   1116 	.area CSEG    (CODE)
                                   1117 ;--------------------------------------------------------
                                   1118 ; interrupt vector 
                                   1119 ;--------------------------------------------------------
                                   1120 	.area HOME    (CODE)
      000000                       1121 __interrupt_vect:
      000000 02r00r00         [24] 1122 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1123 	reti
      000004                       1124 	.ds	7
      00000B 32               [24] 1125 	reti
      00000C                       1126 	.ds	7
      000013 32               [24] 1127 	reti
      000014                       1128 	.ds	7
      00001B 32               [24] 1129 	reti
      00001C                       1130 	.ds	7
      000023 32               [24] 1131 	reti
      000024                       1132 	.ds	7
      00002B 32               [24] 1133 	reti
      00002C                       1134 	.ds	7
      000033 32               [24] 1135 	reti
      000034                       1136 	.ds	7
      00003B 32               [24] 1137 	reti
      00003C                       1138 	.ds	7
      000043 32               [24] 1139 	reti
      000044                       1140 	.ds	7
      00004B 02r06rC8         [24] 1141 	ljmp	_PCA_ISR
                                   1142 ;--------------------------------------------------------
                                   1143 ; global & static initialisations
                                   1144 ;--------------------------------------------------------
                                   1145 	.area HOME    (CODE)
                                   1146 	.area GSINIT  (CODE)
                                   1147 	.area GSFINAL (CODE)
                                   1148 	.area GSINIT  (CODE)
                                   1149 	.globl __sdcc_gsinit_startup
                                   1150 	.globl __sdcc_program_startup
                                   1151 	.globl __start__stack
                                   1152 	.globl __mcs51_genXINIT
                                   1153 	.globl __mcs51_genXRAMCLEAR
                                   1154 	.globl __mcs51_genRAMCLEAR
                           000000  1155 	C$Squiggles.c$44$1$161 ==.
                                   1156 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:44: float compass_gain = 1;
      000000 E4               [12] 1157 	clr	a
      000001 F5*18            [12] 1158 	mov	_compass_gain,a
      000003 F5*19            [12] 1159 	mov	(_compass_gain + 1),a
      000005 75*1A 80         [24] 1160 	mov	(_compass_gain + 2),#0x80
      000008 75*1B 3F         [24] 1161 	mov	(_compass_gain + 3),#0x3F
                           00000B  1162 	C$Squiggles.c$55$1$161 ==.
                                   1163 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:55: unsigned int range_adj = 0;
      00000B F5*27            [12] 1164 	mov	_range_adj,a
      00000D F5*28            [12] 1165 	mov	(_range_adj + 1),a
                           00000F  1166 	C$Squiggles.c$56$1$161 ==.
                                   1167 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:56: unsigned int compass_adj = 0;
      00000F F5*29            [12] 1168 	mov	_compass_adj,a
      000011 F5*2A            [12] 1169 	mov	(_compass_adj + 1),a
                           000013  1170 	C$Squiggles.c$57$1$161 ==.
                                   1171 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:57: unsigned char ranger_gain = 40;		// between 30 and 150
      000013 75*2B 28         [24] 1172 	mov	_ranger_gain,#0x28
                                   1173 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1174 	ljmp	__sdcc_program_startup
                                   1175 ;--------------------------------------------------------
                                   1176 ; Home
                                   1177 ;--------------------------------------------------------
                                   1178 	.area HOME    (CODE)
                                   1179 	.area HOME    (CODE)
      00004E                       1180 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1181 	ljmp	_main
                                   1182 ;	return from main will return to caller
                                   1183 ;--------------------------------------------------------
                                   1184 ; code
                                   1185 ;--------------------------------------------------------
                                   1186 	.area CSEG    (CODE)
                                   1187 ;------------------------------------------------------------
                                   1188 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1189 ;------------------------------------------------------------
                                   1190 ;i                         Allocated to registers 
                                   1191 ;------------------------------------------------------------
                           000000  1192 	G$SYSCLK_Init$0$0 ==.
                           000000  1193 	C$c8051_SDCC.h$42$0$0 ==.
                                   1194 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function SYSCLK_Init
                                   1197 ;	-----------------------------------------
      000000                       1198 _SYSCLK_Init:
                           000007  1199 	ar7 = 0x07
                           000006  1200 	ar6 = 0x06
                           000005  1201 	ar5 = 0x05
                           000004  1202 	ar4 = 0x04
                           000003  1203 	ar3 = 0x03
                           000002  1204 	ar2 = 0x02
                           000001  1205 	ar1 = 0x01
                           000000  1206 	ar0 = 0x00
                           000000  1207 	C$c8051_SDCC.h$46$1$31 ==.
                                   1208 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1209 	mov	_OSCXCN,#0x67
                           000003  1210 	C$c8051_SDCC.h$49$1$31 ==.
                                   1211 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1212 	mov	r6,#0x00
      000005 7F 01            [12] 1213 	mov	r7,#0x01
      000007                       1214 00107$:
      000007 1E               [12] 1215 	dec	r6
      000008 BE FF 01         [24] 1216 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1217 	dec	r7
      00000C                       1218 00121$:
      00000C EE               [12] 1219 	mov	a,r6
      00000D 4F               [12] 1220 	orl	a,r7
      00000E 70 F7            [24] 1221 	jnz	00107$
                           000010  1222 	C$c8051_SDCC.h$51$1$31 ==.
                                   1223 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1224 00102$:
      000010 E5 B1            [12] 1225 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1226 	jnb	acc.7,00102$
                           000015  1227 	C$c8051_SDCC.h$53$1$31 ==.
                                   1228 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1229 	mov	_OSCICN,#0x88
                           000018  1230 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1231 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1232 	ret
                                   1233 ;------------------------------------------------------------
                                   1234 ;Allocation info for local variables in function 'UART0_Init'
                                   1235 ;------------------------------------------------------------
                           000019  1236 	G$UART0_Init$0$0 ==.
                           000019  1237 	C$c8051_SDCC.h$64$1$31 ==.
                                   1238 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1239 ;	-----------------------------------------
                                   1240 ;	 function UART0_Init
                                   1241 ;	-----------------------------------------
      000019                       1242 _UART0_Init:
                           000019  1243 	C$c8051_SDCC.h$66$1$33 ==.
                                   1244 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1245 	mov	_SCON0,#0x50
                           00001C  1246 	C$c8051_SDCC.h$67$1$33 ==.
                                   1247 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1248 	mov	_TMOD,#0x20
                           00001F  1249 	C$c8051_SDCC.h$68$1$33 ==.
                                   1250 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1251 	mov	_TH1,#0xDC
                           000022  1252 	C$c8051_SDCC.h$69$1$33 ==.
                                   1253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1254 	setb	_TR1
                           000024  1255 	C$c8051_SDCC.h$70$1$33 ==.
                                   1256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1257 	orl	_CKCON,#0x10
                           000027  1258 	C$c8051_SDCC.h$71$1$33 ==.
                                   1259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1260 	orl	_PCON,#0x80
                           00002A  1261 	C$c8051_SDCC.h$73$1$33 ==.
                                   1262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1263 	setb	_TI0
                           00002C  1264 	C$c8051_SDCC.h$74$1$33 ==.
                                   1265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1266 	orl	_P0MDOUT,#0x01
                           00002F  1267 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1268 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1269 	ret
                                   1270 ;------------------------------------------------------------
                                   1271 ;Allocation info for local variables in function 'Sys_Init'
                                   1272 ;------------------------------------------------------------
                           000030  1273 	G$Sys_Init$0$0 ==.
                           000030  1274 	C$c8051_SDCC.h$83$1$33 ==.
                                   1275 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1276 ;	-----------------------------------------
                                   1277 ;	 function Sys_Init
                                   1278 ;	-----------------------------------------
      000030                       1279 _Sys_Init:
                           000030  1280 	C$c8051_SDCC.h$85$1$35 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1282 	mov	_WDTCN,#0xDE
                           000033  1283 	C$c8051_SDCC.h$86$1$35 ==.
                                   1284 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1285 	mov	_WDTCN,#0xAD
                           000036  1286 	C$c8051_SDCC.h$88$1$35 ==.
                                   1287 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1288 	lcall	_SYSCLK_Init
                           000039  1289 	C$c8051_SDCC.h$89$1$35 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1291 	lcall	_UART0_Init
                           00003C  1292 	C$c8051_SDCC.h$91$1$35 ==.
                                   1293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1294 	orl	_XBR0,#0x04
                           00003F  1295 	C$c8051_SDCC.h$92$1$35 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1297 	orl	_XBR2,#0x40
                           000042  1298 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1299 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1300 	ret
                                   1301 ;------------------------------------------------------------
                                   1302 ;Allocation info for local variables in function 'putchar'
                                   1303 ;------------------------------------------------------------
                                   1304 ;c                         Allocated to registers r7 
                                   1305 ;------------------------------------------------------------
                           000043  1306 	G$putchar$0$0 ==.
                           000043  1307 	C$c8051_SDCC.h$98$1$35 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1309 ;	-----------------------------------------
                                   1310 ;	 function putchar
                                   1311 ;	-----------------------------------------
      000043                       1312 _putchar:
      000043 AF 82            [24] 1313 	mov	r7,dpl
                           000045  1314 	C$c8051_SDCC.h$100$1$37 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1316 00101$:
                           000045  1317 	C$c8051_SDCC.h$101$1$37 ==.
                                   1318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1319 	jbc	_TI0,00112$
      000048 80 FB            [24] 1320 	sjmp	00101$
      00004A                       1321 00112$:
                           00004A  1322 	C$c8051_SDCC.h$102$1$37 ==.
                                   1323 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1324 	mov	_SBUF0,r7
                           00004C  1325 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1326 	XG$putchar$0$0 ==.
      00004C 22               [24] 1327 	ret
                                   1328 ;------------------------------------------------------------
                                   1329 ;Allocation info for local variables in function 'getchar'
                                   1330 ;------------------------------------------------------------
                                   1331 ;c                         Allocated to registers 
                                   1332 ;------------------------------------------------------------
                           00004D  1333 	G$getchar$0$0 ==.
                           00004D  1334 	C$c8051_SDCC.h$108$1$37 ==.
                                   1335 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1336 ;	-----------------------------------------
                                   1337 ;	 function getchar
                                   1338 ;	-----------------------------------------
      00004D                       1339 _getchar:
                           00004D  1340 	C$c8051_SDCC.h$111$1$39 ==.
                                   1341 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1342 00101$:
                           00004D  1343 	C$c8051_SDCC.h$112$1$39 ==.
                                   1344 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1345 	jbc	_RI0,00112$
      000050 80 FB            [24] 1346 	sjmp	00101$
      000052                       1347 00112$:
                           000052  1348 	C$c8051_SDCC.h$113$1$39 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1350 	mov	dpl,_SBUF0
                           000055  1351 	C$c8051_SDCC.h$114$1$39 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1353 	lcall	_putchar
                           000058  1354 	C$c8051_SDCC.h$115$1$39 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1356 	mov	dpl,_SBUF0
                           00005B  1357 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1358 	XG$getchar$0$0 ==.
      00005B 22               [24] 1359 	ret
                                   1360 ;------------------------------------------------------------
                                   1361 ;Allocation info for local variables in function 'lcd_print'
                                   1362 ;------------------------------------------------------------
                                   1363 ;fmt                       Allocated to stack - _bp -5
                                   1364 ;len                       Allocated to registers r6 
                                   1365 ;i                         Allocated to registers 
                                   1366 ;ap                        Allocated to registers 
                                   1367 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1368 ;------------------------------------------------------------
                           00005C  1369 	G$lcd_print$0$0 ==.
                           00005C  1370 	C$i2c.h$81$1$39 ==.
                                   1371 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1372 ;	-----------------------------------------
                                   1373 ;	 function lcd_print
                                   1374 ;	-----------------------------------------
      00005C                       1375 _lcd_print:
      00005C C0*00            [24] 1376 	push	_bp
      00005E 85 81*00         [24] 1377 	mov	_bp,sp
                           000061  1378 	C$i2c.h$87$1$73 ==.
                                   1379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1380 	mov	a,_bp
      000063 24 FB            [12] 1381 	add	a,#0xfb
      000065 F8               [12] 1382 	mov	r0,a
      000066 86 82            [24] 1383 	mov	dpl,@r0
      000068 08               [12] 1384 	inc	r0
      000069 86 83            [24] 1385 	mov	dph,@r0
      00006B 08               [12] 1386 	inc	r0
      00006C 86 F0            [24] 1387 	mov	b,@r0
      00006E 12r00r00         [24] 1388 	lcall	_strlen
      000071 E5 82            [12] 1389 	mov	a,dpl
      000073 85 83 F0         [24] 1390 	mov	b,dph
      000076 45 F0            [12] 1391 	orl	a,b
      000078 70 02            [24] 1392 	jnz	00102$
      00007A 80 62            [24] 1393 	sjmp	00109$
      00007C                       1394 00102$:
                           00007C  1395 	C$i2c.h$89$2$74 ==.
                                   1396 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1397 	mov	a,_bp
      00007E 24 FB            [12] 1398 	add	a,#0xFB
      000080 FF               [12] 1399 	mov	r7,a
      000081 8F*00            [24] 1400 	mov	_vsprintf_PARM_3,r7
                           000083  1401 	C$i2c.h$90$1$73 ==.
                                   1402 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1403 	mov	a,_bp
      000085 24 FB            [12] 1404 	add	a,#0xfb
      000087 F8               [12] 1405 	mov	r0,a
      000088 86*00            [24] 1406 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1407 	inc	r0
      00008B 86*01            [24] 1408 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1409 	inc	r0
      00008E 86*02            [24] 1410 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1411 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1412 	mov	b,#0x00
      000096 12r00r00         [24] 1413 	lcall	_vsprintf
                           000099  1414 	C$i2c.h$93$1$73 ==.
                                   1415 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1416 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1417 	mov	b,#0x00
      00009F 12r00r00         [24] 1418 	lcall	_strlen
      0000A2 AE 82            [24] 1419 	mov	r6,dpl
                           0000A4  1420 	C$i2c.h$94$1$73 ==.
                                   1421 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1422 	mov	r7,#0x00
      0000A6                       1423 00107$:
      0000A6 C3               [12] 1424 	clr	c
      0000A7 EF               [12] 1425 	mov	a,r7
      0000A8 9E               [12] 1426 	subb	a,r6
      0000A9 50 1F            [24] 1427 	jnc	00105$
                           0000AB  1428 	C$i2c.h$96$2$76 ==.
                                   1429 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1430 	mov	a,r7
      0000AC 24r00            [12] 1431 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1432 	mov	dpl,a
      0000B0 E4               [12] 1433 	clr	a
      0000B1 34s00            [12] 1434 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1435 	mov	dph,a
      0000B5 E0               [24] 1436 	movx	a,@dptr
      0000B6 FD               [12] 1437 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1438 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1439 	mov	a,r7
      0000BB 24r00            [12] 1440 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1441 	mov	dpl,a
      0000BF E4               [12] 1442 	clr	a
      0000C0 34s00            [12] 1443 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1444 	mov	dph,a
      0000C4 74 0D            [12] 1445 	mov	a,#0x0D
      0000C6 F0               [24] 1446 	movx	@dptr,a
      0000C7                       1447 00108$:
                           0000C7  1448 	C$i2c.h$94$1$73 ==.
                                   1449 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1450 	inc	r7
      0000C8 80 DC            [24] 1451 	sjmp	00107$
      0000CA                       1452 00105$:
                           0000CA  1453 	C$i2c.h$99$1$73 ==.
                                   1454 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1455 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1456 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1457 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1458 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1459 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1460 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1461 	lcall	_i2c_write_data
      0000DE                       1462 00109$:
      0000DE D0*00            [24] 1463 	pop	_bp
                           0000E0  1464 	C$i2c.h$100$1$73 ==.
                           0000E0  1465 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1466 	ret
                                   1467 ;------------------------------------------------------------
                                   1468 ;Allocation info for local variables in function 'lcd_clear'
                                   1469 ;------------------------------------------------------------
                                   1470 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1471 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1472 ;------------------------------------------------------------
                           0000E1  1473 	G$lcd_clear$0$0 ==.
                           0000E1  1474 	C$i2c.h$103$1$73 ==.
                                   1475 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1476 ;	-----------------------------------------
                                   1477 ;	 function lcd_clear
                                   1478 ;	-----------------------------------------
      0000E1                       1479 _lcd_clear:
                           0000E1  1480 	C$i2c.h$105$1$73 ==.
                                   1481 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1482 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1483 	C$i2c.h$107$1$77 ==.
                                   1484 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1485 00101$:
      0000E4 74 C0            [12] 1486 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1487 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1488 	jc	00103$
      0000EA 75*0Br00         [24] 1489 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1490 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1491 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1492 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1493 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1494 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1495 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1496 	sjmp	00101$
      000101                       1497 00103$:
                           000101  1498 	C$i2c.h$109$1$77 ==.
                                   1499 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1500 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1501 	C$i2c.h$110$1$77 ==.
                                   1502 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1503 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1504 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1505 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1506 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1507 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1508 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1509 	lcall	_i2c_write_data
                           000119  1510 	C$i2c.h$111$1$77 ==.
                           000119  1511 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1512 	ret
                                   1513 ;------------------------------------------------------------
                                   1514 ;Allocation info for local variables in function 'read_keypad'
                                   1515 ;------------------------------------------------------------
                                   1516 ;i                         Allocated to registers r7 
                                   1517 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1518 ;------------------------------------------------------------
                           00011A  1519 	G$read_keypad$0$0 ==.
                           00011A  1520 	C$i2c.h$114$1$77 ==.
                                   1521 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1522 ;	-----------------------------------------
                                   1523 ;	 function read_keypad
                                   1524 ;	-----------------------------------------
      00011A                       1525 _read_keypad:
                           00011A  1526 	C$i2c.h$118$1$78 ==.
                                   1527 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1528 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1529 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1530 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1531 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1532 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1533 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1534 	lcall	_i2c_read_data
                           00012F  1535 	C$i2c.h$119$1$78 ==.
                                   1536 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1537 	mov	a,#0xFF
      000131 B5*03 05         [24] 1538 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1539 	mov	dpl,#0x00
      000137 80 5F            [24] 1540 	sjmp	00116$
      000139                       1541 00102$:
                           000139  1542 	C$i2c.h$121$1$78 ==.
                                   1543 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1544 	mov	r7,#0x00
      00013B 8F 06            [24] 1545 	mov	ar6,r7
      00013D                       1546 00114$:
                           00013D  1547 	C$i2c.h$123$2$79 ==.
                                   1548 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1549 	mov	b,r6
      00013F 05 F0            [12] 1550 	inc	b
      000141 7C 01            [12] 1551 	mov	r4,#0x01
      000143 7D 00            [12] 1552 	mov	r5,#0x00
      000145 80 06            [24] 1553 	sjmp	00145$
      000147                       1554 00144$:
      000147 EC               [12] 1555 	mov	a,r4
      000148 2C               [12] 1556 	add	a,r4
      000149 FC               [12] 1557 	mov	r4,a
      00014A ED               [12] 1558 	mov	a,r5
      00014B 33               [12] 1559 	rlc	a
      00014C FD               [12] 1560 	mov	r5,a
      00014D                       1561 00145$:
      00014D D5 F0 F7         [24] 1562 	djnz	b,00144$
      000150 AA*03            [24] 1563 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1564 	mov	r3,#0x00
      000154 EA               [12] 1565 	mov	a,r2
      000155 52 04            [12] 1566 	anl	ar4,a
      000157 EB               [12] 1567 	mov	a,r3
      000158 52 05            [12] 1568 	anl	ar5,a
      00015A EC               [12] 1569 	mov	a,r4
      00015B 4D               [12] 1570 	orl	a,r5
      00015C 60 07            [24] 1571 	jz	00115$
                           00015E  1572 	C$i2c.h$124$2$79 ==.
                                   1573 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1574 	mov	a,#0x31
      000160 2F               [12] 1575 	add	a,r7
      000161 F5 82            [12] 1576 	mov	dpl,a
      000163 80 33            [24] 1577 	sjmp	00116$
      000165                       1578 00115$:
                           000165  1579 	C$i2c.h$121$1$78 ==.
                                   1580 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1581 	inc	r6
      000166 8E 07            [24] 1582 	mov	ar7,r6
      000168 BE 08 00         [24] 1583 	cjne	r6,#0x08,00147$
      00016B                       1584 00147$:
      00016B 40 D0            [24] 1585 	jc	00114$
                           00016D  1586 	C$i2c.h$127$1$78 ==.
                                   1587 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1588 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1589 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1590 	mov	dpl,#0x39
      000175 80 21            [24] 1591 	sjmp	00116$
      000177                       1592 00107$:
                           000177  1593 	C$i2c.h$129$1$78 ==.
                                   1594 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1595 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1596 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1597 	mov	dpl,#0x2A
      00017F 80 17            [24] 1598 	sjmp	00116$
      000181                       1599 00109$:
                           000181  1600 	C$i2c.h$131$1$78 ==.
                                   1601 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1602 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1603 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1604 	mov	dpl,#0x30
      000189 80 0D            [24] 1605 	sjmp	00116$
      00018B                       1606 00111$:
                           00018B  1607 	C$i2c.h$133$1$78 ==.
                                   1608 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1609 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1610 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1611 	mov	dpl,#0x23
      000193 80 03            [24] 1612 	sjmp	00116$
      000195                       1613 00113$:
                           000195  1614 	C$i2c.h$135$1$78 ==.
                                   1615 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1616 	mov	dpl,#0xFF
      000198                       1617 00116$:
                           000198  1618 	C$i2c.h$136$1$78 ==.
                           000198  1619 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1620 	ret
                                   1621 ;------------------------------------------------------------
                                   1622 ;Allocation info for local variables in function 'kpd_input'
                                   1623 ;------------------------------------------------------------
                                   1624 ;mode                      Allocated to registers r7 
                                   1625 ;sum                       Allocated to registers r5 r6 
                                   1626 ;key                       Allocated to registers r3 
                                   1627 ;i                         Allocated to registers 
                                   1628 ;------------------------------------------------------------
                           000199  1629 	G$kpd_input$0$0 ==.
                           000199  1630 	C$i2c.h$148$1$78 ==.
                                   1631 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1632 ;	-----------------------------------------
                                   1633 ;	 function kpd_input
                                   1634 ;	-----------------------------------------
      000199                       1635 _kpd_input:
      000199 AF 82            [24] 1636 	mov	r7,dpl
                           00019B  1637 	C$i2c.h$153$1$81 ==.
                                   1638 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1639 	C$i2c.h$156$1$81 ==.
                                   1640 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1641 	clr	a
      00019C FD               [12] 1642 	mov	r5,a
      00019D FE               [12] 1643 	mov	r6,a
      00019E EF               [12] 1644 	mov	a,r7
      00019F 70 1D            [24] 1645 	jnz	00102$
      0001A1 C0 06            [24] 1646 	push	ar6
      0001A3 C0 05            [24] 1647 	push	ar5
      0001A5 74r00            [12] 1648 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1649 	push	acc
      0001A9 74s00            [12] 1650 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1651 	push	acc
      0001AD 74 80            [12] 1652 	mov	a,#0x80
      0001AF C0 E0            [24] 1653 	push	acc
      0001B1 12r00r5C         [24] 1654 	lcall	_lcd_print
      0001B4 15 81            [12] 1655 	dec	sp
      0001B6 15 81            [12] 1656 	dec	sp
      0001B8 15 81            [12] 1657 	dec	sp
      0001BA D0 05            [24] 1658 	pop	ar5
      0001BC D0 06            [24] 1659 	pop	ar6
      0001BE                       1660 00102$:
                           0001BE  1661 	C$i2c.h$158$1$81 ==.
                                   1662 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1663 	push	ar6
      0001C0 C0 05            [24] 1664 	push	ar5
      0001C2 74 08            [12] 1665 	mov	a,#0x08
      0001C4 C0 E0            [24] 1666 	push	acc
      0001C6 E4               [12] 1667 	clr	a
      0001C7 C0 E0            [24] 1668 	push	acc
      0001C9 74 08            [12] 1669 	mov	a,#0x08
      0001CB C0 E0            [24] 1670 	push	acc
      0001CD E4               [12] 1671 	clr	a
      0001CE C0 E0            [24] 1672 	push	acc
      0001D0 74 08            [12] 1673 	mov	a,#0x08
      0001D2 C0 E0            [24] 1674 	push	acc
      0001D4 E4               [12] 1675 	clr	a
      0001D5 C0 E0            [24] 1676 	push	acc
      0001D7 74 08            [12] 1677 	mov	a,#0x08
      0001D9 C0 E0            [24] 1678 	push	acc
      0001DB E4               [12] 1679 	clr	a
      0001DC C0 E0            [24] 1680 	push	acc
      0001DE 74 08            [12] 1681 	mov	a,#0x08
      0001E0 C0 E0            [24] 1682 	push	acc
      0001E2 E4               [12] 1683 	clr	a
      0001E3 C0 E0            [24] 1684 	push	acc
      0001E5 74r16            [12] 1685 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1686 	push	acc
      0001E9 74s00            [12] 1687 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1688 	push	acc
      0001ED 74 80            [12] 1689 	mov	a,#0x80
      0001EF C0 E0            [24] 1690 	push	acc
      0001F1 12r00r5C         [24] 1691 	lcall	_lcd_print
      0001F4 E5 81            [12] 1692 	mov	a,sp
      0001F6 24 F3            [12] 1693 	add	a,#0xf3
      0001F8 F5 81            [12] 1694 	mov	sp,a
                           0001FA  1695 	C$i2c.h$160$1$81 ==.
                                   1696 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1697 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1698 	mov	b,#0x07
      000200 E4               [12] 1699 	clr	a
      000201 12r03r0D         [24] 1700 	lcall	_delay_time
      000204 D0 05            [24] 1701 	pop	ar5
      000206 D0 06            [24] 1702 	pop	ar6
                           000208  1703 	C$i2c.h$164$1$81 ==.
                                   1704 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1705 	mov	r7,#0x00
                           00020A  1706 	C$i2c.h$166$3$84 ==.
                                   1707 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1708 00104$:
      00020A C0 07            [24] 1709 	push	ar7
      00020C C0 06            [24] 1710 	push	ar6
      00020E C0 05            [24] 1711 	push	ar5
      000210 12r01r1A         [24] 1712 	lcall	_read_keypad
      000213 AC 82            [24] 1713 	mov	r4,dpl
      000215 D0 05            [24] 1714 	pop	ar5
      000217 D0 06            [24] 1715 	pop	ar6
      000219 D0 07            [24] 1716 	pop	ar7
      00021B 8C 03            [24] 1717 	mov	ar3,r4
      00021D BC FF 02         [24] 1718 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1719 	sjmp	00105$
      000222                       1720 00146$:
      000222 BB 2A 17         [24] 1721 	cjne	r3,#0x2A,00106$
      000225                       1722 00105$:
      000225 90 27 10         [24] 1723 	mov	dptr,#0x2710
      000228 E4               [12] 1724 	clr	a
      000229 F5 F0            [12] 1725 	mov	b,a
      00022B C0 07            [24] 1726 	push	ar7
      00022D C0 06            [24] 1727 	push	ar6
      00022F C0 05            [24] 1728 	push	ar5
      000231 12r03r0D         [24] 1729 	lcall	_delay_time
      000234 D0 05            [24] 1730 	pop	ar5
      000236 D0 06            [24] 1731 	pop	ar6
      000238 D0 07            [24] 1732 	pop	ar7
      00023A 80 CE            [24] 1733 	sjmp	00104$
      00023C                       1734 00106$:
                           00023C  1735 	C$i2c.h$167$2$82 ==.
                                   1736 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1737 	cjne	r3,#0x23,00114$
                           00023F  1738 	C$i2c.h$169$3$83 ==.
                                   1739 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1740 00107$:
      00023F C0 06            [24] 1741 	push	ar6
      000241 C0 05            [24] 1742 	push	ar5
      000243 12r01r1A         [24] 1743 	lcall	_read_keypad
      000246 AC 82            [24] 1744 	mov	r4,dpl
      000248 D0 05            [24] 1745 	pop	ar5
      00024A D0 06            [24] 1746 	pop	ar6
      00024C BC 23 13         [24] 1747 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1748 	mov	dptr,#0x2710
      000252 E4               [12] 1749 	clr	a
      000253 F5 F0            [12] 1750 	mov	b,a
      000255 C0 06            [24] 1751 	push	ar6
      000257 C0 05            [24] 1752 	push	ar5
      000259 12r03r0D         [24] 1753 	lcall	_delay_time
      00025C D0 05            [24] 1754 	pop	ar5
      00025E D0 06            [24] 1755 	pop	ar6
      000260 80 DD            [24] 1756 	sjmp	00107$
      000262                       1757 00109$:
                           000262  1758 	C$i2c.h$170$3$83 ==.
                                   1759 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1760 	mov	dpl,r5
      000264 8E 83            [24] 1761 	mov	dph,r6
      000266 02r03r0C         [24] 1762 	ljmp	00119$
      000269                       1763 00114$:
                           000269  1764 	C$i2c.h$174$3$84 ==.
                                   1765 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1766 	mov	a,r3
      00026A FA               [12] 1767 	mov	r2,a
      00026B 33               [12] 1768 	rlc	a
      00026C 95 E0            [12] 1769 	subb	a,acc
      00026E FC               [12] 1770 	mov	r4,a
      00026F C0 07            [24] 1771 	push	ar7
      000271 C0 06            [24] 1772 	push	ar6
      000273 C0 05            [24] 1773 	push	ar5
      000275 C0 04            [24] 1774 	push	ar4
      000277 C0 03            [24] 1775 	push	ar3
      000279 C0 02            [24] 1776 	push	ar2
      00027B C0 02            [24] 1777 	push	ar2
      00027D C0 04            [24] 1778 	push	ar4
      00027F 74r26            [12] 1779 	mov	a,#___str_2
      000281 C0 E0            [24] 1780 	push	acc
      000283 74s00            [12] 1781 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1782 	push	acc
      000287 74 80            [12] 1783 	mov	a,#0x80
      000289 C0 E0            [24] 1784 	push	acc
      00028B 12r00r5C         [24] 1785 	lcall	_lcd_print
      00028E E5 81            [12] 1786 	mov	a,sp
      000290 24 FB            [12] 1787 	add	a,#0xfb
      000292 F5 81            [12] 1788 	mov	sp,a
      000294 D0 02            [24] 1789 	pop	ar2
      000296 D0 03            [24] 1790 	pop	ar3
      000298 D0 04            [24] 1791 	pop	ar4
      00029A D0 05            [24] 1792 	pop	ar5
      00029C D0 06            [24] 1793 	pop	ar6
                           00029E  1794 	C$i2c.h$175$1$81 ==.
                                   1795 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1796 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1797 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1798 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1799 	push	ar4
      0002A7 C0 03            [24] 1800 	push	ar3
      0002A9 C0 02            [24] 1801 	push	ar2
      0002AB 12r00r00         [24] 1802 	lcall	__mulint
      0002AE A8 82            [24] 1803 	mov	r0,dpl
      0002B0 A9 83            [24] 1804 	mov	r1,dph
      0002B2 D0 02            [24] 1805 	pop	ar2
      0002B4 D0 03            [24] 1806 	pop	ar3
      0002B6 D0 04            [24] 1807 	pop	ar4
      0002B8 D0 07            [24] 1808 	pop	ar7
      0002BA EA               [12] 1809 	mov	a,r2
      0002BB 28               [12] 1810 	add	a,r0
      0002BC F8               [12] 1811 	mov	r0,a
      0002BD EC               [12] 1812 	mov	a,r4
      0002BE 39               [12] 1813 	addc	a,r1
      0002BF F9               [12] 1814 	mov	r1,a
      0002C0 E8               [12] 1815 	mov	a,r0
      0002C1 24 D0            [12] 1816 	add	a,#0xD0
      0002C3 FD               [12] 1817 	mov	r5,a
      0002C4 E9               [12] 1818 	mov	a,r1
      0002C5 34 FF            [12] 1819 	addc	a,#0xFF
      0002C7 FE               [12] 1820 	mov	r6,a
                           0002C8  1821 	C$i2c.h$176$3$84 ==.
                                   1822 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1823 00110$:
      0002C8 C0 07            [24] 1824 	push	ar7
      0002CA C0 06            [24] 1825 	push	ar6
      0002CC C0 05            [24] 1826 	push	ar5
      0002CE C0 03            [24] 1827 	push	ar3
      0002D0 12r01r1A         [24] 1828 	lcall	_read_keypad
      0002D3 AC 82            [24] 1829 	mov	r4,dpl
      0002D5 D0 03            [24] 1830 	pop	ar3
      0002D7 D0 05            [24] 1831 	pop	ar5
      0002D9 D0 06            [24] 1832 	pop	ar6
      0002DB D0 07            [24] 1833 	pop	ar7
      0002DD EC               [12] 1834 	mov	a,r4
      0002DE B5 03 1B         [24] 1835 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1836 	mov	dptr,#0x2710
      0002E4 E4               [12] 1837 	clr	a
      0002E5 F5 F0            [12] 1838 	mov	b,a
      0002E7 C0 07            [24] 1839 	push	ar7
      0002E9 C0 06            [24] 1840 	push	ar6
      0002EB C0 05            [24] 1841 	push	ar5
      0002ED C0 03            [24] 1842 	push	ar3
      0002EF 12r03r0D         [24] 1843 	lcall	_delay_time
      0002F2 D0 03            [24] 1844 	pop	ar3
      0002F4 D0 05            [24] 1845 	pop	ar5
      0002F6 D0 06            [24] 1846 	pop	ar6
      0002F8 D0 07            [24] 1847 	pop	ar7
      0002FA 80 CC            [24] 1848 	sjmp	00110$
      0002FC                       1849 00118$:
                           0002FC  1850 	C$i2c.h$164$1$81 ==.
                                   1851 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1852 	inc	r7
      0002FD C3               [12] 1853 	clr	c
      0002FE EF               [12] 1854 	mov	a,r7
      0002FF 64 80            [12] 1855 	xrl	a,#0x80
      000301 94 85            [12] 1856 	subb	a,#0x85
      000303 50 03            [24] 1857 	jnc	00155$
      000305 02r02r0A         [24] 1858 	ljmp	00104$
      000308                       1859 00155$:
                           000308  1860 	C$i2c.h$179$1$81 ==.
                                   1861 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1862 	mov	dpl,r5
      00030A 8E 83            [24] 1863 	mov	dph,r6
      00030C                       1864 00119$:
                           00030C  1865 	C$i2c.h$180$1$81 ==.
                           00030C  1866 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1867 	ret
                                   1868 ;------------------------------------------------------------
                                   1869 ;Allocation info for local variables in function 'delay_time'
                                   1870 ;------------------------------------------------------------
                                   1871 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1872 ;index                     Allocated to registers 
                                   1873 ;------------------------------------------------------------
                           00030D  1874 	G$delay_time$0$0 ==.
                           00030D  1875 	C$i2c.h$189$1$81 ==.
                                   1876 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1877 ;	-----------------------------------------
                                   1878 ;	 function delay_time
                                   1879 ;	-----------------------------------------
      00030D                       1880 _delay_time:
      00030D AC 82            [24] 1881 	mov	r4,dpl
      00030F AD 83            [24] 1882 	mov	r5,dph
      000311 AE F0            [24] 1883 	mov	r6,b
      000313 FF               [12] 1884 	mov	r7,a
                           000314  1885 	C$i2c.h$192$1$86 ==.
                                   1886 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1887 	mov	r0,#0x00
      000316 79 00            [12] 1888 	mov	r1,#0x00
      000318 7A 00            [12] 1889 	mov	r2,#0x00
      00031A 7B 00            [12] 1890 	mov	r3,#0x00
      00031C                       1891 00103$:
      00031C C3               [12] 1892 	clr	c
      00031D E8               [12] 1893 	mov	a,r0
      00031E 9C               [12] 1894 	subb	a,r4
      00031F E9               [12] 1895 	mov	a,r1
      000320 9D               [12] 1896 	subb	a,r5
      000321 EA               [12] 1897 	mov	a,r2
      000322 9E               [12] 1898 	subb	a,r6
      000323 EB               [12] 1899 	mov	a,r3
      000324 9F               [12] 1900 	subb	a,r7
      000325 50 0F            [24] 1901 	jnc	00105$
      000327 08               [12] 1902 	inc	r0
      000328 B8 00 09         [24] 1903 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1904 	inc	r1
      00032C B9 00 05         [24] 1905 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1906 	inc	r2
      000330 BA 00 E9         [24] 1907 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1908 	inc	r3
      000334                       1909 00115$:
      000334 80 E6            [24] 1910 	sjmp	00103$
      000336                       1911 00105$:
                           000336  1912 	C$i2c.h$193$1$86 ==.
                           000336  1913 	XG$delay_time$0$0 ==.
      000336 22               [24] 1914 	ret
                                   1915 ;------------------------------------------------------------
                                   1916 ;Allocation info for local variables in function 'i2c_start'
                                   1917 ;------------------------------------------------------------
                           000337  1918 	G$i2c_start$0$0 ==.
                           000337  1919 	C$i2c.h$196$1$86 ==.
                                   1920 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1921 ;	-----------------------------------------
                                   1922 ;	 function i2c_start
                                   1923 ;	-----------------------------------------
      000337                       1924 _i2c_start:
                           000337  1925 	C$i2c.h$198$1$88 ==.
                                   1926 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1927 00101$:
      000337 20 C7 FD         [24] 1928 	jb	_BUSY,00101$
                           00033A  1929 	C$i2c.h$199$1$88 ==.
                                   1930 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1931 	setb	_STA
                           00033C  1932 	C$i2c.h$200$1$88 ==.
                                   1933 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1934 00104$:
      00033C 30 C3 FD         [24] 1935 	jnb	_SI,00104$
                           00033F  1936 	C$i2c.h$201$1$88 ==.
                                   1937 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1938 	clr	_STA
                           000341  1939 	C$i2c.h$202$1$88 ==.
                                   1940 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1941 	clr	_SI
                           000343  1942 	C$i2c.h$203$1$88 ==.
                           000343  1943 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1944 	ret
                                   1945 ;------------------------------------------------------------
                                   1946 ;Allocation info for local variables in function 'i2c_write'
                                   1947 ;------------------------------------------------------------
                                   1948 ;output_data               Allocated to registers 
                                   1949 ;------------------------------------------------------------
                           000344  1950 	G$i2c_write$0$0 ==.
                           000344  1951 	C$i2c.h$206$1$88 ==.
                                   1952 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1953 ;	-----------------------------------------
                                   1954 ;	 function i2c_write
                                   1955 ;	-----------------------------------------
      000344                       1956 _i2c_write:
      000344 85 82 C2         [24] 1957 	mov	_SMB0DAT,dpl
                           000347  1958 	C$i2c.h$209$1$90 ==.
                                   1959 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1960 00101$:
                           000347  1961 	C$i2c.h$210$1$90 ==.
                                   1962 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1963 	jbc	_SI,00112$
      00034A 80 FB            [24] 1964 	sjmp	00101$
      00034C                       1965 00112$:
                           00034C  1966 	C$i2c.h$211$1$90 ==.
                           00034C  1967 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1968 	ret
                                   1969 ;------------------------------------------------------------
                                   1970 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1971 ;------------------------------------------------------------
                                   1972 ;output_data               Allocated to registers 
                                   1973 ;------------------------------------------------------------
                           00034D  1974 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1975 	C$i2c.h$214$1$90 ==.
                                   1976 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1977 ;	-----------------------------------------
                                   1978 ;	 function i2c_write_and_stop
                                   1979 ;	-----------------------------------------
      00034D                       1980 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1981 	mov	_SMB0DAT,dpl
                           000350  1982 	C$i2c.h$217$1$92 ==.
                                   1983 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1984 	setb	_STO
                           000352  1985 	C$i2c.h$218$1$92 ==.
                                   1986 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1987 00101$:
                           000352  1988 	C$i2c.h$219$1$92 ==.
                                   1989 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1990 	jbc	_SI,00112$
      000355 80 FB            [24] 1991 	sjmp	00101$
      000357                       1992 00112$:
                           000357  1993 	C$i2c.h$220$1$92 ==.
                           000357  1994 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1995 	ret
                                   1996 ;------------------------------------------------------------
                                   1997 ;Allocation info for local variables in function 'i2c_read'
                                   1998 ;------------------------------------------------------------
                                   1999 ;input_data                Allocated to registers 
                                   2000 ;------------------------------------------------------------
                           000358  2001 	G$i2c_read$0$0 ==.
                           000358  2002 	C$i2c.h$223$1$92 ==.
                                   2003 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2004 ;	-----------------------------------------
                                   2005 ;	 function i2c_read
                                   2006 ;	-----------------------------------------
      000358                       2007 _i2c_read:
                           000358  2008 	C$i2c.h$226$1$94 ==.
                                   2009 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2010 00101$:
      000358 30 C3 FD         [24] 2011 	jnb	_SI,00101$
                           00035B  2012 	C$i2c.h$227$1$94 ==.
                                   2013 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2014 	mov	dpl,_SMB0DAT
                           00035E  2015 	C$i2c.h$228$1$94 ==.
                                   2016 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2017 	clr	_SI
                           000360  2018 	C$i2c.h$229$1$94 ==.
                                   2019 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2020 	C$i2c.h$230$1$94 ==.
                           000360  2021 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2022 	ret
                                   2023 ;------------------------------------------------------------
                                   2024 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2025 ;------------------------------------------------------------
                                   2026 ;input_data                Allocated to registers r7 
                                   2027 ;------------------------------------------------------------
                           000361  2028 	G$i2c_read_and_stop$0$0 ==.
                           000361  2029 	C$i2c.h$233$1$94 ==.
                                   2030 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2031 ;	-----------------------------------------
                                   2032 ;	 function i2c_read_and_stop
                                   2033 ;	-----------------------------------------
      000361                       2034 _i2c_read_and_stop:
                           000361  2035 	C$i2c.h$236$1$96 ==.
                                   2036 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2037 00101$:
      000361 30 C3 FD         [24] 2038 	jnb	_SI,00101$
                           000364  2039 	C$i2c.h$237$1$96 ==.
                                   2040 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2041 	mov	r7,_SMB0DAT
                           000366  2042 	C$i2c.h$238$1$96 ==.
                                   2043 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2044 	clr	_SI
                           000368  2045 	C$i2c.h$239$1$96 ==.
                                   2046 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2047 	setb	_STO
                           00036A  2048 	C$i2c.h$240$1$96 ==.
                                   2049 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2050 00104$:
                           00036A  2051 	C$i2c.h$241$1$96 ==.
                                   2052 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2053 	jbc	_SI,00122$
      00036D 80 FB            [24] 2054 	sjmp	00104$
      00036F                       2055 00122$:
                           00036F  2056 	C$i2c.h$242$1$96 ==.
                                   2057 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2058 	mov	dpl,r7
                           000371  2059 	C$i2c.h$243$1$96 ==.
                           000371  2060 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2061 	ret
                                   2062 ;------------------------------------------------------------
                                   2063 ;Allocation info for local variables in function 'i2c_write_data'
                                   2064 ;------------------------------------------------------------
                                   2065 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2066 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2067 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2068 ;addr                      Allocated to registers r7 
                                   2069 ;i                         Allocated to registers 
                                   2070 ;------------------------------------------------------------
                           000372  2071 	G$i2c_write_data$0$0 ==.
                           000372  2072 	C$i2c.h$246$1$96 ==.
                                   2073 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2074 ;	-----------------------------------------
                                   2075 ;	 function i2c_write_data
                                   2076 ;	-----------------------------------------
      000372                       2077 _i2c_write_data:
      000372 AF 82            [24] 2078 	mov	r7,dpl
                           000374  2079 	C$i2c.h$250$1$98 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2081 	push	ar7
      000376 12r03r37         [24] 2082 	lcall	_i2c_start
      000379 D0 07            [24] 2083 	pop	ar7
                           00037B  2084 	C$i2c.h$251$1$98 ==.
                                   2085 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2086 	mov	a,#0xFE
      00037D 5F               [12] 2087 	anl	a,r7
      00037E F5 82            [12] 2088 	mov	dpl,a
      000380 12r03r44         [24] 2089 	lcall	_i2c_write
                           000383  2090 	C$i2c.h$252$1$98 ==.
                                   2091 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2092 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2093 	lcall	_i2c_write
                           000389  2094 	C$i2c.h$253$1$98 ==.
                                   2095 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2096 	mov	r7,#0x00
      00038B                       2097 00103$:
      00038B AD*09            [24] 2098 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2099 	mov	r6,#0x00
      00038F 1D               [12] 2100 	dec	r5
      000390 BD FF 01         [24] 2101 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2102 	dec	r6
      000394                       2103 00114$:
      000394 8F 03            [24] 2104 	mov	ar3,r7
      000396 7C 00            [12] 2105 	mov	r4,#0x00
      000398 C3               [12] 2106 	clr	c
      000399 EB               [12] 2107 	mov	a,r3
      00039A 9D               [12] 2108 	subb	a,r5
      00039B EC               [12] 2109 	mov	a,r4
      00039C 64 80            [12] 2110 	xrl	a,#0x80
      00039E 8E F0            [24] 2111 	mov	b,r6
      0003A0 63 F0 80         [24] 2112 	xrl	b,#0x80
      0003A3 95 F0            [12] 2113 	subb	a,b
      0003A5 50 1F            [24] 2114 	jnc	00101$
                           0003A7  2115 	C$i2c.h$254$1$98 ==.
                                   2116 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2117 	mov	a,r7
      0003A8 25*06            [12] 2118 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2119 	mov	r4,a
      0003AB E4               [12] 2120 	clr	a
      0003AC 35*07            [12] 2121 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2122 	mov	r5,a
      0003AF AE*08            [24] 2123 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2124 	mov	dpl,r4
      0003B3 8D 83            [24] 2125 	mov	dph,r5
      0003B5 8E F0            [24] 2126 	mov	b,r6
      0003B7 12r00r00         [24] 2127 	lcall	__gptrget
      0003BA F5 82            [12] 2128 	mov	dpl,a
      0003BC C0 07            [24] 2129 	push	ar7
      0003BE 12r03r44         [24] 2130 	lcall	_i2c_write
      0003C1 D0 07            [24] 2131 	pop	ar7
                           0003C3  2132 	C$i2c.h$253$1$98 ==.
                                   2133 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2134 	inc	r7
      0003C4 80 C5            [24] 2135 	sjmp	00103$
      0003C6                       2136 00101$:
                           0003C6  2137 	C$i2c.h$255$1$98 ==.
                                   2138 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2139 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2140 	mov	r7,#0x00
      0003CA 1E               [12] 2141 	dec	r6
      0003CB BE FF 01         [24] 2142 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2143 	dec	r7
      0003CF                       2144 00116$:
      0003CF EE               [12] 2145 	mov	a,r6
      0003D0 25*06            [12] 2146 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2147 	mov	r6,a
      0003D3 EF               [12] 2148 	mov	a,r7
      0003D4 35*07            [12] 2149 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2150 	mov	r7,a
      0003D7 AD*08            [24] 2151 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2152 	mov	dpl,r6
      0003DB 8F 83            [24] 2153 	mov	dph,r7
      0003DD 8D F0            [24] 2154 	mov	b,r5
      0003DF 12r00r00         [24] 2155 	lcall	__gptrget
      0003E2 F5 82            [12] 2156 	mov	dpl,a
      0003E4 12r03r4D         [24] 2157 	lcall	_i2c_write_and_stop
                           0003E7  2158 	C$i2c.h$256$1$98 ==.
                           0003E7  2159 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2160 	ret
                                   2161 ;------------------------------------------------------------
                                   2162 ;Allocation info for local variables in function 'i2c_read_data'
                                   2163 ;------------------------------------------------------------
                                   2164 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2165 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2166 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2167 ;addr                      Allocated to registers r7 
                                   2168 ;j                         Allocated to registers 
                                   2169 ;------------------------------------------------------------
                           0003E8  2170 	G$i2c_read_data$0$0 ==.
                           0003E8  2171 	C$i2c.h$259$1$98 ==.
                                   2172 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2173 ;	-----------------------------------------
                                   2174 ;	 function i2c_read_data
                                   2175 ;	-----------------------------------------
      0003E8                       2176 _i2c_read_data:
      0003E8 AF 82            [24] 2177 	mov	r7,dpl
                           0003EA  2178 	C$i2c.h$262$1$100 ==.
                                   2179 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2180 	push	ar7
      0003EC 12r03r37         [24] 2181 	lcall	_i2c_start
      0003EF D0 07            [24] 2182 	pop	ar7
                           0003F1  2183 	C$i2c.h$263$1$100 ==.
                                   2184 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2185 	mov	ar6,r7
      0003F3 74 FE            [12] 2186 	mov	a,#0xFE
      0003F5 5E               [12] 2187 	anl	a,r6
      0003F6 F5 82            [12] 2188 	mov	dpl,a
      0003F8 C0 07            [24] 2189 	push	ar7
      0003FA 12r03r44         [24] 2190 	lcall	_i2c_write
                           0003FD  2191 	C$i2c.h$264$1$100 ==.
                                   2192 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2193 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2194 	lcall	_i2c_write_and_stop
                           000403  2195 	C$i2c.h$265$1$100 ==.
                                   2196 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2197 	lcall	_i2c_start
      000406 D0 07            [24] 2198 	pop	ar7
                           000408  2199 	C$i2c.h$266$1$100 ==.
                                   2200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2201 	mov	a,#0x01
      00040A 4F               [12] 2202 	orl	a,r7
      00040B F5 82            [12] 2203 	mov	dpl,a
      00040D 12r03r44         [24] 2204 	lcall	_i2c_write
                           000410  2205 	C$i2c.h$267$1$100 ==.
                                   2206 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2207 	mov	r7,#0x00
      000412                       2208 00103$:
      000412 AD*0E            [24] 2209 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2210 	mov	r6,#0x00
      000416 1D               [12] 2211 	dec	r5
      000417 BD FF 01         [24] 2212 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2213 	dec	r6
      00041B                       2214 00114$:
      00041B 8F 03            [24] 2215 	mov	ar3,r7
      00041D 7C 00            [12] 2216 	mov	r4,#0x00
      00041F C3               [12] 2217 	clr	c
      000420 EB               [12] 2218 	mov	a,r3
      000421 9D               [12] 2219 	subb	a,r5
      000422 EC               [12] 2220 	mov	a,r4
      000423 64 80            [12] 2221 	xrl	a,#0x80
      000425 8E F0            [24] 2222 	mov	b,r6
      000427 63 F0 80         [24] 2223 	xrl	b,#0x80
      00042A 95 F0            [12] 2224 	subb	a,b
      00042C 50 2E            [24] 2225 	jnc	00101$
                           00042E  2226 	C$i2c.h$269$2$101 ==.
                                   2227 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2228 	setb	_AA
                           000430  2229 	C$i2c.h$270$2$101 ==.
                                   2230 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2231 	mov	a,r7
      000431 25*0B            [12] 2232 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2233 	mov	r4,a
      000434 E4               [12] 2234 	clr	a
      000435 35*0C            [12] 2235 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2236 	mov	r5,a
      000438 AE*0D            [24] 2237 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2238 	push	ar7
      00043C C0 06            [24] 2239 	push	ar6
      00043E C0 05            [24] 2240 	push	ar5
      000440 C0 04            [24] 2241 	push	ar4
      000442 12r03r58         [24] 2242 	lcall	_i2c_read
      000445 AB 82            [24] 2243 	mov	r3,dpl
      000447 D0 04            [24] 2244 	pop	ar4
      000449 D0 05            [24] 2245 	pop	ar5
      00044B D0 06            [24] 2246 	pop	ar6
      00044D D0 07            [24] 2247 	pop	ar7
      00044F 8C 82            [24] 2248 	mov	dpl,r4
      000451 8D 83            [24] 2249 	mov	dph,r5
      000453 8E F0            [24] 2250 	mov	b,r6
      000455 EB               [12] 2251 	mov	a,r3
      000456 12r00r00         [24] 2252 	lcall	__gptrput
                           000459  2253 	C$i2c.h$267$1$100 ==.
                                   2254 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2255 	inc	r7
      00045A 80 B6            [24] 2256 	sjmp	00103$
      00045C                       2257 00101$:
                           00045C  2258 	C$i2c.h$272$1$100 ==.
                                   2259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2260 	clr	_AA
                           00045E  2261 	C$i2c.h$273$1$100 ==.
                                   2262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2263 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2264 	mov	r7,#0x00
      000462 1E               [12] 2265 	dec	r6
      000463 BE FF 01         [24] 2266 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2267 	dec	r7
      000467                       2268 00116$:
      000467 EE               [12] 2269 	mov	a,r6
      000468 25*0B            [12] 2270 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2271 	mov	r6,a
      00046B EF               [12] 2272 	mov	a,r7
      00046C 35*0C            [12] 2273 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2274 	mov	r7,a
      00046F AD*0D            [24] 2275 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2276 	push	ar7
      000473 C0 06            [24] 2277 	push	ar6
      000475 C0 05            [24] 2278 	push	ar5
      000477 12r03r61         [24] 2279 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2280 	mov	r4,dpl
      00047C D0 05            [24] 2281 	pop	ar5
      00047E D0 06            [24] 2282 	pop	ar6
      000480 D0 07            [24] 2283 	pop	ar7
      000482 8E 82            [24] 2284 	mov	dpl,r6
      000484 8F 83            [24] 2285 	mov	dph,r7
      000486 8D F0            [24] 2286 	mov	b,r5
      000488 EC               [12] 2287 	mov	a,r4
      000489 12r00r00         [24] 2288 	lcall	__gptrput
                           00048C  2289 	C$i2c.h$274$1$100 ==.
                           00048C  2290 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2291 	ret
                                   2292 ;------------------------------------------------------------
                                   2293 ;Allocation info for local variables in function 'Accel_Init'
                                   2294 ;------------------------------------------------------------
                                   2295 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2296 ;------------------------------------------------------------
                           00048D  2297 	G$Accel_Init$0$0 ==.
                           00048D  2298 	C$i2c.h$283$1$100 ==.
                                   2299 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2300 ;	-----------------------------------------
                                   2301 ;	 function Accel_Init
                                   2302 ;	-----------------------------------------
      00048D                       2303 _Accel_Init:
                           00048D  2304 	C$i2c.h$287$1$103 ==.
                                   2305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2306 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2307 	C$i2c.h$289$1$103 ==.
                                   2308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2309 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2310 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2311 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2312 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2313 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2314 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2315 	lcall	_i2c_write_data
                           0004A5  2316 	C$i2c.h$290$1$103 ==.
                                   2317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2318 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2319 	C$i2c.h$292$1$103 ==.
                                   2320 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2321 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2322 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2323 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2324 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2325 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2326 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2327 	lcall	_i2c_write_data
                           0004BD  2328 	C$i2c.h$293$1$103 ==.
                                   2329 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2330 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2331 	C$i2c.h$294$1$103 ==.
                                   2332 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2333 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2334 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2335 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2336 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2337 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2338 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2339 	lcall	_i2c_write_data
                           0004D5  2340 	C$i2c.h$298$1$103 ==.
                           0004D5  2341 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2342 	ret
                                   2343 ;------------------------------------------------------------
                                   2344 ;Allocation info for local variables in function 'main'
                                   2345 ;------------------------------------------------------------
                           0004D6  2346 	G$main$0$0 ==.
                           0004D6  2347 	C$Squiggles.c$65$1$103 ==.
                                   2348 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:65: void main(void)
                                   2349 ;	-----------------------------------------
                                   2350 ;	 function main
                                   2351 ;	-----------------------------------------
      0004D6                       2352 _main:
                           0004D6  2353 	C$Squiggles.c$67$1$121 ==.
                                   2354 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:67: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2355 	lcall	_Sys_Init
                           0004D9  2356 	C$Squiggles.c$68$1$121 ==.
                                   2357 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:68: Port_Init();    
      0004D9 12r06r8E         [24] 2358 	lcall	_Port_Init
                           0004DC  2359 	C$Squiggles.c$69$1$121 ==.
                                   2360 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:69: Interrupt_Init();   
      0004DC 12r06rAC         [24] 2361 	lcall	_Interrupt_Init
                           0004DF  2362 	C$Squiggles.c$70$1$121 ==.
                                   2363 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:70: PCA_Init();
      0004DF 12r06rB5         [24] 2364 	lcall	_PCA_Init
                           0004E2  2365 	C$Squiggles.c$71$1$121 ==.
                                   2366 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:71: ADC_Init();
      0004E2 12r07r18         [24] 2367 	lcall	_ADC_Init
                           0004E5  2368 	C$Squiggles.c$72$1$121 ==.
                                   2369 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:72: SMB0_Init();
      0004E5 12r06rC2         [24] 2370 	lcall	_SMB0_Init
                           0004E8  2371 	C$Squiggles.c$73$1$121 ==.
                                   2372 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:73: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2373 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2374 	lcall	_putchar
                           0004EE  2375 	C$Squiggles.c$74$1$121 ==.
                                   2376 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:74: printf("\nStart\r\n");
      0004EE 74r29            [12] 2377 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2378 	push	acc
      0004F2 74s00            [12] 2379 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2380 	push	acc
      0004F6 74 80            [12] 2381 	mov	a,#0x80
      0004F8 C0 E0            [24] 2382 	push	acc
      0004FA 12r00r00         [24] 2383 	lcall	_printf
      0004FD 15 81            [12] 2384 	dec	sp
      0004FF 15 81            [12] 2385 	dec	sp
      000501 15 81            [12] 2386 	dec	sp
                           000503  2387 	C$Squiggles.c$75$1$121 ==.
                                   2388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:75: PCA0CP0 = 0xFFFF - COMPASS_CENTER;
      000503 75 EA 37         [24] 2389 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000506 75 FA F5         [24] 2390 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2391 	C$Squiggles.c$76$1$121 ==.
                                   2392 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:76: PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Car isn't moving to start
      000509 75 EC 37         [24] 2393 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00050C 75 FC F5         [24] 2394 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           00050F  2395 	C$Squiggles.c$78$1$121 ==.
                                   2396 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:78: Counts = 0;
      00050F E4               [12] 2397 	clr	a
      000510 F5*10            [12] 2398 	mov	_Counts,a
      000512 F5*11            [12] 2399 	mov	(_Counts + 1),a
                           000514  2400 	C$Squiggles.c$79$1$121 ==.
                                   2401 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:79: while (Counts < 1); //{ printf("\r%u\n", nCounts); } // Wait a long time (1s) for keypad & LCD to initialize
      000514                       2402 00101$:
      000514 C3               [12] 2403 	clr	c
      000515 E5*10            [12] 2404 	mov	a,_Counts
      000517 94 01            [12] 2405 	subb	a,#0x01
      000519 E5*11            [12] 2406 	mov	a,(_Counts + 1)
      00051B 94 00            [12] 2407 	subb	a,#0x00
      00051D 40 F5            [24] 2408 	jc	00101$
                           00051F  2409 	C$Squiggles.c$81$1$121 ==.
                                   2410 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:81: printf("\n\rPlease input data on the LCD.\n");
      00051F 74r32            [12] 2411 	mov	a,#___str_4
      000521 C0 E0            [24] 2412 	push	acc
      000523 74s00            [12] 2413 	mov	a,#(___str_4 >> 8)
      000525 C0 E0            [24] 2414 	push	acc
      000527 74 80            [12] 2415 	mov	a,#0x80
      000529 C0 E0            [24] 2416 	push	acc
      00052B 12r00r00         [24] 2417 	lcall	_printf
      00052E 15 81            [12] 2418 	dec	sp
      000530 15 81            [12] 2419 	dec	sp
      000532 15 81            [12] 2420 	dec	sp
                           000534  2421 	C$Squiggles.c$82$1$121 ==.
                                   2422 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:82: Pick_Heading();
      000534 12r07r38         [24] 2423 	lcall	_Pick_Heading
                           000537  2424 	C$Squiggles.c$84$1$121 ==.
                                   2425 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:84: printf("\n\r------------DATA COLLECTION------------\n");
      000537 74r53            [12] 2426 	mov	a,#___str_5
      000539 C0 E0            [24] 2427 	push	acc
      00053B 74s00            [12] 2428 	mov	a,#(___str_5 >> 8)
      00053D C0 E0            [24] 2429 	push	acc
      00053F 74 80            [12] 2430 	mov	a,#0x80
      000541 C0 E0            [24] 2431 	push	acc
      000543 12r00r00         [24] 2432 	lcall	_printf
      000546 15 81            [12] 2433 	dec	sp
      000548 15 81            [12] 2434 	dec	sp
      00054A 15 81            [12] 2435 	dec	sp
                           00054C  2436 	C$Squiggles.c$87$2$122 ==.
                                   2437 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:87: while(!RANGER_SWITCH && !COMPASS_SWITCH)
      00054C                       2438 00117$:
      00054C 30 B6 03         [24] 2439 	jnb	_RANGER_SWITCH,00162$
      00054F 02r06r14         [24] 2440 	ljmp	00119$
      000552                       2441 00162$:
      000552 30 B7 03         [24] 2442 	jnb	_COMPASS_SWITCH,00163$
      000555 02r06r14         [24] 2443 	ljmp	00119$
      000558                       2444 00163$:
                           000558  2445 	C$Squiggles.c$89$3$123 ==.
                                   2446 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:89: if ((new_range)) // enough overflow for a new range
      000558 E5*20            [12] 2447 	mov	a,_new_range
      00055A 60 38            [24] 2448 	jz	00111$
                           00055C  2449 	C$Squiggles.c$91$4$124 ==.
                                   2450 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:91: new_range = 0;	//clear and wait for next ping
      00055C 75*20 00         [24] 2451 	mov	_new_range,#0x00
                           00055F  2452 	C$Squiggles.c$92$4$124 ==.
                                   2453 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:92: range = read_ranger();	// Read the distance
      00055F 12r07rF3         [24] 2454 	lcall	_read_ranger
      000562 85 82*23         [24] 2455 	mov	_range,dpl
      000565 85 83*24         [24] 2456 	mov	(_range + 1),dph
                           000568  2457 	C$Squiggles.c$94$4$124 ==.
                                   2458 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:94: if (range != 0xFFFF) //Ignores dummy values from the ranger
      000568 74 FF            [12] 2459 	mov	a,#0xFF
      00056A B5*23 07         [24] 2460 	cjne	a,_range,00165$
      00056D 74 FF            [12] 2461 	mov	a,#0xFF
      00056F B5*24 02         [24] 2462 	cjne	a,(_range + 1),00165$
      000572 80 1B            [24] 2463 	sjmp	00108$
      000574                       2464 00165$:
                           000574  2465 	C$Squiggles.c$96$5$125 ==.
                                   2466 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:96: if(range < 15) PCA0CP2 = 0xFFFF - COMPASS_CENTER; //Stop if near an object
      000574 C3               [12] 2467 	clr	c
      000575 E5*23            [12] 2468 	mov	a,_range
      000577 94 0F            [12] 2469 	subb	a,#0x0F
      000579 E5*24            [12] 2470 	mov	a,(_range + 1)
      00057B 94 00            [12] 2471 	subb	a,#0x00
      00057D 50 08            [24] 2472 	jnc	00105$
      00057F 75 EC 37         [24] 2473 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000582 75 FC F5         [24] 2474 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
      000585 80 0D            [24] 2475 	sjmp	00111$
      000587                       2476 00105$:
                           000587  2477 	C$Squiggles.c$97$5$125 ==.
                                   2478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:97: else PCA0CP2 = 0xFFFF - 3000; //Car moves at a constant speed otherwise
      000587 75 EC 47         [24] 2479 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x47
      00058A 75 FC F4         [24] 2480 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF4
      00058D 80 05            [24] 2481 	sjmp	00111$
      00058F                       2482 00108$:
                           00058F  2483 	C$Squiggles.c$103$5$126 ==.
                                   2484 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:103: range_adj = 0;
      00058F E4               [12] 2485 	clr	a
      000590 F5*27            [12] 2486 	mov	_range_adj,a
      000592 F5*28            [12] 2487 	mov	(_range_adj + 1),a
      000594                       2488 00111$:
                           000594  2489 	C$Squiggles.c$110$3$123 ==.
                                   2490 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:110: if((new_heading))	// enough overflow for a new heading
      000594 E5*1F            [12] 2491 	mov	a,_new_heading
      000596 60 0F            [24] 2492 	jz	00113$
                           000598  2493 	C$Squiggles.c$112$4$127 ==.
                                   2494 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:112: new_heading = 0;
      000598 75*1F 00         [24] 2495 	mov	_new_heading,#0x00
                           00059B  2496 	C$Squiggles.c$113$4$127 ==.
                                   2497 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:113: heading = read_compass();	
      00059B 12r07rCD         [24] 2498 	lcall	_read_compass
      00059E 85 82*21         [24] 2499 	mov	_heading,dpl
      0005A1 85 83*22         [24] 2500 	mov	(_heading + 1),dph
                           0005A4  2501 	C$Squiggles.c$115$4$127 ==.
                                   2502 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:115: set_COMPASS_PW(); // Adjust pulsewidth based on error function
      0005A4 12r08rBE         [24] 2503 	lcall	_set_COMPASS_PW
      0005A7                       2504 00113$:
                           0005A7  2505 	C$Squiggles.c$117$3$123 ==.
                                   2506 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:117: if(print_delay == 20)
      0005A7 74 14            [12] 2507 	mov	a,#0x14
      0005A9 B5*30 A0         [24] 2508 	cjne	a,_print_delay,00117$
                           0005AC  2509 	C$Squiggles.c$119$4$128 ==.
                                   2510 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:119: printf("\rRange: %u\n", range);
      0005AC C0*23            [24] 2511 	push	_range
      0005AE C0*24            [24] 2512 	push	(_range + 1)
      0005B0 74r7E            [12] 2513 	mov	a,#___str_6
      0005B2 C0 E0            [24] 2514 	push	acc
      0005B4 74s00            [12] 2515 	mov	a,#(___str_6 >> 8)
      0005B6 C0 E0            [24] 2516 	push	acc
      0005B8 74 80            [12] 2517 	mov	a,#0x80
      0005BA C0 E0            [24] 2518 	push	acc
      0005BC 12r00r00         [24] 2519 	lcall	_printf
      0005BF E5 81            [12] 2520 	mov	a,sp
      0005C1 24 FB            [12] 2521 	add	a,#0xfb
      0005C3 F5 81            [12] 2522 	mov	sp,a
                           0005C5  2523 	C$Squiggles.c$120$1$121 ==.
                                   2524 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:120: printf("\rHeading: %u\n", heading/10);
      0005C5 75*00 0A         [24] 2525 	mov	__divuint_PARM_2,#0x0A
      0005C8 75*01 00         [24] 2526 	mov	(__divuint_PARM_2 + 1),#0x00
      0005CB 85*21 82         [24] 2527 	mov	dpl,_heading
      0005CE 85*22 83         [24] 2528 	mov	dph,(_heading + 1)
      0005D1 12r00r00         [24] 2529 	lcall	__divuint
      0005D4 AE 82            [24] 2530 	mov	r6,dpl
      0005D6 AF 83            [24] 2531 	mov	r7,dph
      0005D8 C0 06            [24] 2532 	push	ar6
      0005DA C0 07            [24] 2533 	push	ar7
      0005DC 74r8A            [12] 2534 	mov	a,#___str_7
      0005DE C0 E0            [24] 2535 	push	acc
      0005E0 74s00            [12] 2536 	mov	a,#(___str_7 >> 8)
      0005E2 C0 E0            [24] 2537 	push	acc
      0005E4 74 80            [12] 2538 	mov	a,#0x80
      0005E6 C0 E0            [24] 2539 	push	acc
      0005E8 12r00r00         [24] 2540 	lcall	_printf
      0005EB E5 81            [12] 2541 	mov	a,sp
      0005ED 24 FB            [12] 2542 	add	a,#0xfb
      0005EF F5 81            [12] 2543 	mov	sp,a
                           0005F1  2544 	C$Squiggles.c$121$4$128 ==.
                                   2545 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:121: printf("\rVoltage is %u\n", voltage);
      0005F1 AE*2D            [24] 2546 	mov	r6,_voltage
      0005F3 7F 00            [12] 2547 	mov	r7,#0x00
      0005F5 C0 06            [24] 2548 	push	ar6
      0005F7 C0 07            [24] 2549 	push	ar7
      0005F9 74r98            [12] 2550 	mov	a,#___str_8
      0005FB C0 E0            [24] 2551 	push	acc
      0005FD 74s00            [12] 2552 	mov	a,#(___str_8 >> 8)
      0005FF C0 E0            [24] 2553 	push	acc
      000601 74 80            [12] 2554 	mov	a,#0x80
      000603 C0 E0            [24] 2555 	push	acc
      000605 12r00r00         [24] 2556 	lcall	_printf
      000608 E5 81            [12] 2557 	mov	a,sp
      00060A 24 FB            [12] 2558 	add	a,#0xfb
      00060C F5 81            [12] 2559 	mov	sp,a
                           00060E  2560 	C$Squiggles.c$122$4$128 ==.
                                   2561 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:122: print_delay = 0;
      00060E 75*30 00         [24] 2562 	mov	_print_delay,#0x00
      000611 02r05r4C         [24] 2563 	ljmp	00117$
      000614                       2564 00119$:
                           000614  2565 	C$Squiggles.c$130$2$122 ==.
                                   2566 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:130: if(RANGER_SWITCH || COMPASS_SWITCH)
      000614 20 B6 06         [24] 2567 	jb	_RANGER_SWITCH,00120$
      000617 20 B7 03         [24] 2568 	jb	_COMPASS_SWITCH,00171$
      00061A 02r05r4C         [24] 2569 	ljmp	00117$
      00061D                       2570 00171$:
      00061D                       2571 00120$:
                           00061D  2572 	C$Squiggles.c$132$3$129 ==.
                                   2573 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:132: PCA0CP0 = 0xFFFF - 2760;
      00061D 75 EA 37         [24] 2574 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000620 75 FA F5         [24] 2575 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000623  2576 	C$Squiggles.c$133$3$129 ==.
                                   2577 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:133: PCA0CP2 = 0xFFFF - 2760;
      000623 75 EC 37         [24] 2578 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000626 75 FC F5         [24] 2579 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000629  2580 	C$Squiggles.c$134$3$129 ==.
                                   2581 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:134: printf("\rWould you like to edit the compass_gain?\n");
      000629 74rA8            [12] 2582 	mov	a,#___str_9
      00062B C0 E0            [24] 2583 	push	acc
      00062D 74s00            [12] 2584 	mov	a,#(___str_9 >> 8)
      00062F C0 E0            [24] 2585 	push	acc
      000631 74 80            [12] 2586 	mov	a,#0x80
      000633 C0 E0            [24] 2587 	push	acc
      000635 12r00r00         [24] 2588 	lcall	_printf
      000638 15 81            [12] 2589 	dec	sp
      00063A 15 81            [12] 2590 	dec	sp
      00063C 15 81            [12] 2591 	dec	sp
                           00063E  2592 	C$Squiggles.c$135$3$129 ==.
                                   2593 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:135: printf("\r'c' - no, 'i' - increment by 1, 'd' - decrement by 1, 'u' - update and return\n");
      00063E 74rD3            [12] 2594 	mov	a,#___str_10
      000640 C0 E0            [24] 2595 	push	acc
      000642 74s00            [12] 2596 	mov	a,#(___str_10 >> 8)
      000644 C0 E0            [24] 2597 	push	acc
      000646 74 80            [12] 2598 	mov	a,#0x80
      000648 C0 E0            [24] 2599 	push	acc
      00064A 12r00r00         [24] 2600 	lcall	_printf
      00064D 15 81            [12] 2601 	dec	sp
      00064F 15 81            [12] 2602 	dec	sp
      000651 15 81            [12] 2603 	dec	sp
                           000653  2604 	C$Squiggles.c$136$1$121 ==.
                                   2605 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:136: compass_gain = (Update_Value(compass_gain, 10, 100, 2)/10);		// gain is between 0.2 and 10
      000653 85*18 82         [24] 2606 	mov	dpl,_compass_gain
      000656 85*19 83         [24] 2607 	mov	dph,(_compass_gain + 1)
      000659 85*1A F0         [24] 2608 	mov	b,(_compass_gain + 2)
      00065C E5*1B            [12] 2609 	mov	a,(_compass_gain + 3)
      00065E 12r00r00         [24] 2610 	lcall	___fs2sint
      000661 75*33 0A         [24] 2611 	mov	_Update_Value_PARM_2,#0x0A
      000664 75*34 64         [24] 2612 	mov	_Update_Value_PARM_3,#0x64
      000667 75*35 00         [24] 2613 	mov	(_Update_Value_PARM_3 + 1),#0x00
      00066A 75*36 02         [24] 2614 	mov	_Update_Value_PARM_4,#0x02
      00066D 75*37 00         [24] 2615 	mov	(_Update_Value_PARM_4 + 1),#0x00
      000670 12r08r3B         [24] 2616 	lcall	_Update_Value
      000673 75*00 0A         [24] 2617 	mov	__divsint_PARM_2,#0x0A
      000676 75*01 00         [24] 2618 	mov	(__divsint_PARM_2 + 1),#0x00
      000679 12r00r00         [24] 2619 	lcall	__divsint
      00067C 12r00r00         [24] 2620 	lcall	___sint2fs
      00067F 85 82*18         [24] 2621 	mov	_compass_gain,dpl
      000682 85 83*19         [24] 2622 	mov	(_compass_gain + 1),dph
      000685 85 F0*1A         [24] 2623 	mov	(_compass_gain + 2),b
      000688 F5*1B            [12] 2624 	mov	(_compass_gain + 3),a
      00068A 02r05r4C         [24] 2625 	ljmp	00117$
                           00068D  2626 	C$Squiggles.c$139$1$121 ==.
                           00068D  2627 	XG$main$0$0 ==.
      00068D 22               [24] 2628 	ret
                                   2629 ;------------------------------------------------------------
                                   2630 ;Allocation info for local variables in function 'Port_Init'
                                   2631 ;------------------------------------------------------------
                           00068E  2632 	G$Port_Init$0$0 ==.
                           00068E  2633 	C$Squiggles.c$143$1$121 ==.
                                   2634 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:143: void Port_Init(void)	
                                   2635 ;	-----------------------------------------
                                   2636 ;	 function Port_Init
                                   2637 ;	-----------------------------------------
      00068E                       2638 _Port_Init:
                           00068E  2639 	C$Squiggles.c$145$1$131 ==.
                                   2640 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:145: XBR0 = 0x27;
      00068E 75 E1 27         [24] 2641 	mov	_XBR0,#0x27
                           000691  2642 	C$Squiggles.c$146$1$131 ==.
                                   2643 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:146: P1MDIN 	&= 0xDF;	// set pin 1.3 for analog input	
      000691 53 BD DF         [24] 2644 	anl	_P1MDIN,#0xDF
                           000694  2645 	C$Squiggles.c$147$1$131 ==.
                                   2646 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:147: P1MDOUT |= 0x05;	//set output pin for CEX0 in push-pull mode
      000694 43 A5 05         [24] 2647 	orl	_P1MDOUT,#0x05
                           000697  2648 	C$Squiggles.c$148$1$131 ==.
                                   2649 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:148: P1MDOUT &= 0xDF;	// set input pin for 1.3 to open-drain
      000697 53 A5 DF         [24] 2650 	anl	_P1MDOUT,#0xDF
                           00069A  2651 	C$Squiggles.c$149$1$131 ==.
                                   2652 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:149: P1		|= ~0xDF;	// set input pin for 1.3 to high impedence
      00069A AF 90            [24] 2653 	mov	r7,_P1
      00069C 74 20            [12] 2654 	mov	a,#0x20
      00069E 4F               [12] 2655 	orl	a,r7
      00069F F5 90            [12] 2656 	mov	_P1,a
                           0006A1  2657 	C$Squiggles.c$150$1$131 ==.
                                   2658 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:150: P3MDOUT &= 0x7F;	// set input pin for 3.7 to open-drain
      0006A1 53 A7 7F         [24] 2659 	anl	_P3MDOUT,#0x7F
                           0006A4  2660 	C$Squiggles.c$151$1$131 ==.
                                   2661 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:151: P3		|= ~0x7F;	// set input pin for 3.7 to high impedence
      0006A4 AF B0            [24] 2662 	mov	r7,_P3
      0006A6 74 80            [12] 2663 	mov	a,#0x80
      0006A8 4F               [12] 2664 	orl	a,r7
      0006A9 F5 B0            [12] 2665 	mov	_P3,a
                           0006AB  2666 	C$Squiggles.c$153$1$131 ==.
                           0006AB  2667 	XG$Port_Init$0$0 ==.
      0006AB 22               [24] 2668 	ret
                                   2669 ;------------------------------------------------------------
                                   2670 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2671 ;------------------------------------------------------------
                           0006AC  2672 	G$Interrupt_Init$0$0 ==.
                           0006AC  2673 	C$Squiggles.c$157$1$131 ==.
                                   2674 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:157: void Interrupt_Init(void)
                                   2675 ;	-----------------------------------------
                                   2676 ;	 function Interrupt_Init
                                   2677 ;	-----------------------------------------
      0006AC                       2678 _Interrupt_Init:
                           0006AC  2679 	C$Squiggles.c$159$1$133 ==.
                                   2680 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:159: IE |= 0x02;
      0006AC 43 A8 02         [24] 2681 	orl	_IE,#0x02
                           0006AF  2682 	C$Squiggles.c$160$1$133 ==.
                                   2683 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:160: EIE1 |= 0x08;
      0006AF 43 E6 08         [24] 2684 	orl	_EIE1,#0x08
                           0006B2  2685 	C$Squiggles.c$161$1$133 ==.
                                   2686 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:161: EA = 1;
      0006B2 D2 AF            [12] 2687 	setb	_EA
                           0006B4  2688 	C$Squiggles.c$162$1$133 ==.
                           0006B4  2689 	XG$Interrupt_Init$0$0 ==.
      0006B4 22               [24] 2690 	ret
                                   2691 ;------------------------------------------------------------
                                   2692 ;Allocation info for local variables in function 'PCA_Init'
                                   2693 ;------------------------------------------------------------
                           0006B5  2694 	G$PCA_Init$0$0 ==.
                           0006B5  2695 	C$Squiggles.c$166$1$133 ==.
                                   2696 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:166: void PCA_Init(void)
                                   2697 ;	-----------------------------------------
                                   2698 ;	 function PCA_Init
                                   2699 ;	-----------------------------------------
      0006B5                       2700 _PCA_Init:
                           0006B5  2701 	C$Squiggles.c$168$1$135 ==.
                                   2702 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:168: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      0006B5 75 D9 81         [24] 2703 	mov	_PCA0MD,#0x81
                           0006B8  2704 	C$Squiggles.c$169$1$135 ==.
                                   2705 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:169: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      0006B8 75 DA C2         [24] 2706 	mov	_PCA0CPM0,#0xC2
                           0006BB  2707 	C$Squiggles.c$170$1$135 ==.
                                   2708 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:170: PCA0CPM2 = 0xC2;
      0006BB 75 DC C2         [24] 2709 	mov	_PCA0CPM2,#0xC2
                           0006BE  2710 	C$Squiggles.c$171$1$135 ==.
                                   2711 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:171: PCA0CN = 0x40;     // enable PCA
      0006BE 75 D8 40         [24] 2712 	mov	_PCA0CN,#0x40
                           0006C1  2713 	C$Squiggles.c$172$1$135 ==.
                           0006C1  2714 	XG$PCA_Init$0$0 ==.
      0006C1 22               [24] 2715 	ret
                                   2716 ;------------------------------------------------------------
                                   2717 ;Allocation info for local variables in function 'SMB0_Init'
                                   2718 ;------------------------------------------------------------
                           0006C2  2719 	G$SMB0_Init$0$0 ==.
                           0006C2  2720 	C$Squiggles.c$176$1$135 ==.
                                   2721 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:176: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2722 ;	-----------------------------------------
                                   2723 ;	 function SMB0_Init
                                   2724 ;	-----------------------------------------
      0006C2                       2725 _SMB0_Init:
                           0006C2  2726 	C$Squiggles.c$178$1$137 ==.
                                   2727 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:178: SMB0CR = 0x93;      // Set SCL to 100KHz
      0006C2 75 CF 93         [24] 2728 	mov	_SMB0CR,#0x93
                           0006C5  2729 	C$Squiggles.c$179$1$137 ==.
                                   2730 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:179: ENSMB = 1;          // Enable SMBUS0
      0006C5 D2 C6            [12] 2731 	setb	_ENSMB
                           0006C7  2732 	C$Squiggles.c$180$1$137 ==.
                           0006C7  2733 	XG$SMB0_Init$0$0 ==.
      0006C7 22               [24] 2734 	ret
                                   2735 ;------------------------------------------------------------
                                   2736 ;Allocation info for local variables in function 'PCA_ISR'
                                   2737 ;------------------------------------------------------------
                           0006C8  2738 	G$PCA_ISR$0$0 ==.
                           0006C8  2739 	C$Squiggles.c$184$1$137 ==.
                                   2740 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:184: void PCA_ISR(void) __interrupt 9
                                   2741 ;	-----------------------------------------
                                   2742 ;	 function PCA_ISR
                                   2743 ;	-----------------------------------------
      0006C8                       2744 _PCA_ISR:
      0006C8 C0 E0            [24] 2745 	push	acc
      0006CA C0 D0            [24] 2746 	push	psw
                           0006CC  2747 	C$Squiggles.c$186$1$139 ==.
                                   2748 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:186: if (CF)
                           0006CC  2749 	C$Squiggles.c$188$2$140 ==.
                                   2750 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:188: CF = 0;                     // clear the interrupt flag
      0006CC 10 DF 02         [24] 2751 	jbc	_CF,00123$
      0006CF 80 42            [24] 2752 	sjmp	00109$
      0006D1                       2753 00123$:
                           0006D1  2754 	C$Squiggles.c$189$2$140 ==.
                                   2755 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:189: nCounts++;					// Counts overflows for initial delay
      0006D1 05*12            [12] 2756 	inc	_nCounts
      0006D3 E4               [12] 2757 	clr	a
      0006D4 B5*12 02         [24] 2758 	cjne	a,_nCounts,00124$
      0006D7 05*13            [12] 2759 	inc	(_nCounts + 1)
      0006D9                       2760 00124$:
                           0006D9  2761 	C$Squiggles.c$190$2$140 ==.
                                   2762 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:190: PCA0 = PCA_START;
      0006D9 75 E9 00         [24] 2763 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      0006DC 75 F9 70         [24] 2764 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0006DF  2765 	C$Squiggles.c$191$2$140 ==.
                                   2766 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:191: if (nCounts > 50)
      0006DF C3               [12] 2767 	clr	c
      0006E0 74 32            [12] 2768 	mov	a,#0x32
      0006E2 95*12            [12] 2769 	subb	a,_nCounts
      0006E4 E4               [12] 2770 	clr	a
      0006E5 95*13            [12] 2771 	subb	a,(_nCounts + 1)
      0006E7 50 0C            [24] 2772 	jnc	00102$
                           0006E9  2773 	C$Squiggles.c$193$3$141 ==.
                                   2774 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:193: nCounts = 0;
      0006E9 E4               [12] 2775 	clr	a
      0006EA F5*12            [12] 2776 	mov	_nCounts,a
      0006EC F5*13            [12] 2777 	mov	(_nCounts + 1),a
                           0006EE  2778 	C$Squiggles.c$194$3$141 ==.
                                   2779 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:194: Counts++;               // seconds counter
      0006EE 05*10            [12] 2780 	inc	_Counts
                                   2781 ;	genFromRTrack removed	clr	a
      0006F0 B5*10 02         [24] 2782 	cjne	a,_Counts,00126$
      0006F3 05*11            [12] 2783 	inc	(_Counts + 1)
      0006F5                       2784 00126$:
      0006F5                       2785 00102$:
                           0006F5  2786 	C$Squiggles.c$196$2$140 ==.
                                   2787 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:196: h_count++;					// delay 
      0006F5 05*1C            [12] 2788 	inc	_h_count
                           0006F7  2789 	C$Squiggles.c$197$2$140 ==.
                                   2790 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:197: if (h_count>=2)
      0006F7 74 FE            [12] 2791 	mov	a,#0x100 - 0x02
      0006F9 25*1C            [12] 2792 	add	a,_h_count
      0006FB 50 06            [24] 2793 	jnc	00104$
                           0006FD  2794 	C$Squiggles.c$199$3$142 ==.
                                   2795 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:199: new_heading=1;
      0006FD 75*1F 01         [24] 2796 	mov	_new_heading,#0x01
                           000700  2797 	C$Squiggles.c$200$3$142 ==.
                                   2798 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:200: h_count = 0;
      000700 75*1C 00         [24] 2799 	mov	_h_count,#0x00
      000703                       2800 00104$:
                           000703  2801 	C$Squiggles.c$202$2$140 ==.
                                   2802 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:202: print_delay++;
      000703 05*30            [12] 2803 	inc	_print_delay
                           000705  2804 	C$Squiggles.c$204$2$140 ==.
                                   2805 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:204: r_count++;
      000705 05*1D            [12] 2806 	inc	_r_count
                           000707  2807 	C$Squiggles.c$205$2$140 ==.
                                   2808 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:205: if (r_count>=4)
      000707 74 FC            [12] 2809 	mov	a,#0x100 - 0x04
      000709 25*1D            [12] 2810 	add	a,_r_count
      00070B 50 06            [24] 2811 	jnc	00109$
                           00070D  2812 	C$Squiggles.c$207$3$143 ==.
                                   2813 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:207: new_range = 1;
      00070D 75*20 01         [24] 2814 	mov	_new_range,#0x01
                           000710  2815 	C$Squiggles.c$208$3$143 ==.
                                   2816 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:208: r_count = 0;
      000710 75*1D 00         [24] 2817 	mov	_r_count,#0x00
      000713                       2818 00109$:
      000713 D0 D0            [24] 2819 	pop	psw
      000715 D0 E0            [24] 2820 	pop	acc
                           000717  2821 	C$Squiggles.c$212$1$139 ==.
                           000717  2822 	XG$PCA_ISR$0$0 ==.
      000717 32               [24] 2823 	reti
                                   2824 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2825 ;	eliminated unneeded push/pop dpl
                                   2826 ;	eliminated unneeded push/pop dph
                                   2827 ;	eliminated unneeded push/pop b
                                   2828 ;------------------------------------------------------------
                                   2829 ;Allocation info for local variables in function 'ADC_Init'
                                   2830 ;------------------------------------------------------------
                           000718  2831 	G$ADC_Init$0$0 ==.
                           000718  2832 	C$Squiggles.c$217$1$139 ==.
                                   2833 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:217: void ADC_Init(void)
                                   2834 ;	-----------------------------------------
                                   2835 ;	 function ADC_Init
                                   2836 ;	-----------------------------------------
      000718                       2837 _ADC_Init:
                           000718  2838 	C$Squiggles.c$219$1$145 ==.
                                   2839 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:219: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000718 75 D1 03         [24] 2840 	mov	_REF0CN,#0x03
                           00071B  2841 	C$Squiggles.c$220$1$145 ==.
                                   2842 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:220: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      00071B 75 AA 80         [24] 2843 	mov	_ADC1CN,#0x80
                           00071E  2844 	C$Squiggles.c$221$1$145 ==.
                                   2845 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:221: ADC1CF |= 0x01; // Set A/D converter gain to 1
      00071E 43 AB 01         [24] 2846 	orl	_ADC1CF,#0x01
                           000721  2847 	C$Squiggles.c$222$1$145 ==.
                           000721  2848 	XG$ADC_Init$0$0 ==.
      000721 22               [24] 2849 	ret
                                   2850 ;------------------------------------------------------------
                                   2851 ;Allocation info for local variables in function 'read_AD_input'
                                   2852 ;------------------------------------------------------------
                                   2853 ;n                         Allocated to registers 
                                   2854 ;------------------------------------------------------------
                           000722  2855 	G$read_AD_input$0$0 ==.
                           000722  2856 	C$Squiggles.c$226$1$145 ==.
                                   2857 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:226: unsigned char read_AD_input(unsigned char n)
                                   2858 ;	-----------------------------------------
                                   2859 ;	 function read_AD_input
                                   2860 ;	-----------------------------------------
      000722                       2861 _read_AD_input:
      000722 85 82 AC         [24] 2862 	mov	_AMX1SL,dpl
                           000725  2863 	C$Squiggles.c$229$1$147 ==.
                                   2864 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:229: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      000725 AF AA            [24] 2865 	mov	r7,_ADC1CN
      000727 74 DF            [12] 2866 	mov	a,#0xDF
      000729 5F               [12] 2867 	anl	a,r7
      00072A F5 AA            [12] 2868 	mov	_ADC1CN,a
                           00072C  2869 	C$Squiggles.c$230$1$147 ==.
                                   2870 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:230: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      00072C 43 AA 10         [24] 2871 	orl	_ADC1CN,#0x10
                           00072F  2872 	C$Squiggles.c$232$1$147 ==.
                                   2873 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:232: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      00072F                       2874 00101$:
      00072F E5 AA            [12] 2875 	mov	a,_ADC1CN
      000731 30 E5 FB         [24] 2876 	jnb	acc.5,00101$
                           000734  2877 	C$Squiggles.c$234$1$147 ==.
                                   2878 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:234: return ADC1; // Return digital value in ADC1 register
      000734 85 9C 82         [24] 2879 	mov	dpl,_ADC1
                           000737  2880 	C$Squiggles.c$235$1$147 ==.
                           000737  2881 	XG$read_AD_input$0$0 ==.
      000737 22               [24] 2882 	ret
                                   2883 ;------------------------------------------------------------
                                   2884 ;Allocation info for local variables in function 'Pick_Heading'
                                   2885 ;------------------------------------------------------------
                                   2886 ;input                     Allocated to registers r7 
                                   2887 ;------------------------------------------------------------
                           000738  2888 	G$Pick_Heading$0$0 ==.
                           000738  2889 	C$Squiggles.c$239$1$147 ==.
                                   2890 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:239: void Pick_Heading(void)
                                   2891 ;	-----------------------------------------
                                   2892 ;	 function Pick_Heading
                                   2893 ;	-----------------------------------------
      000738                       2894 _Pick_Heading:
                           000738  2895 	C$Squiggles.c$257$1$149 ==.
                                   2896 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:257: printf("\rPlease enter a desired heading.\n");
      000738 74r23            [12] 2897 	mov	a,#___str_11
      00073A C0 E0            [24] 2898 	push	acc
      00073C 74s01            [12] 2899 	mov	a,#(___str_11 >> 8)
      00073E C0 E0            [24] 2900 	push	acc
      000740 74 80            [12] 2901 	mov	a,#0x80
      000742 C0 E0            [24] 2902 	push	acc
      000744 12r00r00         [24] 2903 	lcall	_printf
      000747 15 81            [12] 2904 	dec	sp
      000749 15 81            [12] 2905 	dec	sp
      00074B 15 81            [12] 2906 	dec	sp
                           00074D  2907 	C$Squiggles.c$258$1$149 ==.
                                   2908 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:258: printf("\r'u' will increment by 5 degrees. 'd' will decrement by 5 degrees.\n");
      00074D 74r45            [12] 2909 	mov	a,#___str_12
      00074F C0 E0            [24] 2910 	push	acc
      000751 74s01            [12] 2911 	mov	a,#(___str_12 >> 8)
      000753 C0 E0            [24] 2912 	push	acc
      000755 74 80            [12] 2913 	mov	a,#0x80
      000757 C0 E0            [24] 2914 	push	acc
      000759 12r00r00         [24] 2915 	lcall	_printf
      00075C 15 81            [12] 2916 	dec	sp
      00075E 15 81            [12] 2917 	dec	sp
      000760 15 81            [12] 2918 	dec	sp
                           000762  2919 	C$Squiggles.c$259$1$149 ==.
                                   2920 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:259: printf("\r'f' when finished.\n");
      000762 74r89            [12] 2921 	mov	a,#___str_13
      000764 C0 E0            [24] 2922 	push	acc
      000766 74s01            [12] 2923 	mov	a,#(___str_13 >> 8)
      000768 C0 E0            [24] 2924 	push	acc
      00076A 74 80            [12] 2925 	mov	a,#0x80
      00076C C0 E0            [24] 2926 	push	acc
      00076E 12r00r00         [24] 2927 	lcall	_printf
      000771 15 81            [12] 2928 	dec	sp
      000773 15 81            [12] 2929 	dec	sp
      000775 15 81            [12] 2930 	dec	sp
                           000777  2931 	C$Squiggles.c$260$2$150 ==.
                                   2932 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:260: while(1)
      000777                       2933 00108$:
                           000777  2934 	C$Squiggles.c$262$2$150 ==.
                                   2935 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:262: input = getchar();
      000777 12r00r4D         [24] 2936 	lcall	_getchar
      00077A AF 82            [24] 2937 	mov	r7,dpl
                           00077C  2938 	C$Squiggles.c$263$2$150 ==.
                                   2939 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:263: if(input == 'u') desired_heading += 50;
      00077C BF 75 0B         [24] 2940 	cjne	r7,#0x75,00102$
      00077F 74 32            [12] 2941 	mov	a,#0x32
      000781 25*16            [12] 2942 	add	a,_desired_heading
      000783 F5*16            [12] 2943 	mov	_desired_heading,a
      000785 E4               [12] 2944 	clr	a
      000786 35*17            [12] 2945 	addc	a,(_desired_heading + 1)
      000788 F5*17            [12] 2946 	mov	(_desired_heading + 1),a
      00078A                       2947 00102$:
                           00078A  2948 	C$Squiggles.c$264$2$150 ==.
                                   2949 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:264: if(input == 'd') desired_heading -= 50;
      00078A BF 64 0C         [24] 2950 	cjne	r7,#0x64,00104$
      00078D E5*16            [12] 2951 	mov	a,_desired_heading
      00078F 24 CE            [12] 2952 	add	a,#0xCE
      000791 F5*16            [12] 2953 	mov	_desired_heading,a
      000793 E5*17            [12] 2954 	mov	a,(_desired_heading + 1)
      000795 34 FF            [12] 2955 	addc	a,#0xFF
      000797 F5*17            [12] 2956 	mov	(_desired_heading + 1),a
      000799                       2957 00104$:
                           000799  2958 	C$Squiggles.c$265$2$150 ==.
                                   2959 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:265: if(input == 'f') return;
      000799 BF 66 02         [24] 2960 	cjne	r7,#0x66,00106$
      00079C 80 2E            [24] 2961 	sjmp	00110$
      00079E                       2962 00106$:
                           00079E  2963 	C$Squiggles.c$266$1$149 ==.
                                   2964 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:266: printf("\rDesired heading: %u\n", desired_heading/10);
      00079E 75*00 0A         [24] 2965 	mov	__divuint_PARM_2,#0x0A
      0007A1 75*01 00         [24] 2966 	mov	(__divuint_PARM_2 + 1),#0x00
      0007A4 85*16 82         [24] 2967 	mov	dpl,_desired_heading
      0007A7 85*17 83         [24] 2968 	mov	dph,(_desired_heading + 1)
      0007AA 12r00r00         [24] 2969 	lcall	__divuint
      0007AD AE 82            [24] 2970 	mov	r6,dpl
      0007AF AF 83            [24] 2971 	mov	r7,dph
      0007B1 C0 06            [24] 2972 	push	ar6
      0007B3 C0 07            [24] 2973 	push	ar7
      0007B5 74r9E            [12] 2974 	mov	a,#___str_14
      0007B7 C0 E0            [24] 2975 	push	acc
      0007B9 74s01            [12] 2976 	mov	a,#(___str_14 >> 8)
      0007BB C0 E0            [24] 2977 	push	acc
      0007BD 74 80            [12] 2978 	mov	a,#0x80
      0007BF C0 E0            [24] 2979 	push	acc
      0007C1 12r00r00         [24] 2980 	lcall	_printf
      0007C4 E5 81            [12] 2981 	mov	a,sp
      0007C6 24 FB            [12] 2982 	add	a,#0xfb
      0007C8 F5 81            [12] 2983 	mov	sp,a
      0007CA 80 AB            [24] 2984 	sjmp	00108$
      0007CC                       2985 00110$:
                           0007CC  2986 	C$Squiggles.c$269$1$149 ==.
                           0007CC  2987 	XG$Pick_Heading$0$0 ==.
      0007CC 22               [24] 2988 	ret
                                   2989 ;------------------------------------------------------------
                                   2990 ;Allocation info for local variables in function 'read_compass'
                                   2991 ;------------------------------------------------------------
                                   2992 ;addr                      Allocated to registers 
                                   2993 ;Data                      Allocated with name '_read_compass_Data_1_152'
                                   2994 ;read_heading              Allocated to registers 
                                   2995 ;------------------------------------------------------------
                           0007CD  2996 	G$read_compass$0$0 ==.
                           0007CD  2997 	C$Squiggles.c$286$1$149 ==.
                                   2998 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:286: int read_compass(void)
                                   2999 ;	-----------------------------------------
                                   3000 ;	 function read_compass
                                   3001 ;	-----------------------------------------
      0007CD                       3002 _read_compass:
                           0007CD  3003 	C$Squiggles.c$291$1$152 ==.
                                   3004 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:291: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0007CD 75*0Br31         [24] 3005 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_152
      0007D0 75*0C 00         [24] 3006 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007D3 75*0D 40         [24] 3007 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007D6 75*0A 02         [24] 3008 	mov	_i2c_read_data_PARM_2,#0x02
      0007D9 75*0E 02         [24] 3009 	mov	_i2c_read_data_PARM_4,#0x02
      0007DC 75 82 C0         [24] 3010 	mov	dpl,#0xC0
      0007DF 12r03rE8         [24] 3011 	lcall	_i2c_read_data
                           0007E2  3012 	C$Squiggles.c$292$1$152 ==.
                                   3013 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:292: read_heading =((Data[0] << 8) | Data[1]); //combine the two values
      0007E2 AF*31            [24] 3014 	mov	r7,_read_compass_Data_1_152
      0007E4 7E 00            [12] 3015 	mov	r6,#0x00
      0007E6 AC*32            [24] 3016 	mov	r4,(_read_compass_Data_1_152 + 0x0001)
      0007E8 7D 00            [12] 3017 	mov	r5,#0x00
      0007EA EC               [12] 3018 	mov	a,r4
      0007EB 4E               [12] 3019 	orl	a,r6
      0007EC F5 82            [12] 3020 	mov	dpl,a
      0007EE ED               [12] 3021 	mov	a,r5
      0007EF 4F               [12] 3022 	orl	a,r7
      0007F0 F5 83            [12] 3023 	mov	dph,a
                           0007F2  3024 	C$Squiggles.c$293$1$152 ==.
                                   3025 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:293: return read_heading; // the heading returned in degrees between 0 and 3599
                           0007F2  3026 	C$Squiggles.c$294$1$152 ==.
                           0007F2  3027 	XG$read_compass$0$0 ==.
      0007F2 22               [24] 3028 	ret
                                   3029 ;------------------------------------------------------------
                                   3030 ;Allocation info for local variables in function 'read_ranger'
                                   3031 ;------------------------------------------------------------
                                   3032 ;addr                      Allocated to registers 
                                   3033 ;st_range                  Allocated to registers r6 r7 
                                   3034 ;------------------------------------------------------------
                           0007F3  3035 	G$read_ranger$0$0 ==.
                           0007F3  3036 	C$Squiggles.c$298$1$152 ==.
                                   3037 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:298: int read_ranger(void)
                                   3038 ;	-----------------------------------------
                                   3039 ;	 function read_ranger
                                   3040 ;	-----------------------------------------
      0007F3                       3041 _read_ranger:
                           0007F3  3042 	C$Squiggles.c$302$1$154 ==.
                                   3043 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:302: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0007F3 75*0Br2E         [24] 3044 	mov	_i2c_read_data_PARM_3,#_Data
      0007F6 75*0C 00         [24] 3045 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007F9 75*0D 40         [24] 3046 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007FC 75*0A 02         [24] 3047 	mov	_i2c_read_data_PARM_2,#0x02
      0007FF 75*0E 02         [24] 3048 	mov	_i2c_read_data_PARM_4,#0x02
      000802 75 82 E0         [24] 3049 	mov	dpl,#0xE0
      000805 12r03rE8         [24] 3050 	lcall	_i2c_read_data
                           000808  3051 	C$Squiggles.c$303$1$154 ==.
                                   3052 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:303: st_range =((Data[0] << 8) | Data[1]); //combine the two values
      000808 AF*2E            [24] 3053 	mov	r7,_Data
      00080A 7E 00            [12] 3054 	mov	r6,#0x00
      00080C AC*2F            [24] 3055 	mov	r4,(_Data + 0x0001)
      00080E 7D 00            [12] 3056 	mov	r5,#0x00
      000810 EC               [12] 3057 	mov	a,r4
      000811 42 06            [12] 3058 	orl	ar6,a
      000813 ED               [12] 3059 	mov	a,r5
      000814 42 07            [12] 3060 	orl	ar7,a
                           000816  3061 	C$Squiggles.c$305$1$154 ==.
                                   3062 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:305: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      000816 75*2E 51         [24] 3063 	mov	_Data,#0x51
                           000819  3064 	C$Squiggles.c$306$1$154 ==.
                                   3065 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:306: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      000819 75*06r2E         [24] 3066 	mov	_i2c_write_data_PARM_3,#_Data
      00081C 75*07 00         [24] 3067 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00081F 75*08 40         [24] 3068 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000822 75*05 00         [24] 3069 	mov	_i2c_write_data_PARM_2,#0x00
      000825 75*09 01         [24] 3070 	mov	_i2c_write_data_PARM_4,#0x01
      000828 75 82 E0         [24] 3071 	mov	dpl,#0xE0
      00082B C0 07            [24] 3072 	push	ar7
      00082D C0 06            [24] 3073 	push	ar6
      00082F 12r03r72         [24] 3074 	lcall	_i2c_write_data
      000832 D0 06            [24] 3075 	pop	ar6
      000834 D0 07            [24] 3076 	pop	ar7
                           000836  3077 	C$Squiggles.c$307$1$154 ==.
                                   3078 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:307: return st_range;
      000836 8E 82            [24] 3079 	mov	dpl,r6
      000838 8F 83            [24] 3080 	mov	dph,r7
                           00083A  3081 	C$Squiggles.c$308$1$154 ==.
                           00083A  3082 	XG$read_ranger$0$0 ==.
      00083A 22               [24] 3083 	ret
                                   3084 ;------------------------------------------------------------
                                   3085 ;Allocation info for local variables in function 'Update_Value'
                                   3086 ;------------------------------------------------------------
                                   3087 ;incr                      Allocated with name '_Update_Value_PARM_2'
                                   3088 ;maxval                    Allocated with name '_Update_Value_PARM_3'
                                   3089 ;minval                    Allocated with name '_Update_Value_PARM_4'
                                   3090 ;Constant                  Allocated to registers r6 r7 
                                   3091 ;deflt                     Allocated to registers r4 r5 
                                   3092 ;input                     Allocated to registers r3 
                                   3093 ;------------------------------------------------------------
                           00083B  3094 	G$Update_Value$0$0 ==.
                           00083B  3095 	C$Squiggles.c$311$1$154 ==.
                                   3096 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:311: int Update_Value(int Constant, unsigned char incr, int maxval, int minval)
                                   3097 ;	-----------------------------------------
                                   3098 ;	 function Update_Value
                                   3099 ;	-----------------------------------------
      00083B                       3100 _Update_Value:
      00083B AE 82            [24] 3101 	mov	r6,dpl
      00083D AF 83            [24] 3102 	mov	r7,dph
                           00083F  3103 	C$Squiggles.c$316$1$156 ==.
                                   3104 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:316: deflt = (Constant*10);
      00083F 8E*00            [24] 3105 	mov	__mulint_PARM_2,r6
      000841 8F*01            [24] 3106 	mov	(__mulint_PARM_2 + 1),r7
      000843 90 00 0A         [24] 3107 	mov	dptr,#0x000A
      000846 C0 07            [24] 3108 	push	ar7
      000848 C0 06            [24] 3109 	push	ar6
      00084A 12r00r00         [24] 3110 	lcall	__mulint
      00084D AC 82            [24] 3111 	mov	r4,dpl
      00084F AD 83            [24] 3112 	mov	r5,dph
      000851 D0 06            [24] 3113 	pop	ar6
      000853 D0 07            [24] 3114 	pop	ar7
                           000855  3115 	C$Squiggles.c$317$1$156 ==.
                                   3116 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:317: while(1)
      000855                       3117 00114$:
                           000855  3118 	C$Squiggles.c$319$2$157 ==.
                                   3119 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:319: input = getchar();
      000855 C0 07            [24] 3120 	push	ar7
      000857 C0 06            [24] 3121 	push	ar6
      000859 C0 05            [24] 3122 	push	ar5
      00085B C0 04            [24] 3123 	push	ar4
      00085D 12r00r4D         [24] 3124 	lcall	_getchar
      000860 AB 82            [24] 3125 	mov	r3,dpl
      000862 D0 04            [24] 3126 	pop	ar4
      000864 D0 05            [24] 3127 	pop	ar5
      000866 D0 06            [24] 3128 	pop	ar6
      000868 D0 07            [24] 3129 	pop	ar7
                           00086A  3130 	C$Squiggles.c$320$2$157 ==.
                                   3131 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:320: if (input == 'c') Constant = deflt;
      00086A BB 63 04         [24] 3132 	cjne	r3,#0x63,00102$
      00086D 8C 06            [24] 3133 	mov	ar6,r4
      00086F 8D 07            [24] 3134 	mov	ar7,r5
      000871                       3135 00102$:
                           000871  3136 	C$Squiggles.c$321$2$157 ==.
                                   3137 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:321: if (input == 'i')
      000871 BB 69 1F         [24] 3138 	cjne	r3,#0x69,00106$
                           000874  3139 	C$Squiggles.c$323$3$158 ==.
                                   3140 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:323: Constant += incr;
      000874 A9*33            [24] 3141 	mov	r1,_Update_Value_PARM_2
      000876 7A 00            [12] 3142 	mov	r2,#0x00
      000878 E9               [12] 3143 	mov	a,r1
      000879 2E               [12] 3144 	add	a,r6
      00087A FE               [12] 3145 	mov	r6,a
      00087B EA               [12] 3146 	mov	a,r2
      00087C 3F               [12] 3147 	addc	a,r7
      00087D FF               [12] 3148 	mov	r7,a
                           00087E  3149 	C$Squiggles.c$324$3$158 ==.
                                   3150 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:324: if (Constant > maxval) Constant = maxval;
      00087E C3               [12] 3151 	clr	c
      00087F E5*34            [12] 3152 	mov	a,_Update_Value_PARM_3
      000881 9E               [12] 3153 	subb	a,r6
      000882 E5*35            [12] 3154 	mov	a,(_Update_Value_PARM_3 + 1)
      000884 64 80            [12] 3155 	xrl	a,#0x80
      000886 8F F0            [24] 3156 	mov	b,r7
      000888 63 F0 80         [24] 3157 	xrl	b,#0x80
      00088B 95 F0            [12] 3158 	subb	a,b
      00088D 50 04            [24] 3159 	jnc	00106$
      00088F AE*34            [24] 3160 	mov	r6,_Update_Value_PARM_3
      000891 AF*35            [24] 3161 	mov	r7,(_Update_Value_PARM_3 + 1)
      000893                       3162 00106$:
                           000893  3163 	C$Squiggles.c$326$2$157 ==.
                                   3164 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:326: if (input == 'd')
      000893 BB 64 20         [24] 3165 	cjne	r3,#0x64,00110$
                           000896  3166 	C$Squiggles.c$328$3$159 ==.
                                   3167 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:328: Constant -= incr;
      000896 A9*33            [24] 3168 	mov	r1,_Update_Value_PARM_2
      000898 7A 00            [12] 3169 	mov	r2,#0x00
      00089A EE               [12] 3170 	mov	a,r6
      00089B C3               [12] 3171 	clr	c
      00089C 99               [12] 3172 	subb	a,r1
      00089D FE               [12] 3173 	mov	r6,a
      00089E EF               [12] 3174 	mov	a,r7
      00089F 9A               [12] 3175 	subb	a,r2
      0008A0 FF               [12] 3176 	mov	r7,a
                           0008A1  3177 	C$Squiggles.c$329$3$159 ==.
                                   3178 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:329: if (Constant < minval) Constant = minval;
      0008A1 C3               [12] 3179 	clr	c
      0008A2 EE               [12] 3180 	mov	a,r6
      0008A3 95*36            [12] 3181 	subb	a,_Update_Value_PARM_4
      0008A5 EF               [12] 3182 	mov	a,r7
      0008A6 64 80            [12] 3183 	xrl	a,#0x80
      0008A8 85*37 F0         [24] 3184 	mov	b,(_Update_Value_PARM_4 + 1)
      0008AB 63 F0 80         [24] 3185 	xrl	b,#0x80
      0008AE 95 F0            [12] 3186 	subb	a,b
      0008B0 50 04            [24] 3187 	jnc	00110$
      0008B2 AE*36            [24] 3188 	mov	r6,_Update_Value_PARM_4
      0008B4 AF*37            [24] 3189 	mov	r7,(_Update_Value_PARM_4 + 1)
      0008B6                       3190 00110$:
                           0008B6  3191 	C$Squiggles.c$331$2$157 ==.
                                   3192 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:331: if (input == 'u') return Constant;
      0008B6 BB 75 9C         [24] 3193 	cjne	r3,#0x75,00114$
      0008B9 8E 82            [24] 3194 	mov	dpl,r6
      0008BB 8F 83            [24] 3195 	mov	dph,r7
                           0008BD  3196 	C$Squiggles.c$333$1$156 ==.
                           0008BD  3197 	XG$Update_Value$0$0 ==.
      0008BD 22               [24] 3198 	ret
                                   3199 ;------------------------------------------------------------
                                   3200 ;Allocation info for local variables in function 'set_COMPASS_PW'
                                   3201 ;------------------------------------------------------------
                                   3202 ;Error                     Allocated to registers r6 r7 
                                   3203 ;------------------------------------------------------------
                           0008BE  3204 	G$set_COMPASS_PW$0$0 ==.
                           0008BE  3205 	C$Squiggles.c$337$1$156 ==.
                                   3206 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:337: void set_COMPASS_PW(void)
                                   3207 ;	-----------------------------------------
                                   3208 ;	 function set_COMPASS_PW
                                   3209 ;	-----------------------------------------
      0008BE                       3210 _set_COMPASS_PW:
                           0008BE  3211 	C$Squiggles.c$341$1$161 ==.
                                   3212 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:341: Error = (desired_heading) - heading;	//Calculate the error
      0008BE E5*16            [12] 3213 	mov	a,_desired_heading
      0008C0 C3               [12] 3214 	clr	c
      0008C1 95*21            [12] 3215 	subb	a,_heading
      0008C3 FE               [12] 3216 	mov	r6,a
      0008C4 E5*17            [12] 3217 	mov	a,(_desired_heading + 1)
      0008C6 95*22            [12] 3218 	subb	a,(_heading + 1)
      0008C8 FF               [12] 3219 	mov	r7,a
                           0008C9  3220 	C$Squiggles.c$342$1$161 ==.
                                   3221 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:342: if(Error < -1800) Error = Error + 3600; //Adjust error so that we turn efficiently
      0008C9 C3               [12] 3222 	clr	c
      0008CA EE               [12] 3223 	mov	a,r6
      0008CB 94 F8            [12] 3224 	subb	a,#0xF8
      0008CD EF               [12] 3225 	mov	a,r7
      0008CE 64 80            [12] 3226 	xrl	a,#0x80
      0008D0 94 78            [12] 3227 	subb	a,#0x78
      0008D2 50 08            [24] 3228 	jnc	00102$
      0008D4 74 10            [12] 3229 	mov	a,#0x10
      0008D6 2E               [12] 3230 	add	a,r6
      0008D7 FE               [12] 3231 	mov	r6,a
      0008D8 74 0E            [12] 3232 	mov	a,#0x0E
      0008DA 3F               [12] 3233 	addc	a,r7
      0008DB FF               [12] 3234 	mov	r7,a
      0008DC                       3235 00102$:
                           0008DC  3236 	C$Squiggles.c$343$1$161 ==.
                                   3237 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:343: if(Error > 1800) Error = Error - 3600;
      0008DC C3               [12] 3238 	clr	c
      0008DD 74 08            [12] 3239 	mov	a,#0x08
      0008DF 9E               [12] 3240 	subb	a,r6
      0008E0 74 87            [12] 3241 	mov	a,#(0x07 ^ 0x80)
      0008E2 8F F0            [24] 3242 	mov	b,r7
      0008E4 63 F0 80         [24] 3243 	xrl	b,#0x80
      0008E7 95 F0            [12] 3244 	subb	a,b
      0008E9 50 08            [24] 3245 	jnc	00104$
      0008EB EE               [12] 3246 	mov	a,r6
      0008EC 24 F0            [12] 3247 	add	a,#0xF0
      0008EE FE               [12] 3248 	mov	r6,a
      0008EF EF               [12] 3249 	mov	a,r7
      0008F0 34 F1            [12] 3250 	addc	a,#0xF1
      0008F2 FF               [12] 3251 	mov	r7,a
      0008F3                       3252 00104$:
                           0008F3  3253 	C$Squiggles.c$345$1$161 ==.
                                   3254 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:345: if (range > MAX_RANGE) 
      0008F3 C3               [12] 3255 	clr	c
      0008F4 74 37            [12] 3256 	mov	a,#0x37
      0008F6 95*23            [12] 3257 	subb	a,_range
      0008F8 E4               [12] 3258 	clr	a
      0008F9 95*24            [12] 3259 	subb	a,(_range + 1)
      0008FB 50 07            [24] 3260 	jnc	00106$
                           0008FD  3261 	C$Squiggles.c$347$2$162 ==.
                                   3262 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:347: range_adj = 0; //no obstacle in range, no change
      0008FD E4               [12] 3263 	clr	a
      0008FE F5*27            [12] 3264 	mov	_range_adj,a
      000900 F5*28            [12] 3265 	mov	(_range_adj + 1),a
      000902 80 27            [24] 3266 	sjmp	00107$
      000904                       3267 00106$:
                           000904  3268 	C$Squiggles.c$351$2$163 ==.
                                   3269 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:351: range_adj = (int)(ranger_gain * (MAX_RANGE - range)); //weight adjustment by distance
      000904 74 37            [12] 3270 	mov	a,#0x37
      000906 C3               [12] 3271 	clr	c
      000907 95*23            [12] 3272 	subb	a,_range
      000909 F5*00            [12] 3273 	mov	__mulint_PARM_2,a
      00090B E4               [12] 3274 	clr	a
      00090C 95*24            [12] 3275 	subb	a,(_range + 1)
      00090E F5*01            [12] 3276 	mov	(__mulint_PARM_2 + 1),a
      000910 AC*2B            [24] 3277 	mov	r4,_ranger_gain
      000912 7D 00            [12] 3278 	mov	r5,#0x00
      000914 8C 82            [24] 3279 	mov	dpl,r4
      000916 8D 83            [24] 3280 	mov	dph,r5
      000918 C0 07            [24] 3281 	push	ar7
      00091A C0 06            [24] 3282 	push	ar6
      00091C 12r00r00         [24] 3283 	lcall	__mulint
      00091F AC 82            [24] 3284 	mov	r4,dpl
      000921 AD 83            [24] 3285 	mov	r5,dph
      000923 D0 06            [24] 3286 	pop	ar6
      000925 D0 07            [24] 3287 	pop	ar7
      000927 8C*27            [24] 3288 	mov	_range_adj,r4
      000929 8D*28            [24] 3289 	mov	(_range_adj + 1),r5
      00092B                       3290 00107$:
                           00092B  3291 	C$Squiggles.c$354$1$161 ==.
                                   3292 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:354: COMPASS_PW = 2760 + (int)(compass_gain*Error) - range_adj;
      00092B 8E 82            [24] 3293 	mov	dpl,r6
      00092D 8F 83            [24] 3294 	mov	dph,r7
      00092F 12r00r00         [24] 3295 	lcall	___sint2fs
      000932 AC 82            [24] 3296 	mov	r4,dpl
      000934 AD 83            [24] 3297 	mov	r5,dph
      000936 AE F0            [24] 3298 	mov	r6,b
      000938 FF               [12] 3299 	mov	r7,a
      000939 C0 04            [24] 3300 	push	ar4
      00093B C0 05            [24] 3301 	push	ar5
      00093D C0 06            [24] 3302 	push	ar6
      00093F C0 07            [24] 3303 	push	ar7
      000941 85*18 82         [24] 3304 	mov	dpl,_compass_gain
      000944 85*19 83         [24] 3305 	mov	dph,(_compass_gain + 1)
      000947 85*1A F0         [24] 3306 	mov	b,(_compass_gain + 2)
      00094A E5*1B            [12] 3307 	mov	a,(_compass_gain + 3)
      00094C 12r00r00         [24] 3308 	lcall	___fsmul
      00094F AC 82            [24] 3309 	mov	r4,dpl
      000951 AD 83            [24] 3310 	mov	r5,dph
      000953 AE F0            [24] 3311 	mov	r6,b
      000955 FF               [12] 3312 	mov	r7,a
      000956 E5 81            [12] 3313 	mov	a,sp
      000958 24 FC            [12] 3314 	add	a,#0xfc
      00095A F5 81            [12] 3315 	mov	sp,a
      00095C 8C 82            [24] 3316 	mov	dpl,r4
      00095E 8D 83            [24] 3317 	mov	dph,r5
      000960 8E F0            [24] 3318 	mov	b,r6
      000962 EF               [12] 3319 	mov	a,r7
      000963 12r00r00         [24] 3320 	lcall	___fs2sint
      000966 E5 82            [12] 3321 	mov	a,dpl
      000968 85 83 F0         [24] 3322 	mov	b,dph
      00096B 24 C8            [12] 3323 	add	a,#0xC8
      00096D FE               [12] 3324 	mov	r6,a
      00096E 74 0A            [12] 3325 	mov	a,#0x0A
      000970 35 F0            [12] 3326 	addc	a,b
      000972 FF               [12] 3327 	mov	r7,a
      000973 EE               [12] 3328 	mov	a,r6
      000974 C3               [12] 3329 	clr	c
      000975 95*27            [12] 3330 	subb	a,_range_adj
      000977 F5*25            [12] 3331 	mov	_COMPASS_PW,a
      000979 EF               [12] 3332 	mov	a,r7
      00097A 95*28            [12] 3333 	subb	a,(_range_adj + 1)
      00097C F5*26            [12] 3334 	mov	(_COMPASS_PW + 1),a
                           00097E  3335 	C$Squiggles.c$356$1$161 ==.
                                   3336 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:356: if(COMPASS_PW < 2030)
      00097E C3               [12] 3337 	clr	c
      00097F E5*25            [12] 3338 	mov	a,_COMPASS_PW
      000981 94 EE            [12] 3339 	subb	a,#0xEE
      000983 E5*26            [12] 3340 	mov	a,(_COMPASS_PW + 1)
      000985 94 07            [12] 3341 	subb	a,#0x07
      000987 50 06            [24] 3342 	jnc	00109$
                           000989  3343 	C$Squiggles.c$358$2$164 ==.
                                   3344 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:358: COMPASS_PW = 2030;
      000989 75*25 EE         [24] 3345 	mov	_COMPASS_PW,#0xEE
      00098C 75*26 07         [24] 3346 	mov	(_COMPASS_PW + 1),#0x07
      00098F                       3347 00109$:
                           00098F  3348 	C$Squiggles.c$360$1$161 ==.
                                   3349 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:360: if(COMPASS_PW > 3500)
      00098F C3               [12] 3350 	clr	c
      000990 74 AC            [12] 3351 	mov	a,#0xAC
      000992 95*25            [12] 3352 	subb	a,_COMPASS_PW
      000994 74 0D            [12] 3353 	mov	a,#0x0D
      000996 95*26            [12] 3354 	subb	a,(_COMPASS_PW + 1)
      000998 50 06            [24] 3355 	jnc	00111$
                           00099A  3356 	C$Squiggles.c$362$2$165 ==.
                                   3357 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:362: COMPASS_PW = 3500;
      00099A 75*25 AC         [24] 3358 	mov	_COMPASS_PW,#0xAC
      00099D 75*26 0D         [24] 3359 	mov	(_COMPASS_PW + 1),#0x0D
      0009A0                       3360 00111$:
                           0009A0  3361 	C$Squiggles.c$364$1$161 ==.
                                   3362 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 4\Squiggles\Squiggles.c:364: PCA0CP0 = 0xFFFF - COMPASS_PW; // Change pulse width
      0009A0 74 FF            [12] 3363 	mov	a,#0xFF
      0009A2 C3               [12] 3364 	clr	c
      0009A3 95*25            [12] 3365 	subb	a,_COMPASS_PW
      0009A5 F5 EA            [12] 3366 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0009A7 74 FF            [12] 3367 	mov	a,#0xFF
      0009A9 95*26            [12] 3368 	subb	a,(_COMPASS_PW + 1)
      0009AB F5 FA            [12] 3369 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           0009AD  3370 	C$Squiggles.c$365$1$161 ==.
                           0009AD  3371 	XG$set_COMPASS_PW$0$0 ==.
      0009AD 22               [24] 3372 	ret
                                   3373 	.area CSEG    (CODE)
                                   3374 	.area CONST   (CODE)
                           000000  3375 FSquiggles$__str_0$0$0 == .
      000000                       3376 ___str_0:
      000000 0A                    3377 	.db 0x0A
      000001 54 79 70 65 20 64 69  3378 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3379 	.db 0x00
                           000016  3380 FSquiggles$__str_1$0$0 == .
      000016                       3381 ___str_1:
      000016 20 20 20 20 20 25 63  3382 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3383 	.db 0x00
                           000026  3384 FSquiggles$__str_2$0$0 == .
      000026                       3385 ___str_2:
      000026 25 63                 3386 	.ascii "%c"
      000028 00                    3387 	.db 0x00
                           000029  3388 FSquiggles$__str_3$0$0 == .
      000029                       3389 ___str_3:
      000029 0A                    3390 	.db 0x0A
      00002A 53 74 61 72 74        3391 	.ascii "Start"
      00002F 0D                    3392 	.db 0x0D
      000030 0A                    3393 	.db 0x0A
      000031 00                    3394 	.db 0x00
                           000032  3395 FSquiggles$__str_4$0$0 == .
      000032                       3396 ___str_4:
      000032 0A                    3397 	.db 0x0A
      000033 0D                    3398 	.db 0x0D
      000034 50 6C 65 61 73 65 20  3399 	.ascii "Please input data on the LCD."
             69 6E 70 75 74 20 64
             61 74 61 20 6F 6E 20
             74 68 65 20 4C 43 44
             2E
      000051 0A                    3400 	.db 0x0A
      000052 00                    3401 	.db 0x00
                           000053  3402 FSquiggles$__str_5$0$0 == .
      000053                       3403 ___str_5:
      000053 0A                    3404 	.db 0x0A
      000054 0D                    3405 	.db 0x0D
      000055 2D 2D 2D 2D 2D 2D 2D  3406 	.ascii "------------DATA COLLECTION------------"
             2D 2D 2D 2D 2D 44 41
             54 41 20 43 4F 4C 4C
             45 43 54 49 4F 4E 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      00007C 0A                    3407 	.db 0x0A
      00007D 00                    3408 	.db 0x00
                           00007E  3409 FSquiggles$__str_6$0$0 == .
      00007E                       3410 ___str_6:
      00007E 0D                    3411 	.db 0x0D
      00007F 52 61 6E 67 65 3A 20  3412 	.ascii "Range: %u"
             25 75
      000088 0A                    3413 	.db 0x0A
      000089 00                    3414 	.db 0x00
                           00008A  3415 FSquiggles$__str_7$0$0 == .
      00008A                       3416 ___str_7:
      00008A 0D                    3417 	.db 0x0D
      00008B 48 65 61 64 69 6E 67  3418 	.ascii "Heading: %u"
             3A 20 25 75
      000096 0A                    3419 	.db 0x0A
      000097 00                    3420 	.db 0x00
                           000098  3421 FSquiggles$__str_8$0$0 == .
      000098                       3422 ___str_8:
      000098 0D                    3423 	.db 0x0D
      000099 56 6F 6C 74 61 67 65  3424 	.ascii "Voltage is %u"
             20 69 73 20 25 75
      0000A6 0A                    3425 	.db 0x0A
      0000A7 00                    3426 	.db 0x00
                           0000A8  3427 FSquiggles$__str_9$0$0 == .
      0000A8                       3428 ___str_9:
      0000A8 0D                    3429 	.db 0x0D
      0000A9 57 6F 75 6C 64 20 79  3430 	.ascii "Would you like to edit the compass_gain?"
             6F 75 20 6C 69 6B 65
             20 74 6F 20 65 64 69
             74 20 74 68 65 20 63
             6F 6D 70 61 73 73 5F
             67 61 69 6E 3F
      0000D1 0A                    3431 	.db 0x0A
      0000D2 00                    3432 	.db 0x00
                           0000D3  3433 FSquiggles$__str_10$0$0 == .
      0000D3                       3434 ___str_10:
      0000D3 0D                    3435 	.db 0x0D
      0000D4 27 63 27 20 2D 20 6E  3436 	.ascii "'c' - no, 'i' - increment by 1, 'd' - decrement by 1, 'u' -"
             6F 2C 20 27 69 27 20
             2D 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 31 2C 20 27 64 27
             20 2D 20 64 65 63 72
             65 6D 65 6E 74 20 62
             79 20 31 2C 20 27 75
             27 20 2D
      00010F 20 75 70 64 61 74 65  3437 	.ascii " update and return"
             20 61 6E 64 20 72 65
             74 75 72 6E
      000121 0A                    3438 	.db 0x0A
      000122 00                    3439 	.db 0x00
                           000123  3440 FSquiggles$__str_11$0$0 == .
      000123                       3441 ___str_11:
      000123 0D                    3442 	.db 0x0D
      000124 50 6C 65 61 73 65 20  3443 	.ascii "Please enter a desired heading."
             65 6E 74 65 72 20 61
             20 64 65 73 69 72 65
             64 20 68 65 61 64 69
             6E 67 2E
      000143 0A                    3444 	.db 0x0A
      000144 00                    3445 	.db 0x00
                           000145  3446 FSquiggles$__str_12$0$0 == .
      000145                       3447 ___str_12:
      000145 0D                    3448 	.db 0x0D
      000146 27 75 27 20 77 69 6C  3449 	.ascii "'u' will increment by 5 degrees. 'd' will decrement by 5 de"
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 35 20 64 65 67 72
             65 65 73 2E 20 27 64
             27 20 77 69 6C 6C 20
             64 65 63 72 65 6D 65
             6E 74 20 62 79 20 35
             20 64 65
      000181 67 72 65 65 73 2E     3450 	.ascii "grees."
      000187 0A                    3451 	.db 0x0A
      000188 00                    3452 	.db 0x00
                           000189  3453 FSquiggles$__str_13$0$0 == .
      000189                       3454 ___str_13:
      000189 0D                    3455 	.db 0x0D
      00018A 27 66 27 20 77 68 65  3456 	.ascii "'f' when finished."
             6E 20 66 69 6E 69 73
             68 65 64 2E
      00019C 0A                    3457 	.db 0x0A
      00019D 00                    3458 	.db 0x00
                           00019E  3459 FSquiggles$__str_14$0$0 == .
      00019E                       3460 ___str_14:
      00019E 0D                    3461 	.db 0x0D
      00019F 44 65 73 69 72 65 64  3462 	.ascii "Desired heading: %u"
             20 68 65 61 64 69 6E
             67 3A 20 25 75
      0001B2 0A                    3463 	.db 0x0A
      0001B3 00                    3464 	.db 0x00
                                   3465 	.area XINIT   (CODE)
                                   3466 	.area CABS    (ABS,CODE)
