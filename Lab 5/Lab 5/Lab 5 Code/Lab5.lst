                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Sat Apr 25 14:09:42 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab5
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _status_reg_a
                                     13 	.globl _Pick_Drive_Gain
                                     14 	.globl _main
                                     15 	.globl _read_keypad
                                     16 	.globl _strlen
                                     17 	.globl _Sys_Init
                                     18 	.globl _UART0_Init
                                     19 	.globl _SYSCLK_Init
                                     20 	.globl _vsprintf
                                     21 	.globl _printf
                                     22 	.globl _RANGER_SWITCH
                                     23 	.globl _COMPASS_SWITCH
                                     24 	.globl _BUS_SCL
                                     25 	.globl _BUS_TOE
                                     26 	.globl _BUS_FTE
                                     27 	.globl _BUS_AA
                                     28 	.globl _BUS_INT
                                     29 	.globl _BUS_STOP
                                     30 	.globl _BUS_START
                                     31 	.globl _BUS_EN
                                     32 	.globl _BUS_BUSY
                                     33 	.globl _SPIF
                                     34 	.globl _WCOL
                                     35 	.globl _MODF
                                     36 	.globl _RXOVRN
                                     37 	.globl _TXBSY
                                     38 	.globl _SLVSEL
                                     39 	.globl _MSTEN
                                     40 	.globl _SPIEN
                                     41 	.globl _AD0EN
                                     42 	.globl _ADCEN
                                     43 	.globl _AD0TM
                                     44 	.globl _ADCTM
                                     45 	.globl _AD0INT
                                     46 	.globl _ADCINT
                                     47 	.globl _AD0BUSY
                                     48 	.globl _ADBUSY
                                     49 	.globl _AD0CM1
                                     50 	.globl _ADSTM1
                                     51 	.globl _AD0CM0
                                     52 	.globl _ADSTM0
                                     53 	.globl _AD0WINT
                                     54 	.globl _ADWINT
                                     55 	.globl _AD0LJST
                                     56 	.globl _ADLJST
                                     57 	.globl _CF
                                     58 	.globl _CR
                                     59 	.globl _CCF4
                                     60 	.globl _CCF3
                                     61 	.globl _CCF2
                                     62 	.globl _CCF1
                                     63 	.globl _CCF0
                                     64 	.globl _CY
                                     65 	.globl _AC
                                     66 	.globl _F0
                                     67 	.globl _RS1
                                     68 	.globl _RS0
                                     69 	.globl _OV
                                     70 	.globl _F1
                                     71 	.globl _P
                                     72 	.globl _TF2
                                     73 	.globl _EXF2
                                     74 	.globl _RCLK
                                     75 	.globl _TCLK
                                     76 	.globl _EXEN2
                                     77 	.globl _TR2
                                     78 	.globl _CT2
                                     79 	.globl _CPRL2
                                     80 	.globl _BUSY
                                     81 	.globl _ENSMB
                                     82 	.globl _STA
                                     83 	.globl _STO
                                     84 	.globl _SI
                                     85 	.globl _AA
                                     86 	.globl _SMBFTE
                                     87 	.globl _SMBTOE
                                     88 	.globl _PT2
                                     89 	.globl _PS
                                     90 	.globl _PS0
                                     91 	.globl _PT1
                                     92 	.globl _PX1
                                     93 	.globl _PT0
                                     94 	.globl _PX0
                                     95 	.globl _P3_7
                                     96 	.globl _P3_6
                                     97 	.globl _P3_5
                                     98 	.globl _P3_4
                                     99 	.globl _P3_3
                                    100 	.globl _P3_2
                                    101 	.globl _P3_1
                                    102 	.globl _P3_0
                                    103 	.globl _EA
                                    104 	.globl _ET2
                                    105 	.globl _ES
                                    106 	.globl _ES0
                                    107 	.globl _ET1
                                    108 	.globl _EX1
                                    109 	.globl _ET0
                                    110 	.globl _EX0
                                    111 	.globl _P2_7
                                    112 	.globl _P2_6
                                    113 	.globl _P2_5
                                    114 	.globl _P2_4
                                    115 	.globl _P2_3
                                    116 	.globl _P2_2
                                    117 	.globl _P2_1
                                    118 	.globl _P2_0
                                    119 	.globl _S0MODE
                                    120 	.globl _SM00
                                    121 	.globl _SM0
                                    122 	.globl _SM10
                                    123 	.globl _SM1
                                    124 	.globl _MCE0
                                    125 	.globl _SM20
                                    126 	.globl _SM2
                                    127 	.globl _REN0
                                    128 	.globl _REN
                                    129 	.globl _TB80
                                    130 	.globl _TB8
                                    131 	.globl _RB80
                                    132 	.globl _RB8
                                    133 	.globl _TI0
                                    134 	.globl _TI
                                    135 	.globl _RI0
                                    136 	.globl _RI
                                    137 	.globl _P1_7
                                    138 	.globl _P1_6
                                    139 	.globl _P1_5
                                    140 	.globl _P1_4
                                    141 	.globl _P1_3
                                    142 	.globl _P1_2
                                    143 	.globl _P1_1
                                    144 	.globl _P1_0
                                    145 	.globl _TF1
                                    146 	.globl _TR1
                                    147 	.globl _TF0
                                    148 	.globl _TR0
                                    149 	.globl _IE1
                                    150 	.globl _IT1
                                    151 	.globl _IE0
                                    152 	.globl _IT0
                                    153 	.globl _P0_7
                                    154 	.globl _P0_6
                                    155 	.globl _P0_5
                                    156 	.globl _P0_4
                                    157 	.globl _P0_3
                                    158 	.globl _P0_2
                                    159 	.globl _P0_1
                                    160 	.globl _P0_0
                                    161 	.globl _PCA0CP4
                                    162 	.globl _PCA0CP3
                                    163 	.globl _PCA0CP2
                                    164 	.globl _PCA0CP1
                                    165 	.globl _PCA0CP0
                                    166 	.globl _PCA0
                                    167 	.globl _DAC1
                                    168 	.globl _DAC0
                                    169 	.globl _ADC0LT
                                    170 	.globl _ADC0GT
                                    171 	.globl _ADC0
                                    172 	.globl _RCAP4
                                    173 	.globl _TMR4
                                    174 	.globl _TMR3RL
                                    175 	.globl _TMR3
                                    176 	.globl _RCAP2
                                    177 	.globl _TMR2
                                    178 	.globl _TMR1
                                    179 	.globl _TMR0
                                    180 	.globl _WDTCN
                                    181 	.globl _PCA0CPH4
                                    182 	.globl _PCA0CPH3
                                    183 	.globl _PCA0CPH2
                                    184 	.globl _PCA0CPH1
                                    185 	.globl _PCA0CPH0
                                    186 	.globl _PCA0H
                                    187 	.globl _SPI0CN
                                    188 	.globl _EIP2
                                    189 	.globl _EIP1
                                    190 	.globl _TH4
                                    191 	.globl _TL4
                                    192 	.globl _SADDR1
                                    193 	.globl _SBUF1
                                    194 	.globl _SCON1
                                    195 	.globl _B
                                    196 	.globl _RSTSRC
                                    197 	.globl _PCA0CPL4
                                    198 	.globl _PCA0CPL3
                                    199 	.globl _PCA0CPL2
                                    200 	.globl _PCA0CPL1
                                    201 	.globl _PCA0CPL0
                                    202 	.globl _PCA0L
                                    203 	.globl _ADC0CN
                                    204 	.globl _EIE2
                                    205 	.globl _EIE1
                                    206 	.globl _RCAP4H
                                    207 	.globl _RCAP4L
                                    208 	.globl _XBR2
                                    209 	.globl _XBR1
                                    210 	.globl _XBR0
                                    211 	.globl _ACC
                                    212 	.globl _PCA0CPM4
                                    213 	.globl _PCA0CPM3
                                    214 	.globl _PCA0CPM2
                                    215 	.globl _PCA0CPM1
                                    216 	.globl _PCA0CPM0
                                    217 	.globl _PCA0MD
                                    218 	.globl _PCA0CN
                                    219 	.globl _DAC1CN
                                    220 	.globl _DAC1H
                                    221 	.globl _DAC1L
                                    222 	.globl _DAC0CN
                                    223 	.globl _DAC0H
                                    224 	.globl _DAC0L
                                    225 	.globl _REF0CN
                                    226 	.globl _PSW
                                    227 	.globl _SMB0CR
                                    228 	.globl _TH2
                                    229 	.globl _TL2
                                    230 	.globl _RCAP2H
                                    231 	.globl _RCAP2L
                                    232 	.globl _T4CON
                                    233 	.globl _T2CON
                                    234 	.globl _ADC0LTH
                                    235 	.globl _ADC0LTL
                                    236 	.globl _ADC0GTH
                                    237 	.globl _ADC0GTL
                                    238 	.globl _SMB0ADR
                                    239 	.globl _SMB0DAT
                                    240 	.globl _SMB0STA
                                    241 	.globl _SMB0CN
                                    242 	.globl _ADC0H
                                    243 	.globl _ADC0L
                                    244 	.globl _P1MDIN
                                    245 	.globl _ADC0CF
                                    246 	.globl _AMX0SL
                                    247 	.globl _AMX0CF
                                    248 	.globl _SADEN0
                                    249 	.globl _IP
                                    250 	.globl _FLACL
                                    251 	.globl _FLSCL
                                    252 	.globl _P74OUT
                                    253 	.globl _OSCICN
                                    254 	.globl _OSCXCN
                                    255 	.globl _P3
                                    256 	.globl __XPAGE
                                    257 	.globl _EMI0CN
                                    258 	.globl _SADEN1
                                    259 	.globl _P3IF
                                    260 	.globl _AMX1SL
                                    261 	.globl _ADC1CF
                                    262 	.globl _ADC1CN
                                    263 	.globl _SADDR0
                                    264 	.globl _IE
                                    265 	.globl _P3MDOUT
                                    266 	.globl _PRT3CF
                                    267 	.globl _P2MDOUT
                                    268 	.globl _PRT2CF
                                    269 	.globl _P1MDOUT
                                    270 	.globl _PRT1CF
                                    271 	.globl _P0MDOUT
                                    272 	.globl _PRT0CF
                                    273 	.globl _EMI0CF
                                    274 	.globl _EMI0TC
                                    275 	.globl _P2
                                    276 	.globl _CPT1CN
                                    277 	.globl _CPT0CN
                                    278 	.globl _SPI0CKR
                                    279 	.globl _ADC1
                                    280 	.globl _SPI0DAT
                                    281 	.globl _SPI0CFG
                                    282 	.globl _SBUF0
                                    283 	.globl _SBUF
                                    284 	.globl _SCON0
                                    285 	.globl _SCON
                                    286 	.globl _P7
                                    287 	.globl _TMR3H
                                    288 	.globl _TMR3L
                                    289 	.globl _TMR3RLH
                                    290 	.globl _TMR3RLL
                                    291 	.globl _TMR3CN
                                    292 	.globl _P1
                                    293 	.globl _PSCTL
                                    294 	.globl _CKCON
                                    295 	.globl _TH1
                                    296 	.globl _TH0
                                    297 	.globl _TL1
                                    298 	.globl _TL0
                                    299 	.globl _TMOD
                                    300 	.globl _TCON
                                    301 	.globl _PCON
                                    302 	.globl _P6
                                    303 	.globl _P5
                                    304 	.globl _P4
                                    305 	.globl _DPH
                                    306 	.globl _DPL
                                    307 	.globl _SP
                                    308 	.globl _P0
                                    309 	.globl _drive_gain
                                    310 	.globl _steer_gain
                                    311 	.globl _gy_adj
                                    312 	.globl _gx_adj
                                    313 	.globl _gy
                                    314 	.globl _gx
                                    315 	.globl _print_delay
                                    316 	.globl _voltage
                                    317 	.globl _AD_Result
                                    318 	.globl _STEER_PW
                                    319 	.globl _DRIVE_PW
                                    320 	.globl _new_accel
                                    321 	.globl _delay
                                    322 	.globl _a_count
                                    323 	.globl _nCounts
                                    324 	.globl _Counts
                                    325 	.globl _avg_gy
                                    326 	.globl _avg_gx
                                    327 	.globl _i2c_read_data_PARM_4
                                    328 	.globl _i2c_read_data_PARM_3
                                    329 	.globl _i2c_read_data_PARM_2
                                    330 	.globl _i2c_write_data_PARM_4
                                    331 	.globl _i2c_write_data_PARM_3
                                    332 	.globl _i2c_write_data_PARM_2
                                    333 	.globl _putchar
                                    334 	.globl _getchar
                                    335 	.globl _lcd_print
                                    336 	.globl _lcd_clear
                                    337 	.globl _kpd_input
                                    338 	.globl _delay_time
                                    339 	.globl _i2c_start
                                    340 	.globl _i2c_write
                                    341 	.globl _i2c_write_and_stop
                                    342 	.globl _i2c_read
                                    343 	.globl _i2c_read_and_stop
                                    344 	.globl _i2c_write_data
                                    345 	.globl _i2c_read_data
                                    346 	.globl _Accel_Init
                                    347 	.globl _Port_Init
                                    348 	.globl _Interrupt_Init
                                    349 	.globl _PCA_Init
                                    350 	.globl _SMB0_Init
                                    351 	.globl _PCA_ISR
                                    352 	.globl _ADC_Init
                                    353 	.globl _read_AD_input
                                    354 	.globl _Pick_Steering_Gain
                                    355 	.globl _set_PW
                                    356 	.globl _accelerometer_adjustment
                                    357 	.globl _read_accel
                                    358 ;--------------------------------------------------------
                                    359 ; special function registers
                                    360 ;--------------------------------------------------------
                                    361 	.area RSEG    (ABS,DATA)
      000000                        362 	.org 0x0000
                           000080   363 G$P0$0$0 == 0x0080
                           000080   364 _P0	=	0x0080
                           000081   365 G$SP$0$0 == 0x0081
                           000081   366 _SP	=	0x0081
                           000082   367 G$DPL$0$0 == 0x0082
                           000082   368 _DPL	=	0x0082
                           000083   369 G$DPH$0$0 == 0x0083
                           000083   370 _DPH	=	0x0083
                           000084   371 G$P4$0$0 == 0x0084
                           000084   372 _P4	=	0x0084
                           000085   373 G$P5$0$0 == 0x0085
                           000085   374 _P5	=	0x0085
                           000086   375 G$P6$0$0 == 0x0086
                           000086   376 _P6	=	0x0086
                           000087   377 G$PCON$0$0 == 0x0087
                           000087   378 _PCON	=	0x0087
                           000088   379 G$TCON$0$0 == 0x0088
                           000088   380 _TCON	=	0x0088
                           000089   381 G$TMOD$0$0 == 0x0089
                           000089   382 _TMOD	=	0x0089
                           00008A   383 G$TL0$0$0 == 0x008a
                           00008A   384 _TL0	=	0x008a
                           00008B   385 G$TL1$0$0 == 0x008b
                           00008B   386 _TL1	=	0x008b
                           00008C   387 G$TH0$0$0 == 0x008c
                           00008C   388 _TH0	=	0x008c
                           00008D   389 G$TH1$0$0 == 0x008d
                           00008D   390 _TH1	=	0x008d
                           00008E   391 G$CKCON$0$0 == 0x008e
                           00008E   392 _CKCON	=	0x008e
                           00008F   393 G$PSCTL$0$0 == 0x008f
                           00008F   394 _PSCTL	=	0x008f
                           000090   395 G$P1$0$0 == 0x0090
                           000090   396 _P1	=	0x0090
                           000091   397 G$TMR3CN$0$0 == 0x0091
                           000091   398 _TMR3CN	=	0x0091
                           000092   399 G$TMR3RLL$0$0 == 0x0092
                           000092   400 _TMR3RLL	=	0x0092
                           000093   401 G$TMR3RLH$0$0 == 0x0093
                           000093   402 _TMR3RLH	=	0x0093
                           000094   403 G$TMR3L$0$0 == 0x0094
                           000094   404 _TMR3L	=	0x0094
                           000095   405 G$TMR3H$0$0 == 0x0095
                           000095   406 _TMR3H	=	0x0095
                           000096   407 G$P7$0$0 == 0x0096
                           000096   408 _P7	=	0x0096
                           000098   409 G$SCON$0$0 == 0x0098
                           000098   410 _SCON	=	0x0098
                           000098   411 G$SCON0$0$0 == 0x0098
                           000098   412 _SCON0	=	0x0098
                           000099   413 G$SBUF$0$0 == 0x0099
                           000099   414 _SBUF	=	0x0099
                           000099   415 G$SBUF0$0$0 == 0x0099
                           000099   416 _SBUF0	=	0x0099
                           00009A   417 G$SPI0CFG$0$0 == 0x009a
                           00009A   418 _SPI0CFG	=	0x009a
                           00009B   419 G$SPI0DAT$0$0 == 0x009b
                           00009B   420 _SPI0DAT	=	0x009b
                           00009C   421 G$ADC1$0$0 == 0x009c
                           00009C   422 _ADC1	=	0x009c
                           00009D   423 G$SPI0CKR$0$0 == 0x009d
                           00009D   424 _SPI0CKR	=	0x009d
                           00009E   425 G$CPT0CN$0$0 == 0x009e
                           00009E   426 _CPT0CN	=	0x009e
                           00009F   427 G$CPT1CN$0$0 == 0x009f
                           00009F   428 _CPT1CN	=	0x009f
                           0000A0   429 G$P2$0$0 == 0x00a0
                           0000A0   430 _P2	=	0x00a0
                           0000A1   431 G$EMI0TC$0$0 == 0x00a1
                           0000A1   432 _EMI0TC	=	0x00a1
                           0000A3   433 G$EMI0CF$0$0 == 0x00a3
                           0000A3   434 _EMI0CF	=	0x00a3
                           0000A4   435 G$PRT0CF$0$0 == 0x00a4
                           0000A4   436 _PRT0CF	=	0x00a4
                           0000A4   437 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   438 _P0MDOUT	=	0x00a4
                           0000A5   439 G$PRT1CF$0$0 == 0x00a5
                           0000A5   440 _PRT1CF	=	0x00a5
                           0000A5   441 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   442 _P1MDOUT	=	0x00a5
                           0000A6   443 G$PRT2CF$0$0 == 0x00a6
                           0000A6   444 _PRT2CF	=	0x00a6
                           0000A6   445 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   446 _P2MDOUT	=	0x00a6
                           0000A7   447 G$PRT3CF$0$0 == 0x00a7
                           0000A7   448 _PRT3CF	=	0x00a7
                           0000A7   449 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   450 _P3MDOUT	=	0x00a7
                           0000A8   451 G$IE$0$0 == 0x00a8
                           0000A8   452 _IE	=	0x00a8
                           0000A9   453 G$SADDR0$0$0 == 0x00a9
                           0000A9   454 _SADDR0	=	0x00a9
                           0000AA   455 G$ADC1CN$0$0 == 0x00aa
                           0000AA   456 _ADC1CN	=	0x00aa
                           0000AB   457 G$ADC1CF$0$0 == 0x00ab
                           0000AB   458 _ADC1CF	=	0x00ab
                           0000AC   459 G$AMX1SL$0$0 == 0x00ac
                           0000AC   460 _AMX1SL	=	0x00ac
                           0000AD   461 G$P3IF$0$0 == 0x00ad
                           0000AD   462 _P3IF	=	0x00ad
                           0000AE   463 G$SADEN1$0$0 == 0x00ae
                           0000AE   464 _SADEN1	=	0x00ae
                           0000AF   465 G$EMI0CN$0$0 == 0x00af
                           0000AF   466 _EMI0CN	=	0x00af
                           0000AF   467 G$_XPAGE$0$0 == 0x00af
                           0000AF   468 __XPAGE	=	0x00af
                           0000B0   469 G$P3$0$0 == 0x00b0
                           0000B0   470 _P3	=	0x00b0
                           0000B1   471 G$OSCXCN$0$0 == 0x00b1
                           0000B1   472 _OSCXCN	=	0x00b1
                           0000B2   473 G$OSCICN$0$0 == 0x00b2
                           0000B2   474 _OSCICN	=	0x00b2
                           0000B5   475 G$P74OUT$0$0 == 0x00b5
                           0000B5   476 _P74OUT	=	0x00b5
                           0000B6   477 G$FLSCL$0$0 == 0x00b6
                           0000B6   478 _FLSCL	=	0x00b6
                           0000B7   479 G$FLACL$0$0 == 0x00b7
                           0000B7   480 _FLACL	=	0x00b7
                           0000B8   481 G$IP$0$0 == 0x00b8
                           0000B8   482 _IP	=	0x00b8
                           0000B9   483 G$SADEN0$0$0 == 0x00b9
                           0000B9   484 _SADEN0	=	0x00b9
                           0000BA   485 G$AMX0CF$0$0 == 0x00ba
                           0000BA   486 _AMX0CF	=	0x00ba
                           0000BB   487 G$AMX0SL$0$0 == 0x00bb
                           0000BB   488 _AMX0SL	=	0x00bb
                           0000BC   489 G$ADC0CF$0$0 == 0x00bc
                           0000BC   490 _ADC0CF	=	0x00bc
                           0000BD   491 G$P1MDIN$0$0 == 0x00bd
                           0000BD   492 _P1MDIN	=	0x00bd
                           0000BE   493 G$ADC0L$0$0 == 0x00be
                           0000BE   494 _ADC0L	=	0x00be
                           0000BF   495 G$ADC0H$0$0 == 0x00bf
                           0000BF   496 _ADC0H	=	0x00bf
                           0000C0   497 G$SMB0CN$0$0 == 0x00c0
                           0000C0   498 _SMB0CN	=	0x00c0
                           0000C1   499 G$SMB0STA$0$0 == 0x00c1
                           0000C1   500 _SMB0STA	=	0x00c1
                           0000C2   501 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   502 _SMB0DAT	=	0x00c2
                           0000C3   503 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   504 _SMB0ADR	=	0x00c3
                           0000C4   505 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   506 _ADC0GTL	=	0x00c4
                           0000C5   507 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   508 _ADC0GTH	=	0x00c5
                           0000C6   509 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   510 _ADC0LTL	=	0x00c6
                           0000C7   511 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   512 _ADC0LTH	=	0x00c7
                           0000C8   513 G$T2CON$0$0 == 0x00c8
                           0000C8   514 _T2CON	=	0x00c8
                           0000C9   515 G$T4CON$0$0 == 0x00c9
                           0000C9   516 _T4CON	=	0x00c9
                           0000CA   517 G$RCAP2L$0$0 == 0x00ca
                           0000CA   518 _RCAP2L	=	0x00ca
                           0000CB   519 G$RCAP2H$0$0 == 0x00cb
                           0000CB   520 _RCAP2H	=	0x00cb
                           0000CC   521 G$TL2$0$0 == 0x00cc
                           0000CC   522 _TL2	=	0x00cc
                           0000CD   523 G$TH2$0$0 == 0x00cd
                           0000CD   524 _TH2	=	0x00cd
                           0000CF   525 G$SMB0CR$0$0 == 0x00cf
                           0000CF   526 _SMB0CR	=	0x00cf
                           0000D0   527 G$PSW$0$0 == 0x00d0
                           0000D0   528 _PSW	=	0x00d0
                           0000D1   529 G$REF0CN$0$0 == 0x00d1
                           0000D1   530 _REF0CN	=	0x00d1
                           0000D2   531 G$DAC0L$0$0 == 0x00d2
                           0000D2   532 _DAC0L	=	0x00d2
                           0000D3   533 G$DAC0H$0$0 == 0x00d3
                           0000D3   534 _DAC0H	=	0x00d3
                           0000D4   535 G$DAC0CN$0$0 == 0x00d4
                           0000D4   536 _DAC0CN	=	0x00d4
                           0000D5   537 G$DAC1L$0$0 == 0x00d5
                           0000D5   538 _DAC1L	=	0x00d5
                           0000D6   539 G$DAC1H$0$0 == 0x00d6
                           0000D6   540 _DAC1H	=	0x00d6
                           0000D7   541 G$DAC1CN$0$0 == 0x00d7
                           0000D7   542 _DAC1CN	=	0x00d7
                           0000D8   543 G$PCA0CN$0$0 == 0x00d8
                           0000D8   544 _PCA0CN	=	0x00d8
                           0000D9   545 G$PCA0MD$0$0 == 0x00d9
                           0000D9   546 _PCA0MD	=	0x00d9
                           0000DA   547 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   548 _PCA0CPM0	=	0x00da
                           0000DB   549 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   550 _PCA0CPM1	=	0x00db
                           0000DC   551 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   552 _PCA0CPM2	=	0x00dc
                           0000DD   553 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   554 _PCA0CPM3	=	0x00dd
                           0000DE   555 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   556 _PCA0CPM4	=	0x00de
                           0000E0   557 G$ACC$0$0 == 0x00e0
                           0000E0   558 _ACC	=	0x00e0
                           0000E1   559 G$XBR0$0$0 == 0x00e1
                           0000E1   560 _XBR0	=	0x00e1
                           0000E2   561 G$XBR1$0$0 == 0x00e2
                           0000E2   562 _XBR1	=	0x00e2
                           0000E3   563 G$XBR2$0$0 == 0x00e3
                           0000E3   564 _XBR2	=	0x00e3
                           0000E4   565 G$RCAP4L$0$0 == 0x00e4
                           0000E4   566 _RCAP4L	=	0x00e4
                           0000E5   567 G$RCAP4H$0$0 == 0x00e5
                           0000E5   568 _RCAP4H	=	0x00e5
                           0000E6   569 G$EIE1$0$0 == 0x00e6
                           0000E6   570 _EIE1	=	0x00e6
                           0000E7   571 G$EIE2$0$0 == 0x00e7
                           0000E7   572 _EIE2	=	0x00e7
                           0000E8   573 G$ADC0CN$0$0 == 0x00e8
                           0000E8   574 _ADC0CN	=	0x00e8
                           0000E9   575 G$PCA0L$0$0 == 0x00e9
                           0000E9   576 _PCA0L	=	0x00e9
                           0000EA   577 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   578 _PCA0CPL0	=	0x00ea
                           0000EB   579 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   580 _PCA0CPL1	=	0x00eb
                           0000EC   581 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   582 _PCA0CPL2	=	0x00ec
                           0000ED   583 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   584 _PCA0CPL3	=	0x00ed
                           0000EE   585 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   586 _PCA0CPL4	=	0x00ee
                           0000EF   587 G$RSTSRC$0$0 == 0x00ef
                           0000EF   588 _RSTSRC	=	0x00ef
                           0000F0   589 G$B$0$0 == 0x00f0
                           0000F0   590 _B	=	0x00f0
                           0000F1   591 G$SCON1$0$0 == 0x00f1
                           0000F1   592 _SCON1	=	0x00f1
                           0000F2   593 G$SBUF1$0$0 == 0x00f2
                           0000F2   594 _SBUF1	=	0x00f2
                           0000F3   595 G$SADDR1$0$0 == 0x00f3
                           0000F3   596 _SADDR1	=	0x00f3
                           0000F4   597 G$TL4$0$0 == 0x00f4
                           0000F4   598 _TL4	=	0x00f4
                           0000F5   599 G$TH4$0$0 == 0x00f5
                           0000F5   600 _TH4	=	0x00f5
                           0000F6   601 G$EIP1$0$0 == 0x00f6
                           0000F6   602 _EIP1	=	0x00f6
                           0000F7   603 G$EIP2$0$0 == 0x00f7
                           0000F7   604 _EIP2	=	0x00f7
                           0000F8   605 G$SPI0CN$0$0 == 0x00f8
                           0000F8   606 _SPI0CN	=	0x00f8
                           0000F9   607 G$PCA0H$0$0 == 0x00f9
                           0000F9   608 _PCA0H	=	0x00f9
                           0000FA   609 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   610 _PCA0CPH0	=	0x00fa
                           0000FB   611 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   612 _PCA0CPH1	=	0x00fb
                           0000FC   613 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   614 _PCA0CPH2	=	0x00fc
                           0000FD   615 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   616 _PCA0CPH3	=	0x00fd
                           0000FE   617 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   618 _PCA0CPH4	=	0x00fe
                           0000FF   619 G$WDTCN$0$0 == 0x00ff
                           0000FF   620 _WDTCN	=	0x00ff
                           008C8A   621 G$TMR0$0$0 == 0x8c8a
                           008C8A   622 _TMR0	=	0x8c8a
                           008D8B   623 G$TMR1$0$0 == 0x8d8b
                           008D8B   624 _TMR1	=	0x8d8b
                           00CDCC   625 G$TMR2$0$0 == 0xcdcc
                           00CDCC   626 _TMR2	=	0xcdcc
                           00CBCA   627 G$RCAP2$0$0 == 0xcbca
                           00CBCA   628 _RCAP2	=	0xcbca
                           009594   629 G$TMR3$0$0 == 0x9594
                           009594   630 _TMR3	=	0x9594
                           009392   631 G$TMR3RL$0$0 == 0x9392
                           009392   632 _TMR3RL	=	0x9392
                           00F5F4   633 G$TMR4$0$0 == 0xf5f4
                           00F5F4   634 _TMR4	=	0xf5f4
                           00E5E4   635 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   636 _RCAP4	=	0xe5e4
                           00BFBE   637 G$ADC0$0$0 == 0xbfbe
                           00BFBE   638 _ADC0	=	0xbfbe
                           00C5C4   639 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   640 _ADC0GT	=	0xc5c4
                           00C7C6   641 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   642 _ADC0LT	=	0xc7c6
                           00D3D2   643 G$DAC0$0$0 == 0xd3d2
                           00D3D2   644 _DAC0	=	0xd3d2
                           00D6D5   645 G$DAC1$0$0 == 0xd6d5
                           00D6D5   646 _DAC1	=	0xd6d5
                           00F9E9   647 G$PCA0$0$0 == 0xf9e9
                           00F9E9   648 _PCA0	=	0xf9e9
                           00FAEA   649 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   650 _PCA0CP0	=	0xfaea
                           00FBEB   651 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   652 _PCA0CP1	=	0xfbeb
                           00FCEC   653 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   654 _PCA0CP2	=	0xfcec
                           00FDED   655 G$PCA0CP3$0$0 == 0xfded
                           00FDED   656 _PCA0CP3	=	0xfded
                           00FEEE   657 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   658 _PCA0CP4	=	0xfeee
                                    659 ;--------------------------------------------------------
                                    660 ; special function bits
                                    661 ;--------------------------------------------------------
                                    662 	.area RSEG    (ABS,DATA)
      000000                        663 	.org 0x0000
                           000080   664 G$P0_0$0$0 == 0x0080
                           000080   665 _P0_0	=	0x0080
                           000081   666 G$P0_1$0$0 == 0x0081
                           000081   667 _P0_1	=	0x0081
                           000082   668 G$P0_2$0$0 == 0x0082
                           000082   669 _P0_2	=	0x0082
                           000083   670 G$P0_3$0$0 == 0x0083
                           000083   671 _P0_3	=	0x0083
                           000084   672 G$P0_4$0$0 == 0x0084
                           000084   673 _P0_4	=	0x0084
                           000085   674 G$P0_5$0$0 == 0x0085
                           000085   675 _P0_5	=	0x0085
                           000086   676 G$P0_6$0$0 == 0x0086
                           000086   677 _P0_6	=	0x0086
                           000087   678 G$P0_7$0$0 == 0x0087
                           000087   679 _P0_7	=	0x0087
                           000088   680 G$IT0$0$0 == 0x0088
                           000088   681 _IT0	=	0x0088
                           000089   682 G$IE0$0$0 == 0x0089
                           000089   683 _IE0	=	0x0089
                           00008A   684 G$IT1$0$0 == 0x008a
                           00008A   685 _IT1	=	0x008a
                           00008B   686 G$IE1$0$0 == 0x008b
                           00008B   687 _IE1	=	0x008b
                           00008C   688 G$TR0$0$0 == 0x008c
                           00008C   689 _TR0	=	0x008c
                           00008D   690 G$TF0$0$0 == 0x008d
                           00008D   691 _TF0	=	0x008d
                           00008E   692 G$TR1$0$0 == 0x008e
                           00008E   693 _TR1	=	0x008e
                           00008F   694 G$TF1$0$0 == 0x008f
                           00008F   695 _TF1	=	0x008f
                           000090   696 G$P1_0$0$0 == 0x0090
                           000090   697 _P1_0	=	0x0090
                           000091   698 G$P1_1$0$0 == 0x0091
                           000091   699 _P1_1	=	0x0091
                           000092   700 G$P1_2$0$0 == 0x0092
                           000092   701 _P1_2	=	0x0092
                           000093   702 G$P1_3$0$0 == 0x0093
                           000093   703 _P1_3	=	0x0093
                           000094   704 G$P1_4$0$0 == 0x0094
                           000094   705 _P1_4	=	0x0094
                           000095   706 G$P1_5$0$0 == 0x0095
                           000095   707 _P1_5	=	0x0095
                           000096   708 G$P1_6$0$0 == 0x0096
                           000096   709 _P1_6	=	0x0096
                           000097   710 G$P1_7$0$0 == 0x0097
                           000097   711 _P1_7	=	0x0097
                           000098   712 G$RI$0$0 == 0x0098
                           000098   713 _RI	=	0x0098
                           000098   714 G$RI0$0$0 == 0x0098
                           000098   715 _RI0	=	0x0098
                           000099   716 G$TI$0$0 == 0x0099
                           000099   717 _TI	=	0x0099
                           000099   718 G$TI0$0$0 == 0x0099
                           000099   719 _TI0	=	0x0099
                           00009A   720 G$RB8$0$0 == 0x009a
                           00009A   721 _RB8	=	0x009a
                           00009A   722 G$RB80$0$0 == 0x009a
                           00009A   723 _RB80	=	0x009a
                           00009B   724 G$TB8$0$0 == 0x009b
                           00009B   725 _TB8	=	0x009b
                           00009B   726 G$TB80$0$0 == 0x009b
                           00009B   727 _TB80	=	0x009b
                           00009C   728 G$REN$0$0 == 0x009c
                           00009C   729 _REN	=	0x009c
                           00009C   730 G$REN0$0$0 == 0x009c
                           00009C   731 _REN0	=	0x009c
                           00009D   732 G$SM2$0$0 == 0x009d
                           00009D   733 _SM2	=	0x009d
                           00009D   734 G$SM20$0$0 == 0x009d
                           00009D   735 _SM20	=	0x009d
                           00009D   736 G$MCE0$0$0 == 0x009d
                           00009D   737 _MCE0	=	0x009d
                           00009E   738 G$SM1$0$0 == 0x009e
                           00009E   739 _SM1	=	0x009e
                           00009E   740 G$SM10$0$0 == 0x009e
                           00009E   741 _SM10	=	0x009e
                           00009F   742 G$SM0$0$0 == 0x009f
                           00009F   743 _SM0	=	0x009f
                           00009F   744 G$SM00$0$0 == 0x009f
                           00009F   745 _SM00	=	0x009f
                           00009F   746 G$S0MODE$0$0 == 0x009f
                           00009F   747 _S0MODE	=	0x009f
                           0000A0   748 G$P2_0$0$0 == 0x00a0
                           0000A0   749 _P2_0	=	0x00a0
                           0000A1   750 G$P2_1$0$0 == 0x00a1
                           0000A1   751 _P2_1	=	0x00a1
                           0000A2   752 G$P2_2$0$0 == 0x00a2
                           0000A2   753 _P2_2	=	0x00a2
                           0000A3   754 G$P2_3$0$0 == 0x00a3
                           0000A3   755 _P2_3	=	0x00a3
                           0000A4   756 G$P2_4$0$0 == 0x00a4
                           0000A4   757 _P2_4	=	0x00a4
                           0000A5   758 G$P2_5$0$0 == 0x00a5
                           0000A5   759 _P2_5	=	0x00a5
                           0000A6   760 G$P2_6$0$0 == 0x00a6
                           0000A6   761 _P2_6	=	0x00a6
                           0000A7   762 G$P2_7$0$0 == 0x00a7
                           0000A7   763 _P2_7	=	0x00a7
                           0000A8   764 G$EX0$0$0 == 0x00a8
                           0000A8   765 _EX0	=	0x00a8
                           0000A9   766 G$ET0$0$0 == 0x00a9
                           0000A9   767 _ET0	=	0x00a9
                           0000AA   768 G$EX1$0$0 == 0x00aa
                           0000AA   769 _EX1	=	0x00aa
                           0000AB   770 G$ET1$0$0 == 0x00ab
                           0000AB   771 _ET1	=	0x00ab
                           0000AC   772 G$ES0$0$0 == 0x00ac
                           0000AC   773 _ES0	=	0x00ac
                           0000AC   774 G$ES$0$0 == 0x00ac
                           0000AC   775 _ES	=	0x00ac
                           0000AD   776 G$ET2$0$0 == 0x00ad
                           0000AD   777 _ET2	=	0x00ad
                           0000AF   778 G$EA$0$0 == 0x00af
                           0000AF   779 _EA	=	0x00af
                           0000B0   780 G$P3_0$0$0 == 0x00b0
                           0000B0   781 _P3_0	=	0x00b0
                           0000B1   782 G$P3_1$0$0 == 0x00b1
                           0000B1   783 _P3_1	=	0x00b1
                           0000B2   784 G$P3_2$0$0 == 0x00b2
                           0000B2   785 _P3_2	=	0x00b2
                           0000B3   786 G$P3_3$0$0 == 0x00b3
                           0000B3   787 _P3_3	=	0x00b3
                           0000B4   788 G$P3_4$0$0 == 0x00b4
                           0000B4   789 _P3_4	=	0x00b4
                           0000B5   790 G$P3_5$0$0 == 0x00b5
                           0000B5   791 _P3_5	=	0x00b5
                           0000B6   792 G$P3_6$0$0 == 0x00b6
                           0000B6   793 _P3_6	=	0x00b6
                           0000B7   794 G$P3_7$0$0 == 0x00b7
                           0000B7   795 _P3_7	=	0x00b7
                           0000B8   796 G$PX0$0$0 == 0x00b8
                           0000B8   797 _PX0	=	0x00b8
                           0000B9   798 G$PT0$0$0 == 0x00b9
                           0000B9   799 _PT0	=	0x00b9
                           0000BA   800 G$PX1$0$0 == 0x00ba
                           0000BA   801 _PX1	=	0x00ba
                           0000BB   802 G$PT1$0$0 == 0x00bb
                           0000BB   803 _PT1	=	0x00bb
                           0000BC   804 G$PS0$0$0 == 0x00bc
                           0000BC   805 _PS0	=	0x00bc
                           0000BC   806 G$PS$0$0 == 0x00bc
                           0000BC   807 _PS	=	0x00bc
                           0000BD   808 G$PT2$0$0 == 0x00bd
                           0000BD   809 _PT2	=	0x00bd
                           0000C0   810 G$SMBTOE$0$0 == 0x00c0
                           0000C0   811 _SMBTOE	=	0x00c0
                           0000C1   812 G$SMBFTE$0$0 == 0x00c1
                           0000C1   813 _SMBFTE	=	0x00c1
                           0000C2   814 G$AA$0$0 == 0x00c2
                           0000C2   815 _AA	=	0x00c2
                           0000C3   816 G$SI$0$0 == 0x00c3
                           0000C3   817 _SI	=	0x00c3
                           0000C4   818 G$STO$0$0 == 0x00c4
                           0000C4   819 _STO	=	0x00c4
                           0000C5   820 G$STA$0$0 == 0x00c5
                           0000C5   821 _STA	=	0x00c5
                           0000C6   822 G$ENSMB$0$0 == 0x00c6
                           0000C6   823 _ENSMB	=	0x00c6
                           0000C7   824 G$BUSY$0$0 == 0x00c7
                           0000C7   825 _BUSY	=	0x00c7
                           0000C8   826 G$CPRL2$0$0 == 0x00c8
                           0000C8   827 _CPRL2	=	0x00c8
                           0000C9   828 G$CT2$0$0 == 0x00c9
                           0000C9   829 _CT2	=	0x00c9
                           0000CA   830 G$TR2$0$0 == 0x00ca
                           0000CA   831 _TR2	=	0x00ca
                           0000CB   832 G$EXEN2$0$0 == 0x00cb
                           0000CB   833 _EXEN2	=	0x00cb
                           0000CC   834 G$TCLK$0$0 == 0x00cc
                           0000CC   835 _TCLK	=	0x00cc
                           0000CD   836 G$RCLK$0$0 == 0x00cd
                           0000CD   837 _RCLK	=	0x00cd
                           0000CE   838 G$EXF2$0$0 == 0x00ce
                           0000CE   839 _EXF2	=	0x00ce
                           0000CF   840 G$TF2$0$0 == 0x00cf
                           0000CF   841 _TF2	=	0x00cf
                           0000D0   842 G$P$0$0 == 0x00d0
                           0000D0   843 _P	=	0x00d0
                           0000D1   844 G$F1$0$0 == 0x00d1
                           0000D1   845 _F1	=	0x00d1
                           0000D2   846 G$OV$0$0 == 0x00d2
                           0000D2   847 _OV	=	0x00d2
                           0000D3   848 G$RS0$0$0 == 0x00d3
                           0000D3   849 _RS0	=	0x00d3
                           0000D4   850 G$RS1$0$0 == 0x00d4
                           0000D4   851 _RS1	=	0x00d4
                           0000D5   852 G$F0$0$0 == 0x00d5
                           0000D5   853 _F0	=	0x00d5
                           0000D6   854 G$AC$0$0 == 0x00d6
                           0000D6   855 _AC	=	0x00d6
                           0000D7   856 G$CY$0$0 == 0x00d7
                           0000D7   857 _CY	=	0x00d7
                           0000D8   858 G$CCF0$0$0 == 0x00d8
                           0000D8   859 _CCF0	=	0x00d8
                           0000D9   860 G$CCF1$0$0 == 0x00d9
                           0000D9   861 _CCF1	=	0x00d9
                           0000DA   862 G$CCF2$0$0 == 0x00da
                           0000DA   863 _CCF2	=	0x00da
                           0000DB   864 G$CCF3$0$0 == 0x00db
                           0000DB   865 _CCF3	=	0x00db
                           0000DC   866 G$CCF4$0$0 == 0x00dc
                           0000DC   867 _CCF4	=	0x00dc
                           0000DE   868 G$CR$0$0 == 0x00de
                           0000DE   869 _CR	=	0x00de
                           0000DF   870 G$CF$0$0 == 0x00df
                           0000DF   871 _CF	=	0x00df
                           0000E8   872 G$ADLJST$0$0 == 0x00e8
                           0000E8   873 _ADLJST	=	0x00e8
                           0000E8   874 G$AD0LJST$0$0 == 0x00e8
                           0000E8   875 _AD0LJST	=	0x00e8
                           0000E9   876 G$ADWINT$0$0 == 0x00e9
                           0000E9   877 _ADWINT	=	0x00e9
                           0000E9   878 G$AD0WINT$0$0 == 0x00e9
                           0000E9   879 _AD0WINT	=	0x00e9
                           0000EA   880 G$ADSTM0$0$0 == 0x00ea
                           0000EA   881 _ADSTM0	=	0x00ea
                           0000EA   882 G$AD0CM0$0$0 == 0x00ea
                           0000EA   883 _AD0CM0	=	0x00ea
                           0000EB   884 G$ADSTM1$0$0 == 0x00eb
                           0000EB   885 _ADSTM1	=	0x00eb
                           0000EB   886 G$AD0CM1$0$0 == 0x00eb
                           0000EB   887 _AD0CM1	=	0x00eb
                           0000EC   888 G$ADBUSY$0$0 == 0x00ec
                           0000EC   889 _ADBUSY	=	0x00ec
                           0000EC   890 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   891 _AD0BUSY	=	0x00ec
                           0000ED   892 G$ADCINT$0$0 == 0x00ed
                           0000ED   893 _ADCINT	=	0x00ed
                           0000ED   894 G$AD0INT$0$0 == 0x00ed
                           0000ED   895 _AD0INT	=	0x00ed
                           0000EE   896 G$ADCTM$0$0 == 0x00ee
                           0000EE   897 _ADCTM	=	0x00ee
                           0000EE   898 G$AD0TM$0$0 == 0x00ee
                           0000EE   899 _AD0TM	=	0x00ee
                           0000EF   900 G$ADCEN$0$0 == 0x00ef
                           0000EF   901 _ADCEN	=	0x00ef
                           0000EF   902 G$AD0EN$0$0 == 0x00ef
                           0000EF   903 _AD0EN	=	0x00ef
                           0000F8   904 G$SPIEN$0$0 == 0x00f8
                           0000F8   905 _SPIEN	=	0x00f8
                           0000F9   906 G$MSTEN$0$0 == 0x00f9
                           0000F9   907 _MSTEN	=	0x00f9
                           0000FA   908 G$SLVSEL$0$0 == 0x00fa
                           0000FA   909 _SLVSEL	=	0x00fa
                           0000FB   910 G$TXBSY$0$0 == 0x00fb
                           0000FB   911 _TXBSY	=	0x00fb
                           0000FC   912 G$RXOVRN$0$0 == 0x00fc
                           0000FC   913 _RXOVRN	=	0x00fc
                           0000FD   914 G$MODF$0$0 == 0x00fd
                           0000FD   915 _MODF	=	0x00fd
                           0000FE   916 G$WCOL$0$0 == 0x00fe
                           0000FE   917 _WCOL	=	0x00fe
                           0000FF   918 G$SPIF$0$0 == 0x00ff
                           0000FF   919 _SPIF	=	0x00ff
                           0000C7   920 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   921 _BUS_BUSY	=	0x00c7
                           0000C6   922 G$BUS_EN$0$0 == 0x00c6
                           0000C6   923 _BUS_EN	=	0x00c6
                           0000C5   924 G$BUS_START$0$0 == 0x00c5
                           0000C5   925 _BUS_START	=	0x00c5
                           0000C4   926 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   927 _BUS_STOP	=	0x00c4
                           0000C3   928 G$BUS_INT$0$0 == 0x00c3
                           0000C3   929 _BUS_INT	=	0x00c3
                           0000C2   930 G$BUS_AA$0$0 == 0x00c2
                           0000C2   931 _BUS_AA	=	0x00c2
                           0000C1   932 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   933 _BUS_FTE	=	0x00c1
                           0000C0   934 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   935 _BUS_TOE	=	0x00c0
                           000083   936 G$BUS_SCL$0$0 == 0x0083
                           000083   937 _BUS_SCL	=	0x0083
                           0000B7   938 G$COMPASS_SWITCH$0$0 == 0x00b7
                           0000B7   939 _COMPASS_SWITCH	=	0x00b7
                           0000B6   940 G$RANGER_SWITCH$0$0 == 0x00b6
                           0000B6   941 _RANGER_SWITCH	=	0x00b6
                                    942 ;--------------------------------------------------------
                                    943 ; overlayable register banks
                                    944 ;--------------------------------------------------------
                                    945 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        946 	.ds 8
                                    947 ;--------------------------------------------------------
                                    948 ; internal ram data
                                    949 ;--------------------------------------------------------
                                    950 	.area DSEG    (DATA)
                           000000   951 LLab5.lcd_clear$NumBytes$1$77==.
      000000                        952 _lcd_clear_NumBytes_1_77:
      000000                        953 	.ds 1
                           000001   954 LLab5.lcd_clear$Cmd$1$77==.
      000001                        955 _lcd_clear_Cmd_1_77:
      000001                        956 	.ds 2
                           000003   957 LLab5.read_keypad$Data$1$78==.
      000003                        958 _read_keypad_Data_1_78:
      000003                        959 	.ds 2
                           000005   960 LLab5.i2c_write_data$start_reg$1$97==.
      000005                        961 _i2c_write_data_PARM_2:
      000005                        962 	.ds 1
                           000006   963 LLab5.i2c_write_data$buffer$1$97==.
      000006                        964 _i2c_write_data_PARM_3:
      000006                        965 	.ds 3
                           000009   966 LLab5.i2c_write_data$num_bytes$1$97==.
      000009                        967 _i2c_write_data_PARM_4:
      000009                        968 	.ds 1
                           00000A   969 LLab5.i2c_read_data$start_reg$1$99==.
      00000A                        970 _i2c_read_data_PARM_2:
      00000A                        971 	.ds 1
                           00000B   972 LLab5.i2c_read_data$buffer$1$99==.
      00000B                        973 _i2c_read_data_PARM_3:
      00000B                        974 	.ds 3
                           00000E   975 LLab5.i2c_read_data$num_bytes$1$99==.
      00000E                        976 _i2c_read_data_PARM_4:
      00000E                        977 	.ds 1
                           00000F   978 LLab5.Accel_Init$Data2$1$103==.
      00000F                        979 _Accel_Init_Data2_1_103:
      00000F                        980 	.ds 1
                           000010   981 G$avg_gx$0$0==.
      000010                        982 _avg_gx::
      000010                        983 	.ds 2
                           000012   984 G$avg_gy$0$0==.
      000012                        985 _avg_gy::
      000012                        986 	.ds 2
                           000014   987 G$Counts$0$0==.
      000014                        988 _Counts::
      000014                        989 	.ds 2
                           000016   990 G$nCounts$0$0==.
      000016                        991 _nCounts::
      000016                        992 	.ds 2
                           000018   993 G$a_count$0$0==.
      000018                        994 _a_count::
      000018                        995 	.ds 1
                           000019   996 G$delay$0$0==.
      000019                        997 _delay::
      000019                        998 	.ds 1
                           00001A   999 G$new_accel$0$0==.
      00001A                       1000 _new_accel::
      00001A                       1001 	.ds 1
                           00001B  1002 G$DRIVE_PW$0$0==.
      00001B                       1003 _DRIVE_PW::
      00001B                       1004 	.ds 2
                           00001D  1005 G$STEER_PW$0$0==.
      00001D                       1006 _STEER_PW::
      00001D                       1007 	.ds 2
                           00001F  1008 G$AD_Result$0$0==.
      00001F                       1009 _AD_Result::
      00001F                       1010 	.ds 1
                           000020  1011 G$voltage$0$0==.
      000020                       1012 _voltage::
      000020                       1013 	.ds 1
                           000021  1014 G$print_delay$0$0==.
      000021                       1015 _print_delay::
      000021                       1016 	.ds 1
                           000022  1017 G$gx$0$0==.
      000022                       1018 _gx::
      000022                       1019 	.ds 2
                           000024  1020 G$gy$0$0==.
      000024                       1021 _gy::
      000024                       1022 	.ds 2
                           000026  1023 G$gx_adj$0$0==.
      000026                       1024 _gx_adj::
      000026                       1025 	.ds 1
                           000027  1026 G$gy_adj$0$0==.
      000027                       1027 _gy_adj::
      000027                       1028 	.ds 1
                           000028  1029 G$steer_gain$0$0==.
      000028                       1030 _steer_gain::
      000028                       1031 	.ds 1
                           000029  1032 G$drive_gain$0$0==.
      000029                       1033 _drive_gain::
      000029                       1034 	.ds 1
                           00002A  1035 LLab5.status_reg_a$Data$1$152==.
      00002A                       1036 _status_reg_a_Data_1_152:
      00002A                       1037 	.ds 2
                           00002C  1038 LLab5.read_accel$Data$1$156==.
      00002C                       1039 _read_accel_Data_1_156:
      00002C                       1040 	.ds 4
                           000030  1041 LLab5.read_accel$addr$1$156==.
      000030                       1042 _read_accel_addr_1_156:
      000030                       1043 	.ds 1
                                   1044 ;--------------------------------------------------------
                                   1045 ; overlayable items in internal ram 
                                   1046 ;--------------------------------------------------------
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 	.area	OSEG    (OVR,DATA)
                                   1049 	.area	OSEG    (OVR,DATA)
                                   1050 	.area	OSEG    (OVR,DATA)
                                   1051 	.area	OSEG    (OVR,DATA)
                                   1052 	.area	OSEG    (OVR,DATA)
                                   1053 	.area	OSEG    (OVR,DATA)
                                   1054 	.area	OSEG    (OVR,DATA)
                                   1055 ;--------------------------------------------------------
                                   1056 ; Stack segment in internal ram 
                                   1057 ;--------------------------------------------------------
                                   1058 	.area	SSEG
      000000                       1059 __start__stack:
      000000                       1060 	.ds	1
                                   1061 
                                   1062 ;--------------------------------------------------------
                                   1063 ; indirectly addressable internal ram data
                                   1064 ;--------------------------------------------------------
                                   1065 	.area ISEG    (DATA)
                                   1066 ;--------------------------------------------------------
                                   1067 ; absolute internal ram data
                                   1068 ;--------------------------------------------------------
                                   1069 	.area IABS    (ABS,DATA)
                                   1070 	.area IABS    (ABS,DATA)
                                   1071 ;--------------------------------------------------------
                                   1072 ; bit data
                                   1073 ;--------------------------------------------------------
                                   1074 	.area BSEG    (BIT)
                                   1075 ;--------------------------------------------------------
                                   1076 ; paged external ram data
                                   1077 ;--------------------------------------------------------
                                   1078 	.area PSEG    (PAG,XDATA)
                                   1079 ;--------------------------------------------------------
                                   1080 ; external ram data
                                   1081 ;--------------------------------------------------------
                                   1082 	.area XSEG    (XDATA)
                           000000  1083 LLab5.lcd_print$text$1$73==.
      000000                       1084 _lcd_print_text_1_73:
      000000                       1085 	.ds 80
                                   1086 ;--------------------------------------------------------
                                   1087 ; absolute external ram data
                                   1088 ;--------------------------------------------------------
                                   1089 	.area XABS    (ABS,XDATA)
                                   1090 ;--------------------------------------------------------
                                   1091 ; external initialized ram data
                                   1092 ;--------------------------------------------------------
                                   1093 	.area XISEG   (XDATA)
                                   1094 	.area HOME    (CODE)
                                   1095 	.area GSINIT0 (CODE)
                                   1096 	.area GSINIT1 (CODE)
                                   1097 	.area GSINIT2 (CODE)
                                   1098 	.area GSINIT3 (CODE)
                                   1099 	.area GSINIT4 (CODE)
                                   1100 	.area GSINIT5 (CODE)
                                   1101 	.area GSINIT  (CODE)
                                   1102 	.area GSFINAL (CODE)
                                   1103 	.area CSEG    (CODE)
                                   1104 ;--------------------------------------------------------
                                   1105 ; interrupt vector 
                                   1106 ;--------------------------------------------------------
                                   1107 	.area HOME    (CODE)
      000000                       1108 __interrupt_vect:
      000000 02r00r00         [24] 1109 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1110 	reti
      000004                       1111 	.ds	7
      00000B 32               [24] 1112 	reti
      00000C                       1113 	.ds	7
      000013 32               [24] 1114 	reti
      000014                       1115 	.ds	7
      00001B 32               [24] 1116 	reti
      00001C                       1117 	.ds	7
      000023 32               [24] 1118 	reti
      000024                       1119 	.ds	7
      00002B 32               [24] 1120 	reti
      00002C                       1121 	.ds	7
      000033 32               [24] 1122 	reti
      000034                       1123 	.ds	7
      00003B 32               [24] 1124 	reti
      00003C                       1125 	.ds	7
      000043 32               [24] 1126 	reti
      000044                       1127 	.ds	7
      00004B 02r06r8A         [24] 1128 	ljmp	_PCA_ISR
                                   1129 ;--------------------------------------------------------
                                   1130 ; global & static initialisations
                                   1131 ;--------------------------------------------------------
                                   1132 	.area HOME    (CODE)
                                   1133 	.area GSINIT  (CODE)
                                   1134 	.area GSFINAL (CODE)
                                   1135 	.area GSINIT  (CODE)
                                   1136 	.globl __sdcc_gsinit_startup
                                   1137 	.globl __sdcc_program_startup
                                   1138 	.globl __start__stack
                                   1139 	.globl __mcs51_genXINIT
                                   1140 	.globl __mcs51_genXRAMCLEAR
                                   1141 	.globl __mcs51_genRAMCLEAR
                           000000  1142 	C$Lab5.c$37$1$156 ==.
                                   1143 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:37: unsigned int avg_gx = 0;
      000000 E4               [12] 1144 	clr	a
      000001 F5*10            [12] 1145 	mov	_avg_gx,a
      000003 F5*11            [12] 1146 	mov	(_avg_gx + 1),a
                           000005  1147 	C$Lab5.c$38$1$156 ==.
                                   1148 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:38: unsigned int avg_gy = 0;
      000005 F5*12            [12] 1149 	mov	_avg_gy,a
      000007 F5*13            [12] 1150 	mov	(_avg_gy + 1),a
                           000009  1151 	C$Lab5.c$40$1$156 ==.
                                   1152 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:40: unsigned char a_count = 0;
                                   1153 ;	1-genFromRTrack replaced	mov	_a_count,#0x00
      000009 F5*18            [12] 1154 	mov	_a_count,a
                           00000B  1155 	C$Lab5.c$41$1$156 ==.
                                   1156 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:41: unsigned char delay = 0;
                                   1157 ;	1-genFromRTrack replaced	mov	_delay,#0x00
      00000B F5*19            [12] 1158 	mov	_delay,a
                           00000D  1159 	C$Lab5.c$42$1$156 ==.
                                   1160 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:42: unsigned char new_accel = 0;
                                   1161 ;	1-genFromRTrack replaced	mov	_new_accel,#0x00
      00000D F5*1A            [12] 1162 	mov	_new_accel,a
                           00000F  1163 	C$Lab5.c$43$1$156 ==.
                                   1164 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:43: unsigned int DRIVE_PW = 2760;
      00000F 75*1B C8         [24] 1165 	mov	_DRIVE_PW,#0xC8
      000012 75*1C 0A         [24] 1166 	mov	(_DRIVE_PW + 1),#0x0A
                           000015  1167 	C$Lab5.c$44$1$156 ==.
                                   1168 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:44: unsigned int STEER_PW = 2760;
      000015 75*1D C8         [24] 1169 	mov	_STEER_PW,#0xC8
      000018 75*1E 0A         [24] 1170 	mov	(_STEER_PW + 1),#0x0A
                           00001B  1171 	C$Lab5.c$47$1$156 ==.
                                   1172 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:47: unsigned char AD_Result = 0;
                                   1173 ;	1-genFromRTrack replaced	mov	_AD_Result,#0x00
      00001B F5*1F            [12] 1174 	mov	_AD_Result,a
                           00001D  1175 	C$Lab5.c$48$1$156 ==.
                                   1176 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:48: unsigned char voltage = 0;
                                   1177 ;	1-genFromRTrack replaced	mov	_voltage,#0x00
      00001D F5*20            [12] 1178 	mov	_voltage,a
                           00001F  1179 	C$Lab5.c$50$1$156 ==.
                                   1180 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:50: unsigned char print_delay = 0;
                                   1181 ;	1-genFromRTrack replaced	mov	_print_delay,#0x00
      00001F F5*21            [12] 1182 	mov	_print_delay,a
                           000021  1183 	C$Lab5.c$51$1$156 ==.
                                   1184 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:51: signed int gx = 0;
      000021 F5*22            [12] 1185 	mov	_gx,a
      000023 F5*23            [12] 1186 	mov	(_gx + 1),a
                           000025  1187 	C$Lab5.c$52$1$156 ==.
                                   1188 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:52: signed int gy = 0;
      000025 F5*24            [12] 1189 	mov	_gy,a
      000027 F5*25            [12] 1190 	mov	(_gy + 1),a
                           000029  1191 	C$Lab5.c$53$1$156 ==.
                                   1192 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:53: signed char gx_adj = 0;
                                   1193 ;	1-genFromRTrack replaced	mov	_gx_adj,#0x00
      000029 F5*26            [12] 1194 	mov	_gx_adj,a
                           00002B  1195 	C$Lab5.c$54$1$156 ==.
                                   1196 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:54: signed char gy_adj = 0;
                                   1197 ;	1-genFromRTrack replaced	mov	_gy_adj,#0x00
      00002B F5*27            [12] 1198 	mov	_gy_adj,a
                           00002D  1199 	C$Lab5.c$55$1$156 ==.
                                   1200 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:55: unsigned char steer_gain = 0;
                                   1201 ;	1-genFromRTrack replaced	mov	_steer_gain,#0x00
      00002D F5*28            [12] 1202 	mov	_steer_gain,a
                           00002F  1203 	C$Lab5.c$56$1$156 ==.
                                   1204 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:56: unsigned char drive_gain = 0;
                                   1205 ;	1-genFromRTrack replaced	mov	_drive_gain,#0x00
      00002F F5*29            [12] 1206 	mov	_drive_gain,a
                                   1207 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1208 	ljmp	__sdcc_program_startup
                                   1209 ;--------------------------------------------------------
                                   1210 ; Home
                                   1211 ;--------------------------------------------------------
                                   1212 	.area HOME    (CODE)
                                   1213 	.area HOME    (CODE)
      00004E                       1214 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1215 	ljmp	_main
                                   1216 ;	return from main will return to caller
                                   1217 ;--------------------------------------------------------
                                   1218 ; code
                                   1219 ;--------------------------------------------------------
                                   1220 	.area CSEG    (CODE)
                                   1221 ;------------------------------------------------------------
                                   1222 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1223 ;------------------------------------------------------------
                                   1224 ;i                         Allocated to registers 
                                   1225 ;------------------------------------------------------------
                           000000  1226 	G$SYSCLK_Init$0$0 ==.
                           000000  1227 	C$c8051_SDCC.h$42$0$0 ==.
                                   1228 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1229 ;	-----------------------------------------
                                   1230 ;	 function SYSCLK_Init
                                   1231 ;	-----------------------------------------
      000000                       1232 _SYSCLK_Init:
                           000007  1233 	ar7 = 0x07
                           000006  1234 	ar6 = 0x06
                           000005  1235 	ar5 = 0x05
                           000004  1236 	ar4 = 0x04
                           000003  1237 	ar3 = 0x03
                           000002  1238 	ar2 = 0x02
                           000001  1239 	ar1 = 0x01
                           000000  1240 	ar0 = 0x00
                           000000  1241 	C$c8051_SDCC.h$46$1$31 ==.
                                   1242 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1243 	mov	_OSCXCN,#0x67
                           000003  1244 	C$c8051_SDCC.h$49$1$31 ==.
                                   1245 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1246 	mov	r6,#0x00
      000005 7F 01            [12] 1247 	mov	r7,#0x01
      000007                       1248 00107$:
      000007 1E               [12] 1249 	dec	r6
      000008 BE FF 01         [24] 1250 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1251 	dec	r7
      00000C                       1252 00121$:
      00000C EE               [12] 1253 	mov	a,r6
      00000D 4F               [12] 1254 	orl	a,r7
      00000E 70 F7            [24] 1255 	jnz	00107$
                           000010  1256 	C$c8051_SDCC.h$51$1$31 ==.
                                   1257 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1258 00102$:
      000010 E5 B1            [12] 1259 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1260 	jnb	acc.7,00102$
                           000015  1261 	C$c8051_SDCC.h$53$1$31 ==.
                                   1262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1263 	mov	_OSCICN,#0x88
                           000018  1264 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1265 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1266 	ret
                                   1267 ;------------------------------------------------------------
                                   1268 ;Allocation info for local variables in function 'UART0_Init'
                                   1269 ;------------------------------------------------------------
                           000019  1270 	G$UART0_Init$0$0 ==.
                           000019  1271 	C$c8051_SDCC.h$64$1$31 ==.
                                   1272 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1273 ;	-----------------------------------------
                                   1274 ;	 function UART0_Init
                                   1275 ;	-----------------------------------------
      000019                       1276 _UART0_Init:
                           000019  1277 	C$c8051_SDCC.h$66$1$33 ==.
                                   1278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1279 	mov	_SCON0,#0x50
                           00001C  1280 	C$c8051_SDCC.h$67$1$33 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1282 	mov	_TMOD,#0x20
                           00001F  1283 	C$c8051_SDCC.h$68$1$33 ==.
                                   1284 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1285 	mov	_TH1,#0xDC
                           000022  1286 	C$c8051_SDCC.h$69$1$33 ==.
                                   1287 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1288 	setb	_TR1
                           000024  1289 	C$c8051_SDCC.h$70$1$33 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1291 	orl	_CKCON,#0x10
                           000027  1292 	C$c8051_SDCC.h$71$1$33 ==.
                                   1293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1294 	orl	_PCON,#0x80
                           00002A  1295 	C$c8051_SDCC.h$73$1$33 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1297 	setb	_TI0
                           00002C  1298 	C$c8051_SDCC.h$74$1$33 ==.
                                   1299 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1300 	orl	_P0MDOUT,#0x01
                           00002F  1301 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1302 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1303 	ret
                                   1304 ;------------------------------------------------------------
                                   1305 ;Allocation info for local variables in function 'Sys_Init'
                                   1306 ;------------------------------------------------------------
                           000030  1307 	G$Sys_Init$0$0 ==.
                           000030  1308 	C$c8051_SDCC.h$83$1$33 ==.
                                   1309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1310 ;	-----------------------------------------
                                   1311 ;	 function Sys_Init
                                   1312 ;	-----------------------------------------
      000030                       1313 _Sys_Init:
                           000030  1314 	C$c8051_SDCC.h$85$1$35 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1316 	mov	_WDTCN,#0xDE
                           000033  1317 	C$c8051_SDCC.h$86$1$35 ==.
                                   1318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1319 	mov	_WDTCN,#0xAD
                           000036  1320 	C$c8051_SDCC.h$88$1$35 ==.
                                   1321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1322 	lcall	_SYSCLK_Init
                           000039  1323 	C$c8051_SDCC.h$89$1$35 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1325 	lcall	_UART0_Init
                           00003C  1326 	C$c8051_SDCC.h$91$1$35 ==.
                                   1327 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1328 	orl	_XBR0,#0x04
                           00003F  1329 	C$c8051_SDCC.h$92$1$35 ==.
                                   1330 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1331 	orl	_XBR2,#0x40
                           000042  1332 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1333 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1334 	ret
                                   1335 ;------------------------------------------------------------
                                   1336 ;Allocation info for local variables in function 'putchar'
                                   1337 ;------------------------------------------------------------
                                   1338 ;c                         Allocated to registers r7 
                                   1339 ;------------------------------------------------------------
                           000043  1340 	G$putchar$0$0 ==.
                           000043  1341 	C$c8051_SDCC.h$98$1$35 ==.
                                   1342 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1343 ;	-----------------------------------------
                                   1344 ;	 function putchar
                                   1345 ;	-----------------------------------------
      000043                       1346 _putchar:
      000043 AF 82            [24] 1347 	mov	r7,dpl
                           000045  1348 	C$c8051_SDCC.h$100$1$37 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1350 00101$:
                           000045  1351 	C$c8051_SDCC.h$101$1$37 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1353 	jbc	_TI0,00112$
      000048 80 FB            [24] 1354 	sjmp	00101$
      00004A                       1355 00112$:
                           00004A  1356 	C$c8051_SDCC.h$102$1$37 ==.
                                   1357 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1358 	mov	_SBUF0,r7
                           00004C  1359 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1360 	XG$putchar$0$0 ==.
      00004C 22               [24] 1361 	ret
                                   1362 ;------------------------------------------------------------
                                   1363 ;Allocation info for local variables in function 'getchar'
                                   1364 ;------------------------------------------------------------
                                   1365 ;c                         Allocated to registers 
                                   1366 ;------------------------------------------------------------
                           00004D  1367 	G$getchar$0$0 ==.
                           00004D  1368 	C$c8051_SDCC.h$108$1$37 ==.
                                   1369 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1370 ;	-----------------------------------------
                                   1371 ;	 function getchar
                                   1372 ;	-----------------------------------------
      00004D                       1373 _getchar:
                           00004D  1374 	C$c8051_SDCC.h$111$1$39 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1376 00101$:
                           00004D  1377 	C$c8051_SDCC.h$112$1$39 ==.
                                   1378 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1379 	jbc	_RI0,00112$
      000050 80 FB            [24] 1380 	sjmp	00101$
      000052                       1381 00112$:
                           000052  1382 	C$c8051_SDCC.h$113$1$39 ==.
                                   1383 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1384 	mov	dpl,_SBUF0
                           000055  1385 	C$c8051_SDCC.h$114$1$39 ==.
                                   1386 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1387 	lcall	_putchar
                           000058  1388 	C$c8051_SDCC.h$115$1$39 ==.
                                   1389 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1390 	mov	dpl,_SBUF0
                           00005B  1391 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1392 	XG$getchar$0$0 ==.
      00005B 22               [24] 1393 	ret
                                   1394 ;------------------------------------------------------------
                                   1395 ;Allocation info for local variables in function 'lcd_print'
                                   1396 ;------------------------------------------------------------
                                   1397 ;fmt                       Allocated to stack - _bp -5
                                   1398 ;len                       Allocated to registers r6 
                                   1399 ;i                         Allocated to registers 
                                   1400 ;ap                        Allocated to registers 
                                   1401 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1402 ;------------------------------------------------------------
                           00005C  1403 	G$lcd_print$0$0 ==.
                           00005C  1404 	C$i2c.h$81$1$39 ==.
                                   1405 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1406 ;	-----------------------------------------
                                   1407 ;	 function lcd_print
                                   1408 ;	-----------------------------------------
      00005C                       1409 _lcd_print:
      00005C C0*00            [24] 1410 	push	_bp
      00005E 85 81*00         [24] 1411 	mov	_bp,sp
                           000061  1412 	C$i2c.h$87$1$73 ==.
                                   1413 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1414 	mov	a,_bp
      000063 24 FB            [12] 1415 	add	a,#0xfb
      000065 F8               [12] 1416 	mov	r0,a
      000066 86 82            [24] 1417 	mov	dpl,@r0
      000068 08               [12] 1418 	inc	r0
      000069 86 83            [24] 1419 	mov	dph,@r0
      00006B 08               [12] 1420 	inc	r0
      00006C 86 F0            [24] 1421 	mov	b,@r0
      00006E 12r00r00         [24] 1422 	lcall	_strlen
      000071 E5 82            [12] 1423 	mov	a,dpl
      000073 85 83 F0         [24] 1424 	mov	b,dph
      000076 45 F0            [12] 1425 	orl	a,b
      000078 70 02            [24] 1426 	jnz	00102$
      00007A 80 62            [24] 1427 	sjmp	00109$
      00007C                       1428 00102$:
                           00007C  1429 	C$i2c.h$89$2$74 ==.
                                   1430 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1431 	mov	a,_bp
      00007E 24 FB            [12] 1432 	add	a,#0xFB
      000080 FF               [12] 1433 	mov	r7,a
      000081 8F*00            [24] 1434 	mov	_vsprintf_PARM_3,r7
                           000083  1435 	C$i2c.h$90$1$73 ==.
                                   1436 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1437 	mov	a,_bp
      000085 24 FB            [12] 1438 	add	a,#0xfb
      000087 F8               [12] 1439 	mov	r0,a
      000088 86*00            [24] 1440 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1441 	inc	r0
      00008B 86*01            [24] 1442 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1443 	inc	r0
      00008E 86*02            [24] 1444 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1445 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1446 	mov	b,#0x00
      000096 12r00r00         [24] 1447 	lcall	_vsprintf
                           000099  1448 	C$i2c.h$93$1$73 ==.
                                   1449 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1450 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1451 	mov	b,#0x00
      00009F 12r00r00         [24] 1452 	lcall	_strlen
      0000A2 AE 82            [24] 1453 	mov	r6,dpl
                           0000A4  1454 	C$i2c.h$94$1$73 ==.
                                   1455 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1456 	mov	r7,#0x00
      0000A6                       1457 00107$:
      0000A6 C3               [12] 1458 	clr	c
      0000A7 EF               [12] 1459 	mov	a,r7
      0000A8 9E               [12] 1460 	subb	a,r6
      0000A9 50 1F            [24] 1461 	jnc	00105$
                           0000AB  1462 	C$i2c.h$96$2$76 ==.
                                   1463 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1464 	mov	a,r7
      0000AC 24r00            [12] 1465 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1466 	mov	dpl,a
      0000B0 E4               [12] 1467 	clr	a
      0000B1 34s00            [12] 1468 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1469 	mov	dph,a
      0000B5 E0               [24] 1470 	movx	a,@dptr
      0000B6 FD               [12] 1471 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1472 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1473 	mov	a,r7
      0000BB 24r00            [12] 1474 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1475 	mov	dpl,a
      0000BF E4               [12] 1476 	clr	a
      0000C0 34s00            [12] 1477 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1478 	mov	dph,a
      0000C4 74 0D            [12] 1479 	mov	a,#0x0D
      0000C6 F0               [24] 1480 	movx	@dptr,a
      0000C7                       1481 00108$:
                           0000C7  1482 	C$i2c.h$94$1$73 ==.
                                   1483 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1484 	inc	r7
      0000C8 80 DC            [24] 1485 	sjmp	00107$
      0000CA                       1486 00105$:
                           0000CA  1487 	C$i2c.h$99$1$73 ==.
                                   1488 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1489 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1490 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1491 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1492 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1493 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1494 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1495 	lcall	_i2c_write_data
      0000DE                       1496 00109$:
      0000DE D0*00            [24] 1497 	pop	_bp
                           0000E0  1498 	C$i2c.h$100$1$73 ==.
                           0000E0  1499 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1500 	ret
                                   1501 ;------------------------------------------------------------
                                   1502 ;Allocation info for local variables in function 'lcd_clear'
                                   1503 ;------------------------------------------------------------
                                   1504 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1505 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1506 ;------------------------------------------------------------
                           0000E1  1507 	G$lcd_clear$0$0 ==.
                           0000E1  1508 	C$i2c.h$103$1$73 ==.
                                   1509 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1510 ;	-----------------------------------------
                                   1511 ;	 function lcd_clear
                                   1512 ;	-----------------------------------------
      0000E1                       1513 _lcd_clear:
                           0000E1  1514 	C$i2c.h$105$1$73 ==.
                                   1515 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1516 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1517 	C$i2c.h$107$1$77 ==.
                                   1518 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1519 00101$:
      0000E4 74 C0            [12] 1520 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1521 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1522 	jc	00103$
      0000EA 75*0Br00         [24] 1523 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1524 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1525 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1526 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1527 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1528 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1529 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1530 	sjmp	00101$
      000101                       1531 00103$:
                           000101  1532 	C$i2c.h$109$1$77 ==.
                                   1533 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1534 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1535 	C$i2c.h$110$1$77 ==.
                                   1536 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1537 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1538 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1539 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1540 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1541 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1542 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1543 	lcall	_i2c_write_data
                           000119  1544 	C$i2c.h$111$1$77 ==.
                           000119  1545 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1546 	ret
                                   1547 ;------------------------------------------------------------
                                   1548 ;Allocation info for local variables in function 'read_keypad'
                                   1549 ;------------------------------------------------------------
                                   1550 ;i                         Allocated to registers r7 
                                   1551 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1552 ;------------------------------------------------------------
                           00011A  1553 	G$read_keypad$0$0 ==.
                           00011A  1554 	C$i2c.h$114$1$77 ==.
                                   1555 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1556 ;	-----------------------------------------
                                   1557 ;	 function read_keypad
                                   1558 ;	-----------------------------------------
      00011A                       1559 _read_keypad:
                           00011A  1560 	C$i2c.h$118$1$78 ==.
                                   1561 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1562 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1563 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1564 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1565 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1566 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1567 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1568 	lcall	_i2c_read_data
                           00012F  1569 	C$i2c.h$119$1$78 ==.
                                   1570 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1571 	mov	a,#0xFF
      000131 B5*03 05         [24] 1572 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1573 	mov	dpl,#0x00
      000137 80 5F            [24] 1574 	sjmp	00116$
      000139                       1575 00102$:
                           000139  1576 	C$i2c.h$121$1$78 ==.
                                   1577 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1578 	mov	r7,#0x00
      00013B 8F 06            [24] 1579 	mov	ar6,r7
      00013D                       1580 00114$:
                           00013D  1581 	C$i2c.h$123$2$79 ==.
                                   1582 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1583 	mov	b,r6
      00013F 05 F0            [12] 1584 	inc	b
      000141 7C 01            [12] 1585 	mov	r4,#0x01
      000143 7D 00            [12] 1586 	mov	r5,#0x00
      000145 80 06            [24] 1587 	sjmp	00145$
      000147                       1588 00144$:
      000147 EC               [12] 1589 	mov	a,r4
      000148 2C               [12] 1590 	add	a,r4
      000149 FC               [12] 1591 	mov	r4,a
      00014A ED               [12] 1592 	mov	a,r5
      00014B 33               [12] 1593 	rlc	a
      00014C FD               [12] 1594 	mov	r5,a
      00014D                       1595 00145$:
      00014D D5 F0 F7         [24] 1596 	djnz	b,00144$
      000150 AA*03            [24] 1597 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1598 	mov	r3,#0x00
      000154 EA               [12] 1599 	mov	a,r2
      000155 52 04            [12] 1600 	anl	ar4,a
      000157 EB               [12] 1601 	mov	a,r3
      000158 52 05            [12] 1602 	anl	ar5,a
      00015A EC               [12] 1603 	mov	a,r4
      00015B 4D               [12] 1604 	orl	a,r5
      00015C 60 07            [24] 1605 	jz	00115$
                           00015E  1606 	C$i2c.h$124$2$79 ==.
                                   1607 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1608 	mov	a,#0x31
      000160 2F               [12] 1609 	add	a,r7
      000161 F5 82            [12] 1610 	mov	dpl,a
      000163 80 33            [24] 1611 	sjmp	00116$
      000165                       1612 00115$:
                           000165  1613 	C$i2c.h$121$1$78 ==.
                                   1614 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1615 	inc	r6
      000166 8E 07            [24] 1616 	mov	ar7,r6
      000168 BE 08 00         [24] 1617 	cjne	r6,#0x08,00147$
      00016B                       1618 00147$:
      00016B 40 D0            [24] 1619 	jc	00114$
                           00016D  1620 	C$i2c.h$127$1$78 ==.
                                   1621 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1622 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1623 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1624 	mov	dpl,#0x39
      000175 80 21            [24] 1625 	sjmp	00116$
      000177                       1626 00107$:
                           000177  1627 	C$i2c.h$129$1$78 ==.
                                   1628 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1629 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1630 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1631 	mov	dpl,#0x2A
      00017F 80 17            [24] 1632 	sjmp	00116$
      000181                       1633 00109$:
                           000181  1634 	C$i2c.h$131$1$78 ==.
                                   1635 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1636 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1637 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1638 	mov	dpl,#0x30
      000189 80 0D            [24] 1639 	sjmp	00116$
      00018B                       1640 00111$:
                           00018B  1641 	C$i2c.h$133$1$78 ==.
                                   1642 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1643 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1644 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1645 	mov	dpl,#0x23
      000193 80 03            [24] 1646 	sjmp	00116$
      000195                       1647 00113$:
                           000195  1648 	C$i2c.h$135$1$78 ==.
                                   1649 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1650 	mov	dpl,#0xFF
      000198                       1651 00116$:
                           000198  1652 	C$i2c.h$136$1$78 ==.
                           000198  1653 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1654 	ret
                                   1655 ;------------------------------------------------------------
                                   1656 ;Allocation info for local variables in function 'kpd_input'
                                   1657 ;------------------------------------------------------------
                                   1658 ;mode                      Allocated to registers r7 
                                   1659 ;sum                       Allocated to registers r5 r6 
                                   1660 ;key                       Allocated to registers r3 
                                   1661 ;i                         Allocated to registers 
                                   1662 ;------------------------------------------------------------
                           000199  1663 	G$kpd_input$0$0 ==.
                           000199  1664 	C$i2c.h$148$1$78 ==.
                                   1665 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1666 ;	-----------------------------------------
                                   1667 ;	 function kpd_input
                                   1668 ;	-----------------------------------------
      000199                       1669 _kpd_input:
      000199 AF 82            [24] 1670 	mov	r7,dpl
                           00019B  1671 	C$i2c.h$153$1$81 ==.
                                   1672 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1673 	C$i2c.h$156$1$81 ==.
                                   1674 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1675 	clr	a
      00019C FD               [12] 1676 	mov	r5,a
      00019D FE               [12] 1677 	mov	r6,a
      00019E EF               [12] 1678 	mov	a,r7
      00019F 70 1D            [24] 1679 	jnz	00102$
      0001A1 C0 06            [24] 1680 	push	ar6
      0001A3 C0 05            [24] 1681 	push	ar5
      0001A5 74r00            [12] 1682 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1683 	push	acc
      0001A9 74s00            [12] 1684 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1685 	push	acc
      0001AD 74 80            [12] 1686 	mov	a,#0x80
      0001AF C0 E0            [24] 1687 	push	acc
      0001B1 12r00r5C         [24] 1688 	lcall	_lcd_print
      0001B4 15 81            [12] 1689 	dec	sp
      0001B6 15 81            [12] 1690 	dec	sp
      0001B8 15 81            [12] 1691 	dec	sp
      0001BA D0 05            [24] 1692 	pop	ar5
      0001BC D0 06            [24] 1693 	pop	ar6
      0001BE                       1694 00102$:
                           0001BE  1695 	C$i2c.h$158$1$81 ==.
                                   1696 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1697 	push	ar6
      0001C0 C0 05            [24] 1698 	push	ar5
      0001C2 74 08            [12] 1699 	mov	a,#0x08
      0001C4 C0 E0            [24] 1700 	push	acc
      0001C6 E4               [12] 1701 	clr	a
      0001C7 C0 E0            [24] 1702 	push	acc
      0001C9 74 08            [12] 1703 	mov	a,#0x08
      0001CB C0 E0            [24] 1704 	push	acc
      0001CD E4               [12] 1705 	clr	a
      0001CE C0 E0            [24] 1706 	push	acc
      0001D0 74 08            [12] 1707 	mov	a,#0x08
      0001D2 C0 E0            [24] 1708 	push	acc
      0001D4 E4               [12] 1709 	clr	a
      0001D5 C0 E0            [24] 1710 	push	acc
      0001D7 74 08            [12] 1711 	mov	a,#0x08
      0001D9 C0 E0            [24] 1712 	push	acc
      0001DB E4               [12] 1713 	clr	a
      0001DC C0 E0            [24] 1714 	push	acc
      0001DE 74 08            [12] 1715 	mov	a,#0x08
      0001E0 C0 E0            [24] 1716 	push	acc
      0001E2 E4               [12] 1717 	clr	a
      0001E3 C0 E0            [24] 1718 	push	acc
      0001E5 74r16            [12] 1719 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1720 	push	acc
      0001E9 74s00            [12] 1721 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1722 	push	acc
      0001ED 74 80            [12] 1723 	mov	a,#0x80
      0001EF C0 E0            [24] 1724 	push	acc
      0001F1 12r00r5C         [24] 1725 	lcall	_lcd_print
      0001F4 E5 81            [12] 1726 	mov	a,sp
      0001F6 24 F3            [12] 1727 	add	a,#0xf3
      0001F8 F5 81            [12] 1728 	mov	sp,a
                           0001FA  1729 	C$i2c.h$160$1$81 ==.
                                   1730 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1731 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1732 	mov	b,#0x07
      000200 E4               [12] 1733 	clr	a
      000201 12r03r0D         [24] 1734 	lcall	_delay_time
      000204 D0 05            [24] 1735 	pop	ar5
      000206 D0 06            [24] 1736 	pop	ar6
                           000208  1737 	C$i2c.h$164$1$81 ==.
                                   1738 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1739 	mov	r7,#0x00
                           00020A  1740 	C$i2c.h$166$3$84 ==.
                                   1741 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1742 00104$:
      00020A C0 07            [24] 1743 	push	ar7
      00020C C0 06            [24] 1744 	push	ar6
      00020E C0 05            [24] 1745 	push	ar5
      000210 12r01r1A         [24] 1746 	lcall	_read_keypad
      000213 AC 82            [24] 1747 	mov	r4,dpl
      000215 D0 05            [24] 1748 	pop	ar5
      000217 D0 06            [24] 1749 	pop	ar6
      000219 D0 07            [24] 1750 	pop	ar7
      00021B 8C 03            [24] 1751 	mov	ar3,r4
      00021D BC FF 02         [24] 1752 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1753 	sjmp	00105$
      000222                       1754 00146$:
      000222 BB 2A 17         [24] 1755 	cjne	r3,#0x2A,00106$
      000225                       1756 00105$:
      000225 90 27 10         [24] 1757 	mov	dptr,#0x2710
      000228 E4               [12] 1758 	clr	a
      000229 F5 F0            [12] 1759 	mov	b,a
      00022B C0 07            [24] 1760 	push	ar7
      00022D C0 06            [24] 1761 	push	ar6
      00022F C0 05            [24] 1762 	push	ar5
      000231 12r03r0D         [24] 1763 	lcall	_delay_time
      000234 D0 05            [24] 1764 	pop	ar5
      000236 D0 06            [24] 1765 	pop	ar6
      000238 D0 07            [24] 1766 	pop	ar7
      00023A 80 CE            [24] 1767 	sjmp	00104$
      00023C                       1768 00106$:
                           00023C  1769 	C$i2c.h$167$2$82 ==.
                                   1770 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1771 	cjne	r3,#0x23,00114$
                           00023F  1772 	C$i2c.h$169$3$83 ==.
                                   1773 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1774 00107$:
      00023F C0 06            [24] 1775 	push	ar6
      000241 C0 05            [24] 1776 	push	ar5
      000243 12r01r1A         [24] 1777 	lcall	_read_keypad
      000246 AC 82            [24] 1778 	mov	r4,dpl
      000248 D0 05            [24] 1779 	pop	ar5
      00024A D0 06            [24] 1780 	pop	ar6
      00024C BC 23 13         [24] 1781 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1782 	mov	dptr,#0x2710
      000252 E4               [12] 1783 	clr	a
      000253 F5 F0            [12] 1784 	mov	b,a
      000255 C0 06            [24] 1785 	push	ar6
      000257 C0 05            [24] 1786 	push	ar5
      000259 12r03r0D         [24] 1787 	lcall	_delay_time
      00025C D0 05            [24] 1788 	pop	ar5
      00025E D0 06            [24] 1789 	pop	ar6
      000260 80 DD            [24] 1790 	sjmp	00107$
      000262                       1791 00109$:
                           000262  1792 	C$i2c.h$170$3$83 ==.
                                   1793 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1794 	mov	dpl,r5
      000264 8E 83            [24] 1795 	mov	dph,r6
      000266 02r03r0C         [24] 1796 	ljmp	00119$
      000269                       1797 00114$:
                           000269  1798 	C$i2c.h$174$3$84 ==.
                                   1799 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1800 	mov	a,r3
      00026A FA               [12] 1801 	mov	r2,a
      00026B 33               [12] 1802 	rlc	a
      00026C 95 E0            [12] 1803 	subb	a,acc
      00026E FC               [12] 1804 	mov	r4,a
      00026F C0 07            [24] 1805 	push	ar7
      000271 C0 06            [24] 1806 	push	ar6
      000273 C0 05            [24] 1807 	push	ar5
      000275 C0 04            [24] 1808 	push	ar4
      000277 C0 03            [24] 1809 	push	ar3
      000279 C0 02            [24] 1810 	push	ar2
      00027B C0 02            [24] 1811 	push	ar2
      00027D C0 04            [24] 1812 	push	ar4
      00027F 74r26            [12] 1813 	mov	a,#___str_2
      000281 C0 E0            [24] 1814 	push	acc
      000283 74s00            [12] 1815 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1816 	push	acc
      000287 74 80            [12] 1817 	mov	a,#0x80
      000289 C0 E0            [24] 1818 	push	acc
      00028B 12r00r5C         [24] 1819 	lcall	_lcd_print
      00028E E5 81            [12] 1820 	mov	a,sp
      000290 24 FB            [12] 1821 	add	a,#0xfb
      000292 F5 81            [12] 1822 	mov	sp,a
      000294 D0 02            [24] 1823 	pop	ar2
      000296 D0 03            [24] 1824 	pop	ar3
      000298 D0 04            [24] 1825 	pop	ar4
      00029A D0 05            [24] 1826 	pop	ar5
      00029C D0 06            [24] 1827 	pop	ar6
                           00029E  1828 	C$i2c.h$175$1$81 ==.
                                   1829 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1830 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1831 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1832 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1833 	push	ar4
      0002A7 C0 03            [24] 1834 	push	ar3
      0002A9 C0 02            [24] 1835 	push	ar2
      0002AB 12r00r00         [24] 1836 	lcall	__mulint
      0002AE A8 82            [24] 1837 	mov	r0,dpl
      0002B0 A9 83            [24] 1838 	mov	r1,dph
      0002B2 D0 02            [24] 1839 	pop	ar2
      0002B4 D0 03            [24] 1840 	pop	ar3
      0002B6 D0 04            [24] 1841 	pop	ar4
      0002B8 D0 07            [24] 1842 	pop	ar7
      0002BA EA               [12] 1843 	mov	a,r2
      0002BB 28               [12] 1844 	add	a,r0
      0002BC F8               [12] 1845 	mov	r0,a
      0002BD EC               [12] 1846 	mov	a,r4
      0002BE 39               [12] 1847 	addc	a,r1
      0002BF F9               [12] 1848 	mov	r1,a
      0002C0 E8               [12] 1849 	mov	a,r0
      0002C1 24 D0            [12] 1850 	add	a,#0xD0
      0002C3 FD               [12] 1851 	mov	r5,a
      0002C4 E9               [12] 1852 	mov	a,r1
      0002C5 34 FF            [12] 1853 	addc	a,#0xFF
      0002C7 FE               [12] 1854 	mov	r6,a
                           0002C8  1855 	C$i2c.h$176$3$84 ==.
                                   1856 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1857 00110$:
      0002C8 C0 07            [24] 1858 	push	ar7
      0002CA C0 06            [24] 1859 	push	ar6
      0002CC C0 05            [24] 1860 	push	ar5
      0002CE C0 03            [24] 1861 	push	ar3
      0002D0 12r01r1A         [24] 1862 	lcall	_read_keypad
      0002D3 AC 82            [24] 1863 	mov	r4,dpl
      0002D5 D0 03            [24] 1864 	pop	ar3
      0002D7 D0 05            [24] 1865 	pop	ar5
      0002D9 D0 06            [24] 1866 	pop	ar6
      0002DB D0 07            [24] 1867 	pop	ar7
      0002DD EC               [12] 1868 	mov	a,r4
      0002DE B5 03 1B         [24] 1869 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1870 	mov	dptr,#0x2710
      0002E4 E4               [12] 1871 	clr	a
      0002E5 F5 F0            [12] 1872 	mov	b,a
      0002E7 C0 07            [24] 1873 	push	ar7
      0002E9 C0 06            [24] 1874 	push	ar6
      0002EB C0 05            [24] 1875 	push	ar5
      0002ED C0 03            [24] 1876 	push	ar3
      0002EF 12r03r0D         [24] 1877 	lcall	_delay_time
      0002F2 D0 03            [24] 1878 	pop	ar3
      0002F4 D0 05            [24] 1879 	pop	ar5
      0002F6 D0 06            [24] 1880 	pop	ar6
      0002F8 D0 07            [24] 1881 	pop	ar7
      0002FA 80 CC            [24] 1882 	sjmp	00110$
      0002FC                       1883 00118$:
                           0002FC  1884 	C$i2c.h$164$1$81 ==.
                                   1885 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1886 	inc	r7
      0002FD C3               [12] 1887 	clr	c
      0002FE EF               [12] 1888 	mov	a,r7
      0002FF 64 80            [12] 1889 	xrl	a,#0x80
      000301 94 85            [12] 1890 	subb	a,#0x85
      000303 50 03            [24] 1891 	jnc	00155$
      000305 02r02r0A         [24] 1892 	ljmp	00104$
      000308                       1893 00155$:
                           000308  1894 	C$i2c.h$179$1$81 ==.
                                   1895 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1896 	mov	dpl,r5
      00030A 8E 83            [24] 1897 	mov	dph,r6
      00030C                       1898 00119$:
                           00030C  1899 	C$i2c.h$180$1$81 ==.
                           00030C  1900 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1901 	ret
                                   1902 ;------------------------------------------------------------
                                   1903 ;Allocation info for local variables in function 'delay_time'
                                   1904 ;------------------------------------------------------------
                                   1905 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1906 ;index                     Allocated to registers 
                                   1907 ;------------------------------------------------------------
                           00030D  1908 	G$delay_time$0$0 ==.
                           00030D  1909 	C$i2c.h$189$1$81 ==.
                                   1910 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1911 ;	-----------------------------------------
                                   1912 ;	 function delay_time
                                   1913 ;	-----------------------------------------
      00030D                       1914 _delay_time:
      00030D AC 82            [24] 1915 	mov	r4,dpl
      00030F AD 83            [24] 1916 	mov	r5,dph
      000311 AE F0            [24] 1917 	mov	r6,b
      000313 FF               [12] 1918 	mov	r7,a
                           000314  1919 	C$i2c.h$192$1$86 ==.
                                   1920 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1921 	mov	r0,#0x00
      000316 79 00            [12] 1922 	mov	r1,#0x00
      000318 7A 00            [12] 1923 	mov	r2,#0x00
      00031A 7B 00            [12] 1924 	mov	r3,#0x00
      00031C                       1925 00103$:
      00031C C3               [12] 1926 	clr	c
      00031D E8               [12] 1927 	mov	a,r0
      00031E 9C               [12] 1928 	subb	a,r4
      00031F E9               [12] 1929 	mov	a,r1
      000320 9D               [12] 1930 	subb	a,r5
      000321 EA               [12] 1931 	mov	a,r2
      000322 9E               [12] 1932 	subb	a,r6
      000323 EB               [12] 1933 	mov	a,r3
      000324 9F               [12] 1934 	subb	a,r7
      000325 50 0F            [24] 1935 	jnc	00105$
      000327 08               [12] 1936 	inc	r0
      000328 B8 00 09         [24] 1937 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1938 	inc	r1
      00032C B9 00 05         [24] 1939 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1940 	inc	r2
      000330 BA 00 E9         [24] 1941 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1942 	inc	r3
      000334                       1943 00115$:
      000334 80 E6            [24] 1944 	sjmp	00103$
      000336                       1945 00105$:
                           000336  1946 	C$i2c.h$193$1$86 ==.
                           000336  1947 	XG$delay_time$0$0 ==.
      000336 22               [24] 1948 	ret
                                   1949 ;------------------------------------------------------------
                                   1950 ;Allocation info for local variables in function 'i2c_start'
                                   1951 ;------------------------------------------------------------
                           000337  1952 	G$i2c_start$0$0 ==.
                           000337  1953 	C$i2c.h$196$1$86 ==.
                                   1954 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1955 ;	-----------------------------------------
                                   1956 ;	 function i2c_start
                                   1957 ;	-----------------------------------------
      000337                       1958 _i2c_start:
                           000337  1959 	C$i2c.h$198$1$88 ==.
                                   1960 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1961 00101$:
      000337 20 C7 FD         [24] 1962 	jb	_BUSY,00101$
                           00033A  1963 	C$i2c.h$199$1$88 ==.
                                   1964 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1965 	setb	_STA
                           00033C  1966 	C$i2c.h$200$1$88 ==.
                                   1967 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1968 00104$:
      00033C 30 C3 FD         [24] 1969 	jnb	_SI,00104$
                           00033F  1970 	C$i2c.h$201$1$88 ==.
                                   1971 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1972 	clr	_STA
                           000341  1973 	C$i2c.h$202$1$88 ==.
                                   1974 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1975 	clr	_SI
                           000343  1976 	C$i2c.h$203$1$88 ==.
                           000343  1977 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1978 	ret
                                   1979 ;------------------------------------------------------------
                                   1980 ;Allocation info for local variables in function 'i2c_write'
                                   1981 ;------------------------------------------------------------
                                   1982 ;output_data               Allocated to registers 
                                   1983 ;------------------------------------------------------------
                           000344  1984 	G$i2c_write$0$0 ==.
                           000344  1985 	C$i2c.h$206$1$88 ==.
                                   1986 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1987 ;	-----------------------------------------
                                   1988 ;	 function i2c_write
                                   1989 ;	-----------------------------------------
      000344                       1990 _i2c_write:
      000344 85 82 C2         [24] 1991 	mov	_SMB0DAT,dpl
                           000347  1992 	C$i2c.h$209$1$90 ==.
                                   1993 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1994 00101$:
                           000347  1995 	C$i2c.h$210$1$90 ==.
                                   1996 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1997 	jbc	_SI,00112$
      00034A 80 FB            [24] 1998 	sjmp	00101$
      00034C                       1999 00112$:
                           00034C  2000 	C$i2c.h$211$1$90 ==.
                           00034C  2001 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2002 	ret
                                   2003 ;------------------------------------------------------------
                                   2004 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2005 ;------------------------------------------------------------
                                   2006 ;output_data               Allocated to registers 
                                   2007 ;------------------------------------------------------------
                           00034D  2008 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2009 	C$i2c.h$214$1$90 ==.
                                   2010 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2011 ;	-----------------------------------------
                                   2012 ;	 function i2c_write_and_stop
                                   2013 ;	-----------------------------------------
      00034D                       2014 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2015 	mov	_SMB0DAT,dpl
                           000350  2016 	C$i2c.h$217$1$92 ==.
                                   2017 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2018 	setb	_STO
                           000352  2019 	C$i2c.h$218$1$92 ==.
                                   2020 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2021 00101$:
                           000352  2022 	C$i2c.h$219$1$92 ==.
                                   2023 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2024 	jbc	_SI,00112$
      000355 80 FB            [24] 2025 	sjmp	00101$
      000357                       2026 00112$:
                           000357  2027 	C$i2c.h$220$1$92 ==.
                           000357  2028 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2029 	ret
                                   2030 ;------------------------------------------------------------
                                   2031 ;Allocation info for local variables in function 'i2c_read'
                                   2032 ;------------------------------------------------------------
                                   2033 ;input_data                Allocated to registers 
                                   2034 ;------------------------------------------------------------
                           000358  2035 	G$i2c_read$0$0 ==.
                           000358  2036 	C$i2c.h$223$1$92 ==.
                                   2037 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2038 ;	-----------------------------------------
                                   2039 ;	 function i2c_read
                                   2040 ;	-----------------------------------------
      000358                       2041 _i2c_read:
                           000358  2042 	C$i2c.h$226$1$94 ==.
                                   2043 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2044 00101$:
      000358 30 C3 FD         [24] 2045 	jnb	_SI,00101$
                           00035B  2046 	C$i2c.h$227$1$94 ==.
                                   2047 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2048 	mov	dpl,_SMB0DAT
                           00035E  2049 	C$i2c.h$228$1$94 ==.
                                   2050 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2051 	clr	_SI
                           000360  2052 	C$i2c.h$229$1$94 ==.
                                   2053 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2054 	C$i2c.h$230$1$94 ==.
                           000360  2055 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2056 	ret
                                   2057 ;------------------------------------------------------------
                                   2058 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2059 ;------------------------------------------------------------
                                   2060 ;input_data                Allocated to registers r7 
                                   2061 ;------------------------------------------------------------
                           000361  2062 	G$i2c_read_and_stop$0$0 ==.
                           000361  2063 	C$i2c.h$233$1$94 ==.
                                   2064 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2065 ;	-----------------------------------------
                                   2066 ;	 function i2c_read_and_stop
                                   2067 ;	-----------------------------------------
      000361                       2068 _i2c_read_and_stop:
                           000361  2069 	C$i2c.h$236$1$96 ==.
                                   2070 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2071 00101$:
      000361 30 C3 FD         [24] 2072 	jnb	_SI,00101$
                           000364  2073 	C$i2c.h$237$1$96 ==.
                                   2074 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2075 	mov	r7,_SMB0DAT
                           000366  2076 	C$i2c.h$238$1$96 ==.
                                   2077 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2078 	clr	_SI
                           000368  2079 	C$i2c.h$239$1$96 ==.
                                   2080 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2081 	setb	_STO
                           00036A  2082 	C$i2c.h$240$1$96 ==.
                                   2083 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2084 00104$:
                           00036A  2085 	C$i2c.h$241$1$96 ==.
                                   2086 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2087 	jbc	_SI,00122$
      00036D 80 FB            [24] 2088 	sjmp	00104$
      00036F                       2089 00122$:
                           00036F  2090 	C$i2c.h$242$1$96 ==.
                                   2091 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2092 	mov	dpl,r7
                           000371  2093 	C$i2c.h$243$1$96 ==.
                           000371  2094 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2095 	ret
                                   2096 ;------------------------------------------------------------
                                   2097 ;Allocation info for local variables in function 'i2c_write_data'
                                   2098 ;------------------------------------------------------------
                                   2099 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2100 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2101 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2102 ;addr                      Allocated to registers r7 
                                   2103 ;i                         Allocated to registers 
                                   2104 ;------------------------------------------------------------
                           000372  2105 	G$i2c_write_data$0$0 ==.
                           000372  2106 	C$i2c.h$246$1$96 ==.
                                   2107 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2108 ;	-----------------------------------------
                                   2109 ;	 function i2c_write_data
                                   2110 ;	-----------------------------------------
      000372                       2111 _i2c_write_data:
      000372 AF 82            [24] 2112 	mov	r7,dpl
                           000374  2113 	C$i2c.h$250$1$98 ==.
                                   2114 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2115 	push	ar7
      000376 12r03r37         [24] 2116 	lcall	_i2c_start
      000379 D0 07            [24] 2117 	pop	ar7
                           00037B  2118 	C$i2c.h$251$1$98 ==.
                                   2119 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2120 	mov	a,#0xFE
      00037D 5F               [12] 2121 	anl	a,r7
      00037E F5 82            [12] 2122 	mov	dpl,a
      000380 12r03r44         [24] 2123 	lcall	_i2c_write
                           000383  2124 	C$i2c.h$252$1$98 ==.
                                   2125 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2126 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2127 	lcall	_i2c_write
                           000389  2128 	C$i2c.h$253$1$98 ==.
                                   2129 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2130 	mov	r7,#0x00
      00038B                       2131 00103$:
      00038B AD*09            [24] 2132 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2133 	mov	r6,#0x00
      00038F 1D               [12] 2134 	dec	r5
      000390 BD FF 01         [24] 2135 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2136 	dec	r6
      000394                       2137 00114$:
      000394 8F 03            [24] 2138 	mov	ar3,r7
      000396 7C 00            [12] 2139 	mov	r4,#0x00
      000398 C3               [12] 2140 	clr	c
      000399 EB               [12] 2141 	mov	a,r3
      00039A 9D               [12] 2142 	subb	a,r5
      00039B EC               [12] 2143 	mov	a,r4
      00039C 64 80            [12] 2144 	xrl	a,#0x80
      00039E 8E F0            [24] 2145 	mov	b,r6
      0003A0 63 F0 80         [24] 2146 	xrl	b,#0x80
      0003A3 95 F0            [12] 2147 	subb	a,b
      0003A5 50 1F            [24] 2148 	jnc	00101$
                           0003A7  2149 	C$i2c.h$254$1$98 ==.
                                   2150 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2151 	mov	a,r7
      0003A8 25*06            [12] 2152 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2153 	mov	r4,a
      0003AB E4               [12] 2154 	clr	a
      0003AC 35*07            [12] 2155 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2156 	mov	r5,a
      0003AF AE*08            [24] 2157 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2158 	mov	dpl,r4
      0003B3 8D 83            [24] 2159 	mov	dph,r5
      0003B5 8E F0            [24] 2160 	mov	b,r6
      0003B7 12r00r00         [24] 2161 	lcall	__gptrget
      0003BA F5 82            [12] 2162 	mov	dpl,a
      0003BC C0 07            [24] 2163 	push	ar7
      0003BE 12r03r44         [24] 2164 	lcall	_i2c_write
      0003C1 D0 07            [24] 2165 	pop	ar7
                           0003C3  2166 	C$i2c.h$253$1$98 ==.
                                   2167 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2168 	inc	r7
      0003C4 80 C5            [24] 2169 	sjmp	00103$
      0003C6                       2170 00101$:
                           0003C6  2171 	C$i2c.h$255$1$98 ==.
                                   2172 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2173 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2174 	mov	r7,#0x00
      0003CA 1E               [12] 2175 	dec	r6
      0003CB BE FF 01         [24] 2176 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2177 	dec	r7
      0003CF                       2178 00116$:
      0003CF EE               [12] 2179 	mov	a,r6
      0003D0 25*06            [12] 2180 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2181 	mov	r6,a
      0003D3 EF               [12] 2182 	mov	a,r7
      0003D4 35*07            [12] 2183 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2184 	mov	r7,a
      0003D7 AD*08            [24] 2185 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2186 	mov	dpl,r6
      0003DB 8F 83            [24] 2187 	mov	dph,r7
      0003DD 8D F0            [24] 2188 	mov	b,r5
      0003DF 12r00r00         [24] 2189 	lcall	__gptrget
      0003E2 F5 82            [12] 2190 	mov	dpl,a
      0003E4 12r03r4D         [24] 2191 	lcall	_i2c_write_and_stop
                           0003E7  2192 	C$i2c.h$256$1$98 ==.
                           0003E7  2193 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2194 	ret
                                   2195 ;------------------------------------------------------------
                                   2196 ;Allocation info for local variables in function 'i2c_read_data'
                                   2197 ;------------------------------------------------------------
                                   2198 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2199 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2200 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2201 ;addr                      Allocated to registers r7 
                                   2202 ;j                         Allocated to registers 
                                   2203 ;------------------------------------------------------------
                           0003E8  2204 	G$i2c_read_data$0$0 ==.
                           0003E8  2205 	C$i2c.h$259$1$98 ==.
                                   2206 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2207 ;	-----------------------------------------
                                   2208 ;	 function i2c_read_data
                                   2209 ;	-----------------------------------------
      0003E8                       2210 _i2c_read_data:
      0003E8 AF 82            [24] 2211 	mov	r7,dpl
                           0003EA  2212 	C$i2c.h$262$1$100 ==.
                                   2213 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2214 	push	ar7
      0003EC 12r03r37         [24] 2215 	lcall	_i2c_start
      0003EF D0 07            [24] 2216 	pop	ar7
                           0003F1  2217 	C$i2c.h$263$1$100 ==.
                                   2218 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2219 	mov	ar6,r7
      0003F3 74 FE            [12] 2220 	mov	a,#0xFE
      0003F5 5E               [12] 2221 	anl	a,r6
      0003F6 F5 82            [12] 2222 	mov	dpl,a
      0003F8 C0 07            [24] 2223 	push	ar7
      0003FA 12r03r44         [24] 2224 	lcall	_i2c_write
                           0003FD  2225 	C$i2c.h$264$1$100 ==.
                                   2226 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2227 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2228 	lcall	_i2c_write_and_stop
                           000403  2229 	C$i2c.h$265$1$100 ==.
                                   2230 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2231 	lcall	_i2c_start
      000406 D0 07            [24] 2232 	pop	ar7
                           000408  2233 	C$i2c.h$266$1$100 ==.
                                   2234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2235 	mov	a,#0x01
      00040A 4F               [12] 2236 	orl	a,r7
      00040B F5 82            [12] 2237 	mov	dpl,a
      00040D 12r03r44         [24] 2238 	lcall	_i2c_write
                           000410  2239 	C$i2c.h$267$1$100 ==.
                                   2240 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2241 	mov	r7,#0x00
      000412                       2242 00103$:
      000412 AD*0E            [24] 2243 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2244 	mov	r6,#0x00
      000416 1D               [12] 2245 	dec	r5
      000417 BD FF 01         [24] 2246 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2247 	dec	r6
      00041B                       2248 00114$:
      00041B 8F 03            [24] 2249 	mov	ar3,r7
      00041D 7C 00            [12] 2250 	mov	r4,#0x00
      00041F C3               [12] 2251 	clr	c
      000420 EB               [12] 2252 	mov	a,r3
      000421 9D               [12] 2253 	subb	a,r5
      000422 EC               [12] 2254 	mov	a,r4
      000423 64 80            [12] 2255 	xrl	a,#0x80
      000425 8E F0            [24] 2256 	mov	b,r6
      000427 63 F0 80         [24] 2257 	xrl	b,#0x80
      00042A 95 F0            [12] 2258 	subb	a,b
      00042C 50 2E            [24] 2259 	jnc	00101$
                           00042E  2260 	C$i2c.h$269$2$101 ==.
                                   2261 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2262 	setb	_AA
                           000430  2263 	C$i2c.h$270$2$101 ==.
                                   2264 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2265 	mov	a,r7
      000431 25*0B            [12] 2266 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2267 	mov	r4,a
      000434 E4               [12] 2268 	clr	a
      000435 35*0C            [12] 2269 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2270 	mov	r5,a
      000438 AE*0D            [24] 2271 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2272 	push	ar7
      00043C C0 06            [24] 2273 	push	ar6
      00043E C0 05            [24] 2274 	push	ar5
      000440 C0 04            [24] 2275 	push	ar4
      000442 12r03r58         [24] 2276 	lcall	_i2c_read
      000445 AB 82            [24] 2277 	mov	r3,dpl
      000447 D0 04            [24] 2278 	pop	ar4
      000449 D0 05            [24] 2279 	pop	ar5
      00044B D0 06            [24] 2280 	pop	ar6
      00044D D0 07            [24] 2281 	pop	ar7
      00044F 8C 82            [24] 2282 	mov	dpl,r4
      000451 8D 83            [24] 2283 	mov	dph,r5
      000453 8E F0            [24] 2284 	mov	b,r6
      000455 EB               [12] 2285 	mov	a,r3
      000456 12r00r00         [24] 2286 	lcall	__gptrput
                           000459  2287 	C$i2c.h$267$1$100 ==.
                                   2288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2289 	inc	r7
      00045A 80 B6            [24] 2290 	sjmp	00103$
      00045C                       2291 00101$:
                           00045C  2292 	C$i2c.h$272$1$100 ==.
                                   2293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2294 	clr	_AA
                           00045E  2295 	C$i2c.h$273$1$100 ==.
                                   2296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2297 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2298 	mov	r7,#0x00
      000462 1E               [12] 2299 	dec	r6
      000463 BE FF 01         [24] 2300 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2301 	dec	r7
      000467                       2302 00116$:
      000467 EE               [12] 2303 	mov	a,r6
      000468 25*0B            [12] 2304 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2305 	mov	r6,a
      00046B EF               [12] 2306 	mov	a,r7
      00046C 35*0C            [12] 2307 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2308 	mov	r7,a
      00046F AD*0D            [24] 2309 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2310 	push	ar7
      000473 C0 06            [24] 2311 	push	ar6
      000475 C0 05            [24] 2312 	push	ar5
      000477 12r03r61         [24] 2313 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2314 	mov	r4,dpl
      00047C D0 05            [24] 2315 	pop	ar5
      00047E D0 06            [24] 2316 	pop	ar6
      000480 D0 07            [24] 2317 	pop	ar7
      000482 8E 82            [24] 2318 	mov	dpl,r6
      000484 8F 83            [24] 2319 	mov	dph,r7
      000486 8D F0            [24] 2320 	mov	b,r5
      000488 EC               [12] 2321 	mov	a,r4
      000489 12r00r00         [24] 2322 	lcall	__gptrput
                           00048C  2323 	C$i2c.h$274$1$100 ==.
                           00048C  2324 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2325 	ret
                                   2326 ;------------------------------------------------------------
                                   2327 ;Allocation info for local variables in function 'Accel_Init'
                                   2328 ;------------------------------------------------------------
                                   2329 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2330 ;------------------------------------------------------------
                           00048D  2331 	G$Accel_Init$0$0 ==.
                           00048D  2332 	C$i2c.h$283$1$100 ==.
                                   2333 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2334 ;	-----------------------------------------
                                   2335 ;	 function Accel_Init
                                   2336 ;	-----------------------------------------
      00048D                       2337 _Accel_Init:
                           00048D  2338 	C$i2c.h$287$1$103 ==.
                                   2339 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2340 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2341 	C$i2c.h$289$1$103 ==.
                                   2342 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2343 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2344 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2345 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2346 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2347 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2348 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2349 	lcall	_i2c_write_data
                           0004A5  2350 	C$i2c.h$290$1$103 ==.
                                   2351 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2352 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2353 	C$i2c.h$292$1$103 ==.
                                   2354 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2355 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2356 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2357 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2358 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2359 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2360 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2361 	lcall	_i2c_write_data
                           0004BD  2362 	C$i2c.h$293$1$103 ==.
                                   2363 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2364 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2365 	C$i2c.h$294$1$103 ==.
                                   2366 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2367 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2368 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2369 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2370 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2371 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2372 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2373 	lcall	_i2c_write_data
                           0004D5  2374 	C$i2c.h$298$1$103 ==.
                           0004D5  2375 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2376 	ret
                                   2377 ;------------------------------------------------------------
                                   2378 ;Allocation info for local variables in function 'main'
                                   2379 ;------------------------------------------------------------
                           0004D6  2380 	G$main$0$0 ==.
                           0004D6  2381 	C$Lab5.c$61$1$103 ==.
                                   2382 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:61: void main(void)
                                   2383 ;	-----------------------------------------
                                   2384 ;	 function main
                                   2385 ;	-----------------------------------------
      0004D6                       2386 _main:
                           0004D6  2387 	C$Lab5.c$63$1$116 ==.
                                   2388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:63: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2389 	lcall	_Sys_Init
                           0004D9  2390 	C$Lab5.c$64$1$116 ==.
                                   2391 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:64: Port_Init();    
      0004D9 12r06r50         [24] 2392 	lcall	_Port_Init
                           0004DC  2393 	C$Lab5.c$65$1$116 ==.
                                   2394 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:65: Interrupt_Init();   
      0004DC 12r06r6E         [24] 2395 	lcall	_Interrupt_Init
                           0004DF  2396 	C$Lab5.c$66$1$116 ==.
                                   2397 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:66: PCA_Init();
      0004DF 12r06r77         [24] 2398 	lcall	_PCA_Init
                           0004E2  2399 	C$Lab5.c$67$1$116 ==.
                                   2400 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:67: ADC_Init();
      0004E2 12r06rCD         [24] 2401 	lcall	_ADC_Init
                           0004E5  2402 	C$Lab5.c$68$1$116 ==.
                                   2403 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:68: SMB0_Init();
      0004E5 12r06r84         [24] 2404 	lcall	_SMB0_Init
                           0004E8  2405 	C$Lab5.c$69$1$116 ==.
                                   2406 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:69: Accel_Init();
      0004E8 12r04r8D         [24] 2407 	lcall	_Accel_Init
                           0004EB  2408 	C$Lab5.c$70$1$116 ==.
                                   2409 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:70: putchar('\r');  // Dummy write to serial port
      0004EB 75 82 0D         [24] 2410 	mov	dpl,#0x0D
      0004EE 12r00r43         [24] 2411 	lcall	_putchar
                           0004F1  2412 	C$Lab5.c$71$1$116 ==.
                                   2413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:71: printf("\nStart\r\n");
      0004F1 74r29            [12] 2414 	mov	a,#___str_3
      0004F3 C0 E0            [24] 2415 	push	acc
      0004F5 74s00            [12] 2416 	mov	a,#(___str_3 >> 8)
      0004F7 C0 E0            [24] 2417 	push	acc
      0004F9 74 80            [12] 2418 	mov	a,#0x80
      0004FB C0 E0            [24] 2419 	push	acc
      0004FD 12r00r00         [24] 2420 	lcall	_printf
      000500 15 81            [12] 2421 	dec	sp
      000502 15 81            [12] 2422 	dec	sp
      000504 15 81            [12] 2423 	dec	sp
                           000506  2424 	C$Lab5.c$72$1$116 ==.
                                   2425 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:72: PCA0CP0 = 0xFFFF - PW_CENTER;
      000506 75 EA 37         [24] 2426 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000509 75 FA F5         [24] 2427 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           00050C  2428 	C$Lab5.c$73$1$116 ==.
                                   2429 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:73: PCA0CP2 = 0xFFFF - PW_CENTER; //Car isn't moving to start
      00050C 75 EC 37         [24] 2430 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00050F 75 FC F5         [24] 2431 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000512  2432 	C$Lab5.c$74$1$116 ==.
                                   2433 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:74: Counts = 0;
      000512 E4               [12] 2434 	clr	a
      000513 F5*14            [12] 2435 	mov	_Counts,a
      000515 F5*15            [12] 2436 	mov	(_Counts + 1),a
                           000517  2437 	C$Lab5.c$75$1$116 ==.
                                   2438 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:75: while (Counts < 1);  // Wait a long time (1s) for keypad & LCD to initialize
      000517                       2439 00101$:
      000517 C3               [12] 2440 	clr	c
      000518 E5*14            [12] 2441 	mov	a,_Counts
      00051A 94 01            [12] 2442 	subb	a,#0x01
      00051C E5*15            [12] 2443 	mov	a,(_Counts + 1)
      00051E 94 00            [12] 2444 	subb	a,#0x00
      000520 40 F5            [24] 2445 	jc	00101$
                           000522  2446 	C$Lab5.c$76$1$116 ==.
                                   2447 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:76: Pick_Steering_Gain();
      000522 12r06rED         [24] 2448 	lcall	_Pick_Steering_Gain
                           000525  2449 	C$Lab5.c$77$1$116 ==.
                                   2450 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:77: printf("\n\r------------DATA COLLECTION------------\n");
      000525 74r32            [12] 2451 	mov	a,#___str_4
      000527 C0 E0            [24] 2452 	push	acc
      000529 74s00            [12] 2453 	mov	a,#(___str_4 >> 8)
      00052B C0 E0            [24] 2454 	push	acc
      00052D 74 80            [12] 2455 	mov	a,#0x80
      00052F C0 E0            [24] 2456 	push	acc
      000531 12r00r00         [24] 2457 	lcall	_printf
      000534 15 81            [12] 2458 	dec	sp
      000536 15 81            [12] 2459 	dec	sp
      000538 15 81            [12] 2460 	dec	sp
                           00053A  2461 	C$Lab5.c$80$2$117 ==.
                                   2462 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:80: while(!RANGER_SWITCH && !COMPASS_SWITCH)
      00053A                       2463 00109$:
      00053A 30 B6 03         [24] 2464 	jnb	_RANGER_SWITCH,00145$
      00053D 02r06r37         [24] 2465 	ljmp	00111$
      000540                       2466 00145$:
      000540 30 B7 03         [24] 2467 	jnb	_COMPASS_SWITCH,00146$
      000543 02r06r37         [24] 2468 	ljmp	00111$
      000546                       2469 00146$:
                           000546  2470 	C$Lab5.c$108$3$118 ==.
                                   2471 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:108: if(print_delay == 20)
      000546 74 14            [12] 2472 	mov	a,#0x14
      000548 B5*21 02         [24] 2473 	cjne	a,_print_delay,00147$
      00054B 80 03            [24] 2474 	sjmp	00148$
      00054D                       2475 00147$:
      00054D 02r06r27         [24] 2476 	ljmp	00105$
      000550                       2477 00148$:
                           000550  2478 	C$Lab5.c$110$4$119 ==.
                                   2479 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:110: printf("\rX-Acceleration: %u\n", gx);
      000550 C0*22            [24] 2480 	push	_gx
      000552 C0*23            [24] 2481 	push	(_gx + 1)
      000554 74r5D            [12] 2482 	mov	a,#___str_5
      000556 C0 E0            [24] 2483 	push	acc
      000558 74s00            [12] 2484 	mov	a,#(___str_5 >> 8)
      00055A C0 E0            [24] 2485 	push	acc
      00055C 74 80            [12] 2486 	mov	a,#0x80
      00055E C0 E0            [24] 2487 	push	acc
      000560 12r00r00         [24] 2488 	lcall	_printf
      000563 E5 81            [12] 2489 	mov	a,sp
      000565 24 FB            [12] 2490 	add	a,#0xfb
      000567 F5 81            [12] 2491 	mov	sp,a
                           000569  2492 	C$Lab5.c$111$4$119 ==.
                                   2493 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:111: printf("\rY-Acceleration: %u\n", gy);
      000569 C0*24            [24] 2494 	push	_gy
      00056B C0*25            [24] 2495 	push	(_gy + 1)
      00056D 74r72            [12] 2496 	mov	a,#___str_6
      00056F C0 E0            [24] 2497 	push	acc
      000571 74s00            [12] 2498 	mov	a,#(___str_6 >> 8)
      000573 C0 E0            [24] 2499 	push	acc
      000575 74 80            [12] 2500 	mov	a,#0x80
      000577 C0 E0            [24] 2501 	push	acc
      000579 12r00r00         [24] 2502 	lcall	_printf
      00057C E5 81            [12] 2503 	mov	a,sp
      00057E 24 FB            [12] 2504 	add	a,#0xfb
      000580 F5 81            [12] 2505 	mov	sp,a
                           000582  2506 	C$Lab5.c$112$4$119 ==.
                                   2507 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:112: printf("\rSteering Gain: %u\n", steer_gain);
      000582 AE*28            [24] 2508 	mov	r6,_steer_gain
      000584 7F 00            [12] 2509 	mov	r7,#0x00
      000586 C0 06            [24] 2510 	push	ar6
      000588 C0 07            [24] 2511 	push	ar7
      00058A 74r87            [12] 2512 	mov	a,#___str_7
      00058C C0 E0            [24] 2513 	push	acc
      00058E 74s00            [12] 2514 	mov	a,#(___str_7 >> 8)
      000590 C0 E0            [24] 2515 	push	acc
      000592 74 80            [12] 2516 	mov	a,#0x80
      000594 C0 E0            [24] 2517 	push	acc
      000596 12r00r00         [24] 2518 	lcall	_printf
      000599 E5 81            [12] 2519 	mov	a,sp
      00059B 24 FB            [12] 2520 	add	a,#0xfb
      00059D F5 81            [12] 2521 	mov	sp,a
                           00059F  2522 	C$Lab5.c$113$4$119 ==.
                                   2523 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:113: printf("\rDrive Gain: %u\n", drive_gain);
      00059F AE*29            [24] 2524 	mov	r6,_drive_gain
      0005A1 7F 00            [12] 2525 	mov	r7,#0x00
      0005A3 C0 06            [24] 2526 	push	ar6
      0005A5 C0 07            [24] 2527 	push	ar7
      0005A7 74r9B            [12] 2528 	mov	a,#___str_8
      0005A9 C0 E0            [24] 2529 	push	acc
      0005AB 74s00            [12] 2530 	mov	a,#(___str_8 >> 8)
      0005AD C0 E0            [24] 2531 	push	acc
      0005AF 74 80            [12] 2532 	mov	a,#0x80
      0005B1 C0 E0            [24] 2533 	push	acc
      0005B3 12r00r00         [24] 2534 	lcall	_printf
      0005B6 E5 81            [12] 2535 	mov	a,sp
      0005B8 24 FB            [12] 2536 	add	a,#0xfb
      0005BA F5 81            [12] 2537 	mov	sp,a
                           0005BC  2538 	C$Lab5.c$114$4$119 ==.
                                   2539 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:114: printf("\rVoltage: %u\n", voltage);
      0005BC AE*20            [24] 2540 	mov	r6,_voltage
      0005BE 7F 00            [12] 2541 	mov	r7,#0x00
      0005C0 C0 06            [24] 2542 	push	ar6
      0005C2 C0 07            [24] 2543 	push	ar7
      0005C4 74rAC            [12] 2544 	mov	a,#___str_9
      0005C6 C0 E0            [24] 2545 	push	acc
      0005C8 74s00            [12] 2546 	mov	a,#(___str_9 >> 8)
      0005CA C0 E0            [24] 2547 	push	acc
      0005CC 74 80            [12] 2548 	mov	a,#0x80
      0005CE C0 E0            [24] 2549 	push	acc
      0005D0 12r00r00         [24] 2550 	lcall	_printf
      0005D3 E5 81            [12] 2551 	mov	a,sp
      0005D5 24 FB            [12] 2552 	add	a,#0xfb
      0005D7 F5 81            [12] 2553 	mov	sp,a
                           0005D9  2554 	C$Lab5.c$115$4$119 ==.
                                   2555 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:115: printf("\rOverflows: %u\n", nCounts);
      0005D9 C0*16            [24] 2556 	push	_nCounts
      0005DB C0*17            [24] 2557 	push	(_nCounts + 1)
      0005DD 74rBA            [12] 2558 	mov	a,#___str_10
      0005DF C0 E0            [24] 2559 	push	acc
      0005E1 74s00            [12] 2560 	mov	a,#(___str_10 >> 8)
      0005E3 C0 E0            [24] 2561 	push	acc
      0005E5 74 80            [12] 2562 	mov	a,#0x80
      0005E7 C0 E0            [24] 2563 	push	acc
      0005E9 12r00r00         [24] 2564 	lcall	_printf
      0005EC E5 81            [12] 2565 	mov	a,sp
      0005EE 24 FB            [12] 2566 	add	a,#0xfb
      0005F0 F5 81            [12] 2567 	mov	sp,a
                           0005F2  2568 	C$Lab5.c$116$4$119 ==.
                                   2569 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:116: printf("\rSteering Pulsewidth: %u\n", STEER_PW);
      0005F2 C0*1D            [24] 2570 	push	_STEER_PW
      0005F4 C0*1E            [24] 2571 	push	(_STEER_PW + 1)
      0005F6 74rCA            [12] 2572 	mov	a,#___str_11
      0005F8 C0 E0            [24] 2573 	push	acc
      0005FA 74s00            [12] 2574 	mov	a,#(___str_11 >> 8)
      0005FC C0 E0            [24] 2575 	push	acc
      0005FE 74 80            [12] 2576 	mov	a,#0x80
      000600 C0 E0            [24] 2577 	push	acc
      000602 12r00r00         [24] 2578 	lcall	_printf
      000605 E5 81            [12] 2579 	mov	a,sp
      000607 24 FB            [12] 2580 	add	a,#0xfb
      000609 F5 81            [12] 2581 	mov	sp,a
                           00060B  2582 	C$Lab5.c$117$4$119 ==.
                                   2583 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:117: printf("\rMotor Pulsewidth: %u\n", DRIVE_PW);
      00060B C0*1B            [24] 2584 	push	_DRIVE_PW
      00060D C0*1C            [24] 2585 	push	(_DRIVE_PW + 1)
      00060F 74rE4            [12] 2586 	mov	a,#___str_12
      000611 C0 E0            [24] 2587 	push	acc
      000613 74s00            [12] 2588 	mov	a,#(___str_12 >> 8)
      000615 C0 E0            [24] 2589 	push	acc
      000617 74 80            [12] 2590 	mov	a,#0x80
      000619 C0 E0            [24] 2591 	push	acc
      00061B 12r00r00         [24] 2592 	lcall	_printf
      00061E E5 81            [12] 2593 	mov	a,sp
      000620 24 FB            [12] 2594 	add	a,#0xfb
      000622 F5 81            [12] 2595 	mov	sp,a
                           000624  2596 	C$Lab5.c$118$4$119 ==.
                                   2597 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:118: print_delay = 0;
      000624 75*21 00         [24] 2598 	mov	_print_delay,#0x00
      000627                       2599 00105$:
                           000627  2600 	C$Lab5.c$121$3$118 ==.
                                   2601 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:121: if(new_accel)
      000627 E5*1A            [12] 2602 	mov	a,_new_accel
      000629 70 03            [24] 2603 	jnz	00149$
      00062B 02r05r3A         [24] 2604 	ljmp	00109$
      00062E                       2605 00149$:
                           00062E  2606 	C$Lab5.c$123$4$120 ==.
                                   2607 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:123: new_accel = 0;
      00062E 75*1A 00         [24] 2608 	mov	_new_accel,#0x00
                           000631  2609 	C$Lab5.c$124$4$120 ==.
                                   2610 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:124: read_accel();
      000631 12r08r43         [24] 2611 	lcall	_read_accel
      000634 02r05r3A         [24] 2612 	ljmp	00109$
      000637                       2613 00111$:
                           000637  2614 	C$Lab5.c$128$2$117 ==.
                                   2615 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:128: if(RANGER_SWITCH || COMPASS_SWITCH)
      000637 20 B6 06         [24] 2616 	jb	_RANGER_SWITCH,00112$
      00063A 20 B7 03         [24] 2617 	jb	_COMPASS_SWITCH,00151$
      00063D 02r05r3A         [24] 2618 	ljmp	00109$
      000640                       2619 00151$:
      000640                       2620 00112$:
                           000640  2621 	C$Lab5.c$130$3$121 ==.
                                   2622 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:130: PCA0CP0 = 0xFFFF - 2760;
      000640 75 EA 37         [24] 2623 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000643 75 FA F5         [24] 2624 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000646  2625 	C$Lab5.c$131$3$121 ==.
                                   2626 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:131: PCA0CP2 = 0xFFFF - 2760;
      000646 75 EC 37         [24] 2627 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000649 75 FC F5         [24] 2628 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
      00064C 02r05r3A         [24] 2629 	ljmp	00109$
                           00064F  2630 	C$Lab5.c$134$1$116 ==.
                           00064F  2631 	XG$main$0$0 ==.
      00064F 22               [24] 2632 	ret
                                   2633 ;------------------------------------------------------------
                                   2634 ;Allocation info for local variables in function 'Port_Init'
                                   2635 ;------------------------------------------------------------
                           000650  2636 	G$Port_Init$0$0 ==.
                           000650  2637 	C$Lab5.c$138$1$116 ==.
                                   2638 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:138: void Port_Init(void)	
                                   2639 ;	-----------------------------------------
                                   2640 ;	 function Port_Init
                                   2641 ;	-----------------------------------------
      000650                       2642 _Port_Init:
                           000650  2643 	C$Lab5.c$140$1$123 ==.
                                   2644 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:140: XBR0 = 0x27;
      000650 75 E1 27         [24] 2645 	mov	_XBR0,#0x27
                           000653  2646 	C$Lab5.c$141$1$123 ==.
                                   2647 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:141: P1MDIN 	&= 0xDF;	// set pin 1.5 for analog input	
      000653 53 BD DF         [24] 2648 	anl	_P1MDIN,#0xDF
                           000656  2649 	C$Lab5.c$142$1$123 ==.
                                   2650 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:142: P1MDOUT |= 0x05;	//set output pin for CEX0/2 in push-pull mode
      000656 43 A5 05         [24] 2651 	orl	_P1MDOUT,#0x05
                           000659  2652 	C$Lab5.c$143$1$123 ==.
                                   2653 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:143: P1MDOUT &= 0xDF;	// set input pin for 1.5 to open-drain
      000659 53 A5 DF         [24] 2654 	anl	_P1MDOUT,#0xDF
                           00065C  2655 	C$Lab5.c$144$1$123 ==.
                                   2656 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:144: P1		|= ~0xDF;	// set input pin for 1.5 to high impedence
      00065C AF 90            [24] 2657 	mov	r7,_P1
      00065E 74 20            [12] 2658 	mov	a,#0x20
      000660 4F               [12] 2659 	orl	a,r7
      000661 F5 90            [12] 2660 	mov	_P1,a
                           000663  2661 	C$Lab5.c$145$1$123 ==.
                                   2662 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:145: P3MDOUT &= 0x7F;	// set input pin for 3.6/7 to open-drain
      000663 53 A7 7F         [24] 2663 	anl	_P3MDOUT,#0x7F
                           000666  2664 	C$Lab5.c$146$1$123 ==.
                                   2665 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:146: P3		|= ~0x7F;	// set input pin for 3.6/7 to high impedence
      000666 AF B0            [24] 2666 	mov	r7,_P3
      000668 74 80            [12] 2667 	mov	a,#0x80
      00066A 4F               [12] 2668 	orl	a,r7
      00066B F5 B0            [12] 2669 	mov	_P3,a
                           00066D  2670 	C$Lab5.c$148$1$123 ==.
                           00066D  2671 	XG$Port_Init$0$0 ==.
      00066D 22               [24] 2672 	ret
                                   2673 ;------------------------------------------------------------
                                   2674 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2675 ;------------------------------------------------------------
                           00066E  2676 	G$Interrupt_Init$0$0 ==.
                           00066E  2677 	C$Lab5.c$152$1$123 ==.
                                   2678 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:152: void Interrupt_Init(void)
                                   2679 ;	-----------------------------------------
                                   2680 ;	 function Interrupt_Init
                                   2681 ;	-----------------------------------------
      00066E                       2682 _Interrupt_Init:
                           00066E  2683 	C$Lab5.c$154$1$125 ==.
                                   2684 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:154: IE |= 0x02;
      00066E 43 A8 02         [24] 2685 	orl	_IE,#0x02
                           000671  2686 	C$Lab5.c$155$1$125 ==.
                                   2687 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:155: EIE1 |= 0x08;
      000671 43 E6 08         [24] 2688 	orl	_EIE1,#0x08
                           000674  2689 	C$Lab5.c$156$1$125 ==.
                                   2690 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:156: EA = 1;
      000674 D2 AF            [12] 2691 	setb	_EA
                           000676  2692 	C$Lab5.c$157$1$125 ==.
                           000676  2693 	XG$Interrupt_Init$0$0 ==.
      000676 22               [24] 2694 	ret
                                   2695 ;------------------------------------------------------------
                                   2696 ;Allocation info for local variables in function 'PCA_Init'
                                   2697 ;------------------------------------------------------------
                           000677  2698 	G$PCA_Init$0$0 ==.
                           000677  2699 	C$Lab5.c$161$1$125 ==.
                                   2700 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:161: void PCA_Init(void)
                                   2701 ;	-----------------------------------------
                                   2702 ;	 function PCA_Init
                                   2703 ;	-----------------------------------------
      000677                       2704 _PCA_Init:
                           000677  2705 	C$Lab5.c$163$1$127 ==.
                                   2706 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:163: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      000677 75 D9 81         [24] 2707 	mov	_PCA0MD,#0x81
                           00067A  2708 	C$Lab5.c$164$1$127 ==.
                                   2709 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:164: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      00067A 75 DA C2         [24] 2710 	mov	_PCA0CPM0,#0xC2
                           00067D  2711 	C$Lab5.c$165$1$127 ==.
                                   2712 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:165: PCA0CPM2 = 0xC2;
      00067D 75 DC C2         [24] 2713 	mov	_PCA0CPM2,#0xC2
                           000680  2714 	C$Lab5.c$166$1$127 ==.
                                   2715 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:166: PCA0CN = 0x40;     // enable PCA
      000680 75 D8 40         [24] 2716 	mov	_PCA0CN,#0x40
                           000683  2717 	C$Lab5.c$167$1$127 ==.
                           000683  2718 	XG$PCA_Init$0$0 ==.
      000683 22               [24] 2719 	ret
                                   2720 ;------------------------------------------------------------
                                   2721 ;Allocation info for local variables in function 'SMB0_Init'
                                   2722 ;------------------------------------------------------------
                           000684  2723 	G$SMB0_Init$0$0 ==.
                           000684  2724 	C$Lab5.c$171$1$127 ==.
                                   2725 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:171: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2726 ;	-----------------------------------------
                                   2727 ;	 function SMB0_Init
                                   2728 ;	-----------------------------------------
      000684                       2729 _SMB0_Init:
                           000684  2730 	C$Lab5.c$173$1$129 ==.
                                   2731 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:173: SMB0CR = 0x93;      // Set SCL to 100KHz
      000684 75 CF 93         [24] 2732 	mov	_SMB0CR,#0x93
                           000687  2733 	C$Lab5.c$174$1$129 ==.
                                   2734 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:174: ENSMB = 1;          // Enable SMBUS0
      000687 D2 C6            [12] 2735 	setb	_ENSMB
                           000689  2736 	C$Lab5.c$175$1$129 ==.
                           000689  2737 	XG$SMB0_Init$0$0 ==.
      000689 22               [24] 2738 	ret
                                   2739 ;------------------------------------------------------------
                                   2740 ;Allocation info for local variables in function 'PCA_ISR'
                                   2741 ;------------------------------------------------------------
                           00068A  2742 	G$PCA_ISR$0$0 ==.
                           00068A  2743 	C$Lab5.c$179$1$129 ==.
                                   2744 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:179: void PCA_ISR(void) __interrupt 9
                                   2745 ;	-----------------------------------------
                                   2746 ;	 function PCA_ISR
                                   2747 ;	-----------------------------------------
      00068A                       2748 _PCA_ISR:
      00068A C0 E0            [24] 2749 	push	acc
      00068C C0 D0            [24] 2750 	push	psw
                           00068E  2751 	C$Lab5.c$181$1$131 ==.
                                   2752 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:181: if (CF)
                           00068E  2753 	C$Lab5.c$183$2$132 ==.
                                   2754 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:183: CF = 0;                     // clear the interrupt flag
      00068E 10 DF 02         [24] 2755 	jbc	_CF,00119$
      000691 80 32            [24] 2756 	sjmp	00106$
      000693                       2757 00119$:
                           000693  2758 	C$Lab5.c$184$2$132 ==.
                                   2759 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:184: nCounts++;					// Counts overflows for initial delay
      000693 05*16            [12] 2760 	inc	_nCounts
      000695 E4               [12] 2761 	clr	a
      000696 B5*16 02         [24] 2762 	cjne	a,_nCounts,00120$
      000699 05*17            [12] 2763 	inc	(_nCounts + 1)
      00069B                       2764 00120$:
                           00069B  2765 	C$Lab5.c$185$2$132 ==.
                                   2766 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:185: PCA0 = PCA_START;
      00069B 75 E9 00         [24] 2767 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      00069E 75 F9 70         [24] 2768 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           0006A1  2769 	C$Lab5.c$186$2$132 ==.
                                   2770 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:186: if (nCounts > 50)			//Initial one second delay
      0006A1 C3               [12] 2771 	clr	c
      0006A2 74 32            [12] 2772 	mov	a,#0x32
      0006A4 95*16            [12] 2773 	subb	a,_nCounts
      0006A6 E4               [12] 2774 	clr	a
      0006A7 95*17            [12] 2775 	subb	a,(_nCounts + 1)
      0006A9 50 08            [24] 2776 	jnc	00102$
                           0006AB  2777 	C$Lab5.c$189$3$133 ==.
                                   2778 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:189: Counts++;               // seconds counter
      0006AB 05*14            [12] 2779 	inc	_Counts
      0006AD E4               [12] 2780 	clr	a
      0006AE B5*14 02         [24] 2781 	cjne	a,_Counts,00122$
      0006B1 05*15            [12] 2782 	inc	(_Counts + 1)
      0006B3                       2783 00122$:
      0006B3                       2784 00102$:
                           0006B3  2785 	C$Lab5.c$191$2$132 ==.
                                   2786 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:191: print_delay++;				// delay for print statements
      0006B3 05*21            [12] 2787 	inc	_print_delay
                           0006B5  2788 	C$Lab5.c$192$2$132 ==.
                                   2789 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:192: a_count++;
      0006B5 05*18            [12] 2790 	inc	_a_count
                           0006B7  2791 	C$Lab5.c$193$2$132 ==.
                                   2792 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:193: if (a_count>=1)
      0006B7 74 FF            [12] 2793 	mov	a,#0x100 - 0x01
      0006B9 25*18            [12] 2794 	add	a,_a_count
      0006BB 50 0B            [24] 2795 	jnc	00108$
                           0006BD  2796 	C$Lab5.c$195$3$134 ==.
                                   2797 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:195: a_count = 0;
      0006BD 75*18 00         [24] 2798 	mov	_a_count,#0x00
                           0006C0  2799 	C$Lab5.c$196$3$134 ==.
                                   2800 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:196: new_accel = 1;
      0006C0 75*1A 01         [24] 2801 	mov	_new_accel,#0x01
      0006C3 80 03            [24] 2802 	sjmp	00108$
      0006C5                       2803 00106$:
                           0006C5  2804 	C$Lab5.c$199$1$131 ==.
                                   2805 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:199: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      0006C5 53 D8 C0         [24] 2806 	anl	_PCA0CN,#0xC0
      0006C8                       2807 00108$:
      0006C8 D0 D0            [24] 2808 	pop	psw
      0006CA D0 E0            [24] 2809 	pop	acc
                           0006CC  2810 	C$Lab5.c$200$1$131 ==.
                           0006CC  2811 	XG$PCA_ISR$0$0 ==.
      0006CC 32               [24] 2812 	reti
                                   2813 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2814 ;	eliminated unneeded push/pop dpl
                                   2815 ;	eliminated unneeded push/pop dph
                                   2816 ;	eliminated unneeded push/pop b
                                   2817 ;------------------------------------------------------------
                                   2818 ;Allocation info for local variables in function 'ADC_Init'
                                   2819 ;------------------------------------------------------------
                           0006CD  2820 	G$ADC_Init$0$0 ==.
                           0006CD  2821 	C$Lab5.c$205$1$131 ==.
                                   2822 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:205: void ADC_Init(void)
                                   2823 ;	-----------------------------------------
                                   2824 ;	 function ADC_Init
                                   2825 ;	-----------------------------------------
      0006CD                       2826 _ADC_Init:
                           0006CD  2827 	C$Lab5.c$207$1$136 ==.
                                   2828 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:207: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      0006CD 75 D1 03         [24] 2829 	mov	_REF0CN,#0x03
                           0006D0  2830 	C$Lab5.c$208$1$136 ==.
                                   2831 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:208: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      0006D0 75 AA 80         [24] 2832 	mov	_ADC1CN,#0x80
                           0006D3  2833 	C$Lab5.c$209$1$136 ==.
                                   2834 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:209: ADC1CF |= 0x01; // Set A/D converter gain to 1
      0006D3 43 AB 01         [24] 2835 	orl	_ADC1CF,#0x01
                           0006D6  2836 	C$Lab5.c$210$1$136 ==.
                           0006D6  2837 	XG$ADC_Init$0$0 ==.
      0006D6 22               [24] 2838 	ret
                                   2839 ;------------------------------------------------------------
                                   2840 ;Allocation info for local variables in function 'read_AD_input'
                                   2841 ;------------------------------------------------------------
                                   2842 ;n                         Allocated to registers 
                                   2843 ;------------------------------------------------------------
                           0006D7  2844 	G$read_AD_input$0$0 ==.
                           0006D7  2845 	C$Lab5.c$214$1$136 ==.
                                   2846 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:214: unsigned char read_AD_input(unsigned char n)
                                   2847 ;	-----------------------------------------
                                   2848 ;	 function read_AD_input
                                   2849 ;	-----------------------------------------
      0006D7                       2850 _read_AD_input:
      0006D7 85 82 AC         [24] 2851 	mov	_AMX1SL,dpl
                           0006DA  2852 	C$Lab5.c$217$1$138 ==.
                                   2853 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:217: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      0006DA AF AA            [24] 2854 	mov	r7,_ADC1CN
      0006DC 74 DF            [12] 2855 	mov	a,#0xDF
      0006DE 5F               [12] 2856 	anl	a,r7
      0006DF F5 AA            [12] 2857 	mov	_ADC1CN,a
                           0006E1  2858 	C$Lab5.c$218$1$138 ==.
                                   2859 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:218: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      0006E1 43 AA 10         [24] 2860 	orl	_ADC1CN,#0x10
                           0006E4  2861 	C$Lab5.c$220$1$138 ==.
                                   2862 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:220: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      0006E4                       2863 00101$:
      0006E4 E5 AA            [12] 2864 	mov	a,_ADC1CN
      0006E6 30 E5 FB         [24] 2865 	jnb	acc.5,00101$
                           0006E9  2866 	C$Lab5.c$222$1$138 ==.
                                   2867 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:222: return ADC1; // Return digital value in ADC1 register
      0006E9 85 9C 82         [24] 2868 	mov	dpl,_ADC1
                           0006EC  2869 	C$Lab5.c$223$1$138 ==.
                           0006EC  2870 	XG$read_AD_input$0$0 ==.
      0006EC 22               [24] 2871 	ret
                                   2872 ;------------------------------------------------------------
                                   2873 ;Allocation info for local variables in function 'Pick_Steering_Gain'
                                   2874 ;------------------------------------------------------------
                                   2875 ;input                     Allocated to registers r7 
                                   2876 ;------------------------------------------------------------
                           0006ED  2877 	G$Pick_Steering_Gain$0$0 ==.
                           0006ED  2878 	C$Lab5.c$227$1$138 ==.
                                   2879 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:227: void Pick_Steering_Gain(void)
                                   2880 ;	-----------------------------------------
                                   2881 ;	 function Pick_Steering_Gain
                                   2882 ;	-----------------------------------------
      0006ED                       2883 _Pick_Steering_Gain:
                           0006ED  2884 	C$Lab5.c$230$1$140 ==.
                                   2885 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:230: printf("\rPlease select a desired steering gain.\n");
      0006ED 74rFB            [12] 2886 	mov	a,#___str_13
      0006EF C0 E0            [24] 2887 	push	acc
      0006F1 74s00            [12] 2888 	mov	a,#(___str_13 >> 8)
      0006F3 C0 E0            [24] 2889 	push	acc
      0006F5 74 80            [12] 2890 	mov	a,#0x80
      0006F7 C0 E0            [24] 2891 	push	acc
      0006F9 12r00r00         [24] 2892 	lcall	_printf
      0006FC 15 81            [12] 2893 	dec	sp
      0006FE 15 81            [12] 2894 	dec	sp
      000700 15 81            [12] 2895 	dec	sp
                           000702  2896 	C$Lab5.c$231$1$140 ==.
                                   2897 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:231: printf("\r'u' will increment by 1. 'd' will decrement by 1.\n");
      000702 74r24            [12] 2898 	mov	a,#___str_14
      000704 C0 E0            [24] 2899 	push	acc
      000706 74s01            [12] 2900 	mov	a,#(___str_14 >> 8)
      000708 C0 E0            [24] 2901 	push	acc
      00070A 74 80            [12] 2902 	mov	a,#0x80
      00070C C0 E0            [24] 2903 	push	acc
      00070E 12r00r00         [24] 2904 	lcall	_printf
      000711 15 81            [12] 2905 	dec	sp
      000713 15 81            [12] 2906 	dec	sp
      000715 15 81            [12] 2907 	dec	sp
                           000717  2908 	C$Lab5.c$232$1$140 ==.
                                   2909 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:232: printf("\r'f' when finished\n");
      000717 74r58            [12] 2910 	mov	a,#___str_15
      000719 C0 E0            [24] 2911 	push	acc
      00071B 74s01            [12] 2912 	mov	a,#(___str_15 >> 8)
      00071D C0 E0            [24] 2913 	push	acc
      00071F 74 80            [12] 2914 	mov	a,#0x80
      000721 C0 E0            [24] 2915 	push	acc
      000723 12r00r00         [24] 2916 	lcall	_printf
      000726 15 81            [12] 2917 	dec	sp
      000728 15 81            [12] 2918 	dec	sp
      00072A 15 81            [12] 2919 	dec	sp
                           00072C  2920 	C$Lab5.c$233$2$141 ==.
                                   2921 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:233: while(1)
      00072C                       2922 00112$:
                           00072C  2923 	C$Lab5.c$235$2$141 ==.
                                   2924 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:235: input = getchar();
      00072C 12r00r4D         [24] 2925 	lcall	_getchar
      00072F AF 82            [24] 2926 	mov	r7,dpl
                           000731  2927 	C$Lab5.c$236$2$141 ==.
                                   2928 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:236: if(input == 'u') steer_gain += 1;
      000731 BF 75 02         [24] 2929 	cjne	r7,#0x75,00102$
      000734 05*28            [12] 2930 	inc	_steer_gain
      000736                       2931 00102$:
                           000736  2932 	C$Lab5.c$237$2$141 ==.
                                   2933 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:237: if(input == 'd') steer_gain -= 1;
      000736 BF 64 02         [24] 2934 	cjne	r7,#0x64,00104$
      000739 15*28            [12] 2935 	dec	_steer_gain
      00073B                       2936 00104$:
                           00073B  2937 	C$Lab5.c$238$2$141 ==.
                                   2938 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:238: if(input == 'f') return;
      00073B BF 66 02         [24] 2939 	cjne	r7,#0x66,00106$
      00073E 80 2E            [24] 2940 	sjmp	00114$
      000740                       2941 00106$:
                           000740  2942 	C$Lab5.c$239$2$141 ==.
                                   2943 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:239: if(steer_gain >= 10) steer_gain = 10;
      000740 74 F6            [12] 2944 	mov	a,#0x100 - 0x0A
      000742 25*28            [12] 2945 	add	a,_steer_gain
      000744 50 03            [24] 2946 	jnc	00108$
      000746 75*28 0A         [24] 2947 	mov	_steer_gain,#0x0A
      000749                       2948 00108$:
                           000749  2949 	C$Lab5.c$240$2$141 ==.
                                   2950 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:240: if(steer_gain <= 0) steer_gain = 0;
      000749 E5*28            [12] 2951 	mov	a,_steer_gain
      00074B 70 02            [24] 2952 	jnz	00110$
      00074D F5*28            [12] 2953 	mov	_steer_gain,a
      00074F                       2954 00110$:
                           00074F  2955 	C$Lab5.c$241$2$141 ==.
                                   2956 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:241: printf("\rDesired steering gain: %u\n", steer_gain);
      00074F AE*28            [24] 2957 	mov	r6,_steer_gain
      000751 7F 00            [12] 2958 	mov	r7,#0x00
      000753 C0 06            [24] 2959 	push	ar6
      000755 C0 07            [24] 2960 	push	ar7
      000757 74r6C            [12] 2961 	mov	a,#___str_16
      000759 C0 E0            [24] 2962 	push	acc
      00075B 74s01            [12] 2963 	mov	a,#(___str_16 >> 8)
      00075D C0 E0            [24] 2964 	push	acc
      00075F 74 80            [12] 2965 	mov	a,#0x80
      000761 C0 E0            [24] 2966 	push	acc
      000763 12r00r00         [24] 2967 	lcall	_printf
      000766 E5 81            [12] 2968 	mov	a,sp
      000768 24 FB            [12] 2969 	add	a,#0xfb
      00076A F5 81            [12] 2970 	mov	sp,a
      00076C 80 BE            [24] 2971 	sjmp	00112$
      00076E                       2972 00114$:
                           00076E  2973 	C$Lab5.c$243$1$140 ==.
                           00076E  2974 	XG$Pick_Steering_Gain$0$0 ==.
      00076E 22               [24] 2975 	ret
                                   2976 ;------------------------------------------------------------
                                   2977 ;Allocation info for local variables in function 'Pick_Drive_Gain'
                                   2978 ;------------------------------------------------------------
                                   2979 ;input                     Allocated to registers r7 
                                   2980 ;------------------------------------------------------------
                           00076F  2981 	G$Pick_Drive_Gain$0$0 ==.
                           00076F  2982 	C$Lab5.c$246$1$140 ==.
                                   2983 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:246: void Pick_Drive_Gain(void)
                                   2984 ;	-----------------------------------------
                                   2985 ;	 function Pick_Drive_Gain
                                   2986 ;	-----------------------------------------
      00076F                       2987 _Pick_Drive_Gain:
                           00076F  2988 	C$Lab5.c$249$1$143 ==.
                                   2989 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:249: printf("\rPlease select a desired drive gain.\n");
      00076F 74r88            [12] 2990 	mov	a,#___str_17
      000771 C0 E0            [24] 2991 	push	acc
      000773 74s01            [12] 2992 	mov	a,#(___str_17 >> 8)
      000775 C0 E0            [24] 2993 	push	acc
      000777 74 80            [12] 2994 	mov	a,#0x80
      000779 C0 E0            [24] 2995 	push	acc
      00077B 12r00r00         [24] 2996 	lcall	_printf
      00077E 15 81            [12] 2997 	dec	sp
      000780 15 81            [12] 2998 	dec	sp
      000782 15 81            [12] 2999 	dec	sp
                           000784  3000 	C$Lab5.c$250$1$143 ==.
                                   3001 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:250: printf("\r'u' will increment by 1. 'd' will decrement by 1.\n");
      000784 74r24            [12] 3002 	mov	a,#___str_14
      000786 C0 E0            [24] 3003 	push	acc
      000788 74s01            [12] 3004 	mov	a,#(___str_14 >> 8)
      00078A C0 E0            [24] 3005 	push	acc
      00078C 74 80            [12] 3006 	mov	a,#0x80
      00078E C0 E0            [24] 3007 	push	acc
      000790 12r00r00         [24] 3008 	lcall	_printf
      000793 15 81            [12] 3009 	dec	sp
      000795 15 81            [12] 3010 	dec	sp
      000797 15 81            [12] 3011 	dec	sp
                           000799  3012 	C$Lab5.c$251$1$143 ==.
                                   3013 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:251: printf("\r'f' when finished\n");
      000799 74r58            [12] 3014 	mov	a,#___str_15
      00079B C0 E0            [24] 3015 	push	acc
      00079D 74s01            [12] 3016 	mov	a,#(___str_15 >> 8)
      00079F C0 E0            [24] 3017 	push	acc
      0007A1 74 80            [12] 3018 	mov	a,#0x80
      0007A3 C0 E0            [24] 3019 	push	acc
      0007A5 12r00r00         [24] 3020 	lcall	_printf
      0007A8 15 81            [12] 3021 	dec	sp
      0007AA 15 81            [12] 3022 	dec	sp
      0007AC 15 81            [12] 3023 	dec	sp
                           0007AE  3024 	C$Lab5.c$252$2$144 ==.
                                   3025 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:252: while(1)
      0007AE                       3026 00112$:
                           0007AE  3027 	C$Lab5.c$254$2$144 ==.
                                   3028 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:254: input = getchar();
      0007AE 12r00r4D         [24] 3029 	lcall	_getchar
      0007B1 AF 82            [24] 3030 	mov	r7,dpl
                           0007B3  3031 	C$Lab5.c$255$2$144 ==.
                                   3032 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:255: if(input == 'u') drive_gain += 1;
      0007B3 BF 75 02         [24] 3033 	cjne	r7,#0x75,00102$
      0007B6 05*29            [12] 3034 	inc	_drive_gain
      0007B8                       3035 00102$:
                           0007B8  3036 	C$Lab5.c$256$2$144 ==.
                                   3037 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:256: if(input == 'd') drive_gain -= 1;
      0007B8 BF 64 02         [24] 3038 	cjne	r7,#0x64,00104$
      0007BB 15*29            [12] 3039 	dec	_drive_gain
      0007BD                       3040 00104$:
                           0007BD  3041 	C$Lab5.c$257$2$144 ==.
                                   3042 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:257: if(input == 'f') return;
      0007BD BF 66 02         [24] 3043 	cjne	r7,#0x66,00106$
      0007C0 80 2E            [24] 3044 	sjmp	00114$
      0007C2                       3045 00106$:
                           0007C2  3046 	C$Lab5.c$258$2$144 ==.
                                   3047 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:258: if(drive_gain >= 10) drive_gain = 10;
      0007C2 74 F6            [12] 3048 	mov	a,#0x100 - 0x0A
      0007C4 25*29            [12] 3049 	add	a,_drive_gain
      0007C6 50 03            [24] 3050 	jnc	00108$
      0007C8 75*29 0A         [24] 3051 	mov	_drive_gain,#0x0A
      0007CB                       3052 00108$:
                           0007CB  3053 	C$Lab5.c$259$2$144 ==.
                                   3054 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:259: if(drive_gain <= 0) drive_gain = 0;
      0007CB E5*29            [12] 3055 	mov	a,_drive_gain
      0007CD 70 02            [24] 3056 	jnz	00110$
      0007CF F5*29            [12] 3057 	mov	_drive_gain,a
      0007D1                       3058 00110$:
                           0007D1  3059 	C$Lab5.c$260$2$144 ==.
                                   3060 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:260: printf("\rDesired drive gain: %u\n", drive_gain);
      0007D1 AE*29            [24] 3061 	mov	r6,_drive_gain
      0007D3 7F 00            [12] 3062 	mov	r7,#0x00
      0007D5 C0 06            [24] 3063 	push	ar6
      0007D7 C0 07            [24] 3064 	push	ar7
      0007D9 74rAE            [12] 3065 	mov	a,#___str_18
      0007DB C0 E0            [24] 3066 	push	acc
      0007DD 74s01            [12] 3067 	mov	a,#(___str_18 >> 8)
      0007DF C0 E0            [24] 3068 	push	acc
      0007E1 74 80            [12] 3069 	mov	a,#0x80
      0007E3 C0 E0            [24] 3070 	push	acc
      0007E5 12r00r00         [24] 3071 	lcall	_printf
      0007E8 E5 81            [12] 3072 	mov	a,sp
      0007EA 24 FB            [12] 3073 	add	a,#0xfb
      0007EC F5 81            [12] 3074 	mov	sp,a
      0007EE 80 BE            [24] 3075 	sjmp	00112$
      0007F0                       3076 00114$:
                           0007F0  3077 	C$Lab5.c$262$1$143 ==.
                           0007F0  3078 	XG$Pick_Drive_Gain$0$0 ==.
      0007F0 22               [24] 3079 	ret
                                   3080 ;------------------------------------------------------------
                                   3081 ;Allocation info for local variables in function 'set_PW'
                                   3082 ;------------------------------------------------------------
                           0007F1  3083 	G$set_PW$0$0 ==.
                           0007F1  3084 	C$Lab5.c$266$1$143 ==.
                                   3085 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:266: void set_PW(void)
                                   3086 ;	-----------------------------------------
                                   3087 ;	 function set_PW
                                   3088 ;	-----------------------------------------
      0007F1                       3089 _set_PW:
                           0007F1  3090 	C$Lab5.c$268$1$146 ==.
                                   3091 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:268: STEER_PW = 2760;
      0007F1 75*1D C8         [24] 3092 	mov	_STEER_PW,#0xC8
      0007F4 75*1E 0A         [24] 3093 	mov	(_STEER_PW + 1),#0x0A
                           0007F7  3094 	C$Lab5.c$275$1$146 ==.
                                   3095 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:275: if(STEER_PW > 3400)
      0007F7 C3               [12] 3096 	clr	c
      0007F8 74 48            [12] 3097 	mov	a,#0x48
      0007FA 95*1D            [12] 3098 	subb	a,_STEER_PW
      0007FC 74 0D            [12] 3099 	mov	a,#0x0D
      0007FE 95*1E            [12] 3100 	subb	a,(_STEER_PW + 1)
      000800 50 06            [24] 3101 	jnc	00104$
                           000802  3102 	C$Lab5.c$277$2$148 ==.
                                   3103 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:277: STEER_PW = 3400;
      000802 75*1D 48         [24] 3104 	mov	_STEER_PW,#0x48
      000805 75*1E 0D         [24] 3105 	mov	(_STEER_PW + 1),#0x0D
      000808                       3106 00104$:
                           000808  3107 	C$Lab5.c$279$1$146 ==.
                                   3108 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:279: PCA0CP0 = 0xFFFF - STEER_PW; // Change pulse width
      000808 74 FF            [12] 3109 	mov	a,#0xFF
      00080A C3               [12] 3110 	clr	c
      00080B 95*1D            [12] 3111 	subb	a,_STEER_PW
      00080D F5 EA            [12] 3112 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      00080F 74 FF            [12] 3113 	mov	a,#0xFF
      000811 95*1E            [12] 3114 	subb	a,(_STEER_PW + 1)
      000813 F5 FA            [12] 3115 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           000815  3116 	C$Lab5.c$280$1$146 ==.
                           000815  3117 	XG$set_PW$0$0 ==.
      000815 22               [24] 3118 	ret
                                   3119 ;------------------------------------------------------------
                                   3120 ;Allocation info for local variables in function 'accelerometer_adjustment'
                                   3121 ;------------------------------------------------------------
                           000816  3122 	G$accelerometer_adjustment$0$0 ==.
                           000816  3123 	C$Lab5.c$290$1$146 ==.
                                   3124 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:290: void accelerometer_adjustment(void)
                                   3125 ;	-----------------------------------------
                                   3126 ;	 function accelerometer_adjustment
                                   3127 ;	-----------------------------------------
      000816                       3128 _accelerometer_adjustment:
                           000816  3129 	C$Lab5.c$294$1$150 ==.
                                   3130 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:294: read_accel();
      000816 12r08r43         [24] 3131 	lcall	_read_accel
                           000819  3132 	C$Lab5.c$295$1$150 ==.
                                   3133 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:295: gx_adj = 0;
      000819 75*26 00         [24] 3134 	mov	_gx_adj,#0x00
                           00081C  3135 	C$Lab5.c$296$1$150 ==.
                           00081C  3136 	XG$accelerometer_adjustment$0$0 ==.
      00081C 22               [24] 3137 	ret
                                   3138 ;------------------------------------------------------------
                                   3139 ;Allocation info for local variables in function 'status_reg_a'
                                   3140 ;------------------------------------------------------------
                                   3141 ;Data                      Allocated with name '_status_reg_a_Data_1_152'
                                   3142 ;addr                      Allocated to registers 
                                   3143 ;------------------------------------------------------------
                           00081D  3144 	G$status_reg_a$0$0 ==.
                           00081D  3145 	C$Lab5.c$298$1$150 ==.
                                   3146 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:298: unsigned char status_reg_a(void)
                                   3147 ;	-----------------------------------------
                                   3148 ;	 function status_reg_a
                                   3149 ;	-----------------------------------------
      00081D                       3150 _status_reg_a:
                           00081D  3151 	C$Lab5.c$302$1$152 ==.
                                   3152 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:302: i2c_read_data(addr, 0x27, Data, 2); // read two byte, starting at reg 0x27
      00081D 75*0Br2A         [24] 3153 	mov	_i2c_read_data_PARM_3,#_status_reg_a_Data_1_152
      000820 75*0C 00         [24] 3154 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000823 75*0D 40         [24] 3155 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000826 75*0A 27         [24] 3156 	mov	_i2c_read_data_PARM_2,#0x27
      000829 75*0E 02         [24] 3157 	mov	_i2c_read_data_PARM_4,#0x02
      00082C 75 82 30         [24] 3158 	mov	dpl,#0x30
      00082F 12r03rE8         [24] 3159 	lcall	_i2c_read_data
                           000832  3160 	C$Lab5.c$303$1$152 ==.
                                   3161 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:303: if (Data[0] && Data[1])
      000832 E5*2A            [12] 3162 	mov	a,_status_reg_a_Data_1_152
      000834 60 09            [24] 3163 	jz	00102$
      000836 E5*2B            [12] 3164 	mov	a,(_status_reg_a_Data_1_152 + 0x0001)
      000838 60 05            [24] 3165 	jz	00102$
                           00083A  3166 	C$Lab5.c$305$2$153 ==.
                                   3167 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:305: return 1;
      00083A 75 82 01         [24] 3168 	mov	dpl,#0x01
      00083D 80 03            [24] 3169 	sjmp	00105$
      00083F                       3170 00102$:
                           00083F  3171 	C$Lab5.c$309$2$154 ==.
                                   3172 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:309: return 0;
      00083F 75 82 00         [24] 3173 	mov	dpl,#0x00
      000842                       3174 00105$:
                           000842  3175 	C$Lab5.c$311$1$152 ==.
                           000842  3176 	XG$status_reg_a$0$0 ==.
      000842 22               [24] 3177 	ret
                                   3178 ;------------------------------------------------------------
                                   3179 ;Allocation info for local variables in function 'read_accel'
                                   3180 ;------------------------------------------------------------
                                   3181 ;Data                      Allocated with name '_read_accel_Data_1_156'
                                   3182 ;addr                      Allocated with name '_read_accel_addr_1_156'
                                   3183 ;x_value                   Allocated to registers r3 r4 
                                   3184 ;y_value                   Allocated to registers r2 r7 
                                   3185 ;i                         Allocated to registers 
                                   3186 ;------------------------------------------------------------
                           000843  3187 	G$read_accel$0$0 ==.
                           000843  3188 	C$Lab5.c$313$1$152 ==.
                                   3189 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:313: void read_accel(void)
                                   3190 ;	-----------------------------------------
                                   3191 ;	 function read_accel
                                   3192 ;	-----------------------------------------
      000843                       3193 _read_accel:
                           000843  3194 	C$Lab5.c$316$1$152 ==.
                                   3195 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:316: unsigned char addr = 0x30;
      000843 75*30 30         [24] 3196 	mov	_read_accel_addr_1_156,#0x30
                           000846  3197 	C$Lab5.c$320$1$156 ==.
                                   3198 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:320: new_accel = 0;
                           000846  3199 	C$Lab5.c$322$1$156 ==.
                                   3200 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:322: avg_gx = 0;
      000846 E4               [12] 3201 	clr	a
      000847 F5*1A            [12] 3202 	mov	_new_accel,a
      000849 F5*10            [12] 3203 	mov	_avg_gx,a
      00084B F5*11            [12] 3204 	mov	(_avg_gx + 1),a
                           00084D  3205 	C$Lab5.c$323$1$156 ==.
                                   3206 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:323: avg_gy = 0;
      00084D F5*12            [12] 3207 	mov	_avg_gy,a
      00084F F5*13            [12] 3208 	mov	(_avg_gy + 1),a
                           000851  3209 	C$Lab5.c$324$1$156 ==.
                                   3210 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:324: if(status_reg_a())
      000851 12r08r1D         [24] 3211 	lcall	_status_reg_a
      000854 E5 82            [12] 3212 	mov	a,dpl
      000856 70 03            [24] 3213 	jnz	00123$
      000858 02r09r09         [24] 3214 	ljmp	00108$
      00085B                       3215 00123$:
                           00085B  3216 	C$Lab5.c$327$2$157 ==.
                                   3217 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:327: for (i=0; i<4; i++) //For 4 iterations (or maybe 8)
      00085B 7D 00            [12] 3218 	mov	r5,#0x00
      00085D 7E 00            [12] 3219 	mov	r6,#0x00
      00085F                       3220 00106$:
                           00085F  3221 	C$Lab5.c$331$3$158 ==.
                                   3222 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:331: if((Data[0] & 0x03) == 0x03)
      00085F 74 03            [12] 3223 	mov	a,#0x03
      000861 55*2C            [12] 3224 	anl	a,_read_accel_Data_1_156
      000863 FC               [12] 3225 	mov	r4,a
      000864 BC 03 5F         [24] 3226 	cjne	r4,#0x03,00107$
                           000867  3227 	C$Lab5.c$335$4$159 ==.
                                   3228 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:335: i2c_read_data(addr, 0x28|0x80, Data, 4); //assert MSB to read mult. Bytes
      000867 75*0Br2C         [24] 3229 	mov	_i2c_read_data_PARM_3,#_read_accel_Data_1_156
      00086A 75*0C 00         [24] 3230 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00086D 75*0D 40         [24] 3231 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000870 75*0A A8         [24] 3232 	mov	_i2c_read_data_PARM_2,#0xA8
      000873 75*0E 04         [24] 3233 	mov	_i2c_read_data_PARM_4,#0x04
      000876 85*30 82         [24] 3234 	mov	dpl,_read_accel_addr_1_156
      000879 C0 06            [24] 3235 	push	ar6
      00087B C0 05            [24] 3236 	push	ar5
      00087D 12r03rE8         [24] 3237 	lcall	_i2c_read_data
      000880 D0 05            [24] 3238 	pop	ar5
      000882 D0 06            [24] 3239 	pop	ar6
                           000884  3240 	C$Lab5.c$340$4$159 ==.
                                   3241 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:340: x_value = ((Data[1] << 8)>>4);
      000884 AC*2D            [24] 3242 	mov	r4,(_read_accel_Data_1_156 + 0x0001)
      000886 7B 00            [12] 3243 	mov	r3,#0x00
      000888 EC               [12] 3244 	mov	a,r4
      000889 C4               [12] 3245 	swap	a
      00088A CB               [12] 3246 	xch	a,r3
      00088B C4               [12] 3247 	swap	a
      00088C 54 0F            [12] 3248 	anl	a,#0x0F
      00088E 6B               [12] 3249 	xrl	a,r3
      00088F CB               [12] 3250 	xch	a,r3
      000890 54 0F            [12] 3251 	anl	a,#0x0F
      000892 CB               [12] 3252 	xch	a,r3
      000893 6B               [12] 3253 	xrl	a,r3
      000894 CB               [12] 3254 	xch	a,r3
      000895 30 E3 02         [24] 3255 	jnb	acc.3,00126$
      000898 44 F0            [12] 3256 	orl	a,#0xF0
      00089A                       3257 00126$:
      00089A FC               [12] 3258 	mov	r4,a
                           00089B  3259 	C$Lab5.c$341$4$159 ==.
                                   3260 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:341: y_value = ((Data[3] << 8)>>4);
      00089B AF*2F            [24] 3261 	mov	r7,(_read_accel_Data_1_156 + 0x0003)
      00089D 7A 00            [12] 3262 	mov	r2,#0x00
      00089F EF               [12] 3263 	mov	a,r7
      0008A0 C4               [12] 3264 	swap	a
      0008A1 CA               [12] 3265 	xch	a,r2
      0008A2 C4               [12] 3266 	swap	a
      0008A3 54 0F            [12] 3267 	anl	a,#0x0F
      0008A5 6A               [12] 3268 	xrl	a,r2
      0008A6 CA               [12] 3269 	xch	a,r2
      0008A7 54 0F            [12] 3270 	anl	a,#0x0F
      0008A9 CA               [12] 3271 	xch	a,r2
      0008AA 6A               [12] 3272 	xrl	a,r2
      0008AB CA               [12] 3273 	xch	a,r2
      0008AC 30 E3 02         [24] 3274 	jnb	acc.3,00127$
      0008AF 44 F0            [12] 3275 	orl	a,#0xF0
      0008B1                       3276 00127$:
      0008B1 FF               [12] 3277 	mov	r7,a
                           0008B2  3278 	C$Lab5.c$343$4$159 ==.
                                   3279 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:343: avg_gx += x_value; //a simple >>4 WILL NOT WORK;
      0008B2 EB               [12] 3280 	mov	a,r3
      0008B3 25*10            [12] 3281 	add	a,_avg_gx
      0008B5 F5*10            [12] 3282 	mov	_avg_gx,a
      0008B7 EC               [12] 3283 	mov	a,r4
      0008B8 35*11            [12] 3284 	addc	a,(_avg_gx + 1)
      0008BA F5*11            [12] 3285 	mov	(_avg_gx + 1),a
                           0008BC  3286 	C$Lab5.c$344$4$159 ==.
                                   3287 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:344: avg_gy += y_value; //it will not set the sign bit correctly
      0008BC EA               [12] 3288 	mov	a,r2
      0008BD 25*12            [12] 3289 	add	a,_avg_gy
      0008BF F5*12            [12] 3290 	mov	_avg_gy,a
      0008C1 EF               [12] 3291 	mov	a,r7
      0008C2 35*13            [12] 3292 	addc	a,(_avg_gy + 1)
      0008C4 F5*13            [12] 3293 	mov	(_avg_gy + 1),a
      0008C6                       3294 00107$:
                           0008C6  3295 	C$Lab5.c$327$2$157 ==.
                                   3296 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:327: for (i=0; i<4; i++) //For 4 iterations (or maybe 8)
      0008C6 0D               [12] 3297 	inc	r5
      0008C7 BD 00 01         [24] 3298 	cjne	r5,#0x00,00128$
      0008CA 0E               [12] 3299 	inc	r6
      0008CB                       3300 00128$:
      0008CB C3               [12] 3301 	clr	c
      0008CC ED               [12] 3302 	mov	a,r5
      0008CD 94 04            [12] 3303 	subb	a,#0x04
      0008CF EE               [12] 3304 	mov	a,r6
      0008D0 64 80            [12] 3305 	xrl	a,#0x80
      0008D2 94 80            [12] 3306 	subb	a,#0x80
      0008D4 50 03            [24] 3307 	jnc	00129$
      0008D6 02r08r5F         [24] 3308 	ljmp	00106$
      0008D9                       3309 00129$:
                           0008D9  3310 	C$Lab5.c$348$2$157 ==.
                                   3311 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:348: avg_gx = (avg_gx >> 2);
      0008D9 E5*11            [12] 3312 	mov	a,(_avg_gx + 1)
      0008DB C3               [12] 3313 	clr	c
      0008DC 13               [12] 3314 	rrc	a
      0008DD C5*10            [12] 3315 	xch	a,_avg_gx
      0008DF 13               [12] 3316 	rrc	a
      0008E0 C5*10            [12] 3317 	xch	a,_avg_gx
      0008E2 C3               [12] 3318 	clr	c
      0008E3 13               [12] 3319 	rrc	a
      0008E4 C5*10            [12] 3320 	xch	a,_avg_gx
      0008E6 13               [12] 3321 	rrc	a
      0008E7 C5*10            [12] 3322 	xch	a,_avg_gx
      0008E9 F5*11            [12] 3323 	mov	(_avg_gx + 1),a
                           0008EB  3324 	C$Lab5.c$349$2$157 ==.
                                   3325 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:349: avg_gy = (avg_gy >> 2);
      0008EB E5*13            [12] 3326 	mov	a,(_avg_gy + 1)
      0008ED C3               [12] 3327 	clr	c
      0008EE 13               [12] 3328 	rrc	a
      0008EF C5*12            [12] 3329 	xch	a,_avg_gy
      0008F1 13               [12] 3330 	rrc	a
      0008F2 C5*12            [12] 3331 	xch	a,_avg_gy
      0008F4 C3               [12] 3332 	clr	c
      0008F5 13               [12] 3333 	rrc	a
      0008F6 C5*12            [12] 3334 	xch	a,_avg_gy
      0008F8 13               [12] 3335 	rrc	a
      0008F9 C5*12            [12] 3336 	xch	a,_avg_gy
      0008FB F5*13            [12] 3337 	mov	(_avg_gy + 1),a
                           0008FD  3338 	C$Lab5.c$351$2$157 ==.
                                   3339 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:351: gx = avg_gx; //(or = avg_gx - x0 if nominal gx offset is known)
      0008FD 85*10*22         [24] 3340 	mov	_gx,_avg_gx
      000900 85*11*23         [24] 3341 	mov	(_gx + 1),(_avg_gx + 1)
                           000903  3342 	C$Lab5.c$352$2$157 ==.
                                   3343 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 5+6\Lab 5\Lab 5 Code\Lab5.c:352: gy = avg_gy; //(or = avg_gy - y0 if nominal gy offset is known)
      000903 85*12*24         [24] 3344 	mov	_gy,_avg_gy
      000906 85*13*25         [24] 3345 	mov	(_gy + 1),(_avg_gy + 1)
      000909                       3346 00108$:
                           000909  3347 	C$Lab5.c$354$1$156 ==.
                           000909  3348 	XG$read_accel$0$0 ==.
      000909 22               [24] 3349 	ret
                                   3350 	.area CSEG    (CODE)
                                   3351 	.area CONST   (CODE)
                           000000  3352 FLab5$__str_0$0$0 == .
      000000                       3353 ___str_0:
      000000 0A                    3354 	.db 0x0A
      000001 54 79 70 65 20 64 69  3355 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3356 	.db 0x00
                           000016  3357 FLab5$__str_1$0$0 == .
      000016                       3358 ___str_1:
      000016 20 20 20 20 20 25 63  3359 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3360 	.db 0x00
                           000026  3361 FLab5$__str_2$0$0 == .
      000026                       3362 ___str_2:
      000026 25 63                 3363 	.ascii "%c"
      000028 00                    3364 	.db 0x00
                           000029  3365 FLab5$__str_3$0$0 == .
      000029                       3366 ___str_3:
      000029 0A                    3367 	.db 0x0A
      00002A 53 74 61 72 74        3368 	.ascii "Start"
      00002F 0D                    3369 	.db 0x0D
      000030 0A                    3370 	.db 0x0A
      000031 00                    3371 	.db 0x00
                           000032  3372 FLab5$__str_4$0$0 == .
      000032                       3373 ___str_4:
      000032 0A                    3374 	.db 0x0A
      000033 0D                    3375 	.db 0x0D
      000034 2D 2D 2D 2D 2D 2D 2D  3376 	.ascii "------------DATA COLLECTION------------"
             2D 2D 2D 2D 2D 44 41
             54 41 20 43 4F 4C 4C
             45 43 54 49 4F 4E 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      00005B 0A                    3377 	.db 0x0A
      00005C 00                    3378 	.db 0x00
                           00005D  3379 FLab5$__str_5$0$0 == .
      00005D                       3380 ___str_5:
      00005D 0D                    3381 	.db 0x0D
      00005E 58 2D 41 63 63 65 6C  3382 	.ascii "X-Acceleration: %u"
             65 72 61 74 69 6F 6E
             3A 20 25 75
      000070 0A                    3383 	.db 0x0A
      000071 00                    3384 	.db 0x00
                           000072  3385 FLab5$__str_6$0$0 == .
      000072                       3386 ___str_6:
      000072 0D                    3387 	.db 0x0D
      000073 59 2D 41 63 63 65 6C  3388 	.ascii "Y-Acceleration: %u"
             65 72 61 74 69 6F 6E
             3A 20 25 75
      000085 0A                    3389 	.db 0x0A
      000086 00                    3390 	.db 0x00
                           000087  3391 FLab5$__str_7$0$0 == .
      000087                       3392 ___str_7:
      000087 0D                    3393 	.db 0x0D
      000088 53 74 65 65 72 69 6E  3394 	.ascii "Steering Gain: %u"
             67 20 47 61 69 6E 3A
             20 25 75
      000099 0A                    3395 	.db 0x0A
      00009A 00                    3396 	.db 0x00
                           00009B  3397 FLab5$__str_8$0$0 == .
      00009B                       3398 ___str_8:
      00009B 0D                    3399 	.db 0x0D
      00009C 44 72 69 76 65 20 47  3400 	.ascii "Drive Gain: %u"
             61 69 6E 3A 20 25 75
      0000AA 0A                    3401 	.db 0x0A
      0000AB 00                    3402 	.db 0x00
                           0000AC  3403 FLab5$__str_9$0$0 == .
      0000AC                       3404 ___str_9:
      0000AC 0D                    3405 	.db 0x0D
      0000AD 56 6F 6C 74 61 67 65  3406 	.ascii "Voltage: %u"
             3A 20 25 75
      0000B8 0A                    3407 	.db 0x0A
      0000B9 00                    3408 	.db 0x00
                           0000BA  3409 FLab5$__str_10$0$0 == .
      0000BA                       3410 ___str_10:
      0000BA 0D                    3411 	.db 0x0D
      0000BB 4F 76 65 72 66 6C 6F  3412 	.ascii "Overflows: %u"
             77 73 3A 20 25 75
      0000C8 0A                    3413 	.db 0x0A
      0000C9 00                    3414 	.db 0x00
                           0000CA  3415 FLab5$__str_11$0$0 == .
      0000CA                       3416 ___str_11:
      0000CA 0D                    3417 	.db 0x0D
      0000CB 53 74 65 65 72 69 6E  3418 	.ascii "Steering Pulsewidth: %u"
             67 20 50 75 6C 73 65
             77 69 64 74 68 3A 20
             25 75
      0000E2 0A                    3419 	.db 0x0A
      0000E3 00                    3420 	.db 0x00
                           0000E4  3421 FLab5$__str_12$0$0 == .
      0000E4                       3422 ___str_12:
      0000E4 0D                    3423 	.db 0x0D
      0000E5 4D 6F 74 6F 72 20 50  3424 	.ascii "Motor Pulsewidth: %u"
             75 6C 73 65 77 69 64
             74 68 3A 20 25 75
      0000F9 0A                    3425 	.db 0x0A
      0000FA 00                    3426 	.db 0x00
                           0000FB  3427 FLab5$__str_13$0$0 == .
      0000FB                       3428 ___str_13:
      0000FB 0D                    3429 	.db 0x0D
      0000FC 50 6C 65 61 73 65 20  3430 	.ascii "Please select a desired steering gain."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 73 74 65 65
             72 69 6E 67 20 67 61
             69 6E 2E
      000122 0A                    3431 	.db 0x0A
      000123 00                    3432 	.db 0x00
                           000124  3433 FLab5$__str_14$0$0 == .
      000124                       3434 ___str_14:
      000124 0D                    3435 	.db 0x0D
      000125 27 75 27 20 77 69 6C  3436 	.ascii "'u' will increment by 1. 'd' will decrement by 1."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 31 2E 20 27 64 27
             20 77 69 6C 6C 20 64
             65 63 72 65 6D 65 6E
             74 20 62 79 20 31 2E
      000156 0A                    3437 	.db 0x0A
      000157 00                    3438 	.db 0x00
                           000158  3439 FLab5$__str_15$0$0 == .
      000158                       3440 ___str_15:
      000158 0D                    3441 	.db 0x0D
      000159 27 66 27 20 77 68 65  3442 	.ascii "'f' when finished"
             6E 20 66 69 6E 69 73
             68 65 64
      00016A 0A                    3443 	.db 0x0A
      00016B 00                    3444 	.db 0x00
                           00016C  3445 FLab5$__str_16$0$0 == .
      00016C                       3446 ___str_16:
      00016C 0D                    3447 	.db 0x0D
      00016D 44 65 73 69 72 65 64  3448 	.ascii "Desired steering gain: %u"
             20 73 74 65 65 72 69
             6E 67 20 67 61 69 6E
             3A 20 25 75
      000186 0A                    3449 	.db 0x0A
      000187 00                    3450 	.db 0x00
                           000188  3451 FLab5$__str_17$0$0 == .
      000188                       3452 ___str_17:
      000188 0D                    3453 	.db 0x0D
      000189 50 6C 65 61 73 65 20  3454 	.ascii "Please select a desired drive gain."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 64 72 69 76
             65 20 67 61 69 6E 2E
      0001AC 0A                    3455 	.db 0x0A
      0001AD 00                    3456 	.db 0x00
                           0001AE  3457 FLab5$__str_18$0$0 == .
      0001AE                       3458 ___str_18:
      0001AE 0D                    3459 	.db 0x0D
      0001AF 44 65 73 69 72 65 64  3460 	.ascii "Desired drive gain: %u"
             20 64 72 69 76 65 20
             67 61 69 6E 3A 20 25
             75
      0001C5 0A                    3461 	.db 0x0A
      0001C6 00                    3462 	.db 0x00
                                   3463 	.area XINIT   (CODE)
                                   3464 	.area CABS    (ABS,CODE)
