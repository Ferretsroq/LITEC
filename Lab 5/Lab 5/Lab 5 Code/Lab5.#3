\/*  Names: Kathryn DiPippo, Rebecca Halzack, Seth Rutman
	Section: 4B
	Date: 4/7/2015
	File name: Lab 5
	Description:
	- Control the steering using code developed in Lab 3 to integrate the compass and ranger systems
	- Read battery voltage using analog to digital conversion
	- Allow display and input usage from the LCD display screen and keypad.Sample code for main function to read the compass and ranger
*/

#include <stdio.h>
#include <stdlib.h>
#include <c8051_SDCC.h> // Include files. This file is available online in LMS
#include <i2c.h>        // Get from LMS, THIS MUST BE INCLUDED AFTER stdio.h
#define PCA_START 28672 // 28672 for exactly 20ms
#define MAX_RANGE 55
#define PW_CENTER 2760
#define PW_MAX 3500
#define PW_MIN 2030

//-----------------------------------------------------------------------------
// Function Prototypes
//-----------------------------------------------------------------------------
void Port_Init(void);   // Initialize ports for input and output
void PCA_Init(void);
void SMB0_Init(void);
void ADC_Init(void);
void Interrupt_Init(void);
void accelerometer_adjustment(void);
void PCA_ISR(void) __interrupt 9;
void set_PW(void);
unsigned char read_AD_input(unsigned char n);
void read_accel(void);
void Pick_Steering_Gain(void);

// Global variables
unsigned int avg_gx = 0;
unsigned int avg_gy = 0;
unsigned int Counts, nCounts;
unsigned char a_count = 0;
unsigned char delay = 0;
unsigned char new_accel = 0;
unsigned int DRIVE_PW = 2760;
unsigned int STEER_PW = 2760;
__sbit __at 0xB7 COMPASS_SWITCH;
__sbit __at 0xB6 RANGER_SWITCH;
unsigned char AD_Result = 0;
unsigned char voltage = 0;
//unsigned char Data[2]; // Data is an array with a length of 2
unsigned char print_delay = 0;
signed int gx = 0;
signed int gy = 0;
signed char gx_adj = 0;
signed char gy_adj = 0;
unsigned char steer_gain = 0;
unsigned char drive_gain = 0;

//=============================================================================
//-----------------------------------------------------------------------------
// Main Function
void main(void)
{
    Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
	Port_Init();    
    Interrupt_Init();   
    PCA_Init();
	ADC_Init();
    SMB0_Init();
	Accel_Init();
    putchar('\r');  // Dummy write to serial port
    printf("\nStart\r\n");
	PCA0CP0 = 0xFFFF - PW_CENTER;
	PCA0CP2 = 0xFFFF - PW_CENTER; //Car isn't moving to start
	Counts = 0;
    while (Counts < 1);  // Wait a long time (1s) for keypad & LCD to initialize
	Pick_Steering_Gain();
	printf("\n\r------------DATA COLLECTION------------\n");
	while (1)
    {
		while(!RANGER_SWITCH && !COMPASS_SWITCH)
		{
			/*if ((new_range)) // enough overflow for a new range
			{
				new_range = 0;	//clear and wait for next ping
				range = read_ranger();	// Read the distance
				if (range != 0xFFFF) //Ignores dummy values from the ranger
				{
					if(range < 18) PCA0CP2 = 0xFFFF - PW_CENTER; //Stop if near an object
					else PCA0CP2 = 0xFFFF - 3300; //Car moves at a constant speed otherwise

					// read_range must start a new ping after a read	
				}
				else   // extraneous value read in; ignore and keep moving
				{
					range_adj = 0;
				}
			}
			AD_Result = read_AD_input(5); //Read analog input on pin 1.5
			voltage = ((12.8/255)*(AD_Result)); //Convert back to input voltage
			if((new_heading))	// enough overflow for a new heading
			{
				new_heading = 0;
				heading = read_compass();	
				//printf("\rThe current direction is %u\n", heading);
				set_PW(); // Adjust pulsewidth based on error function
			}
			*/
			if(print_delay == 20)
			{
				printf("\rX-Acceleration: %u\n", gx);
				printf("\rY-Acceleration: %u\n", gy);
				printf("\rSteering Gain: %u\n", steer_gain);
				printf("\rDrive Gain: %u\n", drive_gain);
				printf("\rVoltage: %u\n", voltage);
				printf("\rOverflows: %u\n", nCounts);
				printf("\rSteering Pulsewidth: %u\n", STEER_PW);
				printf("\rMotor Pulsewidth: %u\n", DRIVE_PW);
				print_delay = 0;

			}
			if(new_accel)
			{
				new_accel = 0;
				read_accel();
			}
			// Output the results for transfer into excel
	    }
		if(RANGER_SWITCH || COMPASS_SWITCH)
		{
			PCA0CP0 = 0xFFFF - 2760;
			PCA0CP2 = 0xFFFF - 2760;
		}
}
}
//*****************************************************************************
//-----------------------------------------------------------------------------
// Set up ports for input and output
void Port_Init(void)	
{
    XBR0 = 0x27;
	P1MDIN 	&= 0xDF;	// set pin 1.5 for analog input	
	P1MDOUT |= 0x05;	//set output pin for CEX0/2 in push-pull mode
	P1MDOUT &= 0xDF;	// set input pin for 1.5 to open-drain
	P1		|= ~0xDF;	// set input pin for 1.5 to high impedence
	P3MDOUT &= 0x7F;	// set input pin for 3.6/7 to open-drain
	P3		|= ~0x7F;	// set input pin for 3.6/7 to high impedence
	
}                   

//-----------------------------------------------------------------------------
// Set up interrupts
void Interrupt_Init(void)
{
    IE |= 0x02;
    EIE1 |= 0x08;
    EA = 1;
}

//-----------------------------------------------------------------------------
// Set up Programmable Counter Array
void PCA_Init(void)
{
    PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
    PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
	PCA0CPM2 = 0xC2;
    PCA0CN = 0x40;     // enable PCA
}

//-----------------------------------------------------------------------------
// Set up the SMB
void SMB0_Init(void)    // This was at the top, moved it here to call wait()
{
    SMB0CR = 0x93;      // Set SCL to 100KHz
    ENSMB = 1;          // Enable SMBUS0
}

//-----------------------------------------------------------------------------
// PCA_ISR: Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
void PCA_ISR(void) __interrupt 9
{
    if (CF)
    {
        CF = 0;                     // clear the interrupt flag
        nCounts++;					// Counts overflows for initial delay
        PCA0 = PCA_START;
        if (nCounts > 50)			//Initial one second delay
        {
            //nCounts = 0;
            Counts++;               // seconds counter
        }
		print_delay++;				// delay for print statements
		a_count++;
		if (a_count>=1)
		{
			a_count = 0;
			new_accel = 1;
		}
     }
     else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
}

//-------------------------------------------------------------------------------
// Analog/Digital Conversion Initialization

void ADC_Init(void)
{
	REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
	ADC1CN = 0x80; // Enable A/D converter (ADC1)
	ADC1CF |= 0x01; // Set A/D converter gain to 1
}

//-------------------------------------------------------------------------------
// Analog/Digital Conversion Function
unsigned char read_AD_input(unsigned char n)
{
	AMX1SL = n; // Set P1.n as the analog input for ADC1
	ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
	ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion

	while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete

	return ADC1; // Return digital value in ADC1 register
}

//-----------------------------------------------------------------------------
//Selecting the steering gain function
void Pick_Steering_Gain(void)
{
	char input;
	printf("\rPlease select a desired steering gain.\n");
	printf("\r'u' will increment by 1. 'd' will decrement by 1.\n");
	printf("\r'f' when finished\n");
	while(1)
	{
		input = getchar();
		if(input == 'u') steer_gain += 1;
		if(input == 'd') steer_gain -= 1;
		if(input == 'f') return;
		if(steer_gain >= 10) steer_gain = 10;
		if(steer_gain <= 0) steer_gain = 0;
		printf("\rDesired steering gain: %u\n", steer_gain);
	}
}
//-----------------------------------------------------------------------------
//Selecting the drive gain function
void Pick_Drive_Gain(void)
{
	char input;
	printf("\rPlease select a desired drive gain.\n");
	printf("\r'u' will increment by 1. 'd' will decrement by 1.\n");
	printf("\r'f' when finished\n");
	while(1)
	{
		input = getchar();
		if(input == 'u') drive_gain += 1;
		if(input == 'd') drive_gain -= 1;
		if(input == 'f') return;
		if(drive_gain >= 10) drive_gain = 10;
		if(drive_gain <= 0) drive_gain = 0;
		printf("\rDesired drive gain: %u\n", drive_gain);
	}
}

//-----------------------------------------------------------------------------
//Adjusting the motor speed
void set_PW(void)
{
	PW = 2760;
	//Stay within limits of the servo
	//Depending on the car, these numbers may need to be determined using Lab 3-1 - Steering
	if(PW < 2100)
	{
		PW = 2100;
	}
	if(PW > 3400)
	{
		PW = 3400;
	}
	PCA0CP2 = 0xFFFF - PW; // Change pulse width
}

// =============================================================================
// Revise the C code used in Lab 4. Write a function that first calls the
// accelerometer initialization routine and then calls a read_accel() function
// and sets the PWM for the steering servo based on the side-to-side tilt of the
// car so that is turns in the direction of the upward slope. Both the
// side-to-side tilt and the front-to-back tilt will be used to determine a PWM
// for the drive motor. The main code will also need to average 4 to 8 samples
// from the accelerometer each time, since there is noise on the signal.
void accelerometer_adjustment(void)
{
	
	//calls the accelerometer initialization routine
	read_accel();
	gx_adj = 0;
}
// returns 1 if the accelerometer is ready to be read
unsigned char status_reg_a(void)
{
	unsigned char Data[2];
	unsigned char addr = 0x30; // the address of the sensor, 0x30 for the accelerometer
	i2c_read_data(addr, 0x27, Data, 2); // read two byte, starting at reg 0x27
	if (Data[0] && Data[1])
	{
		return 1;
	} 
	else 
	{
		return 0;
	}
}

void read_accel(void)
{
	unsigned char Data[4];
	unsigned char addr = 0x30;
	signed int x_value;
	signed int y_value;
	//Wait one 20ms cycle to avoid hitting the SMB too frequently and locking it up - included in PCA_ISR
	new_accel = 0;
	//Clear the averages
	avg_gx = 0;
	avg_gy = 0;
	if(status_reg_a())
	{
		int i;
		for (i=0; i<4; i++) //For 4 iterations (or maybe 8)
		{
			//Read status_reg_a into Data[0] (register 0x27, status_reg_a, indicates when data is ready)
			//Make sure the 2 LSbits are high: (Data[0] & 0x03) == 0x03
			if((Data[0] & 0x03) == 0x03)
			{
				//Read 4 registers starting with 0x28. NOTE: this SMB device follows a modified protocol. To
				//read multiple registers the MSbit of the first register value must be high:
				i2c_read_data(addr, 0x28|0x80, Data, 4); //assert MSB to read mult. Bytes
					//Discard the low byte, and extend the high byte sign to form a 16-bit acceleration
					//value and then shift value to the low 12 bits of the 16-bit integer.
					//Accumulate sum for averaging.
				//read_heading =((Data[0] << 24) | Data[1] << 16 | Data[2] << 8 | Data[3]); //combine the four values
				x_value = ((Data[1] << 8)>>4);
				y_value = ((Data[3] << 8)>>4);

				avg_gx += x_value; //a simple >>4 WILL NOT WORK;
				avg_gy += y_value; //it will not set the sign bit correctly
			}
		} //Done with 4 iterations
		//Finish calculating averages.
		avg_gx = (avg_gx >> 2);
		avg_gy = (avg_gy >> 2);
		//Set global variables and remove constant offset, if known.
		gx = avg_gx; //(or = avg_gx - x0 if nominal gx offset is known)
		gy = avg_gy; //(or = avg_gy - y0 if nominal gy offset is known)
	}
}

// =============================================================================
// Continue to use routines to output parameter and settings on both the LCD
// display and SecureCRT terminal to aid in troubleshooting.

// =============================================================================
// As in Lab 4, there will be parameters to adjust affecting the behavior of
// the system. This time there are 3 different adjustable proportional gain
// feedback constants that must be optimized to give the car the best performance.
// Write C code to allow user entry of gain constants using the keypad or terminal.