compiler directives
	...
declare global variables
	unsigned int PCA_START = 28672;
	unsigned int PW_CENTER = 2760;
	unsigned int PW_MIN = 2030;
	unsigned int PW_MAX = 3500;
	unsigned int PW = 0;
	unsigned int counts = 0;
	unsigned char new_range = 0;
	unsigned char r_count = 0;
function prototypes
	void Port_Init(void);
	void PCA_Init (void);
	void XBR0_Init(void);
	unsigned int ReadRanger(void);
	void PCA_ISR (void) __interrupt 9;
	void SMB_Init(void);

//------------------------------------------------------------------------------
main function
	initialize system
	initialize ports
	initialize XBR0
	initialize PCA board
	initialize the SMBus
	print "Embedded Control Steering Calibration"
	set initial value for PW to neutral position
	set the servo motor in neutral for one second
	while true
		continuously run the ReadRanger function for the rest of the run
		set range equal to ReadRanger()
		print the value of the range in cm for debugging
	end while
end main function

//-----------------------------------------------------------------------------
Functions
//-----------------------------------------------------------------------------

//-----------------------------------------------------------------------------
Port_Init
	set output pin for CEX0 in push-pull mode
end Port_Init

//-----------------------------------------------------------------------------
// Set up the crossbar
XBR0_Init
	configure crossbar with UART, SPI, SMBus, and CEX channels as in worksheet
end XBR0_Init

//-----------------------------------------------------------------------------
// Set up the SMB
SMB_Init
	Set SCL to 100KHz
	Bit 6 of SMB0CN, enable the SMBus
end SMB_Init

//-----------------------------------------------------------------------------
// Set up Programmable Counter Array
PCA_Init
	CCM2 in 16-bit compare mode
	Enable PCA Counter
	Enable CF Interrupt and SYSCLK/12
	Enable Global Interrupts
	Enable PCA Interrupt
end PCA_Init

//-----------------------------------------------------------------------------
// Interrupt Service Routine for Programmable Counter Array Overflow Interrupt
PCA_ISR
	if CF overflow flag is enabled
		increment r_count
		if r_count >= 4
			modify new_range to be equal to 1
			clear r_count
		end if statement
		Start count for 20ms period
		Clear overflow flag
		print "We are getting overflows!"
	else
		Handle other PCA interrupt sources
	end if statement
end PCA_ISR

//-------------------------------------------------------------------------------
// Ranger Reading Function
ReadRanger
	set the address of the sensor, 0xC0 for the compass
	initialize Data as an array with a length of 2
	set the range to be equal to 0 as default
	read two byte, starting at reg 2, using i2c header file
	set range to be the combination of the two values
	write 0x51 to reg 0 of the ranger:
	write one byte of data to reg 0 at addr
	return range
end ReadRanger