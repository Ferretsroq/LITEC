                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri Apr 03 13:29:00 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab_3_3_Speed
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _putchar
                                     16 	.globl _vsprintf
                                     17 	.globl _printf
                                     18 	.globl _Sys_Init
                                     19 	.globl _UART0_Init
                                     20 	.globl _SYSCLK_Init
                                     21 	.globl _SWITCH
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _start_delay
                                    308 	.globl _delay
                                    309 	.globl _range
                                    310 	.globl _neutral
                                    311 	.globl _r_count
                                    312 	.globl _new_range
                                    313 	.globl _counts
                                    314 	.globl _PW
                                    315 	.globl _PW_MAX
                                    316 	.globl _PW_MIN
                                    317 	.globl _PW_CENTER
                                    318 	.globl _PCA_START
                                    319 	.globl _i2c_read_data_PARM_4
                                    320 	.globl _i2c_read_data_PARM_3
                                    321 	.globl _i2c_read_data_PARM_2
                                    322 	.globl _i2c_write_data_PARM_4
                                    323 	.globl _i2c_write_data_PARM_3
                                    324 	.globl _i2c_write_data_PARM_2
                                    325 	.globl _lcd_print
                                    326 	.globl _lcd_clear
                                    327 	.globl _kpd_input
                                    328 	.globl _delay_time
                                    329 	.globl _i2c_start
                                    330 	.globl _i2c_write
                                    331 	.globl _i2c_write_and_stop
                                    332 	.globl _i2c_read
                                    333 	.globl _i2c_read_and_stop
                                    334 	.globl _i2c_write_data
                                    335 	.globl _i2c_read_data
                                    336 	.globl _Accel_Init
                                    337 	.globl _Port_Init
                                    338 	.globl _XBR0_Init
                                    339 	.globl _SMB_Init
                                    340 	.globl _PCA_Init
                                    341 	.globl _PCA_ISR
                                    342 	.globl _ReadRanger
                                    343 	.globl _Drive_Motor
                                    344 	.globl _DeterminePWM
                                    345 ;--------------------------------------------------------
                                    346 ; special function registers
                                    347 ;--------------------------------------------------------
                                    348 	.area RSEG    (ABS,DATA)
      000000                        349 	.org 0x0000
                           000080   350 G$P0$0$0 == 0x0080
                           000080   351 _P0	=	0x0080
                           000081   352 G$SP$0$0 == 0x0081
                           000081   353 _SP	=	0x0081
                           000082   354 G$DPL$0$0 == 0x0082
                           000082   355 _DPL	=	0x0082
                           000083   356 G$DPH$0$0 == 0x0083
                           000083   357 _DPH	=	0x0083
                           000084   358 G$P4$0$0 == 0x0084
                           000084   359 _P4	=	0x0084
                           000085   360 G$P5$0$0 == 0x0085
                           000085   361 _P5	=	0x0085
                           000086   362 G$P6$0$0 == 0x0086
                           000086   363 _P6	=	0x0086
                           000087   364 G$PCON$0$0 == 0x0087
                           000087   365 _PCON	=	0x0087
                           000088   366 G$TCON$0$0 == 0x0088
                           000088   367 _TCON	=	0x0088
                           000089   368 G$TMOD$0$0 == 0x0089
                           000089   369 _TMOD	=	0x0089
                           00008A   370 G$TL0$0$0 == 0x008a
                           00008A   371 _TL0	=	0x008a
                           00008B   372 G$TL1$0$0 == 0x008b
                           00008B   373 _TL1	=	0x008b
                           00008C   374 G$TH0$0$0 == 0x008c
                           00008C   375 _TH0	=	0x008c
                           00008D   376 G$TH1$0$0 == 0x008d
                           00008D   377 _TH1	=	0x008d
                           00008E   378 G$CKCON$0$0 == 0x008e
                           00008E   379 _CKCON	=	0x008e
                           00008F   380 G$PSCTL$0$0 == 0x008f
                           00008F   381 _PSCTL	=	0x008f
                           000090   382 G$P1$0$0 == 0x0090
                           000090   383 _P1	=	0x0090
                           000091   384 G$TMR3CN$0$0 == 0x0091
                           000091   385 _TMR3CN	=	0x0091
                           000092   386 G$TMR3RLL$0$0 == 0x0092
                           000092   387 _TMR3RLL	=	0x0092
                           000093   388 G$TMR3RLH$0$0 == 0x0093
                           000093   389 _TMR3RLH	=	0x0093
                           000094   390 G$TMR3L$0$0 == 0x0094
                           000094   391 _TMR3L	=	0x0094
                           000095   392 G$TMR3H$0$0 == 0x0095
                           000095   393 _TMR3H	=	0x0095
                           000096   394 G$P7$0$0 == 0x0096
                           000096   395 _P7	=	0x0096
                           000098   396 G$SCON$0$0 == 0x0098
                           000098   397 _SCON	=	0x0098
                           000098   398 G$SCON0$0$0 == 0x0098
                           000098   399 _SCON0	=	0x0098
                           000099   400 G$SBUF$0$0 == 0x0099
                           000099   401 _SBUF	=	0x0099
                           000099   402 G$SBUF0$0$0 == 0x0099
                           000099   403 _SBUF0	=	0x0099
                           00009A   404 G$SPI0CFG$0$0 == 0x009a
                           00009A   405 _SPI0CFG	=	0x009a
                           00009B   406 G$SPI0DAT$0$0 == 0x009b
                           00009B   407 _SPI0DAT	=	0x009b
                           00009C   408 G$ADC1$0$0 == 0x009c
                           00009C   409 _ADC1	=	0x009c
                           00009D   410 G$SPI0CKR$0$0 == 0x009d
                           00009D   411 _SPI0CKR	=	0x009d
                           00009E   412 G$CPT0CN$0$0 == 0x009e
                           00009E   413 _CPT0CN	=	0x009e
                           00009F   414 G$CPT1CN$0$0 == 0x009f
                           00009F   415 _CPT1CN	=	0x009f
                           0000A0   416 G$P2$0$0 == 0x00a0
                           0000A0   417 _P2	=	0x00a0
                           0000A1   418 G$EMI0TC$0$0 == 0x00a1
                           0000A1   419 _EMI0TC	=	0x00a1
                           0000A3   420 G$EMI0CF$0$0 == 0x00a3
                           0000A3   421 _EMI0CF	=	0x00a3
                           0000A4   422 G$PRT0CF$0$0 == 0x00a4
                           0000A4   423 _PRT0CF	=	0x00a4
                           0000A4   424 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   425 _P0MDOUT	=	0x00a4
                           0000A5   426 G$PRT1CF$0$0 == 0x00a5
                           0000A5   427 _PRT1CF	=	0x00a5
                           0000A5   428 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   429 _P1MDOUT	=	0x00a5
                           0000A6   430 G$PRT2CF$0$0 == 0x00a6
                           0000A6   431 _PRT2CF	=	0x00a6
                           0000A6   432 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   433 _P2MDOUT	=	0x00a6
                           0000A7   434 G$PRT3CF$0$0 == 0x00a7
                           0000A7   435 _PRT3CF	=	0x00a7
                           0000A7   436 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   437 _P3MDOUT	=	0x00a7
                           0000A8   438 G$IE$0$0 == 0x00a8
                           0000A8   439 _IE	=	0x00a8
                           0000A9   440 G$SADDR0$0$0 == 0x00a9
                           0000A9   441 _SADDR0	=	0x00a9
                           0000AA   442 G$ADC1CN$0$0 == 0x00aa
                           0000AA   443 _ADC1CN	=	0x00aa
                           0000AB   444 G$ADC1CF$0$0 == 0x00ab
                           0000AB   445 _ADC1CF	=	0x00ab
                           0000AC   446 G$AMX1SL$0$0 == 0x00ac
                           0000AC   447 _AMX1SL	=	0x00ac
                           0000AD   448 G$P3IF$0$0 == 0x00ad
                           0000AD   449 _P3IF	=	0x00ad
                           0000AE   450 G$SADEN1$0$0 == 0x00ae
                           0000AE   451 _SADEN1	=	0x00ae
                           0000AF   452 G$EMI0CN$0$0 == 0x00af
                           0000AF   453 _EMI0CN	=	0x00af
                           0000AF   454 G$_XPAGE$0$0 == 0x00af
                           0000AF   455 __XPAGE	=	0x00af
                           0000B0   456 G$P3$0$0 == 0x00b0
                           0000B0   457 _P3	=	0x00b0
                           0000B1   458 G$OSCXCN$0$0 == 0x00b1
                           0000B1   459 _OSCXCN	=	0x00b1
                           0000B2   460 G$OSCICN$0$0 == 0x00b2
                           0000B2   461 _OSCICN	=	0x00b2
                           0000B5   462 G$P74OUT$0$0 == 0x00b5
                           0000B5   463 _P74OUT	=	0x00b5
                           0000B6   464 G$FLSCL$0$0 == 0x00b6
                           0000B6   465 _FLSCL	=	0x00b6
                           0000B7   466 G$FLACL$0$0 == 0x00b7
                           0000B7   467 _FLACL	=	0x00b7
                           0000B8   468 G$IP$0$0 == 0x00b8
                           0000B8   469 _IP	=	0x00b8
                           0000B9   470 G$SADEN0$0$0 == 0x00b9
                           0000B9   471 _SADEN0	=	0x00b9
                           0000BA   472 G$AMX0CF$0$0 == 0x00ba
                           0000BA   473 _AMX0CF	=	0x00ba
                           0000BB   474 G$AMX0SL$0$0 == 0x00bb
                           0000BB   475 _AMX0SL	=	0x00bb
                           0000BC   476 G$ADC0CF$0$0 == 0x00bc
                           0000BC   477 _ADC0CF	=	0x00bc
                           0000BD   478 G$P1MDIN$0$0 == 0x00bd
                           0000BD   479 _P1MDIN	=	0x00bd
                           0000BE   480 G$ADC0L$0$0 == 0x00be
                           0000BE   481 _ADC0L	=	0x00be
                           0000BF   482 G$ADC0H$0$0 == 0x00bf
                           0000BF   483 _ADC0H	=	0x00bf
                           0000C0   484 G$SMB0CN$0$0 == 0x00c0
                           0000C0   485 _SMB0CN	=	0x00c0
                           0000C1   486 G$SMB0STA$0$0 == 0x00c1
                           0000C1   487 _SMB0STA	=	0x00c1
                           0000C2   488 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   489 _SMB0DAT	=	0x00c2
                           0000C3   490 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   491 _SMB0ADR	=	0x00c3
                           0000C4   492 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   493 _ADC0GTL	=	0x00c4
                           0000C5   494 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   495 _ADC0GTH	=	0x00c5
                           0000C6   496 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   497 _ADC0LTL	=	0x00c6
                           0000C7   498 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   499 _ADC0LTH	=	0x00c7
                           0000C8   500 G$T2CON$0$0 == 0x00c8
                           0000C8   501 _T2CON	=	0x00c8
                           0000C9   502 G$T4CON$0$0 == 0x00c9
                           0000C9   503 _T4CON	=	0x00c9
                           0000CA   504 G$RCAP2L$0$0 == 0x00ca
                           0000CA   505 _RCAP2L	=	0x00ca
                           0000CB   506 G$RCAP2H$0$0 == 0x00cb
                           0000CB   507 _RCAP2H	=	0x00cb
                           0000CC   508 G$TL2$0$0 == 0x00cc
                           0000CC   509 _TL2	=	0x00cc
                           0000CD   510 G$TH2$0$0 == 0x00cd
                           0000CD   511 _TH2	=	0x00cd
                           0000CF   512 G$SMB0CR$0$0 == 0x00cf
                           0000CF   513 _SMB0CR	=	0x00cf
                           0000D0   514 G$PSW$0$0 == 0x00d0
                           0000D0   515 _PSW	=	0x00d0
                           0000D1   516 G$REF0CN$0$0 == 0x00d1
                           0000D1   517 _REF0CN	=	0x00d1
                           0000D2   518 G$DAC0L$0$0 == 0x00d2
                           0000D2   519 _DAC0L	=	0x00d2
                           0000D3   520 G$DAC0H$0$0 == 0x00d3
                           0000D3   521 _DAC0H	=	0x00d3
                           0000D4   522 G$DAC0CN$0$0 == 0x00d4
                           0000D4   523 _DAC0CN	=	0x00d4
                           0000D5   524 G$DAC1L$0$0 == 0x00d5
                           0000D5   525 _DAC1L	=	0x00d5
                           0000D6   526 G$DAC1H$0$0 == 0x00d6
                           0000D6   527 _DAC1H	=	0x00d6
                           0000D7   528 G$DAC1CN$0$0 == 0x00d7
                           0000D7   529 _DAC1CN	=	0x00d7
                           0000D8   530 G$PCA0CN$0$0 == 0x00d8
                           0000D8   531 _PCA0CN	=	0x00d8
                           0000D9   532 G$PCA0MD$0$0 == 0x00d9
                           0000D9   533 _PCA0MD	=	0x00d9
                           0000DA   534 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   535 _PCA0CPM0	=	0x00da
                           0000DB   536 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   537 _PCA0CPM1	=	0x00db
                           0000DC   538 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   539 _PCA0CPM2	=	0x00dc
                           0000DD   540 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   541 _PCA0CPM3	=	0x00dd
                           0000DE   542 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   543 _PCA0CPM4	=	0x00de
                           0000E0   544 G$ACC$0$0 == 0x00e0
                           0000E0   545 _ACC	=	0x00e0
                           0000E1   546 G$XBR0$0$0 == 0x00e1
                           0000E1   547 _XBR0	=	0x00e1
                           0000E2   548 G$XBR1$0$0 == 0x00e2
                           0000E2   549 _XBR1	=	0x00e2
                           0000E3   550 G$XBR2$0$0 == 0x00e3
                           0000E3   551 _XBR2	=	0x00e3
                           0000E4   552 G$RCAP4L$0$0 == 0x00e4
                           0000E4   553 _RCAP4L	=	0x00e4
                           0000E5   554 G$RCAP4H$0$0 == 0x00e5
                           0000E5   555 _RCAP4H	=	0x00e5
                           0000E6   556 G$EIE1$0$0 == 0x00e6
                           0000E6   557 _EIE1	=	0x00e6
                           0000E7   558 G$EIE2$0$0 == 0x00e7
                           0000E7   559 _EIE2	=	0x00e7
                           0000E8   560 G$ADC0CN$0$0 == 0x00e8
                           0000E8   561 _ADC0CN	=	0x00e8
                           0000E9   562 G$PCA0L$0$0 == 0x00e9
                           0000E9   563 _PCA0L	=	0x00e9
                           0000EA   564 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   565 _PCA0CPL0	=	0x00ea
                           0000EB   566 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   567 _PCA0CPL1	=	0x00eb
                           0000EC   568 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   569 _PCA0CPL2	=	0x00ec
                           0000ED   570 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   571 _PCA0CPL3	=	0x00ed
                           0000EE   572 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   573 _PCA0CPL4	=	0x00ee
                           0000EF   574 G$RSTSRC$0$0 == 0x00ef
                           0000EF   575 _RSTSRC	=	0x00ef
                           0000F0   576 G$B$0$0 == 0x00f0
                           0000F0   577 _B	=	0x00f0
                           0000F1   578 G$SCON1$0$0 == 0x00f1
                           0000F1   579 _SCON1	=	0x00f1
                           0000F2   580 G$SBUF1$0$0 == 0x00f2
                           0000F2   581 _SBUF1	=	0x00f2
                           0000F3   582 G$SADDR1$0$0 == 0x00f3
                           0000F3   583 _SADDR1	=	0x00f3
                           0000F4   584 G$TL4$0$0 == 0x00f4
                           0000F4   585 _TL4	=	0x00f4
                           0000F5   586 G$TH4$0$0 == 0x00f5
                           0000F5   587 _TH4	=	0x00f5
                           0000F6   588 G$EIP1$0$0 == 0x00f6
                           0000F6   589 _EIP1	=	0x00f6
                           0000F7   590 G$EIP2$0$0 == 0x00f7
                           0000F7   591 _EIP2	=	0x00f7
                           0000F8   592 G$SPI0CN$0$0 == 0x00f8
                           0000F8   593 _SPI0CN	=	0x00f8
                           0000F9   594 G$PCA0H$0$0 == 0x00f9
                           0000F9   595 _PCA0H	=	0x00f9
                           0000FA   596 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   597 _PCA0CPH0	=	0x00fa
                           0000FB   598 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   599 _PCA0CPH1	=	0x00fb
                           0000FC   600 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   601 _PCA0CPH2	=	0x00fc
                           0000FD   602 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   603 _PCA0CPH3	=	0x00fd
                           0000FE   604 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   605 _PCA0CPH4	=	0x00fe
                           0000FF   606 G$WDTCN$0$0 == 0x00ff
                           0000FF   607 _WDTCN	=	0x00ff
                           008C8A   608 G$TMR0$0$0 == 0x8c8a
                           008C8A   609 _TMR0	=	0x8c8a
                           008D8B   610 G$TMR1$0$0 == 0x8d8b
                           008D8B   611 _TMR1	=	0x8d8b
                           00CDCC   612 G$TMR2$0$0 == 0xcdcc
                           00CDCC   613 _TMR2	=	0xcdcc
                           00CBCA   614 G$RCAP2$0$0 == 0xcbca
                           00CBCA   615 _RCAP2	=	0xcbca
                           009594   616 G$TMR3$0$0 == 0x9594
                           009594   617 _TMR3	=	0x9594
                           009392   618 G$TMR3RL$0$0 == 0x9392
                           009392   619 _TMR3RL	=	0x9392
                           00F5F4   620 G$TMR4$0$0 == 0xf5f4
                           00F5F4   621 _TMR4	=	0xf5f4
                           00E5E4   622 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   623 _RCAP4	=	0xe5e4
                           00BFBE   624 G$ADC0$0$0 == 0xbfbe
                           00BFBE   625 _ADC0	=	0xbfbe
                           00C5C4   626 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   627 _ADC0GT	=	0xc5c4
                           00C7C6   628 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   629 _ADC0LT	=	0xc7c6
                           00D3D2   630 G$DAC0$0$0 == 0xd3d2
                           00D3D2   631 _DAC0	=	0xd3d2
                           00D6D5   632 G$DAC1$0$0 == 0xd6d5
                           00D6D5   633 _DAC1	=	0xd6d5
                           00F9E9   634 G$PCA0$0$0 == 0xf9e9
                           00F9E9   635 _PCA0	=	0xf9e9
                           00FAEA   636 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   637 _PCA0CP0	=	0xfaea
                           00FBEB   638 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   639 _PCA0CP1	=	0xfbeb
                           00FCEC   640 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   641 _PCA0CP2	=	0xfcec
                           00FDED   642 G$PCA0CP3$0$0 == 0xfded
                           00FDED   643 _PCA0CP3	=	0xfded
                           00FEEE   644 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   645 _PCA0CP4	=	0xfeee
                                    646 ;--------------------------------------------------------
                                    647 ; special function bits
                                    648 ;--------------------------------------------------------
                                    649 	.area RSEG    (ABS,DATA)
      000000                        650 	.org 0x0000
                           000080   651 G$P0_0$0$0 == 0x0080
                           000080   652 _P0_0	=	0x0080
                           000081   653 G$P0_1$0$0 == 0x0081
                           000081   654 _P0_1	=	0x0081
                           000082   655 G$P0_2$0$0 == 0x0082
                           000082   656 _P0_2	=	0x0082
                           000083   657 G$P0_3$0$0 == 0x0083
                           000083   658 _P0_3	=	0x0083
                           000084   659 G$P0_4$0$0 == 0x0084
                           000084   660 _P0_4	=	0x0084
                           000085   661 G$P0_5$0$0 == 0x0085
                           000085   662 _P0_5	=	0x0085
                           000086   663 G$P0_6$0$0 == 0x0086
                           000086   664 _P0_6	=	0x0086
                           000087   665 G$P0_7$0$0 == 0x0087
                           000087   666 _P0_7	=	0x0087
                           000088   667 G$IT0$0$0 == 0x0088
                           000088   668 _IT0	=	0x0088
                           000089   669 G$IE0$0$0 == 0x0089
                           000089   670 _IE0	=	0x0089
                           00008A   671 G$IT1$0$0 == 0x008a
                           00008A   672 _IT1	=	0x008a
                           00008B   673 G$IE1$0$0 == 0x008b
                           00008B   674 _IE1	=	0x008b
                           00008C   675 G$TR0$0$0 == 0x008c
                           00008C   676 _TR0	=	0x008c
                           00008D   677 G$TF0$0$0 == 0x008d
                           00008D   678 _TF0	=	0x008d
                           00008E   679 G$TR1$0$0 == 0x008e
                           00008E   680 _TR1	=	0x008e
                           00008F   681 G$TF1$0$0 == 0x008f
                           00008F   682 _TF1	=	0x008f
                           000090   683 G$P1_0$0$0 == 0x0090
                           000090   684 _P1_0	=	0x0090
                           000091   685 G$P1_1$0$0 == 0x0091
                           000091   686 _P1_1	=	0x0091
                           000092   687 G$P1_2$0$0 == 0x0092
                           000092   688 _P1_2	=	0x0092
                           000093   689 G$P1_3$0$0 == 0x0093
                           000093   690 _P1_3	=	0x0093
                           000094   691 G$P1_4$0$0 == 0x0094
                           000094   692 _P1_4	=	0x0094
                           000095   693 G$P1_5$0$0 == 0x0095
                           000095   694 _P1_5	=	0x0095
                           000096   695 G$P1_6$0$0 == 0x0096
                           000096   696 _P1_6	=	0x0096
                           000097   697 G$P1_7$0$0 == 0x0097
                           000097   698 _P1_7	=	0x0097
                           000098   699 G$RI$0$0 == 0x0098
                           000098   700 _RI	=	0x0098
                           000098   701 G$RI0$0$0 == 0x0098
                           000098   702 _RI0	=	0x0098
                           000099   703 G$TI$0$0 == 0x0099
                           000099   704 _TI	=	0x0099
                           000099   705 G$TI0$0$0 == 0x0099
                           000099   706 _TI0	=	0x0099
                           00009A   707 G$RB8$0$0 == 0x009a
                           00009A   708 _RB8	=	0x009a
                           00009A   709 G$RB80$0$0 == 0x009a
                           00009A   710 _RB80	=	0x009a
                           00009B   711 G$TB8$0$0 == 0x009b
                           00009B   712 _TB8	=	0x009b
                           00009B   713 G$TB80$0$0 == 0x009b
                           00009B   714 _TB80	=	0x009b
                           00009C   715 G$REN$0$0 == 0x009c
                           00009C   716 _REN	=	0x009c
                           00009C   717 G$REN0$0$0 == 0x009c
                           00009C   718 _REN0	=	0x009c
                           00009D   719 G$SM2$0$0 == 0x009d
                           00009D   720 _SM2	=	0x009d
                           00009D   721 G$SM20$0$0 == 0x009d
                           00009D   722 _SM20	=	0x009d
                           00009D   723 G$MCE0$0$0 == 0x009d
                           00009D   724 _MCE0	=	0x009d
                           00009E   725 G$SM1$0$0 == 0x009e
                           00009E   726 _SM1	=	0x009e
                           00009E   727 G$SM10$0$0 == 0x009e
                           00009E   728 _SM10	=	0x009e
                           00009F   729 G$SM0$0$0 == 0x009f
                           00009F   730 _SM0	=	0x009f
                           00009F   731 G$SM00$0$0 == 0x009f
                           00009F   732 _SM00	=	0x009f
                           00009F   733 G$S0MODE$0$0 == 0x009f
                           00009F   734 _S0MODE	=	0x009f
                           0000A0   735 G$P2_0$0$0 == 0x00a0
                           0000A0   736 _P2_0	=	0x00a0
                           0000A1   737 G$P2_1$0$0 == 0x00a1
                           0000A1   738 _P2_1	=	0x00a1
                           0000A2   739 G$P2_2$0$0 == 0x00a2
                           0000A2   740 _P2_2	=	0x00a2
                           0000A3   741 G$P2_3$0$0 == 0x00a3
                           0000A3   742 _P2_3	=	0x00a3
                           0000A4   743 G$P2_4$0$0 == 0x00a4
                           0000A4   744 _P2_4	=	0x00a4
                           0000A5   745 G$P2_5$0$0 == 0x00a5
                           0000A5   746 _P2_5	=	0x00a5
                           0000A6   747 G$P2_6$0$0 == 0x00a6
                           0000A6   748 _P2_6	=	0x00a6
                           0000A7   749 G$P2_7$0$0 == 0x00a7
                           0000A7   750 _P2_7	=	0x00a7
                           0000A8   751 G$EX0$0$0 == 0x00a8
                           0000A8   752 _EX0	=	0x00a8
                           0000A9   753 G$ET0$0$0 == 0x00a9
                           0000A9   754 _ET0	=	0x00a9
                           0000AA   755 G$EX1$0$0 == 0x00aa
                           0000AA   756 _EX1	=	0x00aa
                           0000AB   757 G$ET1$0$0 == 0x00ab
                           0000AB   758 _ET1	=	0x00ab
                           0000AC   759 G$ES0$0$0 == 0x00ac
                           0000AC   760 _ES0	=	0x00ac
                           0000AC   761 G$ES$0$0 == 0x00ac
                           0000AC   762 _ES	=	0x00ac
                           0000AD   763 G$ET2$0$0 == 0x00ad
                           0000AD   764 _ET2	=	0x00ad
                           0000AF   765 G$EA$0$0 == 0x00af
                           0000AF   766 _EA	=	0x00af
                           0000B0   767 G$P3_0$0$0 == 0x00b0
                           0000B0   768 _P3_0	=	0x00b0
                           0000B1   769 G$P3_1$0$0 == 0x00b1
                           0000B1   770 _P3_1	=	0x00b1
                           0000B2   771 G$P3_2$0$0 == 0x00b2
                           0000B2   772 _P3_2	=	0x00b2
                           0000B3   773 G$P3_3$0$0 == 0x00b3
                           0000B3   774 _P3_3	=	0x00b3
                           0000B4   775 G$P3_4$0$0 == 0x00b4
                           0000B4   776 _P3_4	=	0x00b4
                           0000B5   777 G$P3_5$0$0 == 0x00b5
                           0000B5   778 _P3_5	=	0x00b5
                           0000B6   779 G$P3_6$0$0 == 0x00b6
                           0000B6   780 _P3_6	=	0x00b6
                           0000B7   781 G$P3_7$0$0 == 0x00b7
                           0000B7   782 _P3_7	=	0x00b7
                           0000B8   783 G$PX0$0$0 == 0x00b8
                           0000B8   784 _PX0	=	0x00b8
                           0000B9   785 G$PT0$0$0 == 0x00b9
                           0000B9   786 _PT0	=	0x00b9
                           0000BA   787 G$PX1$0$0 == 0x00ba
                           0000BA   788 _PX1	=	0x00ba
                           0000BB   789 G$PT1$0$0 == 0x00bb
                           0000BB   790 _PT1	=	0x00bb
                           0000BC   791 G$PS0$0$0 == 0x00bc
                           0000BC   792 _PS0	=	0x00bc
                           0000BC   793 G$PS$0$0 == 0x00bc
                           0000BC   794 _PS	=	0x00bc
                           0000BD   795 G$PT2$0$0 == 0x00bd
                           0000BD   796 _PT2	=	0x00bd
                           0000C0   797 G$SMBTOE$0$0 == 0x00c0
                           0000C0   798 _SMBTOE	=	0x00c0
                           0000C1   799 G$SMBFTE$0$0 == 0x00c1
                           0000C1   800 _SMBFTE	=	0x00c1
                           0000C2   801 G$AA$0$0 == 0x00c2
                           0000C2   802 _AA	=	0x00c2
                           0000C3   803 G$SI$0$0 == 0x00c3
                           0000C3   804 _SI	=	0x00c3
                           0000C4   805 G$STO$0$0 == 0x00c4
                           0000C4   806 _STO	=	0x00c4
                           0000C5   807 G$STA$0$0 == 0x00c5
                           0000C5   808 _STA	=	0x00c5
                           0000C6   809 G$ENSMB$0$0 == 0x00c6
                           0000C6   810 _ENSMB	=	0x00c6
                           0000C7   811 G$BUSY$0$0 == 0x00c7
                           0000C7   812 _BUSY	=	0x00c7
                           0000C8   813 G$CPRL2$0$0 == 0x00c8
                           0000C8   814 _CPRL2	=	0x00c8
                           0000C9   815 G$CT2$0$0 == 0x00c9
                           0000C9   816 _CT2	=	0x00c9
                           0000CA   817 G$TR2$0$0 == 0x00ca
                           0000CA   818 _TR2	=	0x00ca
                           0000CB   819 G$EXEN2$0$0 == 0x00cb
                           0000CB   820 _EXEN2	=	0x00cb
                           0000CC   821 G$TCLK$0$0 == 0x00cc
                           0000CC   822 _TCLK	=	0x00cc
                           0000CD   823 G$RCLK$0$0 == 0x00cd
                           0000CD   824 _RCLK	=	0x00cd
                           0000CE   825 G$EXF2$0$0 == 0x00ce
                           0000CE   826 _EXF2	=	0x00ce
                           0000CF   827 G$TF2$0$0 == 0x00cf
                           0000CF   828 _TF2	=	0x00cf
                           0000D0   829 G$P$0$0 == 0x00d0
                           0000D0   830 _P	=	0x00d0
                           0000D1   831 G$F1$0$0 == 0x00d1
                           0000D1   832 _F1	=	0x00d1
                           0000D2   833 G$OV$0$0 == 0x00d2
                           0000D2   834 _OV	=	0x00d2
                           0000D3   835 G$RS0$0$0 == 0x00d3
                           0000D3   836 _RS0	=	0x00d3
                           0000D4   837 G$RS1$0$0 == 0x00d4
                           0000D4   838 _RS1	=	0x00d4
                           0000D5   839 G$F0$0$0 == 0x00d5
                           0000D5   840 _F0	=	0x00d5
                           0000D6   841 G$AC$0$0 == 0x00d6
                           0000D6   842 _AC	=	0x00d6
                           0000D7   843 G$CY$0$0 == 0x00d7
                           0000D7   844 _CY	=	0x00d7
                           0000D8   845 G$CCF0$0$0 == 0x00d8
                           0000D8   846 _CCF0	=	0x00d8
                           0000D9   847 G$CCF1$0$0 == 0x00d9
                           0000D9   848 _CCF1	=	0x00d9
                           0000DA   849 G$CCF2$0$0 == 0x00da
                           0000DA   850 _CCF2	=	0x00da
                           0000DB   851 G$CCF3$0$0 == 0x00db
                           0000DB   852 _CCF3	=	0x00db
                           0000DC   853 G$CCF4$0$0 == 0x00dc
                           0000DC   854 _CCF4	=	0x00dc
                           0000DE   855 G$CR$0$0 == 0x00de
                           0000DE   856 _CR	=	0x00de
                           0000DF   857 G$CF$0$0 == 0x00df
                           0000DF   858 _CF	=	0x00df
                           0000E8   859 G$ADLJST$0$0 == 0x00e8
                           0000E8   860 _ADLJST	=	0x00e8
                           0000E8   861 G$AD0LJST$0$0 == 0x00e8
                           0000E8   862 _AD0LJST	=	0x00e8
                           0000E9   863 G$ADWINT$0$0 == 0x00e9
                           0000E9   864 _ADWINT	=	0x00e9
                           0000E9   865 G$AD0WINT$0$0 == 0x00e9
                           0000E9   866 _AD0WINT	=	0x00e9
                           0000EA   867 G$ADSTM0$0$0 == 0x00ea
                           0000EA   868 _ADSTM0	=	0x00ea
                           0000EA   869 G$AD0CM0$0$0 == 0x00ea
                           0000EA   870 _AD0CM0	=	0x00ea
                           0000EB   871 G$ADSTM1$0$0 == 0x00eb
                           0000EB   872 _ADSTM1	=	0x00eb
                           0000EB   873 G$AD0CM1$0$0 == 0x00eb
                           0000EB   874 _AD0CM1	=	0x00eb
                           0000EC   875 G$ADBUSY$0$0 == 0x00ec
                           0000EC   876 _ADBUSY	=	0x00ec
                           0000EC   877 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   878 _AD0BUSY	=	0x00ec
                           0000ED   879 G$ADCINT$0$0 == 0x00ed
                           0000ED   880 _ADCINT	=	0x00ed
                           0000ED   881 G$AD0INT$0$0 == 0x00ed
                           0000ED   882 _AD0INT	=	0x00ed
                           0000EE   883 G$ADCTM$0$0 == 0x00ee
                           0000EE   884 _ADCTM	=	0x00ee
                           0000EE   885 G$AD0TM$0$0 == 0x00ee
                           0000EE   886 _AD0TM	=	0x00ee
                           0000EF   887 G$ADCEN$0$0 == 0x00ef
                           0000EF   888 _ADCEN	=	0x00ef
                           0000EF   889 G$AD0EN$0$0 == 0x00ef
                           0000EF   890 _AD0EN	=	0x00ef
                           0000F8   891 G$SPIEN$0$0 == 0x00f8
                           0000F8   892 _SPIEN	=	0x00f8
                           0000F9   893 G$MSTEN$0$0 == 0x00f9
                           0000F9   894 _MSTEN	=	0x00f9
                           0000FA   895 G$SLVSEL$0$0 == 0x00fa
                           0000FA   896 _SLVSEL	=	0x00fa
                           0000FB   897 G$TXBSY$0$0 == 0x00fb
                           0000FB   898 _TXBSY	=	0x00fb
                           0000FC   899 G$RXOVRN$0$0 == 0x00fc
                           0000FC   900 _RXOVRN	=	0x00fc
                           0000FD   901 G$MODF$0$0 == 0x00fd
                           0000FD   902 _MODF	=	0x00fd
                           0000FE   903 G$WCOL$0$0 == 0x00fe
                           0000FE   904 _WCOL	=	0x00fe
                           0000FF   905 G$SPIF$0$0 == 0x00ff
                           0000FF   906 _SPIF	=	0x00ff
                           0000C7   907 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   908 _BUS_BUSY	=	0x00c7
                           0000C6   909 G$BUS_EN$0$0 == 0x00c6
                           0000C6   910 _BUS_EN	=	0x00c6
                           0000C5   911 G$BUS_START$0$0 == 0x00c5
                           0000C5   912 _BUS_START	=	0x00c5
                           0000C4   913 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   914 _BUS_STOP	=	0x00c4
                           0000C3   915 G$BUS_INT$0$0 == 0x00c3
                           0000C3   916 _BUS_INT	=	0x00c3
                           0000C2   917 G$BUS_AA$0$0 == 0x00c2
                           0000C2   918 _BUS_AA	=	0x00c2
                           0000C1   919 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   920 _BUS_FTE	=	0x00c1
                           0000C0   921 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   922 _BUS_TOE	=	0x00c0
                           000083   923 G$BUS_SCL$0$0 == 0x0083
                           000083   924 _BUS_SCL	=	0x0083
                           0000B6   925 G$SWITCH$0$0 == 0x00b6
                           0000B6   926 _SWITCH	=	0x00b6
                                    927 ;--------------------------------------------------------
                                    928 ; overlayable register banks
                                    929 ;--------------------------------------------------------
                                    930 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        931 	.ds 8
                                    932 ;--------------------------------------------------------
                                    933 ; internal ram data
                                    934 ;--------------------------------------------------------
                                    935 	.area DSEG    (DATA)
                           000000   936 LLab_3_3_Speed.lcd_clear$NumBytes$1$77==.
      000000                        937 _lcd_clear_NumBytes_1_77:
      000000                        938 	.ds 1
                           000001   939 LLab_3_3_Speed.lcd_clear$Cmd$1$77==.
      000001                        940 _lcd_clear_Cmd_1_77:
      000001                        941 	.ds 2
                           000003   942 LLab_3_3_Speed.read_keypad$Data$1$78==.
      000003                        943 _read_keypad_Data_1_78:
      000003                        944 	.ds 2
                           000005   945 LLab_3_3_Speed.i2c_write_data$start_reg$1$97==.
      000005                        946 _i2c_write_data_PARM_2:
      000005                        947 	.ds 1
                           000006   948 LLab_3_3_Speed.i2c_write_data$buffer$1$97==.
      000006                        949 _i2c_write_data_PARM_3:
      000006                        950 	.ds 3
                           000009   951 LLab_3_3_Speed.i2c_write_data$num_bytes$1$97==.
      000009                        952 _i2c_write_data_PARM_4:
      000009                        953 	.ds 1
                           00000A   954 LLab_3_3_Speed.i2c_read_data$start_reg$1$99==.
      00000A                        955 _i2c_read_data_PARM_2:
      00000A                        956 	.ds 1
                           00000B   957 LLab_3_3_Speed.i2c_read_data$buffer$1$99==.
      00000B                        958 _i2c_read_data_PARM_3:
      00000B                        959 	.ds 3
                           00000E   960 LLab_3_3_Speed.i2c_read_data$num_bytes$1$99==.
      00000E                        961 _i2c_read_data_PARM_4:
      00000E                        962 	.ds 1
                           00000F   963 LLab_3_3_Speed.Accel_Init$Data2$1$103==.
      00000F                        964 _Accel_Init_Data2_1_103:
      00000F                        965 	.ds 1
                           000010   966 G$PCA_START$0$0==.
      000010                        967 _PCA_START::
      000010                        968 	.ds 2
                           000012   969 G$PW_CENTER$0$0==.
      000012                        970 _PW_CENTER::
      000012                        971 	.ds 2
                           000014   972 G$PW_MIN$0$0==.
      000014                        973 _PW_MIN::
      000014                        974 	.ds 2
                           000016   975 G$PW_MAX$0$0==.
      000016                        976 _PW_MAX::
      000016                        977 	.ds 2
                           000018   978 G$PW$0$0==.
      000018                        979 _PW::
      000018                        980 	.ds 2
                           00001A   981 G$counts$0$0==.
      00001A                        982 _counts::
      00001A                        983 	.ds 2
                           00001C   984 G$new_range$0$0==.
      00001C                        985 _new_range::
      00001C                        986 	.ds 1
                           00001D   987 G$r_count$0$0==.
      00001D                        988 _r_count::
      00001D                        989 	.ds 1
                           00001E   990 G$neutral$0$0==.
      00001E                        991 _neutral::
      00001E                        992 	.ds 1
                           00001F   993 G$range$0$0==.
      00001F                        994 _range::
      00001F                        995 	.ds 2
                           000021   996 G$delay$0$0==.
      000021                        997 _delay::
      000021                        998 	.ds 1
                           000022   999 G$start_delay$0$0==.
      000022                       1000 _start_delay::
      000022                       1001 	.ds 1
                           000023  1002 LLab_3_3_Speed.ReadRanger$Data$1$126==.
      000023                       1003 _ReadRanger_Data_1_126:
      000023                       1004 	.ds 2
                                   1005 ;--------------------------------------------------------
                                   1006 ; overlayable items in internal ram 
                                   1007 ;--------------------------------------------------------
                                   1008 	.area	OSEG    (OVR,DATA)
                                   1009 	.area	OSEG    (OVR,DATA)
                                   1010 	.area	OSEG    (OVR,DATA)
                                   1011 	.area	OSEG    (OVR,DATA)
                                   1012 	.area	OSEG    (OVR,DATA)
                                   1013 	.area	OSEG    (OVR,DATA)
                                   1014 	.area	OSEG    (OVR,DATA)
                                   1015 ;--------------------------------------------------------
                                   1016 ; Stack segment in internal ram 
                                   1017 ;--------------------------------------------------------
                                   1018 	.area	SSEG
      000000                       1019 __start__stack:
      000000                       1020 	.ds	1
                                   1021 
                                   1022 ;--------------------------------------------------------
                                   1023 ; indirectly addressable internal ram data
                                   1024 ;--------------------------------------------------------
                                   1025 	.area ISEG    (DATA)
                                   1026 ;--------------------------------------------------------
                                   1027 ; absolute internal ram data
                                   1028 ;--------------------------------------------------------
                                   1029 	.area IABS    (ABS,DATA)
                                   1030 	.area IABS    (ABS,DATA)
                                   1031 ;--------------------------------------------------------
                                   1032 ; bit data
                                   1033 ;--------------------------------------------------------
                                   1034 	.area BSEG    (BIT)
                                   1035 ;--------------------------------------------------------
                                   1036 ; paged external ram data
                                   1037 ;--------------------------------------------------------
                                   1038 	.area PSEG    (PAG,XDATA)
                                   1039 ;--------------------------------------------------------
                                   1040 ; external ram data
                                   1041 ;--------------------------------------------------------
                                   1042 	.area XSEG    (XDATA)
                           000000  1043 LLab_3_3_Speed.lcd_print$text$1$73==.
      000000                       1044 _lcd_print_text_1_73:
      000000                       1045 	.ds 80
                                   1046 ;--------------------------------------------------------
                                   1047 ; absolute external ram data
                                   1048 ;--------------------------------------------------------
                                   1049 	.area XABS    (ABS,XDATA)
                                   1050 ;--------------------------------------------------------
                                   1051 ; external initialized ram data
                                   1052 ;--------------------------------------------------------
                                   1053 	.area XISEG   (XDATA)
                                   1054 	.area HOME    (CODE)
                                   1055 	.area GSINIT0 (CODE)
                                   1056 	.area GSINIT1 (CODE)
                                   1057 	.area GSINIT2 (CODE)
                                   1058 	.area GSINIT3 (CODE)
                                   1059 	.area GSINIT4 (CODE)
                                   1060 	.area GSINIT5 (CODE)
                                   1061 	.area GSINIT  (CODE)
                                   1062 	.area GSFINAL (CODE)
                                   1063 	.area CSEG    (CODE)
                                   1064 ;--------------------------------------------------------
                                   1065 ; interrupt vector 
                                   1066 ;--------------------------------------------------------
                                   1067 	.area HOME    (CODE)
      000000                       1068 __interrupt_vect:
      000000 02r00r00         [24] 1069 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1070 	reti
      000004                       1071 	.ds	7
      00000B 32               [24] 1072 	reti
      00000C                       1073 	.ds	7
      000013 32               [24] 1074 	reti
      000014                       1075 	.ds	7
      00001B 32               [24] 1076 	reti
      00001C                       1077 	.ds	7
      000023 32               [24] 1078 	reti
      000024                       1079 	.ds	7
      00002B 32               [24] 1080 	reti
      00002C                       1081 	.ds	7
      000033 32               [24] 1082 	reti
      000034                       1083 	.ds	7
      00003B 32               [24] 1084 	reti
      00003C                       1085 	.ds	7
      000043 32               [24] 1086 	reti
      000044                       1087 	.ds	7
      00004B 02r05r5C         [24] 1088 	ljmp	_PCA_ISR
                                   1089 ;--------------------------------------------------------
                                   1090 ; global & static initialisations
                                   1091 ;--------------------------------------------------------
                                   1092 	.area HOME    (CODE)
                                   1093 	.area GSINIT  (CODE)
                                   1094 	.area GSFINAL (CODE)
                                   1095 	.area GSINIT  (CODE)
                                   1096 	.globl __sdcc_gsinit_startup
                                   1097 	.globl __sdcc_program_startup
                                   1098 	.globl __start__stack
                                   1099 	.globl __mcs51_genXINIT
                                   1100 	.globl __mcs51_genXRAMCLEAR
                                   1101 	.globl __mcs51_genRAMCLEAR
                           000000  1102 	C$Lab_3_3_Speed.c$31$1$130 ==.
                                   1103 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:31: unsigned int PCA_START = 28672;
      000000 75*10 00         [24] 1104 	mov	_PCA_START,#0x00
      000003 75*11 70         [24] 1105 	mov	(_PCA_START + 1),#0x70
                           000006  1106 	C$Lab_3_3_Speed.c$32$1$130 ==.
                                   1107 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:32: unsigned int PW_CENTER = 2760;
      000006 75*12 C8         [24] 1108 	mov	_PW_CENTER,#0xC8
      000009 75*13 0A         [24] 1109 	mov	(_PW_CENTER + 1),#0x0A
                           00000C  1110 	C$Lab_3_3_Speed.c$33$1$130 ==.
                                   1111 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:33: unsigned int PW_MIN = 2030;
      00000C 75*14 EE         [24] 1112 	mov	_PW_MIN,#0xEE
      00000F 75*15 07         [24] 1113 	mov	(_PW_MIN + 1),#0x07
                           000012  1114 	C$Lab_3_3_Speed.c$34$1$130 ==.
                                   1115 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:34: unsigned int PW_MAX = 3500;
      000012 75*16 AC         [24] 1116 	mov	_PW_MAX,#0xAC
      000015 75*17 0D         [24] 1117 	mov	(_PW_MAX + 1),#0x0D
                           000018  1118 	C$Lab_3_3_Speed.c$35$1$130 ==.
                                   1119 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:35: unsigned int PW = 0;
      000018 E4               [12] 1120 	clr	a
      000019 F5*18            [12] 1121 	mov	_PW,a
      00001B F5*19            [12] 1122 	mov	(_PW + 1),a
                           00001D  1123 	C$Lab_3_3_Speed.c$36$1$130 ==.
                                   1124 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:36: unsigned int counts = 0;
      00001D F5*1A            [12] 1125 	mov	_counts,a
      00001F F5*1B            [12] 1126 	mov	(_counts + 1),a
                           000021  1127 	C$Lab_3_3_Speed.c$37$1$130 ==.
                                   1128 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:37: unsigned char new_range = 0;
                                   1129 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000021 F5*1C            [12] 1130 	mov	_new_range,a
                           000023  1131 	C$Lab_3_3_Speed.c$38$1$130 ==.
                                   1132 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:38: unsigned char r_count = 0;
                                   1133 ;	1-genFromRTrack replaced	mov	_r_count,#0x00
      000023 F5*1D            [12] 1134 	mov	_r_count,a
                           000025  1135 	C$Lab_3_3_Speed.c$39$1$130 ==.
                                   1136 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:39: unsigned char neutral = 45;
      000025 75*1E 2D         [24] 1137 	mov	_neutral,#0x2D
                           000028  1138 	C$Lab_3_3_Speed.c$41$1$130 ==.
                                   1139 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:41: unsigned char delay = 0;
                                   1140 ;	1-genFromRTrack replaced	mov	_delay,#0x00
      000028 F5*21            [12] 1141 	mov	_delay,a
                           00002A  1142 	C$Lab_3_3_Speed.c$42$1$130 ==.
                                   1143 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:42: unsigned char start_delay = 0;
                                   1144 ;	1-genFromRTrack replaced	mov	_start_delay,#0x00
      00002A F5*22            [12] 1145 	mov	_start_delay,a
                                   1146 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1147 	ljmp	__sdcc_program_startup
                                   1148 ;--------------------------------------------------------
                                   1149 ; Home
                                   1150 ;--------------------------------------------------------
                                   1151 	.area HOME    (CODE)
                                   1152 	.area HOME    (CODE)
      00004E                       1153 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1154 	ljmp	_main
                                   1155 ;	return from main will return to caller
                                   1156 ;--------------------------------------------------------
                                   1157 ; code
                                   1158 ;--------------------------------------------------------
                                   1159 	.area CSEG    (CODE)
                                   1160 ;------------------------------------------------------------
                                   1161 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1162 ;------------------------------------------------------------
                                   1163 ;i                         Allocated to registers 
                                   1164 ;------------------------------------------------------------
                           000000  1165 	G$SYSCLK_Init$0$0 ==.
                           000000  1166 	C$c8051_SDCC.h$42$0$0 ==.
                                   1167 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1168 ;	-----------------------------------------
                                   1169 ;	 function SYSCLK_Init
                                   1170 ;	-----------------------------------------
      000000                       1171 _SYSCLK_Init:
                           000007  1172 	ar7 = 0x07
                           000006  1173 	ar6 = 0x06
                           000005  1174 	ar5 = 0x05
                           000004  1175 	ar4 = 0x04
                           000003  1176 	ar3 = 0x03
                           000002  1177 	ar2 = 0x02
                           000001  1178 	ar1 = 0x01
                           000000  1179 	ar0 = 0x00
                           000000  1180 	C$c8051_SDCC.h$46$1$2 ==.
                                   1181 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1182 	mov	_OSCXCN,#0x67
                           000003  1183 	C$c8051_SDCC.h$49$1$2 ==.
                                   1184 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1185 	mov	r6,#0x00
      000005 7F 01            [12] 1186 	mov	r7,#0x01
      000007                       1187 00107$:
      000007 1E               [12] 1188 	dec	r6
      000008 BE FF 01         [24] 1189 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1190 	dec	r7
      00000C                       1191 00121$:
      00000C EE               [12] 1192 	mov	a,r6
      00000D 4F               [12] 1193 	orl	a,r7
      00000E 70 F7            [24] 1194 	jnz	00107$
                           000010  1195 	C$c8051_SDCC.h$51$1$2 ==.
                                   1196 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1197 00102$:
      000010 E5 B1            [12] 1198 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1199 	jnb	acc.7,00102$
                           000015  1200 	C$c8051_SDCC.h$53$1$2 ==.
                                   1201 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1202 	mov	_OSCICN,#0x88
                           000018  1203 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1204 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1205 	ret
                                   1206 ;------------------------------------------------------------
                                   1207 ;Allocation info for local variables in function 'UART0_Init'
                                   1208 ;------------------------------------------------------------
                           000019  1209 	G$UART0_Init$0$0 ==.
                           000019  1210 	C$c8051_SDCC.h$64$1$2 ==.
                                   1211 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1212 ;	-----------------------------------------
                                   1213 ;	 function UART0_Init
                                   1214 ;	-----------------------------------------
      000019                       1215 _UART0_Init:
                           000019  1216 	C$c8051_SDCC.h$66$1$4 ==.
                                   1217 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1218 	mov	_SCON0,#0x50
                           00001C  1219 	C$c8051_SDCC.h$67$1$4 ==.
                                   1220 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1221 	mov	_TMOD,#0x20
                           00001F  1222 	C$c8051_SDCC.h$68$1$4 ==.
                                   1223 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1224 	mov	_TH1,#0xDC
                           000022  1225 	C$c8051_SDCC.h$69$1$4 ==.
                                   1226 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1227 	setb	_TR1
                           000024  1228 	C$c8051_SDCC.h$70$1$4 ==.
                                   1229 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1230 	orl	_CKCON,#0x10
                           000027  1231 	C$c8051_SDCC.h$71$1$4 ==.
                                   1232 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1233 	orl	_PCON,#0x80
                           00002A  1234 	C$c8051_SDCC.h$73$1$4 ==.
                                   1235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1236 	setb	_TI0
                           00002C  1237 	C$c8051_SDCC.h$74$1$4 ==.
                                   1238 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1239 	orl	_P0MDOUT,#0x01
                           00002F  1240 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1241 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1242 	ret
                                   1243 ;------------------------------------------------------------
                                   1244 ;Allocation info for local variables in function 'Sys_Init'
                                   1245 ;------------------------------------------------------------
                           000030  1246 	G$Sys_Init$0$0 ==.
                           000030  1247 	C$c8051_SDCC.h$83$1$4 ==.
                                   1248 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1249 ;	-----------------------------------------
                                   1250 ;	 function Sys_Init
                                   1251 ;	-----------------------------------------
      000030                       1252 _Sys_Init:
                           000030  1253 	C$c8051_SDCC.h$85$1$6 ==.
                                   1254 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1255 	mov	_WDTCN,#0xDE
                           000033  1256 	C$c8051_SDCC.h$86$1$6 ==.
                                   1257 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1258 	mov	_WDTCN,#0xAD
                           000036  1259 	C$c8051_SDCC.h$88$1$6 ==.
                                   1260 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1261 	lcall	_SYSCLK_Init
                           000039  1262 	C$c8051_SDCC.h$89$1$6 ==.
                                   1263 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1264 	lcall	_UART0_Init
                           00003C  1265 	C$c8051_SDCC.h$91$1$6 ==.
                                   1266 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1267 	orl	_XBR0,#0x04
                           00003F  1268 	C$c8051_SDCC.h$92$1$6 ==.
                                   1269 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1270 	orl	_XBR2,#0x40
                           000042  1271 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1272 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1273 	ret
                                   1274 ;------------------------------------------------------------
                                   1275 ;Allocation info for local variables in function 'putchar'
                                   1276 ;------------------------------------------------------------
                                   1277 ;c                         Allocated to registers r7 
                                   1278 ;------------------------------------------------------------
                           000043  1279 	G$putchar$0$0 ==.
                           000043  1280 	C$c8051_SDCC.h$98$1$6 ==.
                                   1281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1282 ;	-----------------------------------------
                                   1283 ;	 function putchar
                                   1284 ;	-----------------------------------------
      000043                       1285 _putchar:
      000043 AF 82            [24] 1286 	mov	r7,dpl
                           000045  1287 	C$c8051_SDCC.h$100$1$8 ==.
                                   1288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1289 00101$:
                           000045  1290 	C$c8051_SDCC.h$101$1$8 ==.
                                   1291 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1292 	jbc	_TI0,00112$
      000048 80 FB            [24] 1293 	sjmp	00101$
      00004A                       1294 00112$:
                           00004A  1295 	C$c8051_SDCC.h$102$1$8 ==.
                                   1296 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1297 	mov	_SBUF0,r7
                           00004C  1298 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1299 	XG$putchar$0$0 ==.
      00004C 22               [24] 1300 	ret
                                   1301 ;------------------------------------------------------------
                                   1302 ;Allocation info for local variables in function 'getchar'
                                   1303 ;------------------------------------------------------------
                                   1304 ;c                         Allocated to registers 
                                   1305 ;------------------------------------------------------------
                           00004D  1306 	G$getchar$0$0 ==.
                           00004D  1307 	C$c8051_SDCC.h$108$1$8 ==.
                                   1308 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1309 ;	-----------------------------------------
                                   1310 ;	 function getchar
                                   1311 ;	-----------------------------------------
      00004D                       1312 _getchar:
                           00004D  1313 	C$c8051_SDCC.h$111$1$10 ==.
                                   1314 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1315 00101$:
                           00004D  1316 	C$c8051_SDCC.h$112$1$10 ==.
                                   1317 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1318 	jbc	_RI0,00112$
      000050 80 FB            [24] 1319 	sjmp	00101$
      000052                       1320 00112$:
                           000052  1321 	C$c8051_SDCC.h$113$1$10 ==.
                                   1322 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1323 	mov	dpl,_SBUF0
                           000055  1324 	C$c8051_SDCC.h$114$1$10 ==.
                                   1325 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1326 	lcall	_putchar
                           000058  1327 	C$c8051_SDCC.h$115$1$10 ==.
                                   1328 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1329 	mov	dpl,_SBUF0
                           00005B  1330 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1331 	XG$getchar$0$0 ==.
      00005B 22               [24] 1332 	ret
                                   1333 ;------------------------------------------------------------
                                   1334 ;Allocation info for local variables in function 'lcd_print'
                                   1335 ;------------------------------------------------------------
                                   1336 ;fmt                       Allocated to stack - _bp -5
                                   1337 ;len                       Allocated to registers r6 
                                   1338 ;i                         Allocated to registers 
                                   1339 ;ap                        Allocated to registers 
                                   1340 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1341 ;------------------------------------------------------------
                           00005C  1342 	G$lcd_print$0$0 ==.
                           00005C  1343 	C$i2c.h$81$1$10 ==.
                                   1344 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1345 ;	-----------------------------------------
                                   1346 ;	 function lcd_print
                                   1347 ;	-----------------------------------------
      00005C                       1348 _lcd_print:
      00005C C0*00            [24] 1349 	push	_bp
      00005E 85 81*00         [24] 1350 	mov	_bp,sp
                           000061  1351 	C$i2c.h$87$1$73 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1353 	mov	a,_bp
      000063 24 FB            [12] 1354 	add	a,#0xfb
      000065 F8               [12] 1355 	mov	r0,a
      000066 86 82            [24] 1356 	mov	dpl,@r0
      000068 08               [12] 1357 	inc	r0
      000069 86 83            [24] 1358 	mov	dph,@r0
      00006B 08               [12] 1359 	inc	r0
      00006C 86 F0            [24] 1360 	mov	b,@r0
      00006E 12r00r00         [24] 1361 	lcall	_strlen
      000071 E5 82            [12] 1362 	mov	a,dpl
      000073 85 83 F0         [24] 1363 	mov	b,dph
      000076 45 F0            [12] 1364 	orl	a,b
      000078 70 02            [24] 1365 	jnz	00102$
      00007A 80 62            [24] 1366 	sjmp	00109$
      00007C                       1367 00102$:
                           00007C  1368 	C$i2c.h$89$2$74 ==.
                                   1369 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1370 	mov	a,_bp
      00007E 24 FB            [12] 1371 	add	a,#0xFB
      000080 FF               [12] 1372 	mov	r7,a
      000081 8F*00            [24] 1373 	mov	_vsprintf_PARM_3,r7
                           000083  1374 	C$i2c.h$90$1$73 ==.
                                   1375 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1376 	mov	a,_bp
      000085 24 FB            [12] 1377 	add	a,#0xfb
      000087 F8               [12] 1378 	mov	r0,a
      000088 86*00            [24] 1379 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1380 	inc	r0
      00008B 86*01            [24] 1381 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1382 	inc	r0
      00008E 86*02            [24] 1383 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1384 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1385 	mov	b,#0x00
      000096 12r00r00         [24] 1386 	lcall	_vsprintf
                           000099  1387 	C$i2c.h$93$1$73 ==.
                                   1388 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1389 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1390 	mov	b,#0x00
      00009F 12r00r00         [24] 1391 	lcall	_strlen
      0000A2 AE 82            [24] 1392 	mov	r6,dpl
                           0000A4  1393 	C$i2c.h$94$1$73 ==.
                                   1394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1395 	mov	r7,#0x00
      0000A6                       1396 00107$:
      0000A6 C3               [12] 1397 	clr	c
      0000A7 EF               [12] 1398 	mov	a,r7
      0000A8 9E               [12] 1399 	subb	a,r6
      0000A9 50 1F            [24] 1400 	jnc	00105$
                           0000AB  1401 	C$i2c.h$96$2$76 ==.
                                   1402 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1403 	mov	a,r7
      0000AC 24r00            [12] 1404 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1405 	mov	dpl,a
      0000B0 E4               [12] 1406 	clr	a
      0000B1 34s00            [12] 1407 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1408 	mov	dph,a
      0000B5 E0               [24] 1409 	movx	a,@dptr
      0000B6 FD               [12] 1410 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1411 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1412 	mov	a,r7
      0000BB 24r00            [12] 1413 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1414 	mov	dpl,a
      0000BF E4               [12] 1415 	clr	a
      0000C0 34s00            [12] 1416 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1417 	mov	dph,a
      0000C4 74 0D            [12] 1418 	mov	a,#0x0D
      0000C6 F0               [24] 1419 	movx	@dptr,a
      0000C7                       1420 00108$:
                           0000C7  1421 	C$i2c.h$94$1$73 ==.
                                   1422 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1423 	inc	r7
      0000C8 80 DC            [24] 1424 	sjmp	00107$
      0000CA                       1425 00105$:
                           0000CA  1426 	C$i2c.h$99$1$73 ==.
                                   1427 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1428 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1429 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1430 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1431 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1432 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1433 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1434 	lcall	_i2c_write_data
      0000DE                       1435 00109$:
      0000DE D0*00            [24] 1436 	pop	_bp
                           0000E0  1437 	C$i2c.h$100$1$73 ==.
                           0000E0  1438 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1439 	ret
                                   1440 ;------------------------------------------------------------
                                   1441 ;Allocation info for local variables in function 'lcd_clear'
                                   1442 ;------------------------------------------------------------
                                   1443 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1444 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1445 ;------------------------------------------------------------
                           0000E1  1446 	G$lcd_clear$0$0 ==.
                           0000E1  1447 	C$i2c.h$103$1$73 ==.
                                   1448 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1449 ;	-----------------------------------------
                                   1450 ;	 function lcd_clear
                                   1451 ;	-----------------------------------------
      0000E1                       1452 _lcd_clear:
                           0000E1  1453 	C$i2c.h$105$1$73 ==.
                                   1454 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1455 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1456 	C$i2c.h$107$1$77 ==.
                                   1457 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1458 00101$:
      0000E4 74 C0            [12] 1459 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1460 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1461 	jc	00103$
      0000EA 75*0Br00         [24] 1462 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1463 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1464 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1465 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1466 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1467 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1468 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1469 	sjmp	00101$
      000101                       1470 00103$:
                           000101  1471 	C$i2c.h$109$1$77 ==.
                                   1472 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1473 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1474 	C$i2c.h$110$1$77 ==.
                                   1475 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1476 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1477 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1478 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1479 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1480 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1481 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1482 	lcall	_i2c_write_data
                           000119  1483 	C$i2c.h$111$1$77 ==.
                           000119  1484 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1485 	ret
                                   1486 ;------------------------------------------------------------
                                   1487 ;Allocation info for local variables in function 'read_keypad'
                                   1488 ;------------------------------------------------------------
                                   1489 ;i                         Allocated to registers r7 
                                   1490 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1491 ;------------------------------------------------------------
                           00011A  1492 	G$read_keypad$0$0 ==.
                           00011A  1493 	C$i2c.h$114$1$77 ==.
                                   1494 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1495 ;	-----------------------------------------
                                   1496 ;	 function read_keypad
                                   1497 ;	-----------------------------------------
      00011A                       1498 _read_keypad:
                           00011A  1499 	C$i2c.h$118$1$78 ==.
                                   1500 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1501 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1502 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1503 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1504 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1505 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1506 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1507 	lcall	_i2c_read_data
                           00012F  1508 	C$i2c.h$119$1$78 ==.
                                   1509 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1510 	mov	a,#0xFF
      000131 B5*03 05         [24] 1511 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1512 	mov	dpl,#0x00
      000137 80 5F            [24] 1513 	sjmp	00116$
      000139                       1514 00102$:
                           000139  1515 	C$i2c.h$121$1$78 ==.
                                   1516 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1517 	mov	r7,#0x00
      00013B 8F 06            [24] 1518 	mov	ar6,r7
      00013D                       1519 00114$:
                           00013D  1520 	C$i2c.h$123$2$79 ==.
                                   1521 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1522 	mov	b,r6
      00013F 05 F0            [12] 1523 	inc	b
      000141 7C 01            [12] 1524 	mov	r4,#0x01
      000143 7D 00            [12] 1525 	mov	r5,#0x00
      000145 80 06            [24] 1526 	sjmp	00145$
      000147                       1527 00144$:
      000147 EC               [12] 1528 	mov	a,r4
      000148 2C               [12] 1529 	add	a,r4
      000149 FC               [12] 1530 	mov	r4,a
      00014A ED               [12] 1531 	mov	a,r5
      00014B 33               [12] 1532 	rlc	a
      00014C FD               [12] 1533 	mov	r5,a
      00014D                       1534 00145$:
      00014D D5 F0 F7         [24] 1535 	djnz	b,00144$
      000150 AA*03            [24] 1536 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1537 	mov	r3,#0x00
      000154 EA               [12] 1538 	mov	a,r2
      000155 52 04            [12] 1539 	anl	ar4,a
      000157 EB               [12] 1540 	mov	a,r3
      000158 52 05            [12] 1541 	anl	ar5,a
      00015A EC               [12] 1542 	mov	a,r4
      00015B 4D               [12] 1543 	orl	a,r5
      00015C 60 07            [24] 1544 	jz	00115$
                           00015E  1545 	C$i2c.h$124$2$79 ==.
                                   1546 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1547 	mov	a,#0x31
      000160 2F               [12] 1548 	add	a,r7
      000161 F5 82            [12] 1549 	mov	dpl,a
      000163 80 33            [24] 1550 	sjmp	00116$
      000165                       1551 00115$:
                           000165  1552 	C$i2c.h$121$1$78 ==.
                                   1553 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1554 	inc	r6
      000166 8E 07            [24] 1555 	mov	ar7,r6
      000168 BE 08 00         [24] 1556 	cjne	r6,#0x08,00147$
      00016B                       1557 00147$:
      00016B 40 D0            [24] 1558 	jc	00114$
                           00016D  1559 	C$i2c.h$127$1$78 ==.
                                   1560 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1561 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1562 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1563 	mov	dpl,#0x39
      000175 80 21            [24] 1564 	sjmp	00116$
      000177                       1565 00107$:
                           000177  1566 	C$i2c.h$129$1$78 ==.
                                   1567 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1568 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1569 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1570 	mov	dpl,#0x2A
      00017F 80 17            [24] 1571 	sjmp	00116$
      000181                       1572 00109$:
                           000181  1573 	C$i2c.h$131$1$78 ==.
                                   1574 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1575 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1576 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1577 	mov	dpl,#0x30
      000189 80 0D            [24] 1578 	sjmp	00116$
      00018B                       1579 00111$:
                           00018B  1580 	C$i2c.h$133$1$78 ==.
                                   1581 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1582 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1583 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1584 	mov	dpl,#0x23
      000193 80 03            [24] 1585 	sjmp	00116$
      000195                       1586 00113$:
                           000195  1587 	C$i2c.h$135$1$78 ==.
                                   1588 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1589 	mov	dpl,#0xFF
      000198                       1590 00116$:
                           000198  1591 	C$i2c.h$136$1$78 ==.
                           000198  1592 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1593 	ret
                                   1594 ;------------------------------------------------------------
                                   1595 ;Allocation info for local variables in function 'kpd_input'
                                   1596 ;------------------------------------------------------------
                                   1597 ;mode                      Allocated to registers r7 
                                   1598 ;sum                       Allocated to registers r5 r6 
                                   1599 ;key                       Allocated to registers r3 
                                   1600 ;i                         Allocated to registers 
                                   1601 ;------------------------------------------------------------
                           000199  1602 	G$kpd_input$0$0 ==.
                           000199  1603 	C$i2c.h$148$1$78 ==.
                                   1604 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1605 ;	-----------------------------------------
                                   1606 ;	 function kpd_input
                                   1607 ;	-----------------------------------------
      000199                       1608 _kpd_input:
      000199 AF 82            [24] 1609 	mov	r7,dpl
                           00019B  1610 	C$i2c.h$153$1$81 ==.
                                   1611 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1612 	C$i2c.h$156$1$81 ==.
                                   1613 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1614 	clr	a
      00019C FD               [12] 1615 	mov	r5,a
      00019D FE               [12] 1616 	mov	r6,a
      00019E EF               [12] 1617 	mov	a,r7
      00019F 70 1D            [24] 1618 	jnz	00102$
      0001A1 C0 06            [24] 1619 	push	ar6
      0001A3 C0 05            [24] 1620 	push	ar5
      0001A5 74r00            [12] 1621 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1622 	push	acc
      0001A9 74s00            [12] 1623 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1624 	push	acc
      0001AD 74 80            [12] 1625 	mov	a,#0x80
      0001AF C0 E0            [24] 1626 	push	acc
      0001B1 12r00r5C         [24] 1627 	lcall	_lcd_print
      0001B4 15 81            [12] 1628 	dec	sp
      0001B6 15 81            [12] 1629 	dec	sp
      0001B8 15 81            [12] 1630 	dec	sp
      0001BA D0 05            [24] 1631 	pop	ar5
      0001BC D0 06            [24] 1632 	pop	ar6
      0001BE                       1633 00102$:
                           0001BE  1634 	C$i2c.h$158$1$81 ==.
                                   1635 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1636 	push	ar6
      0001C0 C0 05            [24] 1637 	push	ar5
      0001C2 74 08            [12] 1638 	mov	a,#0x08
      0001C4 C0 E0            [24] 1639 	push	acc
      0001C6 E4               [12] 1640 	clr	a
      0001C7 C0 E0            [24] 1641 	push	acc
      0001C9 74 08            [12] 1642 	mov	a,#0x08
      0001CB C0 E0            [24] 1643 	push	acc
      0001CD E4               [12] 1644 	clr	a
      0001CE C0 E0            [24] 1645 	push	acc
      0001D0 74 08            [12] 1646 	mov	a,#0x08
      0001D2 C0 E0            [24] 1647 	push	acc
      0001D4 E4               [12] 1648 	clr	a
      0001D5 C0 E0            [24] 1649 	push	acc
      0001D7 74 08            [12] 1650 	mov	a,#0x08
      0001D9 C0 E0            [24] 1651 	push	acc
      0001DB E4               [12] 1652 	clr	a
      0001DC C0 E0            [24] 1653 	push	acc
      0001DE 74 08            [12] 1654 	mov	a,#0x08
      0001E0 C0 E0            [24] 1655 	push	acc
      0001E2 E4               [12] 1656 	clr	a
      0001E3 C0 E0            [24] 1657 	push	acc
      0001E5 74r16            [12] 1658 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1659 	push	acc
      0001E9 74s00            [12] 1660 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1661 	push	acc
      0001ED 74 80            [12] 1662 	mov	a,#0x80
      0001EF C0 E0            [24] 1663 	push	acc
      0001F1 12r00r5C         [24] 1664 	lcall	_lcd_print
      0001F4 E5 81            [12] 1665 	mov	a,sp
      0001F6 24 F3            [12] 1666 	add	a,#0xf3
      0001F8 F5 81            [12] 1667 	mov	sp,a
                           0001FA  1668 	C$i2c.h$160$1$81 ==.
                                   1669 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1670 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1671 	mov	b,#0x07
      000200 E4               [12] 1672 	clr	a
      000201 12r03r0D         [24] 1673 	lcall	_delay_time
      000204 D0 05            [24] 1674 	pop	ar5
      000206 D0 06            [24] 1675 	pop	ar6
                           000208  1676 	C$i2c.h$164$1$81 ==.
                                   1677 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1678 	mov	r7,#0x00
                           00020A  1679 	C$i2c.h$166$3$84 ==.
                                   1680 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1681 00104$:
      00020A C0 07            [24] 1682 	push	ar7
      00020C C0 06            [24] 1683 	push	ar6
      00020E C0 05            [24] 1684 	push	ar5
      000210 12r01r1A         [24] 1685 	lcall	_read_keypad
      000213 AC 82            [24] 1686 	mov	r4,dpl
      000215 D0 05            [24] 1687 	pop	ar5
      000217 D0 06            [24] 1688 	pop	ar6
      000219 D0 07            [24] 1689 	pop	ar7
      00021B 8C 03            [24] 1690 	mov	ar3,r4
      00021D BC FF 02         [24] 1691 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1692 	sjmp	00105$
      000222                       1693 00146$:
      000222 BB 2A 17         [24] 1694 	cjne	r3,#0x2A,00106$
      000225                       1695 00105$:
      000225 90 27 10         [24] 1696 	mov	dptr,#0x2710
      000228 E4               [12] 1697 	clr	a
      000229 F5 F0            [12] 1698 	mov	b,a
      00022B C0 07            [24] 1699 	push	ar7
      00022D C0 06            [24] 1700 	push	ar6
      00022F C0 05            [24] 1701 	push	ar5
      000231 12r03r0D         [24] 1702 	lcall	_delay_time
      000234 D0 05            [24] 1703 	pop	ar5
      000236 D0 06            [24] 1704 	pop	ar6
      000238 D0 07            [24] 1705 	pop	ar7
      00023A 80 CE            [24] 1706 	sjmp	00104$
      00023C                       1707 00106$:
                           00023C  1708 	C$i2c.h$167$2$82 ==.
                                   1709 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1710 	cjne	r3,#0x23,00114$
                           00023F  1711 	C$i2c.h$169$3$83 ==.
                                   1712 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1713 00107$:
      00023F C0 06            [24] 1714 	push	ar6
      000241 C0 05            [24] 1715 	push	ar5
      000243 12r01r1A         [24] 1716 	lcall	_read_keypad
      000246 AC 82            [24] 1717 	mov	r4,dpl
      000248 D0 05            [24] 1718 	pop	ar5
      00024A D0 06            [24] 1719 	pop	ar6
      00024C BC 23 13         [24] 1720 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1721 	mov	dptr,#0x2710
      000252 E4               [12] 1722 	clr	a
      000253 F5 F0            [12] 1723 	mov	b,a
      000255 C0 06            [24] 1724 	push	ar6
      000257 C0 05            [24] 1725 	push	ar5
      000259 12r03r0D         [24] 1726 	lcall	_delay_time
      00025C D0 05            [24] 1727 	pop	ar5
      00025E D0 06            [24] 1728 	pop	ar6
      000260 80 DD            [24] 1729 	sjmp	00107$
      000262                       1730 00109$:
                           000262  1731 	C$i2c.h$170$3$83 ==.
                                   1732 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1733 	mov	dpl,r5
      000264 8E 83            [24] 1734 	mov	dph,r6
      000266 02r03r0C         [24] 1735 	ljmp	00119$
      000269                       1736 00114$:
                           000269  1737 	C$i2c.h$174$3$84 ==.
                                   1738 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1739 	mov	a,r3
      00026A FA               [12] 1740 	mov	r2,a
      00026B 33               [12] 1741 	rlc	a
      00026C 95 E0            [12] 1742 	subb	a,acc
      00026E FC               [12] 1743 	mov	r4,a
      00026F C0 07            [24] 1744 	push	ar7
      000271 C0 06            [24] 1745 	push	ar6
      000273 C0 05            [24] 1746 	push	ar5
      000275 C0 04            [24] 1747 	push	ar4
      000277 C0 03            [24] 1748 	push	ar3
      000279 C0 02            [24] 1749 	push	ar2
      00027B C0 02            [24] 1750 	push	ar2
      00027D C0 04            [24] 1751 	push	ar4
      00027F 74r26            [12] 1752 	mov	a,#___str_2
      000281 C0 E0            [24] 1753 	push	acc
      000283 74s00            [12] 1754 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1755 	push	acc
      000287 74 80            [12] 1756 	mov	a,#0x80
      000289 C0 E0            [24] 1757 	push	acc
      00028B 12r00r5C         [24] 1758 	lcall	_lcd_print
      00028E E5 81            [12] 1759 	mov	a,sp
      000290 24 FB            [12] 1760 	add	a,#0xfb
      000292 F5 81            [12] 1761 	mov	sp,a
      000294 D0 02            [24] 1762 	pop	ar2
      000296 D0 03            [24] 1763 	pop	ar3
      000298 D0 04            [24] 1764 	pop	ar4
      00029A D0 05            [24] 1765 	pop	ar5
      00029C D0 06            [24] 1766 	pop	ar6
                           00029E  1767 	C$i2c.h$175$1$81 ==.
                                   1768 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1769 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1770 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1771 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1772 	push	ar4
      0002A7 C0 03            [24] 1773 	push	ar3
      0002A9 C0 02            [24] 1774 	push	ar2
      0002AB 12r00r00         [24] 1775 	lcall	__mulint
      0002AE A8 82            [24] 1776 	mov	r0,dpl
      0002B0 A9 83            [24] 1777 	mov	r1,dph
      0002B2 D0 02            [24] 1778 	pop	ar2
      0002B4 D0 03            [24] 1779 	pop	ar3
      0002B6 D0 04            [24] 1780 	pop	ar4
      0002B8 D0 07            [24] 1781 	pop	ar7
      0002BA EA               [12] 1782 	mov	a,r2
      0002BB 28               [12] 1783 	add	a,r0
      0002BC F8               [12] 1784 	mov	r0,a
      0002BD EC               [12] 1785 	mov	a,r4
      0002BE 39               [12] 1786 	addc	a,r1
      0002BF F9               [12] 1787 	mov	r1,a
      0002C0 E8               [12] 1788 	mov	a,r0
      0002C1 24 D0            [12] 1789 	add	a,#0xD0
      0002C3 FD               [12] 1790 	mov	r5,a
      0002C4 E9               [12] 1791 	mov	a,r1
      0002C5 34 FF            [12] 1792 	addc	a,#0xFF
      0002C7 FE               [12] 1793 	mov	r6,a
                           0002C8  1794 	C$i2c.h$176$3$84 ==.
                                   1795 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1796 00110$:
      0002C8 C0 07            [24] 1797 	push	ar7
      0002CA C0 06            [24] 1798 	push	ar6
      0002CC C0 05            [24] 1799 	push	ar5
      0002CE C0 03            [24] 1800 	push	ar3
      0002D0 12r01r1A         [24] 1801 	lcall	_read_keypad
      0002D3 AC 82            [24] 1802 	mov	r4,dpl
      0002D5 D0 03            [24] 1803 	pop	ar3
      0002D7 D0 05            [24] 1804 	pop	ar5
      0002D9 D0 06            [24] 1805 	pop	ar6
      0002DB D0 07            [24] 1806 	pop	ar7
      0002DD EC               [12] 1807 	mov	a,r4
      0002DE B5 03 1B         [24] 1808 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1809 	mov	dptr,#0x2710
      0002E4 E4               [12] 1810 	clr	a
      0002E5 F5 F0            [12] 1811 	mov	b,a
      0002E7 C0 07            [24] 1812 	push	ar7
      0002E9 C0 06            [24] 1813 	push	ar6
      0002EB C0 05            [24] 1814 	push	ar5
      0002ED C0 03            [24] 1815 	push	ar3
      0002EF 12r03r0D         [24] 1816 	lcall	_delay_time
      0002F2 D0 03            [24] 1817 	pop	ar3
      0002F4 D0 05            [24] 1818 	pop	ar5
      0002F6 D0 06            [24] 1819 	pop	ar6
      0002F8 D0 07            [24] 1820 	pop	ar7
      0002FA 80 CC            [24] 1821 	sjmp	00110$
      0002FC                       1822 00118$:
                           0002FC  1823 	C$i2c.h$164$1$81 ==.
                                   1824 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1825 	inc	r7
      0002FD C3               [12] 1826 	clr	c
      0002FE EF               [12] 1827 	mov	a,r7
      0002FF 64 80            [12] 1828 	xrl	a,#0x80
      000301 94 85            [12] 1829 	subb	a,#0x85
      000303 50 03            [24] 1830 	jnc	00155$
      000305 02r02r0A         [24] 1831 	ljmp	00104$
      000308                       1832 00155$:
                           000308  1833 	C$i2c.h$179$1$81 ==.
                                   1834 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1835 	mov	dpl,r5
      00030A 8E 83            [24] 1836 	mov	dph,r6
      00030C                       1837 00119$:
                           00030C  1838 	C$i2c.h$180$1$81 ==.
                           00030C  1839 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1840 	ret
                                   1841 ;------------------------------------------------------------
                                   1842 ;Allocation info for local variables in function 'delay_time'
                                   1843 ;------------------------------------------------------------
                                   1844 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1845 ;index                     Allocated to registers 
                                   1846 ;------------------------------------------------------------
                           00030D  1847 	G$delay_time$0$0 ==.
                           00030D  1848 	C$i2c.h$189$1$81 ==.
                                   1849 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1850 ;	-----------------------------------------
                                   1851 ;	 function delay_time
                                   1852 ;	-----------------------------------------
      00030D                       1853 _delay_time:
      00030D AC 82            [24] 1854 	mov	r4,dpl
      00030F AD 83            [24] 1855 	mov	r5,dph
      000311 AE F0            [24] 1856 	mov	r6,b
      000313 FF               [12] 1857 	mov	r7,a
                           000314  1858 	C$i2c.h$192$1$86 ==.
                                   1859 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1860 	mov	r0,#0x00
      000316 79 00            [12] 1861 	mov	r1,#0x00
      000318 7A 00            [12] 1862 	mov	r2,#0x00
      00031A 7B 00            [12] 1863 	mov	r3,#0x00
      00031C                       1864 00103$:
      00031C C3               [12] 1865 	clr	c
      00031D E8               [12] 1866 	mov	a,r0
      00031E 9C               [12] 1867 	subb	a,r4
      00031F E9               [12] 1868 	mov	a,r1
      000320 9D               [12] 1869 	subb	a,r5
      000321 EA               [12] 1870 	mov	a,r2
      000322 9E               [12] 1871 	subb	a,r6
      000323 EB               [12] 1872 	mov	a,r3
      000324 9F               [12] 1873 	subb	a,r7
      000325 50 0F            [24] 1874 	jnc	00105$
      000327 08               [12] 1875 	inc	r0
      000328 B8 00 09         [24] 1876 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1877 	inc	r1
      00032C B9 00 05         [24] 1878 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1879 	inc	r2
      000330 BA 00 E9         [24] 1880 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1881 	inc	r3
      000334                       1882 00115$:
      000334 80 E6            [24] 1883 	sjmp	00103$
      000336                       1884 00105$:
                           000336  1885 	C$i2c.h$193$1$86 ==.
                           000336  1886 	XG$delay_time$0$0 ==.
      000336 22               [24] 1887 	ret
                                   1888 ;------------------------------------------------------------
                                   1889 ;Allocation info for local variables in function 'i2c_start'
                                   1890 ;------------------------------------------------------------
                           000337  1891 	G$i2c_start$0$0 ==.
                           000337  1892 	C$i2c.h$196$1$86 ==.
                                   1893 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1894 ;	-----------------------------------------
                                   1895 ;	 function i2c_start
                                   1896 ;	-----------------------------------------
      000337                       1897 _i2c_start:
                           000337  1898 	C$i2c.h$198$1$88 ==.
                                   1899 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1900 00101$:
      000337 20 C7 FD         [24] 1901 	jb	_BUSY,00101$
                           00033A  1902 	C$i2c.h$199$1$88 ==.
                                   1903 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1904 	setb	_STA
                           00033C  1905 	C$i2c.h$200$1$88 ==.
                                   1906 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1907 00104$:
      00033C 30 C3 FD         [24] 1908 	jnb	_SI,00104$
                           00033F  1909 	C$i2c.h$201$1$88 ==.
                                   1910 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1911 	clr	_STA
                           000341  1912 	C$i2c.h$202$1$88 ==.
                                   1913 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1914 	clr	_SI
                           000343  1915 	C$i2c.h$203$1$88 ==.
                           000343  1916 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1917 	ret
                                   1918 ;------------------------------------------------------------
                                   1919 ;Allocation info for local variables in function 'i2c_write'
                                   1920 ;------------------------------------------------------------
                                   1921 ;output_data               Allocated to registers 
                                   1922 ;------------------------------------------------------------
                           000344  1923 	G$i2c_write$0$0 ==.
                           000344  1924 	C$i2c.h$206$1$88 ==.
                                   1925 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1926 ;	-----------------------------------------
                                   1927 ;	 function i2c_write
                                   1928 ;	-----------------------------------------
      000344                       1929 _i2c_write:
      000344 85 82 C2         [24] 1930 	mov	_SMB0DAT,dpl
                           000347  1931 	C$i2c.h$209$1$90 ==.
                                   1932 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       1933 00101$:
                           000347  1934 	C$i2c.h$210$1$90 ==.
                                   1935 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 1936 	jbc	_SI,00112$
      00034A 80 FB            [24] 1937 	sjmp	00101$
      00034C                       1938 00112$:
                           00034C  1939 	C$i2c.h$211$1$90 ==.
                           00034C  1940 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   1944 ;------------------------------------------------------------
                                   1945 ;output_data               Allocated to registers 
                                   1946 ;------------------------------------------------------------
                           00034D  1947 	G$i2c_write_and_stop$0$0 ==.
                           00034D  1948 	C$i2c.h$214$1$90 ==.
                                   1949 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   1950 ;	-----------------------------------------
                                   1951 ;	 function i2c_write_and_stop
                                   1952 ;	-----------------------------------------
      00034D                       1953 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 1954 	mov	_SMB0DAT,dpl
                           000350  1955 	C$i2c.h$217$1$92 ==.
                                   1956 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 1957 	setb	_STO
                           000352  1958 	C$i2c.h$218$1$92 ==.
                                   1959 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       1960 00101$:
                           000352  1961 	C$i2c.h$219$1$92 ==.
                                   1962 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 1963 	jbc	_SI,00112$
      000355 80 FB            [24] 1964 	sjmp	00101$
      000357                       1965 00112$:
                           000357  1966 	C$i2c.h$220$1$92 ==.
                           000357  1967 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 1968 	ret
                                   1969 ;------------------------------------------------------------
                                   1970 ;Allocation info for local variables in function 'i2c_read'
                                   1971 ;------------------------------------------------------------
                                   1972 ;input_data                Allocated to registers 
                                   1973 ;------------------------------------------------------------
                           000358  1974 	G$i2c_read$0$0 ==.
                           000358  1975 	C$i2c.h$223$1$92 ==.
                                   1976 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   1977 ;	-----------------------------------------
                                   1978 ;	 function i2c_read
                                   1979 ;	-----------------------------------------
      000358                       1980 _i2c_read:
                           000358  1981 	C$i2c.h$226$1$94 ==.
                                   1982 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       1983 00101$:
      000358 30 C3 FD         [24] 1984 	jnb	_SI,00101$
                           00035B  1985 	C$i2c.h$227$1$94 ==.
                                   1986 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 1987 	mov	dpl,_SMB0DAT
                           00035E  1988 	C$i2c.h$228$1$94 ==.
                                   1989 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 1990 	clr	_SI
                           000360  1991 	C$i2c.h$229$1$94 ==.
                                   1992 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  1993 	C$i2c.h$230$1$94 ==.
                           000360  1994 	XG$i2c_read$0$0 ==.
      000360 22               [24] 1995 	ret
                                   1996 ;------------------------------------------------------------
                                   1997 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   1998 ;------------------------------------------------------------
                                   1999 ;input_data                Allocated to registers r7 
                                   2000 ;------------------------------------------------------------
                           000361  2001 	G$i2c_read_and_stop$0$0 ==.
                           000361  2002 	C$i2c.h$233$1$94 ==.
                                   2003 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2004 ;	-----------------------------------------
                                   2005 ;	 function i2c_read_and_stop
                                   2006 ;	-----------------------------------------
      000361                       2007 _i2c_read_and_stop:
                           000361  2008 	C$i2c.h$236$1$96 ==.
                                   2009 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2010 00101$:
      000361 30 C3 FD         [24] 2011 	jnb	_SI,00101$
                           000364  2012 	C$i2c.h$237$1$96 ==.
                                   2013 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2014 	mov	r7,_SMB0DAT
                           000366  2015 	C$i2c.h$238$1$96 ==.
                                   2016 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2017 	clr	_SI
                           000368  2018 	C$i2c.h$239$1$96 ==.
                                   2019 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2020 	setb	_STO
                           00036A  2021 	C$i2c.h$240$1$96 ==.
                                   2022 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2023 00104$:
                           00036A  2024 	C$i2c.h$241$1$96 ==.
                                   2025 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2026 	jbc	_SI,00122$
      00036D 80 FB            [24] 2027 	sjmp	00104$
      00036F                       2028 00122$:
                           00036F  2029 	C$i2c.h$242$1$96 ==.
                                   2030 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2031 	mov	dpl,r7
                           000371  2032 	C$i2c.h$243$1$96 ==.
                           000371  2033 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2034 	ret
                                   2035 ;------------------------------------------------------------
                                   2036 ;Allocation info for local variables in function 'i2c_write_data'
                                   2037 ;------------------------------------------------------------
                                   2038 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2039 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2040 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2041 ;addr                      Allocated to registers r7 
                                   2042 ;i                         Allocated to registers 
                                   2043 ;------------------------------------------------------------
                           000372  2044 	G$i2c_write_data$0$0 ==.
                           000372  2045 	C$i2c.h$246$1$96 ==.
                                   2046 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2047 ;	-----------------------------------------
                                   2048 ;	 function i2c_write_data
                                   2049 ;	-----------------------------------------
      000372                       2050 _i2c_write_data:
      000372 AF 82            [24] 2051 	mov	r7,dpl
                           000374  2052 	C$i2c.h$250$1$98 ==.
                                   2053 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2054 	push	ar7
      000376 12r03r37         [24] 2055 	lcall	_i2c_start
      000379 D0 07            [24] 2056 	pop	ar7
                           00037B  2057 	C$i2c.h$251$1$98 ==.
                                   2058 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2059 	mov	a,#0xFE
      00037D 5F               [12] 2060 	anl	a,r7
      00037E F5 82            [12] 2061 	mov	dpl,a
      000380 12r03r44         [24] 2062 	lcall	_i2c_write
                           000383  2063 	C$i2c.h$252$1$98 ==.
                                   2064 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2065 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2066 	lcall	_i2c_write
                           000389  2067 	C$i2c.h$253$1$98 ==.
                                   2068 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2069 	mov	r7,#0x00
      00038B                       2070 00103$:
      00038B AD*09            [24] 2071 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2072 	mov	r6,#0x00
      00038F 1D               [12] 2073 	dec	r5
      000390 BD FF 01         [24] 2074 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2075 	dec	r6
      000394                       2076 00114$:
      000394 8F 03            [24] 2077 	mov	ar3,r7
      000396 7C 00            [12] 2078 	mov	r4,#0x00
      000398 C3               [12] 2079 	clr	c
      000399 EB               [12] 2080 	mov	a,r3
      00039A 9D               [12] 2081 	subb	a,r5
      00039B EC               [12] 2082 	mov	a,r4
      00039C 64 80            [12] 2083 	xrl	a,#0x80
      00039E 8E F0            [24] 2084 	mov	b,r6
      0003A0 63 F0 80         [24] 2085 	xrl	b,#0x80
      0003A3 95 F0            [12] 2086 	subb	a,b
      0003A5 50 1F            [24] 2087 	jnc	00101$
                           0003A7  2088 	C$i2c.h$254$1$98 ==.
                                   2089 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2090 	mov	a,r7
      0003A8 25*06            [12] 2091 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2092 	mov	r4,a
      0003AB E4               [12] 2093 	clr	a
      0003AC 35*07            [12] 2094 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2095 	mov	r5,a
      0003AF AE*08            [24] 2096 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2097 	mov	dpl,r4
      0003B3 8D 83            [24] 2098 	mov	dph,r5
      0003B5 8E F0            [24] 2099 	mov	b,r6
      0003B7 12r00r00         [24] 2100 	lcall	__gptrget
      0003BA F5 82            [12] 2101 	mov	dpl,a
      0003BC C0 07            [24] 2102 	push	ar7
      0003BE 12r03r44         [24] 2103 	lcall	_i2c_write
      0003C1 D0 07            [24] 2104 	pop	ar7
                           0003C3  2105 	C$i2c.h$253$1$98 ==.
                                   2106 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2107 	inc	r7
      0003C4 80 C5            [24] 2108 	sjmp	00103$
      0003C6                       2109 00101$:
                           0003C6  2110 	C$i2c.h$255$1$98 ==.
                                   2111 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2112 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2113 	mov	r7,#0x00
      0003CA 1E               [12] 2114 	dec	r6
      0003CB BE FF 01         [24] 2115 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2116 	dec	r7
      0003CF                       2117 00116$:
      0003CF EE               [12] 2118 	mov	a,r6
      0003D0 25*06            [12] 2119 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2120 	mov	r6,a
      0003D3 EF               [12] 2121 	mov	a,r7
      0003D4 35*07            [12] 2122 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2123 	mov	r7,a
      0003D7 AD*08            [24] 2124 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2125 	mov	dpl,r6
      0003DB 8F 83            [24] 2126 	mov	dph,r7
      0003DD 8D F0            [24] 2127 	mov	b,r5
      0003DF 12r00r00         [24] 2128 	lcall	__gptrget
      0003E2 F5 82            [12] 2129 	mov	dpl,a
      0003E4 12r03r4D         [24] 2130 	lcall	_i2c_write_and_stop
                           0003E7  2131 	C$i2c.h$256$1$98 ==.
                           0003E7  2132 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2133 	ret
                                   2134 ;------------------------------------------------------------
                                   2135 ;Allocation info for local variables in function 'i2c_read_data'
                                   2136 ;------------------------------------------------------------
                                   2137 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2138 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2139 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2140 ;addr                      Allocated to registers r7 
                                   2141 ;j                         Allocated to registers 
                                   2142 ;------------------------------------------------------------
                           0003E8  2143 	G$i2c_read_data$0$0 ==.
                           0003E8  2144 	C$i2c.h$259$1$98 ==.
                                   2145 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2146 ;	-----------------------------------------
                                   2147 ;	 function i2c_read_data
                                   2148 ;	-----------------------------------------
      0003E8                       2149 _i2c_read_data:
      0003E8 AF 82            [24] 2150 	mov	r7,dpl
                           0003EA  2151 	C$i2c.h$262$1$100 ==.
                                   2152 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2153 	push	ar7
      0003EC 12r03r37         [24] 2154 	lcall	_i2c_start
      0003EF D0 07            [24] 2155 	pop	ar7
                           0003F1  2156 	C$i2c.h$263$1$100 ==.
                                   2157 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2158 	mov	ar6,r7
      0003F3 74 FE            [12] 2159 	mov	a,#0xFE
      0003F5 5E               [12] 2160 	anl	a,r6
      0003F6 F5 82            [12] 2161 	mov	dpl,a
      0003F8 C0 07            [24] 2162 	push	ar7
      0003FA 12r03r44         [24] 2163 	lcall	_i2c_write
                           0003FD  2164 	C$i2c.h$264$1$100 ==.
                                   2165 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2166 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2167 	lcall	_i2c_write_and_stop
                           000403  2168 	C$i2c.h$265$1$100 ==.
                                   2169 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2170 	lcall	_i2c_start
      000406 D0 07            [24] 2171 	pop	ar7
                           000408  2172 	C$i2c.h$266$1$100 ==.
                                   2173 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2174 	mov	a,#0x01
      00040A 4F               [12] 2175 	orl	a,r7
      00040B F5 82            [12] 2176 	mov	dpl,a
      00040D 12r03r44         [24] 2177 	lcall	_i2c_write
                           000410  2178 	C$i2c.h$267$1$100 ==.
                                   2179 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2180 	mov	r7,#0x00
      000412                       2181 00103$:
      000412 AD*0E            [24] 2182 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2183 	mov	r6,#0x00
      000416 1D               [12] 2184 	dec	r5
      000417 BD FF 01         [24] 2185 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2186 	dec	r6
      00041B                       2187 00114$:
      00041B 8F 03            [24] 2188 	mov	ar3,r7
      00041D 7C 00            [12] 2189 	mov	r4,#0x00
      00041F C3               [12] 2190 	clr	c
      000420 EB               [12] 2191 	mov	a,r3
      000421 9D               [12] 2192 	subb	a,r5
      000422 EC               [12] 2193 	mov	a,r4
      000423 64 80            [12] 2194 	xrl	a,#0x80
      000425 8E F0            [24] 2195 	mov	b,r6
      000427 63 F0 80         [24] 2196 	xrl	b,#0x80
      00042A 95 F0            [12] 2197 	subb	a,b
      00042C 50 2E            [24] 2198 	jnc	00101$
                           00042E  2199 	C$i2c.h$269$2$101 ==.
                                   2200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2201 	setb	_AA
                           000430  2202 	C$i2c.h$270$2$101 ==.
                                   2203 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2204 	mov	a,r7
      000431 25*0B            [12] 2205 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2206 	mov	r4,a
      000434 E4               [12] 2207 	clr	a
      000435 35*0C            [12] 2208 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2209 	mov	r5,a
      000438 AE*0D            [24] 2210 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2211 	push	ar7
      00043C C0 06            [24] 2212 	push	ar6
      00043E C0 05            [24] 2213 	push	ar5
      000440 C0 04            [24] 2214 	push	ar4
      000442 12r03r58         [24] 2215 	lcall	_i2c_read
      000445 AB 82            [24] 2216 	mov	r3,dpl
      000447 D0 04            [24] 2217 	pop	ar4
      000449 D0 05            [24] 2218 	pop	ar5
      00044B D0 06            [24] 2219 	pop	ar6
      00044D D0 07            [24] 2220 	pop	ar7
      00044F 8C 82            [24] 2221 	mov	dpl,r4
      000451 8D 83            [24] 2222 	mov	dph,r5
      000453 8E F0            [24] 2223 	mov	b,r6
      000455 EB               [12] 2224 	mov	a,r3
      000456 12r00r00         [24] 2225 	lcall	__gptrput
                           000459  2226 	C$i2c.h$267$1$100 ==.
                                   2227 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2228 	inc	r7
      00045A 80 B6            [24] 2229 	sjmp	00103$
      00045C                       2230 00101$:
                           00045C  2231 	C$i2c.h$272$1$100 ==.
                                   2232 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2233 	clr	_AA
                           00045E  2234 	C$i2c.h$273$1$100 ==.
                                   2235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2236 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2237 	mov	r7,#0x00
      000462 1E               [12] 2238 	dec	r6
      000463 BE FF 01         [24] 2239 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2240 	dec	r7
      000467                       2241 00116$:
      000467 EE               [12] 2242 	mov	a,r6
      000468 25*0B            [12] 2243 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2244 	mov	r6,a
      00046B EF               [12] 2245 	mov	a,r7
      00046C 35*0C            [12] 2246 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2247 	mov	r7,a
      00046F AD*0D            [24] 2248 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2249 	push	ar7
      000473 C0 06            [24] 2250 	push	ar6
      000475 C0 05            [24] 2251 	push	ar5
      000477 12r03r61         [24] 2252 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2253 	mov	r4,dpl
      00047C D0 05            [24] 2254 	pop	ar5
      00047E D0 06            [24] 2255 	pop	ar6
      000480 D0 07            [24] 2256 	pop	ar7
      000482 8E 82            [24] 2257 	mov	dpl,r6
      000484 8F 83            [24] 2258 	mov	dph,r7
      000486 8D F0            [24] 2259 	mov	b,r5
      000488 EC               [12] 2260 	mov	a,r4
      000489 12r00r00         [24] 2261 	lcall	__gptrput
                           00048C  2262 	C$i2c.h$274$1$100 ==.
                           00048C  2263 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2264 	ret
                                   2265 ;------------------------------------------------------------
                                   2266 ;Allocation info for local variables in function 'Accel_Init'
                                   2267 ;------------------------------------------------------------
                                   2268 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2269 ;------------------------------------------------------------
                           00048D  2270 	G$Accel_Init$0$0 ==.
                           00048D  2271 	C$i2c.h$283$1$100 ==.
                                   2272 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2273 ;	-----------------------------------------
                                   2274 ;	 function Accel_Init
                                   2275 ;	-----------------------------------------
      00048D                       2276 _Accel_Init:
                           00048D  2277 	C$i2c.h$287$1$103 ==.
                                   2278 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2279 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2280 	C$i2c.h$289$1$103 ==.
                                   2281 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2282 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2283 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2284 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2285 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2286 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2287 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2288 	lcall	_i2c_write_data
                           0004A5  2289 	C$i2c.h$290$1$103 ==.
                                   2290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2291 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2292 	C$i2c.h$292$1$103 ==.
                                   2293 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2294 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2295 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2296 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2297 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2298 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2299 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2300 	lcall	_i2c_write_data
                           0004BD  2301 	C$i2c.h$293$1$103 ==.
                                   2302 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2303 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2304 	C$i2c.h$294$1$103 ==.
                                   2305 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2306 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2307 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2308 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2309 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2310 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2311 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2312 	lcall	_i2c_write_data
                           0004D5  2313 	C$i2c.h$298$1$103 ==.
                           0004D5  2314 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2315 	ret
                                   2316 ;------------------------------------------------------------
                                   2317 ;Allocation info for local variables in function 'main'
                                   2318 ;------------------------------------------------------------
                           0004D6  2319 	G$main$0$0 ==.
                           0004D6  2320 	C$Lab_3_3_Speed.c$46$1$103 ==.
                                   2321 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:46: void main(void)
                                   2322 ;	-----------------------------------------
                                   2323 ;	 function main
                                   2324 ;	-----------------------------------------
      0004D6                       2325 _main:
                           0004D6  2326 	C$Lab_3_3_Speed.c$49$1$113 ==.
                                   2327 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:49: Sys_Init();
      0004D6 12r00r30         [24] 2328 	lcall	_Sys_Init
                           0004D9  2329 	C$Lab_3_3_Speed.c$50$1$113 ==.
                                   2330 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:50: putchar(' '); //the quotes in this line may not format correctly
      0004D9 75 82 20         [24] 2331 	mov	dpl,#0x20
      0004DC 12r00r43         [24] 2332 	lcall	_putchar
                           0004DF  2333 	C$Lab_3_3_Speed.c$51$1$113 ==.
                                   2334 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:51: Port_Init();
      0004DF 12r05r35         [24] 2335 	lcall	_Port_Init
                           0004E2  2336 	C$Lab_3_3_Speed.c$52$1$113 ==.
                                   2337 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:52: XBR0_Init();
      0004E2 12r05r43         [24] 2338 	lcall	_XBR0_Init
                           0004E5  2339 	C$Lab_3_3_Speed.c$53$1$113 ==.
                                   2340 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:53: PCA_Init();
      0004E5 12r05r4D         [24] 2341 	lcall	_PCA_Init
                           0004E8  2342 	C$Lab_3_3_Speed.c$54$1$113 ==.
                                   2343 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:54: SMB_Init();
      0004E8 12r05r47         [24] 2344 	lcall	_SMB_Init
                           0004EB  2345 	C$Lab_3_3_Speed.c$56$1$113 ==.
                                   2346 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:56: printf("\rEmbedded Control Steering Calibration\n");
      0004EB 74r29            [12] 2347 	mov	a,#___str_3
      0004ED C0 E0            [24] 2348 	push	acc
      0004EF 74s00            [12] 2349 	mov	a,#(___str_3 >> 8)
      0004F1 C0 E0            [24] 2350 	push	acc
      0004F3 74 80            [12] 2351 	mov	a,#0x80
      0004F5 C0 E0            [24] 2352 	push	acc
      0004F7 12r00r00         [24] 2353 	lcall	_printf
      0004FA 15 81            [12] 2354 	dec	sp
      0004FC 15 81            [12] 2355 	dec	sp
      0004FE 15 81            [12] 2356 	dec	sp
                           000500  2357 	C$Lab_3_3_Speed.c$58$1$113 ==.
                                   2358 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:58: PW = PW_CENTER;
      000500 85*12*18         [24] 2359 	mov	_PW,_PW_CENTER
      000503 85*13*19         [24] 2360 	mov	(_PW + 1),(_PW_CENTER + 1)
                           000506  2361 	C$Lab_3_3_Speed.c$59$1$113 ==.
                                   2362 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:59: PCA0CP0 = 65535 - PW;	//Set initial pulsewidth
      000506 AC*18            [24] 2363 	mov	r4,_PW
      000508 AD*19            [24] 2364 	mov	r5,(_PW + 1)
      00050A E4               [12] 2365 	clr	a
      00050B FE               [12] 2366 	mov	r6,a
      00050C FF               [12] 2367 	mov	r7,a
      00050D 74 FF            [12] 2368 	mov	a,#0xFF
      00050F C3               [12] 2369 	clr	c
      000510 9C               [12] 2370 	subb	a,r4
      000511 FC               [12] 2371 	mov	r4,a
      000512 74 FF            [12] 2372 	mov	a,#0xFF
      000514 9D               [12] 2373 	subb	a,r5
      000515 FD               [12] 2374 	mov	r5,a
      000516 E4               [12] 2375 	clr	a
      000517 9E               [12] 2376 	subb	a,r6
      000518 FE               [12] 2377 	mov	r6,a
      000519 E4               [12] 2378 	clr	a
      00051A 9F               [12] 2379 	subb	a,r7
      00051B FF               [12] 2380 	mov	r7,a
      00051C 8C EA            [24] 2381 	mov	((_PCA0CP0 >> 0) & 0xFF),r4
      00051E 8D FA            [24] 2382 	mov	((_PCA0CP0 >> 8) & 0xFF),r5
                           000520  2383 	C$Lab_3_3_Speed.c$60$1$113 ==.
                                   2384 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:60: range = 45;
      000520 75*1F 2D         [24] 2385 	mov	_range,#0x2D
      000523 75*20 00         [24] 2386 	mov	(_range + 1),#0x00
                           000526  2387 	C$Lab_3_3_Speed.c$63$2$114 ==.
                                   2388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:63: while(start_delay<1); // The motor needs time to warm up before starting
      000526                       2389 00101$:
      000526 74 FF            [12] 2390 	mov	a,#0x100 - 0x01
      000528 25*22            [12] 2391 	add	a,_start_delay
      00052A 50 FA            [24] 2392 	jnc	00101$
                           00052C  2393 	C$Lab_3_3_Speed.c$64$2$114 ==.
                                   2394 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:64: while(!SWITCH) Drive_Motor();
      00052C                       2395 00104$:
      00052C 20 B6 F7         [24] 2396 	jb	_SWITCH,00101$
      00052F 12r05rE4         [24] 2397 	lcall	_Drive_Motor
      000532 80 F8            [24] 2398 	sjmp	00104$
                           000534  2399 	C$Lab_3_3_Speed.c$66$1$113 ==.
                           000534  2400 	XG$main$0$0 ==.
      000534 22               [24] 2401 	ret
                                   2402 ;------------------------------------------------------------
                                   2403 ;Allocation info for local variables in function 'Port_Init'
                                   2404 ;------------------------------------------------------------
                           000535  2405 	G$Port_Init$0$0 ==.
                           000535  2406 	C$Lab_3_3_Speed.c$70$1$113 ==.
                                   2407 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:70: void Port_Init()
                                   2408 ;	-----------------------------------------
                                   2409 ;	 function Port_Init
                                   2410 ;	-----------------------------------------
      000535                       2411 _Port_Init:
                           000535  2412 	C$Lab_3_3_Speed.c$72$1$115 ==.
                                   2413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:72: P1MDOUT |= 0x04; //set output pin for CEX0 in push-pull mode
      000535 43 A5 04         [24] 2414 	orl	_P1MDOUT,#0x04
                           000538  2415 	C$Lab_3_3_Speed.c$73$1$115 ==.
                                   2416 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:73: P3MDOUT &= 0xBF; //set input pin for 3.6 to open-drain mode
      000538 53 A7 BF         [24] 2417 	anl	_P3MDOUT,#0xBF
                           00053B  2418 	C$Lab_3_3_Speed.c$74$1$115 ==.
                                   2419 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:74: P3		|= ~0xBF; //set input pin to high impedence
      00053B AF B0            [24] 2420 	mov	r7,_P3
      00053D 74 40            [12] 2421 	mov	a,#0x40
      00053F 4F               [12] 2422 	orl	a,r7
      000540 F5 B0            [12] 2423 	mov	_P3,a
                           000542  2424 	C$Lab_3_3_Speed.c$75$1$115 ==.
                           000542  2425 	XG$Port_Init$0$0 ==.
      000542 22               [24] 2426 	ret
                                   2427 ;------------------------------------------------------------
                                   2428 ;Allocation info for local variables in function 'XBR0_Init'
                                   2429 ;------------------------------------------------------------
                           000543  2430 	G$XBR0_Init$0$0 ==.
                           000543  2431 	C$Lab_3_3_Speed.c$80$1$115 ==.
                                   2432 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:80: void XBR0_Init(void)
                                   2433 ;	-----------------------------------------
                                   2434 ;	 function XBR0_Init
                                   2435 ;	-----------------------------------------
      000543                       2436 _XBR0_Init:
                           000543  2437 	C$Lab_3_3_Speed.c$82$1$117 ==.
                                   2438 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:82: XBR0 = 0x27;	//configure crossbar as directed in the laboratory
      000543 75 E1 27         [24] 2439 	mov	_XBR0,#0x27
                           000546  2440 	C$Lab_3_3_Speed.c$83$1$117 ==.
                           000546  2441 	XG$XBR0_Init$0$0 ==.
      000546 22               [24] 2442 	ret
                                   2443 ;------------------------------------------------------------
                                   2444 ;Allocation info for local variables in function 'SMB_Init'
                                   2445 ;------------------------------------------------------------
                           000547  2446 	G$SMB_Init$0$0 ==.
                           000547  2447 	C$Lab_3_3_Speed.c$87$1$117 ==.
                                   2448 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:87: void SMB_Init(void)
                                   2449 ;	-----------------------------------------
                                   2450 ;	 function SMB_Init
                                   2451 ;	-----------------------------------------
      000547                       2452 _SMB_Init:
                           000547  2453 	C$Lab_3_3_Speed.c$89$1$119 ==.
                                   2454 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:89: SMB0CR=0x93;	//Set SCL to 100KHz
      000547 75 CF 93         [24] 2455 	mov	_SMB0CR,#0x93
                           00054A  2456 	C$Lab_3_3_Speed.c$90$1$119 ==.
                                   2457 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:90: ENSMB=1; 		//Bit 6 of SMB0CN, enable the SMBus
      00054A D2 C6            [12] 2458 	setb	_ENSMB
                           00054C  2459 	C$Lab_3_3_Speed.c$91$1$119 ==.
                           00054C  2460 	XG$SMB_Init$0$0 ==.
      00054C 22               [24] 2461 	ret
                                   2462 ;------------------------------------------------------------
                                   2463 ;Allocation info for local variables in function 'PCA_Init'
                                   2464 ;------------------------------------------------------------
                           00054D  2465 	G$PCA_Init$0$0 ==.
                           00054D  2466 	C$Lab_3_3_Speed.c$94$1$119 ==.
                                   2467 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:94: void PCA_Init(void)
                                   2468 ;	-----------------------------------------
                                   2469 ;	 function PCA_Init
                                   2470 ;	-----------------------------------------
      00054D                       2471 _PCA_Init:
                           00054D  2472 	C$Lab_3_3_Speed.c$96$1$121 ==.
                                   2473 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:96: PCA0CPM2 = 0xC2;	// CCM2 in 16-bit compare mode
      00054D 75 DC C2         [24] 2474 	mov	_PCA0CPM2,#0xC2
                           000550  2475 	C$Lab_3_3_Speed.c$97$1$121 ==.
                                   2476 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:97: PCA0CN = 0x40;		// Enable PCA Counter
      000550 75 D8 40         [24] 2477 	mov	_PCA0CN,#0x40
                           000553  2478 	C$Lab_3_3_Speed.c$98$1$121 ==.
                                   2479 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:98: PCA0MD = 0x81;		// Enable CF Interrupt and SYSCLK/12
      000553 75 D9 81         [24] 2480 	mov	_PCA0MD,#0x81
                           000556  2481 	C$Lab_3_3_Speed.c$99$1$121 ==.
                                   2482 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:99: EA = 1;				// Enable Global Interrupts
      000556 D2 AF            [12] 2483 	setb	_EA
                           000558  2484 	C$Lab_3_3_Speed.c$100$1$121 ==.
                                   2485 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:100: EIE1 |= 0x08;		// Enable PCA Interrupt
      000558 43 E6 08         [24] 2486 	orl	_EIE1,#0x08
                           00055B  2487 	C$Lab_3_3_Speed.c$101$1$121 ==.
                           00055B  2488 	XG$PCA_Init$0$0 ==.
      00055B 22               [24] 2489 	ret
                                   2490 ;------------------------------------------------------------
                                   2491 ;Allocation info for local variables in function 'PCA_ISR'
                                   2492 ;------------------------------------------------------------
                           00055C  2493 	G$PCA_ISR$0$0 ==.
                           00055C  2494 	C$Lab_3_3_Speed.c$106$1$121 ==.
                                   2495 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:106: void PCA_ISR ( void ) __interrupt 9
                                   2496 ;	-----------------------------------------
                                   2497 ;	 function PCA_ISR
                                   2498 ;	-----------------------------------------
      00055C                       2499 _PCA_ISR:
      00055C C0 E0            [24] 2500 	push	acc
      00055E C0 D0            [24] 2501 	push	psw
                           000560  2502 	C$Lab_3_3_Speed.c$108$1$123 ==.
                                   2503 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:108: if (CF)
      000560 30 DF 31         [24] 2504 	jnb	_CF,00109$
                           000563  2505 	C$Lab_3_3_Speed.c$110$2$124 ==.
                                   2506 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:110: r_count++;		// This code adds an 80 ms delay for the ranger to ping
      000563 05*1D            [12] 2507 	inc	_r_count
                           000565  2508 	C$Lab_3_3_Speed.c$111$2$124 ==.
                                   2509 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:111: if(r_count>=4)
      000565 74 FC            [12] 2510 	mov	a,#0x100 - 0x04
      000567 25*1D            [12] 2511 	add	a,_r_count
      000569 50 06            [24] 2512 	jnc	00102$
                           00056B  2513 	C$Lab_3_3_Speed.c$113$3$125 ==.
                                   2514 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:113: new_range=1;
      00056B 75*1C 01         [24] 2515 	mov	_new_range,#0x01
                           00056E  2516 	C$Lab_3_3_Speed.c$114$3$125 ==.
                                   2517 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:114: r_count = 0;
      00056E 75*1D 00         [24] 2518 	mov	_r_count,#0x00
      000571                       2519 00102$:
                           000571  2520 	C$Lab_3_3_Speed.c$116$2$124 ==.
                                   2521 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:116: delay++;
      000571 05*21            [12] 2522 	inc	_delay
                           000573  2523 	C$Lab_3_3_Speed.c$117$2$124 ==.
                                   2524 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:117: if(delay>5) delay = 0;
      000573 E5*21            [12] 2525 	mov	a,_delay
      000575 24 FA            [12] 2526 	add	a,#0xff - 0x05
      000577 50 03            [24] 2527 	jnc	00104$
      000579 75*21 00         [24] 2528 	mov	_delay,#0x00
      00057C                       2529 00104$:
                           00057C  2530 	C$Lab_3_3_Speed.c$118$2$124 ==.
                                   2531 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:118: PCA0 = PCA_START;	// Start count for 20ms period
      00057C 85*10 E9         [24] 2532 	mov	((_PCA0 >> 0) & 0xFF),_PCA_START
      00057F 85*11 F9         [24] 2533 	mov	((_PCA0 >> 8) & 0xFF),(_PCA_START + 1)
                           000582  2534 	C$Lab_3_3_Speed.c$119$2$124 ==.
                                   2535 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:119: CF = 0;			// Clear overflow flag
      000582 C2 DF            [12] 2536 	clr	_CF
                           000584  2537 	C$Lab_3_3_Speed.c$120$2$124 ==.
                                   2538 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:120: if((start_delay<1) && (delay>=4)) start_delay++;
      000584 74 FF            [12] 2539 	mov	a,#0x100 - 0x01
      000586 25*22            [12] 2540 	add	a,_start_delay
      000588 40 0D            [24] 2541 	jc	00111$
      00058A 74 FC            [12] 2542 	mov	a,#0x100 - 0x04
      00058C 25*21            [12] 2543 	add	a,_delay
      00058E 50 07            [24] 2544 	jnc	00111$
      000590 05*22            [12] 2545 	inc	_start_delay
      000592 80 03            [24] 2546 	sjmp	00111$
      000594                       2547 00109$:
                           000594  2548 	C$Lab_3_3_Speed.c$122$1$123 ==.
                                   2549 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:122: else PCA0CN &= 0xC0;		// Handle other PCA interrupt sources
      000594 53 D8 C0         [24] 2550 	anl	_PCA0CN,#0xC0
      000597                       2551 00111$:
      000597 D0 D0            [24] 2552 	pop	psw
      000599 D0 E0            [24] 2553 	pop	acc
                           00059B  2554 	C$Lab_3_3_Speed.c$123$1$123 ==.
                           00059B  2555 	XG$PCA_ISR$0$0 ==.
      00059B 32               [24] 2556 	reti
                                   2557 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2558 ;	eliminated unneeded push/pop dpl
                                   2559 ;	eliminated unneeded push/pop dph
                                   2560 ;	eliminated unneeded push/pop b
                                   2561 ;------------------------------------------------------------
                                   2562 ;Allocation info for local variables in function 'ReadRanger'
                                   2563 ;------------------------------------------------------------
                                   2564 ;addr                      Allocated to registers 
                                   2565 ;Data                      Allocated with name '_ReadRanger_Data_1_126'
                                   2566 ;range                     Allocated to registers r6 r7 
                                   2567 ;------------------------------------------------------------
                           00059C  2568 	G$ReadRanger$0$0 ==.
                           00059C  2569 	C$Lab_3_3_Speed.c$129$1$123 ==.
                                   2570 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:129: unsigned int ReadRanger()
                                   2571 ;	-----------------------------------------
                                   2572 ;	 function ReadRanger
                                   2573 ;	-----------------------------------------
      00059C                       2574 _ReadRanger:
                           00059C  2575 	C$Lab_3_3_Speed.c$134$1$126 ==.
                                   2576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:134: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      00059C 75*0Br23         [24] 2577 	mov	_i2c_read_data_PARM_3,#_ReadRanger_Data_1_126
      00059F 75*0C 00         [24] 2578 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0005A2 75*0D 40         [24] 2579 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0005A5 75*0A 02         [24] 2580 	mov	_i2c_read_data_PARM_2,#0x02
      0005A8 75*0E 02         [24] 2581 	mov	_i2c_read_data_PARM_4,#0x02
      0005AB 75 82 E0         [24] 2582 	mov	dpl,#0xE0
      0005AE 12r03rE8         [24] 2583 	lcall	_i2c_read_data
                           0005B1  2584 	C$Lab_3_3_Speed.c$135$1$126 ==.
                                   2585 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:135: range =(((unsigned int)Data[0] << 8) | Data[1]); //combine the two values	
      0005B1 AF*23            [24] 2586 	mov	r7,_ReadRanger_Data_1_126
      0005B3 7E 00            [12] 2587 	mov	r6,#0x00
      0005B5 AC*24            [24] 2588 	mov	r4,(_ReadRanger_Data_1_126 + 0x0001)
      0005B7 7D 00            [12] 2589 	mov	r5,#0x00
      0005B9 EC               [12] 2590 	mov	a,r4
      0005BA 42 06            [12] 2591 	orl	ar6,a
      0005BC ED               [12] 2592 	mov	a,r5
      0005BD 42 07            [12] 2593 	orl	ar7,a
                           0005BF  2594 	C$Lab_3_3_Speed.c$136$1$126 ==.
                                   2595 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:136: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      0005BF 75*23 51         [24] 2596 	mov	_ReadRanger_Data_1_126,#0x51
                           0005C2  2597 	C$Lab_3_3_Speed.c$137$1$126 ==.
                                   2598 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:137: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      0005C2 75*06r23         [24] 2599 	mov	_i2c_write_data_PARM_3,#_ReadRanger_Data_1_126
      0005C5 75*07 00         [24] 2600 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0005C8 75*08 40         [24] 2601 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0005CB 75*05 00         [24] 2602 	mov	_i2c_write_data_PARM_2,#0x00
      0005CE 75*09 01         [24] 2603 	mov	_i2c_write_data_PARM_4,#0x01
      0005D1 75 82 E0         [24] 2604 	mov	dpl,#0xE0
      0005D4 C0 07            [24] 2605 	push	ar7
      0005D6 C0 06            [24] 2606 	push	ar6
      0005D8 12r03r72         [24] 2607 	lcall	_i2c_write_data
      0005DB D0 06            [24] 2608 	pop	ar6
      0005DD D0 07            [24] 2609 	pop	ar7
                           0005DF  2610 	C$Lab_3_3_Speed.c$138$1$126 ==.
                                   2611 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:138: return range;
      0005DF 8E 82            [24] 2612 	mov	dpl,r6
      0005E1 8F 83            [24] 2613 	mov	dph,r7
                           0005E3  2614 	C$Lab_3_3_Speed.c$139$1$126 ==.
                           0005E3  2615 	XG$ReadRanger$0$0 ==.
      0005E3 22               [24] 2616 	ret
                                   2617 ;------------------------------------------------------------
                                   2618 ;Allocation info for local variables in function 'Drive_Motor'
                                   2619 ;------------------------------------------------------------
                           0005E4  2620 	G$Drive_Motor$0$0 ==.
                           0005E4  2621 	C$Lab_3_3_Speed.c$147$1$126 ==.
                                   2622 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:147: void Drive_Motor()
                                   2623 ;	-----------------------------------------
                                   2624 ;	 function Drive_Motor
                                   2625 ;	-----------------------------------------
      0005E4                       2626 _Drive_Motor:
                           0005E4  2627 	C$Lab_3_3_Speed.c$149$1$127 ==.
                                   2628 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:149: if(new_range && (delay>=5))
      0005E4 E5*1C            [12] 2629 	mov	a,_new_range
      0005E6 60 44            [24] 2630 	jz	00102$
      0005E8 74 FB            [12] 2631 	mov	a,#0x100 - 0x05
      0005EA 25*21            [12] 2632 	add	a,_delay
      0005EC 50 3E            [24] 2633 	jnc	00102$
                           0005EE  2634 	C$Lab_3_3_Speed.c$151$2$128 ==.
                                   2635 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:151: range = ReadRanger();
      0005EE 12r05r9C         [24] 2636 	lcall	_ReadRanger
      0005F1 85 82*1F         [24] 2637 	mov	_range,dpl
      0005F4 85 83*20         [24] 2638 	mov	(_range + 1),dph
                           0005F7  2639 	C$Lab_3_3_Speed.c$152$2$128 ==.
                                   2640 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:152: new_range = 0;
      0005F7 75*1C 00         [24] 2641 	mov	_new_range,#0x00
                           0005FA  2642 	C$Lab_3_3_Speed.c$155$2$128 ==.
                                   2643 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:155: printf("\rThe range is %u cm\n",range);
      0005FA C0*1F            [24] 2644 	push	_range
      0005FC C0*20            [24] 2645 	push	(_range + 1)
      0005FE 74r51            [12] 2646 	mov	a,#___str_4
      000600 C0 E0            [24] 2647 	push	acc
      000602 74s00            [12] 2648 	mov	a,#(___str_4 >> 8)
      000604 C0 E0            [24] 2649 	push	acc
      000606 74 80            [12] 2650 	mov	a,#0x80
      000608 C0 E0            [24] 2651 	push	acc
      00060A 12r00r00         [24] 2652 	lcall	_printf
      00060D E5 81            [12] 2653 	mov	a,sp
      00060F 24 FB            [12] 2654 	add	a,#0xfb
      000611 F5 81            [12] 2655 	mov	sp,a
                           000613  2656 	C$Lab_3_3_Speed.c$156$2$128 ==.
                                   2657 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:156: printf("\rPW is %u\n", PW);
      000613 C0*18            [24] 2658 	push	_PW
      000615 C0*19            [24] 2659 	push	(_PW + 1)
      000617 74r66            [12] 2660 	mov	a,#___str_5
      000619 C0 E0            [24] 2661 	push	acc
      00061B 74s00            [12] 2662 	mov	a,#(___str_5 >> 8)
      00061D C0 E0            [24] 2663 	push	acc
      00061F 74 80            [12] 2664 	mov	a,#0x80
      000621 C0 E0            [24] 2665 	push	acc
      000623 12r00r00         [24] 2666 	lcall	_printf
      000626 E5 81            [12] 2667 	mov	a,sp
      000628 24 FB            [12] 2668 	add	a,#0xfb
      00062A F5 81            [12] 2669 	mov	sp,a
      00062C                       2670 00102$:
                           00062C  2671 	C$Lab_3_3_Speed.c$158$1$127 ==.
                                   2672 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:158: PW = DeterminePWM(range);	//Adjust Pulsewidth for motor control
      00062C 85*1F 82         [24] 2673 	mov	dpl,_range
      00062F 85*20 83         [24] 2674 	mov	dph,(_range + 1)
      000632 12r06r6B         [24] 2675 	lcall	_DeterminePWM
      000635 85 82*18         [24] 2676 	mov	_PW,dpl
      000638 85 83*19         [24] 2677 	mov	(_PW + 1),dph
                           00063B  2678 	C$Lab_3_3_Speed.c$159$1$127 ==.
                                   2679 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:159: if(PW > PW_MAX) PW = PW_MAX;
      00063B C3               [12] 2680 	clr	c
      00063C E5*16            [12] 2681 	mov	a,_PW_MAX
      00063E 95*18            [12] 2682 	subb	a,_PW
      000640 E5*17            [12] 2683 	mov	a,(_PW_MAX + 1)
      000642 95*19            [12] 2684 	subb	a,(_PW + 1)
      000644 50 06            [24] 2685 	jnc	00105$
      000646 85*16*18         [24] 2686 	mov	_PW,_PW_MAX
      000649 85*17*19         [24] 2687 	mov	(_PW + 1),(_PW_MAX + 1)
      00064C                       2688 00105$:
                           00064C  2689 	C$Lab_3_3_Speed.c$160$1$127 ==.
                                   2690 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:160: if(PW < PW_MIN) PW = PW_MIN;
      00064C C3               [12] 2691 	clr	c
      00064D E5*18            [12] 2692 	mov	a,_PW
      00064F 95*14            [12] 2693 	subb	a,_PW_MIN
      000651 E5*19            [12] 2694 	mov	a,(_PW + 1)
      000653 95*15            [12] 2695 	subb	a,(_PW_MIN + 1)
      000655 50 06            [24] 2696 	jnc	00107$
      000657 85*14*18         [24] 2697 	mov	_PW,_PW_MIN
      00065A 85*15*19         [24] 2698 	mov	(_PW + 1),(_PW_MIN + 1)
      00065D                       2699 00107$:
                           00065D  2700 	C$Lab_3_3_Speed.c$162$1$127 ==.
                                   2701 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:162: PCA0CP2 = 0xFFFF - PW;	
      00065D 74 FF            [12] 2702 	mov	a,#0xFF
      00065F C3               [12] 2703 	clr	c
      000660 95*18            [12] 2704 	subb	a,_PW
      000662 F5 EC            [12] 2705 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      000664 74 FF            [12] 2706 	mov	a,#0xFF
      000666 95*19            [12] 2707 	subb	a,(_PW + 1)
      000668 F5 FC            [12] 2708 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           00066A  2709 	C$Lab_3_3_Speed.c$163$1$127 ==.
                           00066A  2710 	XG$Drive_Motor$0$0 ==.
      00066A 22               [24] 2711 	ret
                                   2712 ;------------------------------------------------------------
                                   2713 ;Allocation info for local variables in function 'DeterminePWM'
                                   2714 ;------------------------------------------------------------
                                   2715 ;range                     Allocated to registers r6 r7 
                                   2716 ;Error                     Allocated to registers r6 r7 
                                   2717 ;PWMe                      Allocated to registers r4 r5 
                                   2718 ;k                         Allocated to registers 
                                   2719 ;------------------------------------------------------------
                           00066B  2720 	G$DeterminePWM$0$0 ==.
                           00066B  2721 	C$Lab_3_3_Speed.c$168$1$127 ==.
                                   2722 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:168: signed int DeterminePWM(unsigned int range)
                                   2723 ;	-----------------------------------------
                                   2724 ;	 function DeterminePWM
                                   2725 ;	-----------------------------------------
      00066B                       2726 _DeterminePWM:
      00066B AE 82            [24] 2727 	mov	r6,dpl
      00066D AF 83            [24] 2728 	mov	r7,dph
                           00066F  2729 	C$Lab_3_3_Speed.c$173$1$130 ==.
                                   2730 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:173: Error = neutral - range;	// Calculate the error
      00066F AC*1E            [24] 2731 	mov	r4,_neutral
      000671 7D 00            [12] 2732 	mov	r5,#0x00
      000673 EC               [12] 2733 	mov	a,r4
      000674 C3               [12] 2734 	clr	c
      000675 9E               [12] 2735 	subb	a,r6
      000676 FE               [12] 2736 	mov	r6,a
      000677 ED               [12] 2737 	mov	a,r5
      000678 9F               [12] 2738 	subb	a,r7
      000679 FF               [12] 2739 	mov	r7,a
                           00067A  2740 	C$Lab_3_3_Speed.c$174$1$130 ==.
                                   2741 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:174: PWMe = PW_CENTER + (k*Error);
      00067A 8E*00            [24] 2742 	mov	__mulint_PARM_2,r6
      00067C 8F*01            [24] 2743 	mov	(__mulint_PARM_2 + 1),r7
      00067E 90 00 14         [24] 2744 	mov	dptr,#0x0014
      000681 C0 07            [24] 2745 	push	ar7
      000683 C0 06            [24] 2746 	push	ar6
      000685 12r00r00         [24] 2747 	lcall	__mulint
      000688 AC 82            [24] 2748 	mov	r4,dpl
      00068A AD 83            [24] 2749 	mov	r5,dph
      00068C D0 06            [24] 2750 	pop	ar6
      00068E D0 07            [24] 2751 	pop	ar7
      000690 EC               [12] 2752 	mov	a,r4
      000691 25*12            [12] 2753 	add	a,_PW_CENTER
      000693 FC               [12] 2754 	mov	r4,a
      000694 ED               [12] 2755 	mov	a,r5
      000695 35*13            [12] 2756 	addc	a,(_PW_CENTER + 1)
      000697 FD               [12] 2757 	mov	r5,a
                           000698  2758 	C$Lab_3_3_Speed.c$175$1$130 ==.
                                   2759 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:175: if(PWMe < PW_MIN) PWMe = PW_MIN;
      000698 C3               [12] 2760 	clr	c
      000699 EC               [12] 2761 	mov	a,r4
      00069A 95*14            [12] 2762 	subb	a,_PW_MIN
      00069C ED               [12] 2763 	mov	a,r5
      00069D 95*15            [12] 2764 	subb	a,(_PW_MIN + 1)
      00069F 50 04            [24] 2765 	jnc	00102$
      0006A1 AC*14            [24] 2766 	mov	r4,_PW_MIN
      0006A3 AD*15            [24] 2767 	mov	r5,(_PW_MIN + 1)
      0006A5                       2768 00102$:
                           0006A5  2769 	C$Lab_3_3_Speed.c$176$1$130 ==.
                                   2770 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:176: if(PWMe > PW_MAX) PWMe = PW_MAX;
      0006A5 C3               [12] 2771 	clr	c
      0006A6 E5*16            [12] 2772 	mov	a,_PW_MAX
      0006A8 9C               [12] 2773 	subb	a,r4
      0006A9 E5*17            [12] 2774 	mov	a,(_PW_MAX + 1)
      0006AB 9D               [12] 2775 	subb	a,r5
      0006AC 50 04            [24] 2776 	jnc	00104$
      0006AE AC*16            [24] 2777 	mov	r4,_PW_MAX
      0006B0 AD*17            [24] 2778 	mov	r5,(_PW_MAX + 1)
      0006B2                       2779 00104$:
                           0006B2  2780 	C$Lab_3_3_Speed.c$177$1$130 ==.
                                   2781 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:177: if((-5<Error) && (Error<5)) PWMe = PW_CENTER;
      0006B2 C3               [12] 2782 	clr	c
      0006B3 74 FB            [12] 2783 	mov	a,#0xFB
      0006B5 9E               [12] 2784 	subb	a,r6
      0006B6 74 7F            [12] 2785 	mov	a,#(0xFF ^ 0x80)
      0006B8 8F F0            [24] 2786 	mov	b,r7
      0006BA 63 F0 80         [24] 2787 	xrl	b,#0x80
      0006BD 95 F0            [12] 2788 	subb	a,b
      0006BF 50 0F            [24] 2789 	jnc	00106$
      0006C1 C3               [12] 2790 	clr	c
      0006C2 EE               [12] 2791 	mov	a,r6
      0006C3 94 05            [12] 2792 	subb	a,#0x05
      0006C5 EF               [12] 2793 	mov	a,r7
      0006C6 64 80            [12] 2794 	xrl	a,#0x80
      0006C8 94 80            [12] 2795 	subb	a,#0x80
      0006CA 50 04            [24] 2796 	jnc	00106$
      0006CC AC*12            [24] 2797 	mov	r4,_PW_CENTER
      0006CE AD*13            [24] 2798 	mov	r5,(_PW_CENTER + 1)
      0006D0                       2799 00106$:
                           0006D0  2800 	C$Lab_3_3_Speed.c$180$1$130 ==.
                                   2801 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 3\Speed\Lab 3-3\Lab_3_3_Speed.c:180: return PWMe;
      0006D0 8C 82            [24] 2802 	mov	dpl,r4
      0006D2 8D 83            [24] 2803 	mov	dph,r5
                           0006D4  2804 	C$Lab_3_3_Speed.c$181$1$130 ==.
                           0006D4  2805 	XG$DeterminePWM$0$0 ==.
      0006D4 22               [24] 2806 	ret
                                   2807 	.area CSEG    (CODE)
                                   2808 	.area CONST   (CODE)
                           000000  2809 FLab_3_3_Speed$__str_0$0$0 == .
      000000                       2810 ___str_0:
      000000 0A                    2811 	.db 0x0A
      000001 54 79 70 65 20 64 69  2812 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    2813 	.db 0x00
                           000016  2814 FLab_3_3_Speed$__str_1$0$0 == .
      000016                       2815 ___str_1:
      000016 20 20 20 20 20 25 63  2816 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    2817 	.db 0x00
                           000026  2818 FLab_3_3_Speed$__str_2$0$0 == .
      000026                       2819 ___str_2:
      000026 25 63                 2820 	.ascii "%c"
      000028 00                    2821 	.db 0x00
                           000029  2822 FLab_3_3_Speed$__str_3$0$0 == .
      000029                       2823 ___str_3:
      000029 0D                    2824 	.db 0x0D
      00002A 45 6D 62 65 64 64 65  2825 	.ascii "Embedded Control Steering Calibration"
             64 20 43 6F 6E 74 72
             6F 6C 20 53 74 65 65
             72 69 6E 67 20 43 61
             6C 69 62 72 61 74 69
             6F 6E
      00004F 0A                    2826 	.db 0x0A
      000050 00                    2827 	.db 0x00
                           000051  2828 FLab_3_3_Speed$__str_4$0$0 == .
      000051                       2829 ___str_4:
      000051 0D                    2830 	.db 0x0D
      000052 54 68 65 20 72 61 6E  2831 	.ascii "The range is %u cm"
             67 65 20 69 73 20 25
             75 20 63 6D
      000064 0A                    2832 	.db 0x0A
      000065 00                    2833 	.db 0x00
                           000066  2834 FLab_3_3_Speed$__str_5$0$0 == .
      000066                       2835 ___str_5:
      000066 0D                    2836 	.db 0x0D
      000067 50 57 20 69 73 20 25  2837 	.ascii "PW is %u"
             75
      00006F 0A                    2838 	.db 0x0A
      000070 00                    2839 	.db 0x00
                                   2840 	.area XINIT   (CODE)
                                   2841 	.area CABS    (ABS,CODE)
