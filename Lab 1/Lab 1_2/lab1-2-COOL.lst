                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Mon Feb 23 20:23:53 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module lab1_2_COOL
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _rand
                                     14 	.globl _putchar
                                     15 	.globl _printf
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _SS
                                     20 	.globl _PB1
                                     21 	.globl _PB0
                                     22 	.globl _Buzzer
                                     23 	.globl _BILED1
                                     24 	.globl _BILED0
                                     25 	.globl _LED0
                                     26 	.globl _LED1
                                     27 	.globl _SPIF
                                     28 	.globl _WCOL
                                     29 	.globl _MODF
                                     30 	.globl _RXOVRN
                                     31 	.globl _TXBSY
                                     32 	.globl _SLVSEL
                                     33 	.globl _MSTEN
                                     34 	.globl _SPIEN
                                     35 	.globl _AD0EN
                                     36 	.globl _ADCEN
                                     37 	.globl _AD0TM
                                     38 	.globl _ADCTM
                                     39 	.globl _AD0INT
                                     40 	.globl _ADCINT
                                     41 	.globl _AD0BUSY
                                     42 	.globl _ADBUSY
                                     43 	.globl _AD0CM1
                                     44 	.globl _ADSTM1
                                     45 	.globl _AD0CM0
                                     46 	.globl _ADSTM0
                                     47 	.globl _AD0WINT
                                     48 	.globl _ADWINT
                                     49 	.globl _AD0LJST
                                     50 	.globl _ADLJST
                                     51 	.globl _CF
                                     52 	.globl _CR
                                     53 	.globl _CCF4
                                     54 	.globl _CCF3
                                     55 	.globl _CCF2
                                     56 	.globl _CCF1
                                     57 	.globl _CCF0
                                     58 	.globl _CY
                                     59 	.globl _AC
                                     60 	.globl _F0
                                     61 	.globl _RS1
                                     62 	.globl _RS0
                                     63 	.globl _OV
                                     64 	.globl _F1
                                     65 	.globl _P
                                     66 	.globl _TF2
                                     67 	.globl _EXF2
                                     68 	.globl _RCLK
                                     69 	.globl _TCLK
                                     70 	.globl _EXEN2
                                     71 	.globl _TR2
                                     72 	.globl _CT2
                                     73 	.globl _CPRL2
                                     74 	.globl _BUSY
                                     75 	.globl _ENSMB
                                     76 	.globl _STA
                                     77 	.globl _STO
                                     78 	.globl _SI
                                     79 	.globl _AA
                                     80 	.globl _SMBFTE
                                     81 	.globl _SMBTOE
                                     82 	.globl _PT2
                                     83 	.globl _PS
                                     84 	.globl _PS0
                                     85 	.globl _PT1
                                     86 	.globl _PX1
                                     87 	.globl _PT0
                                     88 	.globl _PX0
                                     89 	.globl _P3_7
                                     90 	.globl _P3_6
                                     91 	.globl _P3_5
                                     92 	.globl _P3_4
                                     93 	.globl _P3_3
                                     94 	.globl _P3_2
                                     95 	.globl _P3_1
                                     96 	.globl _P3_0
                                     97 	.globl _EA
                                     98 	.globl _ET2
                                     99 	.globl _ES
                                    100 	.globl _ES0
                                    101 	.globl _ET1
                                    102 	.globl _EX1
                                    103 	.globl _ET0
                                    104 	.globl _EX0
                                    105 	.globl _P2_7
                                    106 	.globl _P2_6
                                    107 	.globl _P2_5
                                    108 	.globl _P2_4
                                    109 	.globl _P2_3
                                    110 	.globl _P2_2
                                    111 	.globl _P2_1
                                    112 	.globl _P2_0
                                    113 	.globl _S0MODE
                                    114 	.globl _SM00
                                    115 	.globl _SM0
                                    116 	.globl _SM10
                                    117 	.globl _SM1
                                    118 	.globl _MCE0
                                    119 	.globl _SM20
                                    120 	.globl _SM2
                                    121 	.globl _REN0
                                    122 	.globl _REN
                                    123 	.globl _TB80
                                    124 	.globl _TB8
                                    125 	.globl _RB80
                                    126 	.globl _RB8
                                    127 	.globl _TI0
                                    128 	.globl _TI
                                    129 	.globl _RI0
                                    130 	.globl _RI
                                    131 	.globl _P1_7
                                    132 	.globl _P1_6
                                    133 	.globl _P1_5
                                    134 	.globl _P1_4
                                    135 	.globl _P1_3
                                    136 	.globl _P1_2
                                    137 	.globl _P1_1
                                    138 	.globl _P1_0
                                    139 	.globl _TF1
                                    140 	.globl _TR1
                                    141 	.globl _TF0
                                    142 	.globl _TR0
                                    143 	.globl _IE1
                                    144 	.globl _IT1
                                    145 	.globl _IE0
                                    146 	.globl _IT0
                                    147 	.globl _P0_7
                                    148 	.globl _P0_6
                                    149 	.globl _P0_5
                                    150 	.globl _P0_4
                                    151 	.globl _P0_3
                                    152 	.globl _P0_2
                                    153 	.globl _P0_1
                                    154 	.globl _P0_0
                                    155 	.globl _PCA0CP4
                                    156 	.globl _PCA0CP3
                                    157 	.globl _PCA0CP2
                                    158 	.globl _PCA0CP1
                                    159 	.globl _PCA0CP0
                                    160 	.globl _PCA0
                                    161 	.globl _DAC1
                                    162 	.globl _DAC0
                                    163 	.globl _ADC0LT
                                    164 	.globl _ADC0GT
                                    165 	.globl _ADC0
                                    166 	.globl _RCAP4
                                    167 	.globl _TMR4
                                    168 	.globl _TMR3RL
                                    169 	.globl _TMR3
                                    170 	.globl _RCAP2
                                    171 	.globl _TMR2
                                    172 	.globl _TMR1
                                    173 	.globl _TMR0
                                    174 	.globl _WDTCN
                                    175 	.globl _PCA0CPH4
                                    176 	.globl _PCA0CPH3
                                    177 	.globl _PCA0CPH2
                                    178 	.globl _PCA0CPH1
                                    179 	.globl _PCA0CPH0
                                    180 	.globl _PCA0H
                                    181 	.globl _SPI0CN
                                    182 	.globl _EIP2
                                    183 	.globl _EIP1
                                    184 	.globl _TH4
                                    185 	.globl _TL4
                                    186 	.globl _SADDR1
                                    187 	.globl _SBUF1
                                    188 	.globl _SCON1
                                    189 	.globl _B
                                    190 	.globl _RSTSRC
                                    191 	.globl _PCA0CPL4
                                    192 	.globl _PCA0CPL3
                                    193 	.globl _PCA0CPL2
                                    194 	.globl _PCA0CPL1
                                    195 	.globl _PCA0CPL0
                                    196 	.globl _PCA0L
                                    197 	.globl _ADC0CN
                                    198 	.globl _EIE2
                                    199 	.globl _EIE1
                                    200 	.globl _RCAP4H
                                    201 	.globl _RCAP4L
                                    202 	.globl _XBR2
                                    203 	.globl _XBR1
                                    204 	.globl _XBR0
                                    205 	.globl _ACC
                                    206 	.globl _PCA0CPM4
                                    207 	.globl _PCA0CPM3
                                    208 	.globl _PCA0CPM2
                                    209 	.globl _PCA0CPM1
                                    210 	.globl _PCA0CPM0
                                    211 	.globl _PCA0MD
                                    212 	.globl _PCA0CN
                                    213 	.globl _DAC1CN
                                    214 	.globl _DAC1H
                                    215 	.globl _DAC1L
                                    216 	.globl _DAC0CN
                                    217 	.globl _DAC0H
                                    218 	.globl _DAC0L
                                    219 	.globl _REF0CN
                                    220 	.globl _PSW
                                    221 	.globl _SMB0CR
                                    222 	.globl _TH2
                                    223 	.globl _TL2
                                    224 	.globl _RCAP2H
                                    225 	.globl _RCAP2L
                                    226 	.globl _T4CON
                                    227 	.globl _T2CON
                                    228 	.globl _ADC0LTH
                                    229 	.globl _ADC0LTL
                                    230 	.globl _ADC0GTH
                                    231 	.globl _ADC0GTL
                                    232 	.globl _SMB0ADR
                                    233 	.globl _SMB0DAT
                                    234 	.globl _SMB0STA
                                    235 	.globl _SMB0CN
                                    236 	.globl _ADC0H
                                    237 	.globl _ADC0L
                                    238 	.globl _P1MDIN
                                    239 	.globl _ADC0CF
                                    240 	.globl _AMX0SL
                                    241 	.globl _AMX0CF
                                    242 	.globl _SADEN0
                                    243 	.globl _IP
                                    244 	.globl _FLACL
                                    245 	.globl _FLSCL
                                    246 	.globl _P74OUT
                                    247 	.globl _OSCICN
                                    248 	.globl _OSCXCN
                                    249 	.globl _P3
                                    250 	.globl __XPAGE
                                    251 	.globl _EMI0CN
                                    252 	.globl _SADEN1
                                    253 	.globl _P3IF
                                    254 	.globl _AMX1SL
                                    255 	.globl _ADC1CF
                                    256 	.globl _ADC1CN
                                    257 	.globl _SADDR0
                                    258 	.globl _IE
                                    259 	.globl _P3MDOUT
                                    260 	.globl _PRT3CF
                                    261 	.globl _P2MDOUT
                                    262 	.globl _PRT2CF
                                    263 	.globl _P1MDOUT
                                    264 	.globl _PRT1CF
                                    265 	.globl _P0MDOUT
                                    266 	.globl _PRT0CF
                                    267 	.globl _EMI0CF
                                    268 	.globl _EMI0TC
                                    269 	.globl _P2
                                    270 	.globl _CPT1CN
                                    271 	.globl _CPT0CN
                                    272 	.globl _SPI0CKR
                                    273 	.globl _ADC1
                                    274 	.globl _SPI0DAT
                                    275 	.globl _SPI0CFG
                                    276 	.globl _SBUF0
                                    277 	.globl _SBUF
                                    278 	.globl _SCON0
                                    279 	.globl _SCON
                                    280 	.globl _P7
                                    281 	.globl _TMR3H
                                    282 	.globl _TMR3L
                                    283 	.globl _TMR3RLH
                                    284 	.globl _TMR3RLL
                                    285 	.globl _TMR3CN
                                    286 	.globl _P1
                                    287 	.globl _PSCTL
                                    288 	.globl _CKCON
                                    289 	.globl _TH1
                                    290 	.globl _TH0
                                    291 	.globl _TL1
                                    292 	.globl _TL0
                                    293 	.globl _TMOD
                                    294 	.globl _TCON
                                    295 	.globl _PCON
                                    296 	.globl _P6
                                    297 	.globl _P5
                                    298 	.globl _P4
                                    299 	.globl _DPH
                                    300 	.globl _DPL
                                    301 	.globl _SP
                                    302 	.globl _P0
                                    303 	.globl _secondvariable
                                    304 	.globl _countvariable
                                    305 	.globl _programflag
                                    306 	.globl _flag
                                    307 	.globl _correctAnswerCount
                                    308 	.globl _turns
                                    309 	.globl _RNG
                                    310 	.globl _previousRNG
                                    311 	.globl _Seconds
                                    312 	.globl _Counts
                                    313 	.globl _Port_Init
                                    314 	.globl _Interrupt_Init
                                    315 	.globl _Timer_Init
                                    316 	.globl _Timer0_ISR
                                    317 	.globl _random
                                    318 	.globl _Button0
                                    319 	.globl _Button1
                                    320 	.globl _Switch
                                    321 ;--------------------------------------------------------
                                    322 ; special function registers
                                    323 ;--------------------------------------------------------
                                    324 	.area RSEG    (ABS,DATA)
      000000                        325 	.org 0x0000
                           000080   326 G$P0$0$0 == 0x0080
                           000080   327 _P0	=	0x0080
                           000081   328 G$SP$0$0 == 0x0081
                           000081   329 _SP	=	0x0081
                           000082   330 G$DPL$0$0 == 0x0082
                           000082   331 _DPL	=	0x0082
                           000083   332 G$DPH$0$0 == 0x0083
                           000083   333 _DPH	=	0x0083
                           000084   334 G$P4$0$0 == 0x0084
                           000084   335 _P4	=	0x0084
                           000085   336 G$P5$0$0 == 0x0085
                           000085   337 _P5	=	0x0085
                           000086   338 G$P6$0$0 == 0x0086
                           000086   339 _P6	=	0x0086
                           000087   340 G$PCON$0$0 == 0x0087
                           000087   341 _PCON	=	0x0087
                           000088   342 G$TCON$0$0 == 0x0088
                           000088   343 _TCON	=	0x0088
                           000089   344 G$TMOD$0$0 == 0x0089
                           000089   345 _TMOD	=	0x0089
                           00008A   346 G$TL0$0$0 == 0x008a
                           00008A   347 _TL0	=	0x008a
                           00008B   348 G$TL1$0$0 == 0x008b
                           00008B   349 _TL1	=	0x008b
                           00008C   350 G$TH0$0$0 == 0x008c
                           00008C   351 _TH0	=	0x008c
                           00008D   352 G$TH1$0$0 == 0x008d
                           00008D   353 _TH1	=	0x008d
                           00008E   354 G$CKCON$0$0 == 0x008e
                           00008E   355 _CKCON	=	0x008e
                           00008F   356 G$PSCTL$0$0 == 0x008f
                           00008F   357 _PSCTL	=	0x008f
                           000090   358 G$P1$0$0 == 0x0090
                           000090   359 _P1	=	0x0090
                           000091   360 G$TMR3CN$0$0 == 0x0091
                           000091   361 _TMR3CN	=	0x0091
                           000092   362 G$TMR3RLL$0$0 == 0x0092
                           000092   363 _TMR3RLL	=	0x0092
                           000093   364 G$TMR3RLH$0$0 == 0x0093
                           000093   365 _TMR3RLH	=	0x0093
                           000094   366 G$TMR3L$0$0 == 0x0094
                           000094   367 _TMR3L	=	0x0094
                           000095   368 G$TMR3H$0$0 == 0x0095
                           000095   369 _TMR3H	=	0x0095
                           000096   370 G$P7$0$0 == 0x0096
                           000096   371 _P7	=	0x0096
                           000098   372 G$SCON$0$0 == 0x0098
                           000098   373 _SCON	=	0x0098
                           000098   374 G$SCON0$0$0 == 0x0098
                           000098   375 _SCON0	=	0x0098
                           000099   376 G$SBUF$0$0 == 0x0099
                           000099   377 _SBUF	=	0x0099
                           000099   378 G$SBUF0$0$0 == 0x0099
                           000099   379 _SBUF0	=	0x0099
                           00009A   380 G$SPI0CFG$0$0 == 0x009a
                           00009A   381 _SPI0CFG	=	0x009a
                           00009B   382 G$SPI0DAT$0$0 == 0x009b
                           00009B   383 _SPI0DAT	=	0x009b
                           00009C   384 G$ADC1$0$0 == 0x009c
                           00009C   385 _ADC1	=	0x009c
                           00009D   386 G$SPI0CKR$0$0 == 0x009d
                           00009D   387 _SPI0CKR	=	0x009d
                           00009E   388 G$CPT0CN$0$0 == 0x009e
                           00009E   389 _CPT0CN	=	0x009e
                           00009F   390 G$CPT1CN$0$0 == 0x009f
                           00009F   391 _CPT1CN	=	0x009f
                           0000A0   392 G$P2$0$0 == 0x00a0
                           0000A0   393 _P2	=	0x00a0
                           0000A1   394 G$EMI0TC$0$0 == 0x00a1
                           0000A1   395 _EMI0TC	=	0x00a1
                           0000A3   396 G$EMI0CF$0$0 == 0x00a3
                           0000A3   397 _EMI0CF	=	0x00a3
                           0000A4   398 G$PRT0CF$0$0 == 0x00a4
                           0000A4   399 _PRT0CF	=	0x00a4
                           0000A4   400 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   401 _P0MDOUT	=	0x00a4
                           0000A5   402 G$PRT1CF$0$0 == 0x00a5
                           0000A5   403 _PRT1CF	=	0x00a5
                           0000A5   404 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   405 _P1MDOUT	=	0x00a5
                           0000A6   406 G$PRT2CF$0$0 == 0x00a6
                           0000A6   407 _PRT2CF	=	0x00a6
                           0000A6   408 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   409 _P2MDOUT	=	0x00a6
                           0000A7   410 G$PRT3CF$0$0 == 0x00a7
                           0000A7   411 _PRT3CF	=	0x00a7
                           0000A7   412 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   413 _P3MDOUT	=	0x00a7
                           0000A8   414 G$IE$0$0 == 0x00a8
                           0000A8   415 _IE	=	0x00a8
                           0000A9   416 G$SADDR0$0$0 == 0x00a9
                           0000A9   417 _SADDR0	=	0x00a9
                           0000AA   418 G$ADC1CN$0$0 == 0x00aa
                           0000AA   419 _ADC1CN	=	0x00aa
                           0000AB   420 G$ADC1CF$0$0 == 0x00ab
                           0000AB   421 _ADC1CF	=	0x00ab
                           0000AC   422 G$AMX1SL$0$0 == 0x00ac
                           0000AC   423 _AMX1SL	=	0x00ac
                           0000AD   424 G$P3IF$0$0 == 0x00ad
                           0000AD   425 _P3IF	=	0x00ad
                           0000AE   426 G$SADEN1$0$0 == 0x00ae
                           0000AE   427 _SADEN1	=	0x00ae
                           0000AF   428 G$EMI0CN$0$0 == 0x00af
                           0000AF   429 _EMI0CN	=	0x00af
                           0000AF   430 G$_XPAGE$0$0 == 0x00af
                           0000AF   431 __XPAGE	=	0x00af
                           0000B0   432 G$P3$0$0 == 0x00b0
                           0000B0   433 _P3	=	0x00b0
                           0000B1   434 G$OSCXCN$0$0 == 0x00b1
                           0000B1   435 _OSCXCN	=	0x00b1
                           0000B2   436 G$OSCICN$0$0 == 0x00b2
                           0000B2   437 _OSCICN	=	0x00b2
                           0000B5   438 G$P74OUT$0$0 == 0x00b5
                           0000B5   439 _P74OUT	=	0x00b5
                           0000B6   440 G$FLSCL$0$0 == 0x00b6
                           0000B6   441 _FLSCL	=	0x00b6
                           0000B7   442 G$FLACL$0$0 == 0x00b7
                           0000B7   443 _FLACL	=	0x00b7
                           0000B8   444 G$IP$0$0 == 0x00b8
                           0000B8   445 _IP	=	0x00b8
                           0000B9   446 G$SADEN0$0$0 == 0x00b9
                           0000B9   447 _SADEN0	=	0x00b9
                           0000BA   448 G$AMX0CF$0$0 == 0x00ba
                           0000BA   449 _AMX0CF	=	0x00ba
                           0000BB   450 G$AMX0SL$0$0 == 0x00bb
                           0000BB   451 _AMX0SL	=	0x00bb
                           0000BC   452 G$ADC0CF$0$0 == 0x00bc
                           0000BC   453 _ADC0CF	=	0x00bc
                           0000BD   454 G$P1MDIN$0$0 == 0x00bd
                           0000BD   455 _P1MDIN	=	0x00bd
                           0000BE   456 G$ADC0L$0$0 == 0x00be
                           0000BE   457 _ADC0L	=	0x00be
                           0000BF   458 G$ADC0H$0$0 == 0x00bf
                           0000BF   459 _ADC0H	=	0x00bf
                           0000C0   460 G$SMB0CN$0$0 == 0x00c0
                           0000C0   461 _SMB0CN	=	0x00c0
                           0000C1   462 G$SMB0STA$0$0 == 0x00c1
                           0000C1   463 _SMB0STA	=	0x00c1
                           0000C2   464 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   465 _SMB0DAT	=	0x00c2
                           0000C3   466 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   467 _SMB0ADR	=	0x00c3
                           0000C4   468 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   469 _ADC0GTL	=	0x00c4
                           0000C5   470 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   471 _ADC0GTH	=	0x00c5
                           0000C6   472 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   473 _ADC0LTL	=	0x00c6
                           0000C7   474 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   475 _ADC0LTH	=	0x00c7
                           0000C8   476 G$T2CON$0$0 == 0x00c8
                           0000C8   477 _T2CON	=	0x00c8
                           0000C9   478 G$T4CON$0$0 == 0x00c9
                           0000C9   479 _T4CON	=	0x00c9
                           0000CA   480 G$RCAP2L$0$0 == 0x00ca
                           0000CA   481 _RCAP2L	=	0x00ca
                           0000CB   482 G$RCAP2H$0$0 == 0x00cb
                           0000CB   483 _RCAP2H	=	0x00cb
                           0000CC   484 G$TL2$0$0 == 0x00cc
                           0000CC   485 _TL2	=	0x00cc
                           0000CD   486 G$TH2$0$0 == 0x00cd
                           0000CD   487 _TH2	=	0x00cd
                           0000CF   488 G$SMB0CR$0$0 == 0x00cf
                           0000CF   489 _SMB0CR	=	0x00cf
                           0000D0   490 G$PSW$0$0 == 0x00d0
                           0000D0   491 _PSW	=	0x00d0
                           0000D1   492 G$REF0CN$0$0 == 0x00d1
                           0000D1   493 _REF0CN	=	0x00d1
                           0000D2   494 G$DAC0L$0$0 == 0x00d2
                           0000D2   495 _DAC0L	=	0x00d2
                           0000D3   496 G$DAC0H$0$0 == 0x00d3
                           0000D3   497 _DAC0H	=	0x00d3
                           0000D4   498 G$DAC0CN$0$0 == 0x00d4
                           0000D4   499 _DAC0CN	=	0x00d4
                           0000D5   500 G$DAC1L$0$0 == 0x00d5
                           0000D5   501 _DAC1L	=	0x00d5
                           0000D6   502 G$DAC1H$0$0 == 0x00d6
                           0000D6   503 _DAC1H	=	0x00d6
                           0000D7   504 G$DAC1CN$0$0 == 0x00d7
                           0000D7   505 _DAC1CN	=	0x00d7
                           0000D8   506 G$PCA0CN$0$0 == 0x00d8
                           0000D8   507 _PCA0CN	=	0x00d8
                           0000D9   508 G$PCA0MD$0$0 == 0x00d9
                           0000D9   509 _PCA0MD	=	0x00d9
                           0000DA   510 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   511 _PCA0CPM0	=	0x00da
                           0000DB   512 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   513 _PCA0CPM1	=	0x00db
                           0000DC   514 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   515 _PCA0CPM2	=	0x00dc
                           0000DD   516 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   517 _PCA0CPM3	=	0x00dd
                           0000DE   518 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   519 _PCA0CPM4	=	0x00de
                           0000E0   520 G$ACC$0$0 == 0x00e0
                           0000E0   521 _ACC	=	0x00e0
                           0000E1   522 G$XBR0$0$0 == 0x00e1
                           0000E1   523 _XBR0	=	0x00e1
                           0000E2   524 G$XBR1$0$0 == 0x00e2
                           0000E2   525 _XBR1	=	0x00e2
                           0000E3   526 G$XBR2$0$0 == 0x00e3
                           0000E3   527 _XBR2	=	0x00e3
                           0000E4   528 G$RCAP4L$0$0 == 0x00e4
                           0000E4   529 _RCAP4L	=	0x00e4
                           0000E5   530 G$RCAP4H$0$0 == 0x00e5
                           0000E5   531 _RCAP4H	=	0x00e5
                           0000E6   532 G$EIE1$0$0 == 0x00e6
                           0000E6   533 _EIE1	=	0x00e6
                           0000E7   534 G$EIE2$0$0 == 0x00e7
                           0000E7   535 _EIE2	=	0x00e7
                           0000E8   536 G$ADC0CN$0$0 == 0x00e8
                           0000E8   537 _ADC0CN	=	0x00e8
                           0000E9   538 G$PCA0L$0$0 == 0x00e9
                           0000E9   539 _PCA0L	=	0x00e9
                           0000EA   540 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   541 _PCA0CPL0	=	0x00ea
                           0000EB   542 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   543 _PCA0CPL1	=	0x00eb
                           0000EC   544 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   545 _PCA0CPL2	=	0x00ec
                           0000ED   546 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   547 _PCA0CPL3	=	0x00ed
                           0000EE   548 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   549 _PCA0CPL4	=	0x00ee
                           0000EF   550 G$RSTSRC$0$0 == 0x00ef
                           0000EF   551 _RSTSRC	=	0x00ef
                           0000F0   552 G$B$0$0 == 0x00f0
                           0000F0   553 _B	=	0x00f0
                           0000F1   554 G$SCON1$0$0 == 0x00f1
                           0000F1   555 _SCON1	=	0x00f1
                           0000F2   556 G$SBUF1$0$0 == 0x00f2
                           0000F2   557 _SBUF1	=	0x00f2
                           0000F3   558 G$SADDR1$0$0 == 0x00f3
                           0000F3   559 _SADDR1	=	0x00f3
                           0000F4   560 G$TL4$0$0 == 0x00f4
                           0000F4   561 _TL4	=	0x00f4
                           0000F5   562 G$TH4$0$0 == 0x00f5
                           0000F5   563 _TH4	=	0x00f5
                           0000F6   564 G$EIP1$0$0 == 0x00f6
                           0000F6   565 _EIP1	=	0x00f6
                           0000F7   566 G$EIP2$0$0 == 0x00f7
                           0000F7   567 _EIP2	=	0x00f7
                           0000F8   568 G$SPI0CN$0$0 == 0x00f8
                           0000F8   569 _SPI0CN	=	0x00f8
                           0000F9   570 G$PCA0H$0$0 == 0x00f9
                           0000F9   571 _PCA0H	=	0x00f9
                           0000FA   572 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   573 _PCA0CPH0	=	0x00fa
                           0000FB   574 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   575 _PCA0CPH1	=	0x00fb
                           0000FC   576 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   577 _PCA0CPH2	=	0x00fc
                           0000FD   578 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   579 _PCA0CPH3	=	0x00fd
                           0000FE   580 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   581 _PCA0CPH4	=	0x00fe
                           0000FF   582 G$WDTCN$0$0 == 0x00ff
                           0000FF   583 _WDTCN	=	0x00ff
                           008C8A   584 G$TMR0$0$0 == 0x8c8a
                           008C8A   585 _TMR0	=	0x8c8a
                           008D8B   586 G$TMR1$0$0 == 0x8d8b
                           008D8B   587 _TMR1	=	0x8d8b
                           00CDCC   588 G$TMR2$0$0 == 0xcdcc
                           00CDCC   589 _TMR2	=	0xcdcc
                           00CBCA   590 G$RCAP2$0$0 == 0xcbca
                           00CBCA   591 _RCAP2	=	0xcbca
                           009594   592 G$TMR3$0$0 == 0x9594
                           009594   593 _TMR3	=	0x9594
                           009392   594 G$TMR3RL$0$0 == 0x9392
                           009392   595 _TMR3RL	=	0x9392
                           00F5F4   596 G$TMR4$0$0 == 0xf5f4
                           00F5F4   597 _TMR4	=	0xf5f4
                           00E5E4   598 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   599 _RCAP4	=	0xe5e4
                           00BFBE   600 G$ADC0$0$0 == 0xbfbe
                           00BFBE   601 _ADC0	=	0xbfbe
                           00C5C4   602 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   603 _ADC0GT	=	0xc5c4
                           00C7C6   604 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   605 _ADC0LT	=	0xc7c6
                           00D3D2   606 G$DAC0$0$0 == 0xd3d2
                           00D3D2   607 _DAC0	=	0xd3d2
                           00D6D5   608 G$DAC1$0$0 == 0xd6d5
                           00D6D5   609 _DAC1	=	0xd6d5
                           00F9E9   610 G$PCA0$0$0 == 0xf9e9
                           00F9E9   611 _PCA0	=	0xf9e9
                           00FAEA   612 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   613 _PCA0CP0	=	0xfaea
                           00FBEB   614 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   615 _PCA0CP1	=	0xfbeb
                           00FCEC   616 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   617 _PCA0CP2	=	0xfcec
                           00FDED   618 G$PCA0CP3$0$0 == 0xfded
                           00FDED   619 _PCA0CP3	=	0xfded
                           00FEEE   620 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   621 _PCA0CP4	=	0xfeee
                                    622 ;--------------------------------------------------------
                                    623 ; special function bits
                                    624 ;--------------------------------------------------------
                                    625 	.area RSEG    (ABS,DATA)
      000000                        626 	.org 0x0000
                           000080   627 G$P0_0$0$0 == 0x0080
                           000080   628 _P0_0	=	0x0080
                           000081   629 G$P0_1$0$0 == 0x0081
                           000081   630 _P0_1	=	0x0081
                           000082   631 G$P0_2$0$0 == 0x0082
                           000082   632 _P0_2	=	0x0082
                           000083   633 G$P0_3$0$0 == 0x0083
                           000083   634 _P0_3	=	0x0083
                           000084   635 G$P0_4$0$0 == 0x0084
                           000084   636 _P0_4	=	0x0084
                           000085   637 G$P0_5$0$0 == 0x0085
                           000085   638 _P0_5	=	0x0085
                           000086   639 G$P0_6$0$0 == 0x0086
                           000086   640 _P0_6	=	0x0086
                           000087   641 G$P0_7$0$0 == 0x0087
                           000087   642 _P0_7	=	0x0087
                           000088   643 G$IT0$0$0 == 0x0088
                           000088   644 _IT0	=	0x0088
                           000089   645 G$IE0$0$0 == 0x0089
                           000089   646 _IE0	=	0x0089
                           00008A   647 G$IT1$0$0 == 0x008a
                           00008A   648 _IT1	=	0x008a
                           00008B   649 G$IE1$0$0 == 0x008b
                           00008B   650 _IE1	=	0x008b
                           00008C   651 G$TR0$0$0 == 0x008c
                           00008C   652 _TR0	=	0x008c
                           00008D   653 G$TF0$0$0 == 0x008d
                           00008D   654 _TF0	=	0x008d
                           00008E   655 G$TR1$0$0 == 0x008e
                           00008E   656 _TR1	=	0x008e
                           00008F   657 G$TF1$0$0 == 0x008f
                           00008F   658 _TF1	=	0x008f
                           000090   659 G$P1_0$0$0 == 0x0090
                           000090   660 _P1_0	=	0x0090
                           000091   661 G$P1_1$0$0 == 0x0091
                           000091   662 _P1_1	=	0x0091
                           000092   663 G$P1_2$0$0 == 0x0092
                           000092   664 _P1_2	=	0x0092
                           000093   665 G$P1_3$0$0 == 0x0093
                           000093   666 _P1_3	=	0x0093
                           000094   667 G$P1_4$0$0 == 0x0094
                           000094   668 _P1_4	=	0x0094
                           000095   669 G$P1_5$0$0 == 0x0095
                           000095   670 _P1_5	=	0x0095
                           000096   671 G$P1_6$0$0 == 0x0096
                           000096   672 _P1_6	=	0x0096
                           000097   673 G$P1_7$0$0 == 0x0097
                           000097   674 _P1_7	=	0x0097
                           000098   675 G$RI$0$0 == 0x0098
                           000098   676 _RI	=	0x0098
                           000098   677 G$RI0$0$0 == 0x0098
                           000098   678 _RI0	=	0x0098
                           000099   679 G$TI$0$0 == 0x0099
                           000099   680 _TI	=	0x0099
                           000099   681 G$TI0$0$0 == 0x0099
                           000099   682 _TI0	=	0x0099
                           00009A   683 G$RB8$0$0 == 0x009a
                           00009A   684 _RB8	=	0x009a
                           00009A   685 G$RB80$0$0 == 0x009a
                           00009A   686 _RB80	=	0x009a
                           00009B   687 G$TB8$0$0 == 0x009b
                           00009B   688 _TB8	=	0x009b
                           00009B   689 G$TB80$0$0 == 0x009b
                           00009B   690 _TB80	=	0x009b
                           00009C   691 G$REN$0$0 == 0x009c
                           00009C   692 _REN	=	0x009c
                           00009C   693 G$REN0$0$0 == 0x009c
                           00009C   694 _REN0	=	0x009c
                           00009D   695 G$SM2$0$0 == 0x009d
                           00009D   696 _SM2	=	0x009d
                           00009D   697 G$SM20$0$0 == 0x009d
                           00009D   698 _SM20	=	0x009d
                           00009D   699 G$MCE0$0$0 == 0x009d
                           00009D   700 _MCE0	=	0x009d
                           00009E   701 G$SM1$0$0 == 0x009e
                           00009E   702 _SM1	=	0x009e
                           00009E   703 G$SM10$0$0 == 0x009e
                           00009E   704 _SM10	=	0x009e
                           00009F   705 G$SM0$0$0 == 0x009f
                           00009F   706 _SM0	=	0x009f
                           00009F   707 G$SM00$0$0 == 0x009f
                           00009F   708 _SM00	=	0x009f
                           00009F   709 G$S0MODE$0$0 == 0x009f
                           00009F   710 _S0MODE	=	0x009f
                           0000A0   711 G$P2_0$0$0 == 0x00a0
                           0000A0   712 _P2_0	=	0x00a0
                           0000A1   713 G$P2_1$0$0 == 0x00a1
                           0000A1   714 _P2_1	=	0x00a1
                           0000A2   715 G$P2_2$0$0 == 0x00a2
                           0000A2   716 _P2_2	=	0x00a2
                           0000A3   717 G$P2_3$0$0 == 0x00a3
                           0000A3   718 _P2_3	=	0x00a3
                           0000A4   719 G$P2_4$0$0 == 0x00a4
                           0000A4   720 _P2_4	=	0x00a4
                           0000A5   721 G$P2_5$0$0 == 0x00a5
                           0000A5   722 _P2_5	=	0x00a5
                           0000A6   723 G$P2_6$0$0 == 0x00a6
                           0000A6   724 _P2_6	=	0x00a6
                           0000A7   725 G$P2_7$0$0 == 0x00a7
                           0000A7   726 _P2_7	=	0x00a7
                           0000A8   727 G$EX0$0$0 == 0x00a8
                           0000A8   728 _EX0	=	0x00a8
                           0000A9   729 G$ET0$0$0 == 0x00a9
                           0000A9   730 _ET0	=	0x00a9
                           0000AA   731 G$EX1$0$0 == 0x00aa
                           0000AA   732 _EX1	=	0x00aa
                           0000AB   733 G$ET1$0$0 == 0x00ab
                           0000AB   734 _ET1	=	0x00ab
                           0000AC   735 G$ES0$0$0 == 0x00ac
                           0000AC   736 _ES0	=	0x00ac
                           0000AC   737 G$ES$0$0 == 0x00ac
                           0000AC   738 _ES	=	0x00ac
                           0000AD   739 G$ET2$0$0 == 0x00ad
                           0000AD   740 _ET2	=	0x00ad
                           0000AF   741 G$EA$0$0 == 0x00af
                           0000AF   742 _EA	=	0x00af
                           0000B0   743 G$P3_0$0$0 == 0x00b0
                           0000B0   744 _P3_0	=	0x00b0
                           0000B1   745 G$P3_1$0$0 == 0x00b1
                           0000B1   746 _P3_1	=	0x00b1
                           0000B2   747 G$P3_2$0$0 == 0x00b2
                           0000B2   748 _P3_2	=	0x00b2
                           0000B3   749 G$P3_3$0$0 == 0x00b3
                           0000B3   750 _P3_3	=	0x00b3
                           0000B4   751 G$P3_4$0$0 == 0x00b4
                           0000B4   752 _P3_4	=	0x00b4
                           0000B5   753 G$P3_5$0$0 == 0x00b5
                           0000B5   754 _P3_5	=	0x00b5
                           0000B6   755 G$P3_6$0$0 == 0x00b6
                           0000B6   756 _P3_6	=	0x00b6
                           0000B7   757 G$P3_7$0$0 == 0x00b7
                           0000B7   758 _P3_7	=	0x00b7
                           0000B8   759 G$PX0$0$0 == 0x00b8
                           0000B8   760 _PX0	=	0x00b8
                           0000B9   761 G$PT0$0$0 == 0x00b9
                           0000B9   762 _PT0	=	0x00b9
                           0000BA   763 G$PX1$0$0 == 0x00ba
                           0000BA   764 _PX1	=	0x00ba
                           0000BB   765 G$PT1$0$0 == 0x00bb
                           0000BB   766 _PT1	=	0x00bb
                           0000BC   767 G$PS0$0$0 == 0x00bc
                           0000BC   768 _PS0	=	0x00bc
                           0000BC   769 G$PS$0$0 == 0x00bc
                           0000BC   770 _PS	=	0x00bc
                           0000BD   771 G$PT2$0$0 == 0x00bd
                           0000BD   772 _PT2	=	0x00bd
                           0000C0   773 G$SMBTOE$0$0 == 0x00c0
                           0000C0   774 _SMBTOE	=	0x00c0
                           0000C1   775 G$SMBFTE$0$0 == 0x00c1
                           0000C1   776 _SMBFTE	=	0x00c1
                           0000C2   777 G$AA$0$0 == 0x00c2
                           0000C2   778 _AA	=	0x00c2
                           0000C3   779 G$SI$0$0 == 0x00c3
                           0000C3   780 _SI	=	0x00c3
                           0000C4   781 G$STO$0$0 == 0x00c4
                           0000C4   782 _STO	=	0x00c4
                           0000C5   783 G$STA$0$0 == 0x00c5
                           0000C5   784 _STA	=	0x00c5
                           0000C6   785 G$ENSMB$0$0 == 0x00c6
                           0000C6   786 _ENSMB	=	0x00c6
                           0000C7   787 G$BUSY$0$0 == 0x00c7
                           0000C7   788 _BUSY	=	0x00c7
                           0000C8   789 G$CPRL2$0$0 == 0x00c8
                           0000C8   790 _CPRL2	=	0x00c8
                           0000C9   791 G$CT2$0$0 == 0x00c9
                           0000C9   792 _CT2	=	0x00c9
                           0000CA   793 G$TR2$0$0 == 0x00ca
                           0000CA   794 _TR2	=	0x00ca
                           0000CB   795 G$EXEN2$0$0 == 0x00cb
                           0000CB   796 _EXEN2	=	0x00cb
                           0000CC   797 G$TCLK$0$0 == 0x00cc
                           0000CC   798 _TCLK	=	0x00cc
                           0000CD   799 G$RCLK$0$0 == 0x00cd
                           0000CD   800 _RCLK	=	0x00cd
                           0000CE   801 G$EXF2$0$0 == 0x00ce
                           0000CE   802 _EXF2	=	0x00ce
                           0000CF   803 G$TF2$0$0 == 0x00cf
                           0000CF   804 _TF2	=	0x00cf
                           0000D0   805 G$P$0$0 == 0x00d0
                           0000D0   806 _P	=	0x00d0
                           0000D1   807 G$F1$0$0 == 0x00d1
                           0000D1   808 _F1	=	0x00d1
                           0000D2   809 G$OV$0$0 == 0x00d2
                           0000D2   810 _OV	=	0x00d2
                           0000D3   811 G$RS0$0$0 == 0x00d3
                           0000D3   812 _RS0	=	0x00d3
                           0000D4   813 G$RS1$0$0 == 0x00d4
                           0000D4   814 _RS1	=	0x00d4
                           0000D5   815 G$F0$0$0 == 0x00d5
                           0000D5   816 _F0	=	0x00d5
                           0000D6   817 G$AC$0$0 == 0x00d6
                           0000D6   818 _AC	=	0x00d6
                           0000D7   819 G$CY$0$0 == 0x00d7
                           0000D7   820 _CY	=	0x00d7
                           0000D8   821 G$CCF0$0$0 == 0x00d8
                           0000D8   822 _CCF0	=	0x00d8
                           0000D9   823 G$CCF1$0$0 == 0x00d9
                           0000D9   824 _CCF1	=	0x00d9
                           0000DA   825 G$CCF2$0$0 == 0x00da
                           0000DA   826 _CCF2	=	0x00da
                           0000DB   827 G$CCF3$0$0 == 0x00db
                           0000DB   828 _CCF3	=	0x00db
                           0000DC   829 G$CCF4$0$0 == 0x00dc
                           0000DC   830 _CCF4	=	0x00dc
                           0000DE   831 G$CR$0$0 == 0x00de
                           0000DE   832 _CR	=	0x00de
                           0000DF   833 G$CF$0$0 == 0x00df
                           0000DF   834 _CF	=	0x00df
                           0000E8   835 G$ADLJST$0$0 == 0x00e8
                           0000E8   836 _ADLJST	=	0x00e8
                           0000E8   837 G$AD0LJST$0$0 == 0x00e8
                           0000E8   838 _AD0LJST	=	0x00e8
                           0000E9   839 G$ADWINT$0$0 == 0x00e9
                           0000E9   840 _ADWINT	=	0x00e9
                           0000E9   841 G$AD0WINT$0$0 == 0x00e9
                           0000E9   842 _AD0WINT	=	0x00e9
                           0000EA   843 G$ADSTM0$0$0 == 0x00ea
                           0000EA   844 _ADSTM0	=	0x00ea
                           0000EA   845 G$AD0CM0$0$0 == 0x00ea
                           0000EA   846 _AD0CM0	=	0x00ea
                           0000EB   847 G$ADSTM1$0$0 == 0x00eb
                           0000EB   848 _ADSTM1	=	0x00eb
                           0000EB   849 G$AD0CM1$0$0 == 0x00eb
                           0000EB   850 _AD0CM1	=	0x00eb
                           0000EC   851 G$ADBUSY$0$0 == 0x00ec
                           0000EC   852 _ADBUSY	=	0x00ec
                           0000EC   853 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   854 _AD0BUSY	=	0x00ec
                           0000ED   855 G$ADCINT$0$0 == 0x00ed
                           0000ED   856 _ADCINT	=	0x00ed
                           0000ED   857 G$AD0INT$0$0 == 0x00ed
                           0000ED   858 _AD0INT	=	0x00ed
                           0000EE   859 G$ADCTM$0$0 == 0x00ee
                           0000EE   860 _ADCTM	=	0x00ee
                           0000EE   861 G$AD0TM$0$0 == 0x00ee
                           0000EE   862 _AD0TM	=	0x00ee
                           0000EF   863 G$ADCEN$0$0 == 0x00ef
                           0000EF   864 _ADCEN	=	0x00ef
                           0000EF   865 G$AD0EN$0$0 == 0x00ef
                           0000EF   866 _AD0EN	=	0x00ef
                           0000F8   867 G$SPIEN$0$0 == 0x00f8
                           0000F8   868 _SPIEN	=	0x00f8
                           0000F9   869 G$MSTEN$0$0 == 0x00f9
                           0000F9   870 _MSTEN	=	0x00f9
                           0000FA   871 G$SLVSEL$0$0 == 0x00fa
                           0000FA   872 _SLVSEL	=	0x00fa
                           0000FB   873 G$TXBSY$0$0 == 0x00fb
                           0000FB   874 _TXBSY	=	0x00fb
                           0000FC   875 G$RXOVRN$0$0 == 0x00fc
                           0000FC   876 _RXOVRN	=	0x00fc
                           0000FD   877 G$MODF$0$0 == 0x00fd
                           0000FD   878 _MODF	=	0x00fd
                           0000FE   879 G$WCOL$0$0 == 0x00fe
                           0000FE   880 _WCOL	=	0x00fe
                           0000FF   881 G$SPIF$0$0 == 0x00ff
                           0000FF   882 _SPIF	=	0x00ff
                           0000B5   883 G$LED1$0$0 == 0x00b5
                           0000B5   884 _LED1	=	0x00b5
                           0000B6   885 G$LED0$0$0 == 0x00b6
                           0000B6   886 _LED0	=	0x00b6
                           0000B3   887 G$BILED0$0$0 == 0x00b3
                           0000B3   888 _BILED0	=	0x00b3
                           0000B4   889 G$BILED1$0$0 == 0x00b4
                           0000B4   890 _BILED1	=	0x00b4
                           0000B7   891 G$Buzzer$0$0 == 0x00b7
                           0000B7   892 _Buzzer	=	0x00b7
                           0000B0   893 G$PB0$0$0 == 0x00b0
                           0000B0   894 _PB0	=	0x00b0
                           0000B1   895 G$PB1$0$0 == 0x00b1
                           0000B1   896 _PB1	=	0x00b1
                           0000A0   897 G$SS$0$0 == 0x00a0
                           0000A0   898 _SS	=	0x00a0
                                    899 ;--------------------------------------------------------
                                    900 ; overlayable register banks
                                    901 ;--------------------------------------------------------
                                    902 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        903 	.ds 8
                                    904 ;--------------------------------------------------------
                                    905 ; internal ram data
                                    906 ;--------------------------------------------------------
                                    907 	.area DSEG    (DATA)
                           000000   908 G$Counts$0$0==.
      000000                        909 _Counts::
      000000                        910 	.ds 2
                           000002   911 G$Seconds$0$0==.
      000002                        912 _Seconds::
      000002                        913 	.ds 1
                           000003   914 G$previousRNG$0$0==.
      000003                        915 _previousRNG::
      000003                        916 	.ds 1
                           000004   917 G$RNG$0$0==.
      000004                        918 _RNG::
      000004                        919 	.ds 1
                           000005   920 G$turns$0$0==.
      000005                        921 _turns::
      000005                        922 	.ds 1
                           000006   923 G$correctAnswerCount$0$0==.
      000006                        924 _correctAnswerCount::
      000006                        925 	.ds 1
                           000007   926 G$flag$0$0==.
      000007                        927 _flag::
      000007                        928 	.ds 1
                           000008   929 G$programflag$0$0==.
      000008                        930 _programflag::
      000008                        931 	.ds 1
                           000009   932 G$countvariable$0$0==.
      000009                        933 _countvariable::
      000009                        934 	.ds 1
                           00000A   935 G$secondvariable$0$0==.
      00000A                        936 _secondvariable::
      00000A                        937 	.ds 1
                                    938 ;--------------------------------------------------------
                                    939 ; overlayable items in internal ram 
                                    940 ;--------------------------------------------------------
                                    941 	.area	OSEG    (OVR,DATA)
                                    942 	.area	OSEG    (OVR,DATA)
                                    943 ;--------------------------------------------------------
                                    944 ; Stack segment in internal ram 
                                    945 ;--------------------------------------------------------
                                    946 	.area	SSEG
      000000                        947 __start__stack:
      000000                        948 	.ds	1
                                    949 
                                    950 ;--------------------------------------------------------
                                    951 ; indirectly addressable internal ram data
                                    952 ;--------------------------------------------------------
                                    953 	.area ISEG    (DATA)
                                    954 ;--------------------------------------------------------
                                    955 ; absolute internal ram data
                                    956 ;--------------------------------------------------------
                                    957 	.area IABS    (ABS,DATA)
                                    958 	.area IABS    (ABS,DATA)
                                    959 ;--------------------------------------------------------
                                    960 ; bit data
                                    961 ;--------------------------------------------------------
                                    962 	.area BSEG    (BIT)
                                    963 ;--------------------------------------------------------
                                    964 ; paged external ram data
                                    965 ;--------------------------------------------------------
                                    966 	.area PSEG    (PAG,XDATA)
                                    967 ;--------------------------------------------------------
                                    968 ; external ram data
                                    969 ;--------------------------------------------------------
                                    970 	.area XSEG    (XDATA)
                                    971 ;--------------------------------------------------------
                                    972 ; absolute external ram data
                                    973 ;--------------------------------------------------------
                                    974 	.area XABS    (ABS,XDATA)
                                    975 ;--------------------------------------------------------
                                    976 ; external initialized ram data
                                    977 ;--------------------------------------------------------
                                    978 	.area XISEG   (XDATA)
                                    979 	.area HOME    (CODE)
                                    980 	.area GSINIT0 (CODE)
                                    981 	.area GSINIT1 (CODE)
                                    982 	.area GSINIT2 (CODE)
                                    983 	.area GSINIT3 (CODE)
                                    984 	.area GSINIT4 (CODE)
                                    985 	.area GSINIT5 (CODE)
                                    986 	.area GSINIT  (CODE)
                                    987 	.area GSFINAL (CODE)
                                    988 	.area CSEG    (CODE)
                                    989 ;--------------------------------------------------------
                                    990 ; interrupt vector 
                                    991 ;--------------------------------------------------------
                                    992 	.area HOME    (CODE)
      000000                        993 __interrupt_vect:
      000000 02r00r00         [24]  994 	ljmp	__sdcc_gsinit_startup
      000003 32               [24]  995 	reti
      000004                        996 	.ds	7
      00000B 02r03rB5         [24]  997 	ljmp	_Timer0_ISR
                                    998 ;--------------------------------------------------------
                                    999 ; global & static initialisations
                                   1000 ;--------------------------------------------------------
                                   1001 	.area HOME    (CODE)
                                   1002 	.area GSINIT  (CODE)
                                   1003 	.area GSFINAL (CODE)
                                   1004 	.area GSINIT  (CODE)
                                   1005 	.globl __sdcc_gsinit_startup
                                   1006 	.globl __sdcc_program_startup
                                   1007 	.globl __start__stack
                                   1008 	.globl __mcs51_genXINIT
                                   1009 	.globl __mcs51_genXRAMCLEAR
                                   1010 	.globl __mcs51_genRAMCLEAR
                           000000  1011 	C$lab1_2_COOL.c$45$1$91 ==.
                                   1012 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:45: unsigned int Counts = 0;
      000000 E4               [12] 1013 	clr	a
      000001 F5*00            [12] 1014 	mov	_Counts,a
      000003 F5*01            [12] 1015 	mov	(_Counts + 1),a
                           000005  1016 	C$lab1_2_COOL.c$46$1$91 ==.
                                   1017 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:46: unsigned char Seconds = 0;
                                   1018 ;	1-genFromRTrack replaced	mov	_Seconds,#0x00
      000005 F5*02            [12] 1019 	mov	_Seconds,a
                           000007  1020 	C$lab1_2_COOL.c$47$1$91 ==.
                                   1021 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:47: unsigned char previousRNG = 7; 
      000007 75*03 07         [24] 1022 	mov	_previousRNG,#0x07
                           00000A  1023 	C$lab1_2_COOL.c$48$1$91 ==.
                                   1024 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:48: unsigned char RNG = 0;
                                   1025 ;	1-genFromRTrack replaced	mov	_RNG,#0x00
      00000A F5*04            [12] 1026 	mov	_RNG,a
                           00000C  1027 	C$lab1_2_COOL.c$49$1$91 ==.
                                   1028 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:49: unsigned char turns = 1;
      00000C 75*05 01         [24] 1029 	mov	_turns,#0x01
                           00000F  1030 	C$lab1_2_COOL.c$50$1$91 ==.
                                   1031 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:50: unsigned char correctAnswerCount = 0;
                                   1032 ;	1-genFromRTrack replaced	mov	_correctAnswerCount,#0x00
      00000F F5*06            [12] 1033 	mov	_correctAnswerCount,a
                           000011  1034 	C$lab1_2_COOL.c$51$1$91 ==.
                                   1035 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:51: unsigned char flag = 0;
                                   1036 ;	1-genFromRTrack replaced	mov	_flag,#0x00
      000011 F5*07            [12] 1037 	mov	_flag,a
                           000013  1038 	C$lab1_2_COOL.c$52$1$91 ==.
                                   1039 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:52: unsigned char programflag = 0; //ends the program once it's completed
                                   1040 ;	1-genFromRTrack replaced	mov	_programflag,#0x00
      000013 F5*08            [12] 1041 	mov	_programflag,a
                           000015  1042 	C$lab1_2_COOL.c$53$1$91 ==.
                                   1043 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:53: unsigned char countvariable = 50; // Adjusts the delay on repeated button inputs
      000015 75*09 32         [24] 1044 	mov	_countvariable,#0x32
                           000018  1045 	C$lab1_2_COOL.c$54$1$91 ==.
                                   1046 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:54: unsigned char secondvariable = 1; // Adjusts the seconds allowed per turn
      000018 75*0A 01         [24] 1047 	mov	_secondvariable,#0x01
                                   1048 	.area GSFINAL (CODE)
      000000 02r00r0E         [24] 1049 	ljmp	__sdcc_program_startup
                                   1050 ;--------------------------------------------------------
                                   1051 ; Home
                                   1052 ;--------------------------------------------------------
                                   1053 	.area HOME    (CODE)
                                   1054 	.area HOME    (CODE)
      00000E                       1055 __sdcc_program_startup:
      00000E 02r00r5C         [24] 1056 	ljmp	_main
                                   1057 ;	return from main will return to caller
                                   1058 ;--------------------------------------------------------
                                   1059 ; code
                                   1060 ;--------------------------------------------------------
                                   1061 	.area CSEG    (CODE)
                                   1062 ;------------------------------------------------------------
                                   1063 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1064 ;------------------------------------------------------------
                                   1065 ;i                         Allocated to registers 
                                   1066 ;------------------------------------------------------------
                           000000  1067 	G$SYSCLK_Init$0$0 ==.
                           000000  1068 	C$c8051_SDCC.h$42$0$0 ==.
                                   1069 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1070 ;	-----------------------------------------
                                   1071 ;	 function SYSCLK_Init
                                   1072 ;	-----------------------------------------
      000000                       1073 _SYSCLK_Init:
                           000007  1074 	ar7 = 0x07
                           000006  1075 	ar6 = 0x06
                           000005  1076 	ar5 = 0x05
                           000004  1077 	ar4 = 0x04
                           000003  1078 	ar3 = 0x03
                           000002  1079 	ar2 = 0x02
                           000001  1080 	ar1 = 0x01
                           000000  1081 	ar0 = 0x00
                           000000  1082 	C$c8051_SDCC.h$46$1$2 ==.
                                   1083 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1084 	mov	_OSCXCN,#0x67
                           000003  1085 	C$c8051_SDCC.h$49$1$2 ==.
                                   1086 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1087 	mov	r6,#0x00
      000005 7F 01            [12] 1088 	mov	r7,#0x01
      000007                       1089 00107$:
      000007 1E               [12] 1090 	dec	r6
      000008 BE FF 01         [24] 1091 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1092 	dec	r7
      00000C                       1093 00121$:
      00000C EE               [12] 1094 	mov	a,r6
      00000D 4F               [12] 1095 	orl	a,r7
      00000E 70 F7            [24] 1096 	jnz	00107$
                           000010  1097 	C$c8051_SDCC.h$51$1$2 ==.
                                   1098 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1099 00102$:
      000010 E5 B1            [12] 1100 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1101 	jnb	acc.7,00102$
                           000015  1102 	C$c8051_SDCC.h$53$1$2 ==.
                                   1103 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1104 	mov	_OSCICN,#0x88
                           000018  1105 	C$c8051_SDCC.h$56$1$2 ==.
                           000018  1106 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1107 	ret
                                   1108 ;------------------------------------------------------------
                                   1109 ;Allocation info for local variables in function 'UART0_Init'
                                   1110 ;------------------------------------------------------------
                           000019  1111 	G$UART0_Init$0$0 ==.
                           000019  1112 	C$c8051_SDCC.h$64$1$2 ==.
                                   1113 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1114 ;	-----------------------------------------
                                   1115 ;	 function UART0_Init
                                   1116 ;	-----------------------------------------
      000019                       1117 _UART0_Init:
                           000019  1118 	C$c8051_SDCC.h$66$1$4 ==.
                                   1119 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1120 	mov	_SCON0,#0x50
                           00001C  1121 	C$c8051_SDCC.h$67$1$4 ==.
                                   1122 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1123 	mov	_TMOD,#0x20
                           00001F  1124 	C$c8051_SDCC.h$68$1$4 ==.
                                   1125 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1126 	mov	_TH1,#0xDC
                           000022  1127 	C$c8051_SDCC.h$69$1$4 ==.
                                   1128 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1129 	setb	_TR1
                           000024  1130 	C$c8051_SDCC.h$70$1$4 ==.
                                   1131 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1132 	orl	_CKCON,#0x10
                           000027  1133 	C$c8051_SDCC.h$71$1$4 ==.
                                   1134 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1135 	orl	_PCON,#0x80
                           00002A  1136 	C$c8051_SDCC.h$73$1$4 ==.
                                   1137 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1138 	setb	_TI0
                           00002C  1139 	C$c8051_SDCC.h$74$1$4 ==.
                                   1140 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1141 	orl	_P0MDOUT,#0x01
                           00002F  1142 	C$c8051_SDCC.h$75$1$4 ==.
                           00002F  1143 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1144 	ret
                                   1145 ;------------------------------------------------------------
                                   1146 ;Allocation info for local variables in function 'Sys_Init'
                                   1147 ;------------------------------------------------------------
                           000030  1148 	G$Sys_Init$0$0 ==.
                           000030  1149 	C$c8051_SDCC.h$83$1$4 ==.
                                   1150 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1151 ;	-----------------------------------------
                                   1152 ;	 function Sys_Init
                                   1153 ;	-----------------------------------------
      000030                       1154 _Sys_Init:
                           000030  1155 	C$c8051_SDCC.h$85$1$6 ==.
                                   1156 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1157 	mov	_WDTCN,#0xDE
                           000033  1158 	C$c8051_SDCC.h$86$1$6 ==.
                                   1159 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1160 	mov	_WDTCN,#0xAD
                           000036  1161 	C$c8051_SDCC.h$88$1$6 ==.
                                   1162 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1163 	lcall	_SYSCLK_Init
                           000039  1164 	C$c8051_SDCC.h$89$1$6 ==.
                                   1165 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1166 	lcall	_UART0_Init
                           00003C  1167 	C$c8051_SDCC.h$91$1$6 ==.
                                   1168 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1169 	orl	_XBR0,#0x04
                           00003F  1170 	C$c8051_SDCC.h$92$1$6 ==.
                                   1171 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1172 	orl	_XBR2,#0x40
                           000042  1173 	C$c8051_SDCC.h$93$1$6 ==.
                           000042  1174 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1175 	ret
                                   1176 ;------------------------------------------------------------
                                   1177 ;Allocation info for local variables in function 'putchar'
                                   1178 ;------------------------------------------------------------
                                   1179 ;c                         Allocated to registers r7 
                                   1180 ;------------------------------------------------------------
                           000043  1181 	G$putchar$0$0 ==.
                           000043  1182 	C$c8051_SDCC.h$98$1$6 ==.
                                   1183 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1184 ;	-----------------------------------------
                                   1185 ;	 function putchar
                                   1186 ;	-----------------------------------------
      000043                       1187 _putchar:
      000043 AF 82            [24] 1188 	mov	r7,dpl
                           000045  1189 	C$c8051_SDCC.h$100$1$8 ==.
                                   1190 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1191 00101$:
                           000045  1192 	C$c8051_SDCC.h$101$1$8 ==.
                                   1193 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1194 	jbc	_TI0,00112$
      000048 80 FB            [24] 1195 	sjmp	00101$
      00004A                       1196 00112$:
                           00004A  1197 	C$c8051_SDCC.h$102$1$8 ==.
                                   1198 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1199 	mov	_SBUF0,r7
                           00004C  1200 	C$c8051_SDCC.h$103$1$8 ==.
                           00004C  1201 	XG$putchar$0$0 ==.
      00004C 22               [24] 1202 	ret
                                   1203 ;------------------------------------------------------------
                                   1204 ;Allocation info for local variables in function 'getchar'
                                   1205 ;------------------------------------------------------------
                                   1206 ;c                         Allocated to registers 
                                   1207 ;------------------------------------------------------------
                           00004D  1208 	G$getchar$0$0 ==.
                           00004D  1209 	C$c8051_SDCC.h$108$1$8 ==.
                                   1210 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1211 ;	-----------------------------------------
                                   1212 ;	 function getchar
                                   1213 ;	-----------------------------------------
      00004D                       1214 _getchar:
                           00004D  1215 	C$c8051_SDCC.h$111$1$10 ==.
                                   1216 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1217 00101$:
                           00004D  1218 	C$c8051_SDCC.h$112$1$10 ==.
                                   1219 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1220 	jbc	_RI0,00112$
      000050 80 FB            [24] 1221 	sjmp	00101$
      000052                       1222 00112$:
                           000052  1223 	C$c8051_SDCC.h$113$1$10 ==.
                                   1224 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1225 	mov	dpl,_SBUF0
                           000055  1226 	C$c8051_SDCC.h$114$1$10 ==.
                                   1227 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1228 	lcall	_putchar
                           000058  1229 	C$c8051_SDCC.h$115$1$10 ==.
                                   1230 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1231 	mov	dpl,_SBUF0
                           00005B  1232 	C$c8051_SDCC.h$116$1$10 ==.
                           00005B  1233 	XG$getchar$0$0 ==.
      00005B 22               [24] 1234 	ret
                                   1235 ;------------------------------------------------------------
                                   1236 ;Allocation info for local variables in function 'main'
                                   1237 ;------------------------------------------------------------
                           00005C  1238 	G$main$0$0 ==.
                           00005C  1239 	C$lab1_2_COOL.c$57$1$10 ==.
                                   1240 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:57: void main(void)
                                   1241 ;	-----------------------------------------
                                   1242 ;	 function main
                                   1243 ;	-----------------------------------------
      00005C                       1244 _main:
                           00005C  1245 	C$lab1_2_COOL.c$59$1$49 ==.
                                   1246 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:59: Sys_Init();      // System Initialization
      00005C 12r00r30         [24] 1247 	lcall	_Sys_Init
                           00005F  1248 	C$lab1_2_COOL.c$60$1$49 ==.
                                   1249 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:60: Port_Init();     // Initialize ports 2 and 3 
      00005F 12r03r86         [24] 1250 	lcall	_Port_Init
                           000062  1251 	C$lab1_2_COOL.c$61$1$49 ==.
                                   1252 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:61: Interrupt_Init();
      000062 12r03r9E         [24] 1253 	lcall	_Interrupt_Init
                           000065  1254 	C$lab1_2_COOL.c$62$1$49 ==.
                                   1255 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:62: Timer_Init();    // Initialize Timer 0 
      000065 12r03rA3         [24] 1256 	lcall	_Timer_Init
                           000068  1257 	C$lab1_2_COOL.c$64$1$49 ==.
                                   1258 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:64: putchar(' ');    // the quote fonts may not copy correctly into SiLabs IDE
      000068 75 82 20         [24] 1259 	mov	dpl,#0x20
      00006B 12r00r43         [24] 1260 	lcall	_putchar
                           00006E  1261 	C$lab1_2_COOL.c$65$1$49 ==.
                                   1262 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:65: printf("Start\r\n");
      00006E 74r00            [12] 1263 	mov	a,#___str_0
      000070 C0 E0            [24] 1264 	push	acc
      000072 74s00            [12] 1265 	mov	a,#(___str_0 >> 8)
      000074 C0 E0            [24] 1266 	push	acc
      000076 74 80            [12] 1267 	mov	a,#0x80
      000078 C0 E0            [24] 1268 	push	acc
      00007A 12r00r00         [24] 1269 	lcall	_printf
      00007D 15 81            [12] 1270 	dec	sp
      00007F 15 81            [12] 1271 	dec	sp
      000081 15 81            [12] 1272 	dec	sp
                           000083  1273 	C$lab1_2_COOL.c$67$1$49 ==.
                                   1274 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:67: while (1) /* the following loop prints the number of overflows that occur
      000083                       1275 00192$:
                           000083  1276 	C$lab1_2_COOL.c$72$2$50 ==.
                                   1277 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:72: if (programflag == 0)
      000083 E5*08            [12] 1278 	mov	a,_programflag
      000085 60 03            [24] 1279 	jz	00346$
      000087 02r03r80         [24] 1280 	ljmp	00190$
      00008A                       1281 00346$:
                           00008A  1282 	C$lab1_2_COOL.c$74$3$51 ==.
                                   1283 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:74: while(Switch()); // while SS is OFF (high), wait for SS to be set ON
      00008A                       1284 00101$:
      00008A 12r03rFC         [24] 1285 	lcall	_Switch
      00008D E5 82            [12] 1286 	mov	a,dpl
      00008F 85 83 F0         [24] 1287 	mov	b,dph
      000092 45 F0            [12] 1288 	orl	a,b
      000094 70 F4            [24] 1289 	jnz	00101$
                           000096  1290 	C$lab1_2_COOL.c$75$3$51 ==.
                                   1291 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:75: TR0 = 1;     // Timer 0 Enabled
      000096 D2 8C            [12] 1292 	setb	_TR0
                           000098  1293 	C$lab1_2_COOL.c$77$8$62 ==.
                                   1294 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:77: while(turns <= 10)
      000098                       1295 00183$:
      000098 E5*05            [12] 1296 	mov	a,_turns
      00009A 24 F5            [12] 1297 	add	a,#0xff - 0x0A
      00009C 50 03            [24] 1298 	jnc	00348$
      00009E 02r03r40         [24] 1299 	ljmp	00185$
      0000A1                       1300 00348$:
                           0000A1  1301 	C$lab1_2_COOL.c$79$4$52 ==.
                                   1302 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:79: RNG = random(); //
      0000A1 12r03rD7         [24] 1303 	lcall	_random
      0000A4 85 82*04         [24] 1304 	mov	_RNG,dpl
                           0000A7  1305 	C$lab1_2_COOL.c$80$4$52 ==.
                                   1306 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:80: if (RNG != previousRNG) // Ensure numbers don't repeat
      0000A7 E5*03            [12] 1307 	mov	a,_previousRNG
      0000A9 B5*04 03         [24] 1308 	cjne	a,_RNG,00349$
      0000AC 02r03r20         [24] 1309 	ljmp	00182$
      0000AF                       1310 00349$:
                           0000AF  1311 	C$lab1_2_COOL.c$82$5$53 ==.
                                   1312 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:82: printf("\rNumber is %u\n", RNG);
      0000AF AE*04            [24] 1313 	mov	r6,_RNG
      0000B1 7F 00            [12] 1314 	mov	r7,#0x00
      0000B3 C0 06            [24] 1315 	push	ar6
      0000B5 C0 07            [24] 1316 	push	ar7
      0000B7 74r08            [12] 1317 	mov	a,#___str_1
      0000B9 C0 E0            [24] 1318 	push	acc
      0000BB 74s00            [12] 1319 	mov	a,#(___str_1 >> 8)
      0000BD C0 E0            [24] 1320 	push	acc
      0000BF 74 80            [12] 1321 	mov	a,#0x80
      0000C1 C0 E0            [24] 1322 	push	acc
      0000C3 12r00r00         [24] 1323 	lcall	_printf
      0000C6 E5 81            [12] 1324 	mov	a,sp
      0000C8 24 FB            [12] 1325 	add	a,#0xfb
      0000CA F5 81            [12] 1326 	mov	sp,a
                           0000CC  1327 	C$lab1_2_COOL.c$83$5$53 ==.
                                   1328 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:83: if(RNG == 0) 
      0000CC E5*04            [12] 1329 	mov	a,_RNG
      0000CE 60 03            [24] 1330 	jz	00350$
      0000D0 02r01r76         [24] 1331 	ljmp	00179$
      0000D3                       1332 00350$:
                           0000D3  1333 	C$lab1_2_COOL.c$85$6$54 ==.
                                   1334 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:85: LED0 = 0; // Turn on LED0
      0000D3 C2 B6            [12] 1335 	clr	_LED0
                           0000D5  1336 	C$lab1_2_COOL.c$86$6$54 ==.
                                   1337 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:86: LED1 = 1; // Turn off LED1
      0000D5 D2 B5            [12] 1338 	setb	_LED1
                           0000D7  1339 	C$lab1_2_COOL.c$88$6$54 ==.
                                   1340 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:88: Seconds = 0;
      0000D7 75*02 00         [24] 1341 	mov	_Seconds,#0x00
                           0000DA  1342 	C$lab1_2_COOL.c$89$6$54 ==.
                                   1343 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:89: while((Seconds <= secondvariable) && (flag == 0)) // Within the alotted time
      0000DA                       1344 00124$:
      0000DA C3               [12] 1345 	clr	c
      0000DB E5*0A            [12] 1346 	mov	a,_secondvariable
      0000DD 95*02            [12] 1347 	subb	a,_Seconds
      0000DF 50 03            [24] 1348 	jnc	00351$
      0000E1 02r02rFB         [24] 1349 	ljmp	00180$
      0000E4                       1350 00351$:
      0000E4 E5*07            [12] 1351 	mov	a,_flag
      0000E6 60 03            [24] 1352 	jz	00352$
      0000E8 02r02rFB         [24] 1353 	ljmp	00180$
      0000EB                       1354 00352$:
                           0000EB  1355 	C$lab1_2_COOL.c$93$7$55 ==.
                                   1356 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:93: if(Button0()) // If the correct button is pushed
      0000EB 12r03rE4         [24] 1357 	lcall	_Button0
      0000EE E5 82            [12] 1358 	mov	a,dpl
      0000F0 85 83 F0         [24] 1359 	mov	b,dph
      0000F3 45 F0            [12] 1360 	orl	a,b
      0000F5 60 1D            [24] 1361 	jz	00121$
                           0000F7  1362 	C$lab1_2_COOL.c$95$8$56 ==.
                                   1363 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:95: Counts = 0;
      0000F7 E4               [12] 1364 	clr	a
      0000F8 F5*00            [12] 1365 	mov	_Counts,a
      0000FA F5*01            [12] 1366 	mov	(_Counts + 1),a
                           0000FC  1367 	C$lab1_2_COOL.c$96$8$56 ==.
                                   1368 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:96: while (Counts <= countvariable);
      0000FC                       1369 00104$:
      0000FC AE*09            [24] 1370 	mov	r6,_countvariable
      0000FE 7F 00            [12] 1371 	mov	r7,#0x00
      000100 C3               [12] 1372 	clr	c
      000101 EE               [12] 1373 	mov	a,r6
      000102 95*00            [12] 1374 	subb	a,_Counts
      000104 EF               [12] 1375 	mov	a,r7
      000105 95*01            [12] 1376 	subb	a,(_Counts + 1)
      000107 50 F3            [24] 1377 	jnc	00104$
                           000109  1378 	C$lab1_2_COOL.c$98$8$56 ==.
                                   1379 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:98: correctAnswerCount++; // Log the correct answer
      000109 05*06            [12] 1380 	inc	_correctAnswerCount
                           00010B  1381 	C$lab1_2_COOL.c$99$8$56 ==.
                                   1382 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:99: BILED0 = 1;			  // Make BILED green
      00010B D2 B3            [12] 1383 	setb	_BILED0
                           00010D  1384 	C$lab1_2_COOL.c$100$8$56 ==.
                                   1385 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:100: BILED1 = 0;	
      00010D C2 B4            [12] 1386 	clr	_BILED1
                           00010F  1387 	C$lab1_2_COOL.c$101$8$56 ==.
                                   1388 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:101: flag = 1;
      00010F 75*07 01         [24] 1389 	mov	_flag,#0x01
      000112 80 C6            [24] 1390 	sjmp	00124$
      000114                       1391 00121$:
                           000114  1392 	C$lab1_2_COOL.c$103$7$55 ==.
                                   1393 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:103: else if(Button1()) // If the incorrect button is pressed
      000114 12r03rF0         [24] 1394 	lcall	_Button1
      000117 E5 82            [12] 1395 	mov	a,dpl
      000119 85 83 F0         [24] 1396 	mov	b,dph
      00011C 45 F0            [12] 1397 	orl	a,b
      00011E 60 1B            [24] 1398 	jz	00118$
                           000120  1399 	C$lab1_2_COOL.c$105$8$57 ==.
                                   1400 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:105: Counts = 0;
      000120 E4               [12] 1401 	clr	a
      000121 F5*00            [12] 1402 	mov	_Counts,a
      000123 F5*01            [12] 1403 	mov	(_Counts + 1),a
                           000125  1404 	C$lab1_2_COOL.c$106$8$57 ==.
                                   1405 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:106: while (Counts <= countvariable);
      000125                       1406 00107$:
      000125 AE*09            [24] 1407 	mov	r6,_countvariable
      000127 7F 00            [12] 1408 	mov	r7,#0x00
      000129 C3               [12] 1409 	clr	c
      00012A EE               [12] 1410 	mov	a,r6
      00012B 95*00            [12] 1411 	subb	a,_Counts
      00012D EF               [12] 1412 	mov	a,r7
      00012E 95*01            [12] 1413 	subb	a,(_Counts + 1)
      000130 50 F3            [24] 1414 	jnc	00107$
                           000132  1415 	C$lab1_2_COOL.c$107$8$57 ==.
                                   1416 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:107: flag = 1;
      000132 75*07 01         [24] 1417 	mov	_flag,#0x01
                           000135  1418 	C$lab1_2_COOL.c$108$8$57 ==.
                                   1419 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:108: BILED0 = 0;			// Make BILED red
      000135 C2 B3            [12] 1420 	clr	_BILED0
                           000137  1421 	C$lab1_2_COOL.c$109$8$57 ==.
                                   1422 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:109: BILED1 = 1;
      000137 D2 B4            [12] 1423 	setb	_BILED1
      000139 80 9F            [24] 1424 	sjmp	00124$
      00013B                       1425 00118$:
                           00013B  1426 	C$lab1_2_COOL.c$111$7$55 ==.
                                   1427 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:111: else if(Button0() && Button1()) // If the incorrect button is pressed
      00013B 12r03rE4         [24] 1428 	lcall	_Button0
      00013E E5 82            [12] 1429 	mov	a,dpl
      000140 85 83 F0         [24] 1430 	mov	b,dph
      000143 45 F0            [12] 1431 	orl	a,b
      000145 60 28            [24] 1432 	jz	00114$
      000147 12r03rF0         [24] 1433 	lcall	_Button1
      00014A E5 82            [12] 1434 	mov	a,dpl
      00014C 85 83 F0         [24] 1435 	mov	b,dph
      00014F 45 F0            [12] 1436 	orl	a,b
      000151 60 1C            [24] 1437 	jz	00114$
                           000153  1438 	C$lab1_2_COOL.c$113$8$58 ==.
                                   1439 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:113: Counts = 0;
      000153 E4               [12] 1440 	clr	a
      000154 F5*00            [12] 1441 	mov	_Counts,a
      000156 F5*01            [12] 1442 	mov	(_Counts + 1),a
                           000158  1443 	C$lab1_2_COOL.c$114$8$58 ==.
                                   1444 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:114: while (Counts <= countvariable);
      000158                       1445 00110$:
      000158 AE*09            [24] 1446 	mov	r6,_countvariable
      00015A 7F 00            [12] 1447 	mov	r7,#0x00
      00015C C3               [12] 1448 	clr	c
      00015D EE               [12] 1449 	mov	a,r6
      00015E 95*00            [12] 1450 	subb	a,_Counts
      000160 EF               [12] 1451 	mov	a,r7
      000161 95*01            [12] 1452 	subb	a,(_Counts + 1)
      000163 50 F3            [24] 1453 	jnc	00110$
                           000165  1454 	C$lab1_2_COOL.c$115$8$58 ==.
                                   1455 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:115: flag = 1;
      000165 75*07 01         [24] 1456 	mov	_flag,#0x01
                           000168  1457 	C$lab1_2_COOL.c$116$8$58 ==.
                                   1458 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:116: BILED0 = 0;			// Make BILED red
      000168 C2 B3            [12] 1459 	clr	_BILED0
                           00016A  1460 	C$lab1_2_COOL.c$117$8$58 ==.
                                   1461 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:117: BILED1 = 1;
      00016A D2 B4            [12] 1462 	setb	_BILED1
      00016C 02r00rDA         [24] 1463 	ljmp	00124$
      00016F                       1464 00114$:
                           00016F  1465 	C$lab1_2_COOL.c$121$8$59 ==.
                                   1466 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:121: BILED0 = 0;			// Make BILED red
      00016F C2 B3            [12] 1467 	clr	_BILED0
                           000171  1468 	C$lab1_2_COOL.c$122$8$59 ==.
                                   1469 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:122: BILED1 = 1;
      000171 D2 B4            [12] 1470 	setb	_BILED1
      000173 02r00rDA         [24] 1471 	ljmp	00124$
      000176                       1472 00179$:
                           000176  1473 	C$lab1_2_COOL.c$126$5$53 ==.
                                   1474 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:126: else if(RNG == 1)
      000176 74 01            [12] 1475 	mov	a,#0x01
      000178 B5*04 02         [24] 1476 	cjne	a,_RNG,00360$
      00017B 80 03            [24] 1477 	sjmp	00361$
      00017D                       1478 00360$:
      00017D 02r02r38         [24] 1479 	ljmp	00176$
      000180                       1480 00361$:
                           000180  1481 	C$lab1_2_COOL.c$128$6$60 ==.
                                   1482 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:128: LED1 = 0; //Turn on LED1
      000180 C2 B5            [12] 1483 	clr	_LED1
                           000182  1484 	C$lab1_2_COOL.c$129$6$60 ==.
                                   1485 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:129: LED0 = 1; //Turn off LED0
      000182 D2 B6            [12] 1486 	setb	_LED0
                           000184  1487 	C$lab1_2_COOL.c$130$6$60 ==.
                                   1488 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:130: Seconds = 0;
      000184 75*02 00         [24] 1489 	mov	_Seconds,#0x00
                           000187  1490 	C$lab1_2_COOL.c$131$6$60 ==.
                                   1491 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:131: while((Seconds <= secondvariable) && (flag == 0)) // Within the alotted time
      000187                       1492 00147$:
      000187 C3               [12] 1493 	clr	c
      000188 E5*0A            [12] 1494 	mov	a,_secondvariable
      00018A 95*02            [12] 1495 	subb	a,_Seconds
      00018C 50 03            [24] 1496 	jnc	00362$
      00018E 02r02rFB         [24] 1497 	ljmp	00180$
      000191                       1498 00362$:
      000191 E5*07            [12] 1499 	mov	a,_flag
      000193 60 03            [24] 1500 	jz	00363$
      000195 02r02rFB         [24] 1501 	ljmp	00180$
      000198                       1502 00363$:
                           000198  1503 	C$lab1_2_COOL.c$135$7$61 ==.
                                   1504 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:135: if(Button1()) // If the correct button is pushed
      000198 12r03rF0         [24] 1505 	lcall	_Button1
      00019B E5 82            [12] 1506 	mov	a,dpl
      00019D 85 83 F0         [24] 1507 	mov	b,dph
      0001A0 45 F0            [12] 1508 	orl	a,b
      0001A2 60 32            [24] 1509 	jz	00144$
                           0001A4  1510 	C$lab1_2_COOL.c$137$8$62 ==.
                                   1511 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:137: Counts = 0;
      0001A4 E4               [12] 1512 	clr	a
      0001A5 F5*00            [12] 1513 	mov	_Counts,a
      0001A7 F5*01            [12] 1514 	mov	(_Counts + 1),a
                           0001A9  1515 	C$lab1_2_COOL.c$138$8$62 ==.
                                   1516 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:138: while (Counts <= countvariable);
      0001A9                       1517 00127$:
      0001A9 AE*09            [24] 1518 	mov	r6,_countvariable
      0001AB 7F 00            [12] 1519 	mov	r7,#0x00
      0001AD C3               [12] 1520 	clr	c
      0001AE EE               [12] 1521 	mov	a,r6
      0001AF 95*00            [12] 1522 	subb	a,_Counts
      0001B1 EF               [12] 1523 	mov	a,r7
      0001B2 95*01            [12] 1524 	subb	a,(_Counts + 1)
      0001B4 50 F3            [24] 1525 	jnc	00127$
                           0001B6  1526 	C$lab1_2_COOL.c$139$8$62 ==.
                                   1527 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:139: printf("\rYou pushed Button 1\n");
      0001B6 74r17            [12] 1528 	mov	a,#___str_2
      0001B8 C0 E0            [24] 1529 	push	acc
      0001BA 74s00            [12] 1530 	mov	a,#(___str_2 >> 8)
      0001BC C0 E0            [24] 1531 	push	acc
      0001BE 74 80            [12] 1532 	mov	a,#0x80
      0001C0 C0 E0            [24] 1533 	push	acc
      0001C2 12r00r00         [24] 1534 	lcall	_printf
      0001C5 15 81            [12] 1535 	dec	sp
      0001C7 15 81            [12] 1536 	dec	sp
      0001C9 15 81            [12] 1537 	dec	sp
                           0001CB  1538 	C$lab1_2_COOL.c$140$8$62 ==.
                                   1539 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:140: correctAnswerCount++; // Log the correct answer
      0001CB 05*06            [12] 1540 	inc	_correctAnswerCount
                           0001CD  1541 	C$lab1_2_COOL.c$141$8$62 ==.
                                   1542 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:141: BILED0 = 1;			  // Make BILED green
      0001CD D2 B3            [12] 1543 	setb	_BILED0
                           0001CF  1544 	C$lab1_2_COOL.c$142$8$62 ==.
                                   1545 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:142: BILED1 = 0;	
      0001CF C2 B4            [12] 1546 	clr	_BILED1
                           0001D1  1547 	C$lab1_2_COOL.c$143$8$62 ==.
                                   1548 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:143: flag = 1;
      0001D1 75*07 01         [24] 1549 	mov	_flag,#0x01
      0001D4 80 B1            [24] 1550 	sjmp	00147$
      0001D6                       1551 00144$:
                           0001D6  1552 	C$lab1_2_COOL.c$145$7$61 ==.
                                   1553 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:145: else if(Button0()) // If the incorrect button is pressed
      0001D6 12r03rE4         [24] 1554 	lcall	_Button0
      0001D9 E5 82            [12] 1555 	mov	a,dpl
      0001DB 85 83 F0         [24] 1556 	mov	b,dph
      0001DE 45 F0            [12] 1557 	orl	a,b
      0001E0 60 1B            [24] 1558 	jz	00141$
                           0001E2  1559 	C$lab1_2_COOL.c$147$8$63 ==.
                                   1560 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:147: Counts = 0;
      0001E2 E4               [12] 1561 	clr	a
      0001E3 F5*00            [12] 1562 	mov	_Counts,a
      0001E5 F5*01            [12] 1563 	mov	(_Counts + 1),a
                           0001E7  1564 	C$lab1_2_COOL.c$148$8$63 ==.
                                   1565 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:148: while (Counts <= countvariable);
      0001E7                       1566 00130$:
      0001E7 AE*09            [24] 1567 	mov	r6,_countvariable
      0001E9 7F 00            [12] 1568 	mov	r7,#0x00
      0001EB C3               [12] 1569 	clr	c
      0001EC EE               [12] 1570 	mov	a,r6
      0001ED 95*00            [12] 1571 	subb	a,_Counts
      0001EF EF               [12] 1572 	mov	a,r7
      0001F0 95*01            [12] 1573 	subb	a,(_Counts + 1)
      0001F2 50 F3            [24] 1574 	jnc	00130$
                           0001F4  1575 	C$lab1_2_COOL.c$149$8$63 ==.
                                   1576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:149: flag = 1;
      0001F4 75*07 01         [24] 1577 	mov	_flag,#0x01
                           0001F7  1578 	C$lab1_2_COOL.c$150$8$63 ==.
                                   1579 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:150: BILED0 = 0;			// Make BILED red
      0001F7 C2 B3            [12] 1580 	clr	_BILED0
                           0001F9  1581 	C$lab1_2_COOL.c$151$8$63 ==.
                                   1582 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:151: BILED1 = 1;
      0001F9 D2 B4            [12] 1583 	setb	_BILED1
      0001FB 80 8A            [24] 1584 	sjmp	00147$
      0001FD                       1585 00141$:
                           0001FD  1586 	C$lab1_2_COOL.c$153$7$61 ==.
                                   1587 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:153: else if(Button0() && Button1()) // If the incorrect button is pressed
      0001FD 12r03rE4         [24] 1588 	lcall	_Button0
      000200 E5 82            [12] 1589 	mov	a,dpl
      000202 85 83 F0         [24] 1590 	mov	b,dph
      000205 45 F0            [12] 1591 	orl	a,b
      000207 60 28            [24] 1592 	jz	00137$
      000209 12r03rF0         [24] 1593 	lcall	_Button1
      00020C E5 82            [12] 1594 	mov	a,dpl
      00020E 85 83 F0         [24] 1595 	mov	b,dph
      000211 45 F0            [12] 1596 	orl	a,b
      000213 60 1C            [24] 1597 	jz	00137$
                           000215  1598 	C$lab1_2_COOL.c$155$8$64 ==.
                                   1599 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:155: Counts = 0;
      000215 E4               [12] 1600 	clr	a
      000216 F5*00            [12] 1601 	mov	_Counts,a
      000218 F5*01            [12] 1602 	mov	(_Counts + 1),a
                           00021A  1603 	C$lab1_2_COOL.c$156$8$64 ==.
                                   1604 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:156: while (Counts <= countvariable);
      00021A                       1605 00133$:
      00021A AE*09            [24] 1606 	mov	r6,_countvariable
      00021C 7F 00            [12] 1607 	mov	r7,#0x00
      00021E C3               [12] 1608 	clr	c
      00021F EE               [12] 1609 	mov	a,r6
      000220 95*00            [12] 1610 	subb	a,_Counts
      000222 EF               [12] 1611 	mov	a,r7
      000223 95*01            [12] 1612 	subb	a,(_Counts + 1)
      000225 50 F3            [24] 1613 	jnc	00133$
                           000227  1614 	C$lab1_2_COOL.c$157$8$64 ==.
                                   1615 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:157: flag = 1;
      000227 75*07 01         [24] 1616 	mov	_flag,#0x01
                           00022A  1617 	C$lab1_2_COOL.c$158$8$64 ==.
                                   1618 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:158: BILED0 = 0;			// Make BILED red
      00022A C2 B3            [12] 1619 	clr	_BILED0
                           00022C  1620 	C$lab1_2_COOL.c$159$8$64 ==.
                                   1621 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:159: BILED1 = 1;
      00022C D2 B4            [12] 1622 	setb	_BILED1
      00022E 02r01r87         [24] 1623 	ljmp	00147$
      000231                       1624 00137$:
                           000231  1625 	C$lab1_2_COOL.c$163$8$65 ==.
                                   1626 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:163: BILED0 = 0;			// Make BILED red
      000231 C2 B3            [12] 1627 	clr	_BILED0
                           000233  1628 	C$lab1_2_COOL.c$164$8$65 ==.
                                   1629 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:164: BILED1 = 1;
      000233 D2 B4            [12] 1630 	setb	_BILED1
      000235 02r01r87         [24] 1631 	ljmp	00147$
      000238                       1632 00176$:
                           000238  1633 	C$lab1_2_COOL.c$168$5$53 ==.
                                   1634 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:168: else if (RNG == 2)
      000238 74 02            [12] 1635 	mov	a,#0x02
      00023A B5*04 02         [24] 1636 	cjne	a,_RNG,00371$
      00023D 80 03            [24] 1637 	sjmp	00372$
      00023F                       1638 00371$:
      00023F 02r02rFB         [24] 1639 	ljmp	00180$
      000242                       1640 00372$:
                           000242  1641 	C$lab1_2_COOL.c$170$6$66 ==.
                                   1642 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:170: LED0 = 0; //Turn on LED0
      000242 C2 B6            [12] 1643 	clr	_LED0
                           000244  1644 	C$lab1_2_COOL.c$171$6$66 ==.
                                   1645 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:171: LED1 = 0; //Turn on 
      000244 C2 B5            [12] 1646 	clr	_LED1
                           000246  1647 	C$lab1_2_COOL.c$172$6$66 ==.
                                   1648 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:172: Seconds = 0;
      000246 75*02 00         [24] 1649 	mov	_Seconds,#0x00
                           000249  1650 	C$lab1_2_COOL.c$173$6$66 ==.
                                   1651 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:173: while((Seconds <= secondvariable) && (flag == 0)) // Within the alotted time
      000249                       1652 00170$:
      000249 C3               [12] 1653 	clr	c
      00024A E5*0A            [12] 1654 	mov	a,_secondvariable
      00024C 95*02            [12] 1655 	subb	a,_Seconds
      00024E 50 03            [24] 1656 	jnc	00373$
      000250 02r02rFB         [24] 1657 	ljmp	00180$
      000253                       1658 00373$:
      000253 E5*07            [12] 1659 	mov	a,_flag
      000255 60 03            [24] 1660 	jz	00374$
      000257 02r02rFB         [24] 1661 	ljmp	00180$
      00025A                       1662 00374$:
                           00025A  1663 	C$lab1_2_COOL.c$177$7$67 ==.
                                   1664 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:177: if(Button0() && Button1()) // If the correct button is pushed
      00025A 12r03rE4         [24] 1665 	lcall	_Button0
      00025D E5 82            [12] 1666 	mov	a,dpl
      00025F 85 83 F0         [24] 1667 	mov	b,dph
      000262 45 F0            [12] 1668 	orl	a,b
      000264 60 3E            [24] 1669 	jz	00166$
      000266 12r03rF0         [24] 1670 	lcall	_Button1
      000269 E5 82            [12] 1671 	mov	a,dpl
      00026B 85 83 F0         [24] 1672 	mov	b,dph
      00026E 45 F0            [12] 1673 	orl	a,b
      000270 60 32            [24] 1674 	jz	00166$
                           000272  1675 	C$lab1_2_COOL.c$179$8$68 ==.
                                   1676 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:179: Counts = 0;
      000272 E4               [12] 1677 	clr	a
      000273 F5*00            [12] 1678 	mov	_Counts,a
      000275 F5*01            [12] 1679 	mov	(_Counts + 1),a
                           000277  1680 	C$lab1_2_COOL.c$180$8$68 ==.
                                   1681 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:180: while (Counts <= countvariable);
      000277                       1682 00150$:
      000277 AE*09            [24] 1683 	mov	r6,_countvariable
      000279 7F 00            [12] 1684 	mov	r7,#0x00
      00027B C3               [12] 1685 	clr	c
      00027C EE               [12] 1686 	mov	a,r6
      00027D 95*00            [12] 1687 	subb	a,_Counts
      00027F EF               [12] 1688 	mov	a,r7
      000280 95*01            [12] 1689 	subb	a,(_Counts + 1)
      000282 50 F3            [24] 1690 	jnc	00150$
                           000284  1691 	C$lab1_2_COOL.c$181$8$68 ==.
                                   1692 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:181: printf("\rYou pressed Button 0 and Button 1\n");
      000284 74r2D            [12] 1693 	mov	a,#___str_3
      000286 C0 E0            [24] 1694 	push	acc
      000288 74s00            [12] 1695 	mov	a,#(___str_3 >> 8)
      00028A C0 E0            [24] 1696 	push	acc
      00028C 74 80            [12] 1697 	mov	a,#0x80
      00028E C0 E0            [24] 1698 	push	acc
      000290 12r00r00         [24] 1699 	lcall	_printf
      000293 15 81            [12] 1700 	dec	sp
      000295 15 81            [12] 1701 	dec	sp
      000297 15 81            [12] 1702 	dec	sp
                           000299  1703 	C$lab1_2_COOL.c$182$8$68 ==.
                                   1704 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:182: correctAnswerCount++; // Log the correct answer
      000299 05*06            [12] 1705 	inc	_correctAnswerCount
                           00029B  1706 	C$lab1_2_COOL.c$183$8$68 ==.
                                   1707 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:183: BILED0 = 1;			  // Make BILED green
      00029B D2 B3            [12] 1708 	setb	_BILED0
                           00029D  1709 	C$lab1_2_COOL.c$184$8$68 ==.
                                   1710 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:184: BILED1 = 0;	
      00029D C2 B4            [12] 1711 	clr	_BILED1
                           00029F  1712 	C$lab1_2_COOL.c$185$8$68 ==.
                                   1713 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:185: flag = 1;
      00029F 75*07 01         [24] 1714 	mov	_flag,#0x01
      0002A2 80 A5            [24] 1715 	sjmp	00170$
      0002A4                       1716 00166$:
                           0002A4  1717 	C$lab1_2_COOL.c$187$7$67 ==.
                                   1718 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:187: else if(Button0()) // If the incorrect button is pressed
      0002A4 12r03rE4         [24] 1719 	lcall	_Button0
      0002A7 E5 82            [12] 1720 	mov	a,dpl
      0002A9 85 83 F0         [24] 1721 	mov	b,dph
      0002AC 45 F0            [12] 1722 	orl	a,b
      0002AE 60 1C            [24] 1723 	jz	00163$
                           0002B0  1724 	C$lab1_2_COOL.c$189$8$69 ==.
                                   1725 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:189: Counts = 0;
      0002B0 E4               [12] 1726 	clr	a
      0002B1 F5*00            [12] 1727 	mov	_Counts,a
      0002B3 F5*01            [12] 1728 	mov	(_Counts + 1),a
                           0002B5  1729 	C$lab1_2_COOL.c$190$8$69 ==.
                                   1730 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:190: while (Counts <= countvariable);
      0002B5                       1731 00153$:
      0002B5 AE*09            [24] 1732 	mov	r6,_countvariable
      0002B7 7F 00            [12] 1733 	mov	r7,#0x00
      0002B9 C3               [12] 1734 	clr	c
      0002BA EE               [12] 1735 	mov	a,r6
      0002BB 95*00            [12] 1736 	subb	a,_Counts
      0002BD EF               [12] 1737 	mov	a,r7
      0002BE 95*01            [12] 1738 	subb	a,(_Counts + 1)
      0002C0 50 F3            [24] 1739 	jnc	00153$
                           0002C2  1740 	C$lab1_2_COOL.c$191$8$69 ==.
                                   1741 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:191: flag = 1;
      0002C2 75*07 01         [24] 1742 	mov	_flag,#0x01
                           0002C5  1743 	C$lab1_2_COOL.c$192$8$69 ==.
                                   1744 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:192: BILED0 = 0;			// Make BILED red
      0002C5 C2 B3            [12] 1745 	clr	_BILED0
                           0002C7  1746 	C$lab1_2_COOL.c$193$8$69 ==.
                                   1747 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:193: BILED1 = 1;
      0002C7 D2 B4            [12] 1748 	setb	_BILED1
      0002C9 02r02r49         [24] 1749 	ljmp	00170$
      0002CC                       1750 00163$:
                           0002CC  1751 	C$lab1_2_COOL.c$195$7$67 ==.
                                   1752 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:195: else if(Button1()) // If the incorrect button is pressed
      0002CC 12r03rF0         [24] 1753 	lcall	_Button1
      0002CF E5 82            [12] 1754 	mov	a,dpl
      0002D1 85 83 F0         [24] 1755 	mov	b,dph
      0002D4 45 F0            [12] 1756 	orl	a,b
      0002D6 60 1C            [24] 1757 	jz	00160$
                           0002D8  1758 	C$lab1_2_COOL.c$197$8$70 ==.
                                   1759 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:197: Counts = 0;
      0002D8 E4               [12] 1760 	clr	a
      0002D9 F5*00            [12] 1761 	mov	_Counts,a
      0002DB F5*01            [12] 1762 	mov	(_Counts + 1),a
                           0002DD  1763 	C$lab1_2_COOL.c$198$8$70 ==.
                                   1764 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:198: while (Counts <= countvariable);
      0002DD                       1765 00156$:
      0002DD AE*09            [24] 1766 	mov	r6,_countvariable
      0002DF 7F 00            [12] 1767 	mov	r7,#0x00
      0002E1 C3               [12] 1768 	clr	c
      0002E2 EE               [12] 1769 	mov	a,r6
      0002E3 95*00            [12] 1770 	subb	a,_Counts
      0002E5 EF               [12] 1771 	mov	a,r7
      0002E6 95*01            [12] 1772 	subb	a,(_Counts + 1)
      0002E8 50 F3            [24] 1773 	jnc	00156$
                           0002EA  1774 	C$lab1_2_COOL.c$199$8$70 ==.
                                   1775 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:199: flag = 1;
      0002EA 75*07 01         [24] 1776 	mov	_flag,#0x01
                           0002ED  1777 	C$lab1_2_COOL.c$200$8$70 ==.
                                   1778 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:200: BILED0 = 0;			// Make BILED red
      0002ED C2 B3            [12] 1779 	clr	_BILED0
                           0002EF  1780 	C$lab1_2_COOL.c$201$8$70 ==.
                                   1781 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:201: BILED1 = 1;
      0002EF D2 B4            [12] 1782 	setb	_BILED1
      0002F1 02r02r49         [24] 1783 	ljmp	00170$
      0002F4                       1784 00160$:
                           0002F4  1785 	C$lab1_2_COOL.c$205$8$71 ==.
                                   1786 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:205: BILED0 = 0;			// Make BILED red
      0002F4 C2 B3            [12] 1787 	clr	_BILED0
                           0002F6  1788 	C$lab1_2_COOL.c$206$8$71 ==.
                                   1789 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:206: BILED1 = 1;
      0002F6 D2 B4            [12] 1790 	setb	_BILED1
      0002F8 02r02r49         [24] 1791 	ljmp	00170$
      0002FB                       1792 00180$:
                           0002FB  1793 	C$lab1_2_COOL.c$210$5$53 ==.
                                   1794 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:210: turns++;
      0002FB 05*05            [12] 1795 	inc	_turns
                           0002FD  1796 	C$lab1_2_COOL.c$211$5$53 ==.
                                   1797 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:211: printf("\rIt is turn %u\n", turns);
      0002FD AE*05            [24] 1798 	mov	r6,_turns
      0002FF 7F 00            [12] 1799 	mov	r7,#0x00
      000301 C0 06            [24] 1800 	push	ar6
      000303 C0 07            [24] 1801 	push	ar7
      000305 74r51            [12] 1802 	mov	a,#___str_4
      000307 C0 E0            [24] 1803 	push	acc
      000309 74s00            [12] 1804 	mov	a,#(___str_4 >> 8)
      00030B C0 E0            [24] 1805 	push	acc
      00030D 74 80            [12] 1806 	mov	a,#0x80
      00030F C0 E0            [24] 1807 	push	acc
      000311 12r00r00         [24] 1808 	lcall	_printf
      000314 E5 81            [12] 1809 	mov	a,sp
      000316 24 FB            [12] 1810 	add	a,#0xfb
      000318 F5 81            [12] 1811 	mov	sp,a
                           00031A  1812 	C$lab1_2_COOL.c$212$5$53 ==.
                                   1813 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:212: previousRNG = RNG;
      00031A 85*04*03         [24] 1814 	mov	_previousRNG,_RNG
                           00031D  1815 	C$lab1_2_COOL.c$213$5$53 ==.
                                   1816 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:213: flag = 0;
      00031D 75*07 00         [24] 1817 	mov	_flag,#0x00
      000320                       1818 00182$:
                           000320  1819 	C$lab1_2_COOL.c$215$4$52 ==.
                                   1820 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:215: printf("\rCorrect responses: %u\n", correctAnswerCount);
      000320 AE*06            [24] 1821 	mov	r6,_correctAnswerCount
      000322 7F 00            [12] 1822 	mov	r7,#0x00
      000324 C0 06            [24] 1823 	push	ar6
      000326 C0 07            [24] 1824 	push	ar7
      000328 74r61            [12] 1825 	mov	a,#___str_5
      00032A C0 E0            [24] 1826 	push	acc
      00032C 74s00            [12] 1827 	mov	a,#(___str_5 >> 8)
      00032E C0 E0            [24] 1828 	push	acc
      000330 74 80            [12] 1829 	mov	a,#0x80
      000332 C0 E0            [24] 1830 	push	acc
      000334 12r00r00         [24] 1831 	lcall	_printf
      000337 E5 81            [12] 1832 	mov	a,sp
      000339 24 FB            [12] 1833 	add	a,#0xfb
      00033B F5 81            [12] 1834 	mov	sp,a
      00033D 02r00r98         [24] 1835 	ljmp	00183$
      000340                       1836 00185$:
                           000340  1837 	C$lab1_2_COOL.c$218$3$51 ==.
                                   1838 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:218: Seconds = 0;
      000340 75*02 00         [24] 1839 	mov	_Seconds,#0x00
                           000343  1840 	C$lab1_2_COOL.c$219$3$51 ==.
                                   1841 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:219: while (Seconds == 0)
      000343                       1842 00186$:
      000343 E5*02            [12] 1843 	mov	a,_Seconds
      000345 70 04            [24] 1844 	jnz	00188$
                           000347  1845 	C$lab1_2_COOL.c$221$4$72 ==.
                                   1846 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:221: Buzzer = 0; // Bzzzzt
      000347 C2 B7            [12] 1847 	clr	_Buzzer
      000349 80 F8            [24] 1848 	sjmp	00186$
      00034B                       1849 00188$:
                           00034B  1850 	C$lab1_2_COOL.c$225$3$51 ==.
                                   1851 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:225: printf("\rFINAL RESULTS: %u", correctAnswerCount);
      00034B AE*06            [24] 1852 	mov	r6,_correctAnswerCount
      00034D 7F 00            [12] 1853 	mov	r7,#0x00
      00034F C0 06            [24] 1854 	push	ar6
      000351 C0 07            [24] 1855 	push	ar7
      000353 74r79            [12] 1856 	mov	a,#___str_6
      000355 C0 E0            [24] 1857 	push	acc
      000357 74s00            [12] 1858 	mov	a,#(___str_6 >> 8)
      000359 C0 E0            [24] 1859 	push	acc
      00035B 74 80            [12] 1860 	mov	a,#0x80
      00035D C0 E0            [24] 1861 	push	acc
      00035F 12r00r00         [24] 1862 	lcall	_printf
      000362 E5 81            [12] 1863 	mov	a,sp
      000364 24 FB            [12] 1864 	add	a,#0xfb
      000366 F5 81            [12] 1865 	mov	sp,a
                           000368  1866 	C$lab1_2_COOL.c$226$3$51 ==.
                                   1867 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:226: printf(" out of 10\n");
      000368 74r8C            [12] 1868 	mov	a,#___str_7
      00036A C0 E0            [24] 1869 	push	acc
      00036C 74s00            [12] 1870 	mov	a,#(___str_7 >> 8)
      00036E C0 E0            [24] 1871 	push	acc
      000370 74 80            [12] 1872 	mov	a,#0x80
      000372 C0 E0            [24] 1873 	push	acc
      000374 12r00r00         [24] 1874 	lcall	_printf
      000377 15 81            [12] 1875 	dec	sp
      000379 15 81            [12] 1876 	dec	sp
      00037B 15 81            [12] 1877 	dec	sp
                           00037D  1878 	C$lab1_2_COOL.c$227$3$51 ==.
                                   1879 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:227: programflag = 1;
      00037D 75*08 01         [24] 1880 	mov	_programflag,#0x01
      000380                       1881 00190$:
                           000380  1882 	C$lab1_2_COOL.c$229$2$50 ==.
                                   1883 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:229: Buzzer = 1; //Bzt--
      000380 D2 B7            [12] 1884 	setb	_Buzzer
      000382 02r00r83         [24] 1885 	ljmp	00192$
                           000385  1886 	C$lab1_2_COOL.c$244$1$49 ==.
                           000385  1887 	XG$main$0$0 ==.
      000385 22               [24] 1888 	ret
                                   1889 ;------------------------------------------------------------
                                   1890 ;Allocation info for local variables in function 'Port_Init'
                                   1891 ;------------------------------------------------------------
                           000386  1892 	G$Port_Init$0$0 ==.
                           000386  1893 	C$lab1_2_COOL.c$247$1$49 ==.
                                   1894 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:247: void Port_Init(void)
                                   1895 ;	-----------------------------------------
                                   1896 ;	 function Port_Init
                                   1897 ;	-----------------------------------------
      000386                       1898 _Port_Init:
                           000386  1899 	C$lab1_2_COOL.c$250$1$74 ==.
                                   1900 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:250: P3MDOUT |= 0xF8;// set Port 3 output pins to push-pull mode 
      000386 43 A7 F8         [24] 1901 	orl	_P3MDOUT,#0xF8
                           000389  1902 	C$lab1_2_COOL.c$251$1$74 ==.
                                   1903 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:251: P3MDOUT &= 0xFC; // set Port 3 input pins to open drain mode 
      000389 53 A7 FC         [24] 1904 	anl	_P3MDOUT,#0xFC
                           00038C  1905 	C$lab1_2_COOL.c$252$1$74 ==.
                                   1906 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:252: P3 |= ~0xFC; // set Port 3 input pins to high impedance state 
      00038C AF B0            [24] 1907 	mov	r7,_P3
      00038E 74 03            [12] 1908 	mov	a,#0x03
      000390 4F               [12] 1909 	orl	a,r7
      000391 F5 B0            [12] 1910 	mov	_P3,a
                           000393  1911 	C$lab1_2_COOL.c$254$1$74 ==.
                                   1912 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:254: P2MDOUT &= 0xFE; // set Port 2 input pins to push-pull mode
      000393 53 A6 FE         [24] 1913 	anl	_P2MDOUT,#0xFE
                           000396  1914 	C$lab1_2_COOL.c$255$1$74 ==.
                                   1915 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:255: P2 |= ~0xFE; // set Port 2 input pins to high impedance state
      000396 AF A0            [24] 1916 	mov	r7,_P2
      000398 74 01            [12] 1917 	mov	a,#0x01
      00039A 4F               [12] 1918 	orl	a,r7
      00039B F5 A0            [12] 1919 	mov	_P2,a
                           00039D  1920 	C$lab1_2_COOL.c$257$1$74 ==.
                           00039D  1921 	XG$Port_Init$0$0 ==.
      00039D 22               [24] 1922 	ret
                                   1923 ;------------------------------------------------------------
                                   1924 ;Allocation info for local variables in function 'Interrupt_Init'
                                   1925 ;------------------------------------------------------------
                           00039E  1926 	G$Interrupt_Init$0$0 ==.
                           00039E  1927 	C$lab1_2_COOL.c$259$1$74 ==.
                                   1928 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:259: void Interrupt_Init(void)
                                   1929 ;	-----------------------------------------
                                   1930 ;	 function Interrupt_Init
                                   1931 ;	-----------------------------------------
      00039E                       1932 _Interrupt_Init:
                           00039E  1933 	C$lab1_2_COOL.c$261$1$76 ==.
                                   1934 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:261: ET0 = 1;      // enable Timer0 Interrupt request
      00039E D2 A9            [12] 1935 	setb	_ET0
                           0003A0  1936 	C$lab1_2_COOL.c$262$1$76 ==.
                                   1937 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:262: EA = 1;       // enable global interrupts
      0003A0 D2 AF            [12] 1938 	setb	_EA
                           0003A2  1939 	C$lab1_2_COOL.c$263$1$76 ==.
                           0003A2  1940 	XG$Interrupt_Init$0$0 ==.
      0003A2 22               [24] 1941 	ret
                                   1942 ;------------------------------------------------------------
                                   1943 ;Allocation info for local variables in function 'Timer_Init'
                                   1944 ;------------------------------------------------------------
                           0003A3  1945 	G$Timer_Init$0$0 ==.
                           0003A3  1946 	C$lab1_2_COOL.c$265$1$76 ==.
                                   1947 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:265: void Timer_Init(void)
                                   1948 ;	-----------------------------------------
                                   1949 ;	 function Timer_Init
                                   1950 ;	-----------------------------------------
      0003A3                       1951 _Timer_Init:
                           0003A3  1952 	C$lab1_2_COOL.c$268$1$78 ==.
                                   1953 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:268: CKCON |= 0x08;  // Timer0 uses SYSCLK as source
      0003A3 43 8E 08         [24] 1954 	orl	_CKCON,#0x08
                           0003A6  1955 	C$lab1_2_COOL.c$269$1$78 ==.
                                   1956 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:269: TMOD &= 0xF0;   // clear the 4 least significant bits
      0003A6 53 89 F0         [24] 1957 	anl	_TMOD,#0xF0
                           0003A9  1958 	C$lab1_2_COOL.c$270$1$78 ==.
                                   1959 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:270: TMOD |= 0x01;   // Timer0 in mode 1
      0003A9 43 89 01         [24] 1960 	orl	_TMOD,#0x01
                           0003AC  1961 	C$lab1_2_COOL.c$271$1$78 ==.
                                   1962 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:271: TR0 = 0;           // Stop Timer0
      0003AC C2 8C            [12] 1963 	clr	_TR0
                           0003AE  1964 	C$lab1_2_COOL.c$272$1$78 ==.
                                   1965 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:272: TL0 = 0;           // Clear low byte of register T0
      0003AE 75 8A 00         [24] 1966 	mov	_TL0,#0x00
                           0003B1  1967 	C$lab1_2_COOL.c$273$1$78 ==.
                                   1968 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:273: TH0 = 0;           // Clear high byte of register T0
      0003B1 75 8C 00         [24] 1969 	mov	_TH0,#0x00
                           0003B4  1970 	C$lab1_2_COOL.c$275$1$78 ==.
                           0003B4  1971 	XG$Timer_Init$0$0 ==.
      0003B4 22               [24] 1972 	ret
                                   1973 ;------------------------------------------------------------
                                   1974 ;Allocation info for local variables in function 'Timer0_ISR'
                                   1975 ;------------------------------------------------------------
                           0003B5  1976 	G$Timer0_ISR$0$0 ==.
                           0003B5  1977 	C$lab1_2_COOL.c$279$1$78 ==.
                                   1978 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:279: void Timer0_ISR(void) __interrupt 1
                                   1979 ;	-----------------------------------------
                                   1980 ;	 function Timer0_ISR
                                   1981 ;	-----------------------------------------
      0003B5                       1982 _Timer0_ISR:
      0003B5 C0 E0            [24] 1983 	push	acc
      0003B7 C0 D0            [24] 1984 	push	psw
                           0003B9  1985 	C$lab1_2_COOL.c$281$1$80 ==.
                                   1986 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:281: Counts++;
      0003B9 05*00            [12] 1987 	inc	_Counts
      0003BB E4               [12] 1988 	clr	a
      0003BC B5*00 02         [24] 1989 	cjne	a,_Counts,00108$
      0003BF 05*01            [12] 1990 	inc	(_Counts + 1)
      0003C1                       1991 00108$:
                           0003C1  1992 	C$lab1_2_COOL.c$282$1$80 ==.
                                   1993 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:282: if(Counts == 337)
      0003C1 74 51            [12] 1994 	mov	a,#0x51
      0003C3 B5*00 0C         [24] 1995 	cjne	a,_Counts,00103$
      0003C6 74 01            [12] 1996 	mov	a,#0x01
      0003C8 B5*01 07         [24] 1997 	cjne	a,(_Counts + 1),00103$
                           0003CB  1998 	C$lab1_2_COOL.c$284$2$81 ==.
                                   1999 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:284: Seconds ++;
      0003CB 05*02            [12] 2000 	inc	_Seconds
                           0003CD  2001 	C$lab1_2_COOL.c$285$2$81 ==.
                                   2002 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:285: Counts = 0;
      0003CD E4               [12] 2003 	clr	a
      0003CE F5*00            [12] 2004 	mov	_Counts,a
      0003D0 F5*01            [12] 2005 	mov	(_Counts + 1),a
      0003D2                       2006 00103$:
      0003D2 D0 D0            [24] 2007 	pop	psw
      0003D4 D0 E0            [24] 2008 	pop	acc
                           0003D6  2009 	C$lab1_2_COOL.c$287$1$80 ==.
                           0003D6  2010 	XG$Timer0_ISR$0$0 ==.
      0003D6 32               [24] 2011 	reti
                                   2012 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2013 ;	eliminated unneeded push/pop dpl
                                   2014 ;	eliminated unneeded push/pop dph
                                   2015 ;	eliminated unneeded push/pop b
                                   2016 ;------------------------------------------------------------
                                   2017 ;Allocation info for local variables in function 'random'
                                   2018 ;------------------------------------------------------------
                           0003D7  2019 	G$random$0$0 ==.
                           0003D7  2020 	C$lab1_2_COOL.c$296$1$80 ==.
                                   2021 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:296: unsigned char random(void)
                                   2022 ;	-----------------------------------------
                                   2023 ;	 function random
                                   2024 ;	-----------------------------------------
      0003D7                       2025 _random:
                           0003D7  2026 	C$lab1_2_COOL.c$298$1$83 ==.
                                   2027 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:298: return (rand()%3);  // rand returns a random number between 0 and 32767.
      0003D7 12r00r00         [24] 2028 	lcall	_rand
      0003DA 75*00 03         [24] 2029 	mov	__modsint_PARM_2,#0x03
      0003DD 75*01 00         [24] 2030 	mov	(__modsint_PARM_2 + 1),#0x00
      0003E0 12r00r00         [24] 2031 	lcall	__modsint
                           0003E3  2032 	C$lab1_2_COOL.c$302$1$83 ==.
                           0003E3  2033 	XG$random$0$0 ==.
      0003E3 22               [24] 2034 	ret
                                   2035 ;------------------------------------------------------------
                                   2036 ;Allocation info for local variables in function 'Button0'
                                   2037 ;------------------------------------------------------------
                           0003E4  2038 	G$Button0$0$0 ==.
                           0003E4  2039 	C$lab1_2_COOL.c$309$1$83 ==.
                                   2040 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:309: int Button0(void)
                                   2041 ;	-----------------------------------------
                                   2042 ;	 function Button0
                                   2043 ;	-----------------------------------------
      0003E4                       2044 _Button0:
                           0003E4  2045 	C$lab1_2_COOL.c$311$1$85 ==.
                                   2046 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:311: if (!PB0)
      0003E4 20 B0 05         [24] 2047 	jb	_PB0,00102$
                           0003E7  2048 	C$lab1_2_COOL.c$313$2$86 ==.
                                   2049 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:313: return 1;
      0003E7 90 00 01         [24] 2050 	mov	dptr,#0x0001
      0003EA 80 03            [24] 2051 	sjmp	00104$
      0003EC                       2052 00102$:
                           0003EC  2053 	C$lab1_2_COOL.c$315$1$85 ==.
                                   2054 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:315: else return 0;
      0003EC 90 00 00         [24] 2055 	mov	dptr,#0x0000
      0003EF                       2056 00104$:
                           0003EF  2057 	C$lab1_2_COOL.c$316$1$85 ==.
                           0003EF  2058 	XG$Button0$0$0 ==.
      0003EF 22               [24] 2059 	ret
                                   2060 ;------------------------------------------------------------
                                   2061 ;Allocation info for local variables in function 'Button1'
                                   2062 ;------------------------------------------------------------
                           0003F0  2063 	G$Button1$0$0 ==.
                           0003F0  2064 	C$lab1_2_COOL.c$318$1$85 ==.
                                   2065 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:318: int Button1(void)
                                   2066 ;	-----------------------------------------
                                   2067 ;	 function Button1
                                   2068 ;	-----------------------------------------
      0003F0                       2069 _Button1:
                           0003F0  2070 	C$lab1_2_COOL.c$320$1$88 ==.
                                   2071 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:320: if (!PB1)
      0003F0 20 B1 05         [24] 2072 	jb	_PB1,00102$
                           0003F3  2073 	C$lab1_2_COOL.c$322$2$89 ==.
                                   2074 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:322: return 1;
      0003F3 90 00 01         [24] 2075 	mov	dptr,#0x0001
      0003F6 80 03            [24] 2076 	sjmp	00104$
      0003F8                       2077 00102$:
                           0003F8  2078 	C$lab1_2_COOL.c$324$1$88 ==.
                                   2079 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:324: else return 0;
      0003F8 90 00 00         [24] 2080 	mov	dptr,#0x0000
      0003FB                       2081 00104$:
                           0003FB  2082 	C$lab1_2_COOL.c$325$1$88 ==.
                           0003FB  2083 	XG$Button1$0$0 ==.
      0003FB 22               [24] 2084 	ret
                                   2085 ;------------------------------------------------------------
                                   2086 ;Allocation info for local variables in function 'Switch'
                                   2087 ;------------------------------------------------------------
                           0003FC  2088 	G$Switch$0$0 ==.
                           0003FC  2089 	C$lab1_2_COOL.c$330$1$88 ==.
                                   2090 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:330: int Switch(void)
                                   2091 ;	-----------------------------------------
                                   2092 ;	 function Switch
                                   2093 ;	-----------------------------------------
      0003FC                       2094 _Switch:
                           0003FC  2095 	C$lab1_2_COOL.c$332$1$91 ==.
                                   2096 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:332: if (!SS) return 1;
      0003FC 20 A0 05         [24] 2097 	jb	_SS,00102$
      0003FF 90 00 01         [24] 2098 	mov	dptr,#0x0001
      000402 80 03            [24] 2099 	sjmp	00104$
      000404                       2100 00102$:
                           000404  2101 	C$lab1_2_COOL.c$333$1$91 ==.
                                   2102 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 1\Lab 1_2\lab1-2-COOL.c:333: else return 0;
      000404 90 00 00         [24] 2103 	mov	dptr,#0x0000
      000407                       2104 00104$:
                           000407  2105 	C$lab1_2_COOL.c$334$1$91 ==.
                           000407  2106 	XG$Switch$0$0 ==.
      000407 22               [24] 2107 	ret
                                   2108 	.area CSEG    (CODE)
                                   2109 	.area CONST   (CODE)
                           000000  2110 Flab1_2_COOL$__str_0$0$0 == .
      000000                       2111 ___str_0:
      000000 53 74 61 72 74        2112 	.ascii "Start"
      000005 0D                    2113 	.db 0x0D
      000006 0A                    2114 	.db 0x0A
      000007 00                    2115 	.db 0x00
                           000008  2116 Flab1_2_COOL$__str_1$0$0 == .
      000008                       2117 ___str_1:
      000008 0D                    2118 	.db 0x0D
      000009 4E 75 6D 62 65 72 20  2119 	.ascii "Number is %u"
             69 73 20 25 75
      000015 0A                    2120 	.db 0x0A
      000016 00                    2121 	.db 0x00
                           000017  2122 Flab1_2_COOL$__str_2$0$0 == .
      000017                       2123 ___str_2:
      000017 0D                    2124 	.db 0x0D
      000018 59 6F 75 20 70 75 73  2125 	.ascii "You pushed Button 1"
             68 65 64 20 42 75 74
             74 6F 6E 20 31
      00002B 0A                    2126 	.db 0x0A
      00002C 00                    2127 	.db 0x00
                           00002D  2128 Flab1_2_COOL$__str_3$0$0 == .
      00002D                       2129 ___str_3:
      00002D 0D                    2130 	.db 0x0D
      00002E 59 6F 75 20 70 72 65  2131 	.ascii "You pressed Button 0 and Button 1"
             73 73 65 64 20 42 75
             74 74 6F 6E 20 30 20
             61 6E 64 20 42 75 74
             74 6F 6E 20 31
      00004F 0A                    2132 	.db 0x0A
      000050 00                    2133 	.db 0x00
                           000051  2134 Flab1_2_COOL$__str_4$0$0 == .
      000051                       2135 ___str_4:
      000051 0D                    2136 	.db 0x0D
      000052 49 74 20 69 73 20 74  2137 	.ascii "It is turn %u"
             75 72 6E 20 25 75
      00005F 0A                    2138 	.db 0x0A
      000060 00                    2139 	.db 0x00
                           000061  2140 Flab1_2_COOL$__str_5$0$0 == .
      000061                       2141 ___str_5:
      000061 0D                    2142 	.db 0x0D
      000062 43 6F 72 72 65 63 74  2143 	.ascii "Correct responses: %u"
             20 72 65 73 70 6F 6E
             73 65 73 3A 20 25 75
      000077 0A                    2144 	.db 0x0A
      000078 00                    2145 	.db 0x00
                           000079  2146 Flab1_2_COOL$__str_6$0$0 == .
      000079                       2147 ___str_6:
      000079 0D                    2148 	.db 0x0D
      00007A 46 49 4E 41 4C 20 52  2149 	.ascii "FINAL RESULTS: %u"
             45 53 55 4C 54 53 3A
             20 25 75
      00008B 00                    2150 	.db 0x00
                           00008C  2151 Flab1_2_COOL$__str_7$0$0 == .
      00008C                       2152 ___str_7:
      00008C 20 6F 75 74 20 6F 66  2153 	.ascii " out of 10"
             20 31 30
      000096 0A                    2154 	.db 0x0A
      000097 00                    2155 	.db 0x00
                                   2156 	.area XINIT   (CODE)
                                   2157 	.area CABS    (ABS,CODE)
