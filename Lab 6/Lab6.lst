                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri May 01 13:25:28 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Pick_Steering_Gain
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _printf_fast_f
                                     20 	.globl _vsprintf
                                     21 	.globl _printf
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _heading
                                    308 	.globl _desired_heading
                                    309 	.globl _voltage
                                    310 	.globl _AD_Result
                                    311 	.globl _new_AD
                                    312 	.globl _drive_gain
                                    313 	.globl _steer_gain
                                    314 	.globl _print_delay
                                    315 	.globl _Data
                                    316 	.globl _STEER_PW
                                    317 	.globl _DRIVE_PW
                                    318 	.globl _delay
                                    319 	.globl _adc_count
                                    320 	.globl _a_count
                                    321 	.globl _r_count
                                    322 	.globl _nCounts
                                    323 	.globl _Counts
                                    324 	.globl _Error
                                    325 	.globl _prev_error
                                    326 	.globl _new_range
                                    327 	.globl _temp_motorpw
                                    328 	.globl _i2c_read_data_PARM_4
                                    329 	.globl _i2c_read_data_PARM_3
                                    330 	.globl _i2c_read_data_PARM_2
                                    331 	.globl _i2c_write_data_PARM_4
                                    332 	.globl _i2c_write_data_PARM_3
                                    333 	.globl _i2c_write_data_PARM_2
                                    334 	.globl _putchar
                                    335 	.globl _getchar
                                    336 	.globl _lcd_print
                                    337 	.globl _lcd_clear
                                    338 	.globl _kpd_input
                                    339 	.globl _delay_time
                                    340 	.globl _i2c_start
                                    341 	.globl _i2c_write
                                    342 	.globl _i2c_write_and_stop
                                    343 	.globl _i2c_read
                                    344 	.globl _i2c_read_and_stop
                                    345 	.globl _i2c_write_data
                                    346 	.globl _i2c_read_data
                                    347 	.globl _Accel_Init
                                    348 	.globl _Port_Init
                                    349 	.globl _Interrupt_Init
                                    350 	.globl _PCA_Init
                                    351 	.globl _SMB0_Init
                                    352 	.globl _PCA_ISR
                                    353 	.globl _ADC_Init
                                    354 	.globl _read_AD_input
                                    355 	.globl _Hand_Check
                                    356 	.globl _Pick_Heading
                                    357 	.globl _read_ranger
                                    358 	.globl _set_PW
                                    359 ;--------------------------------------------------------
                                    360 ; special function registers
                                    361 ;--------------------------------------------------------
                                    362 	.area RSEG    (ABS,DATA)
      000000                        363 	.org 0x0000
                           000080   364 G$P0$0$0 == 0x0080
                           000080   365 _P0	=	0x0080
                           000081   366 G$SP$0$0 == 0x0081
                           000081   367 _SP	=	0x0081
                           000082   368 G$DPL$0$0 == 0x0082
                           000082   369 _DPL	=	0x0082
                           000083   370 G$DPH$0$0 == 0x0083
                           000083   371 _DPH	=	0x0083
                           000084   372 G$P4$0$0 == 0x0084
                           000084   373 _P4	=	0x0084
                           000085   374 G$P5$0$0 == 0x0085
                           000085   375 _P5	=	0x0085
                           000086   376 G$P6$0$0 == 0x0086
                           000086   377 _P6	=	0x0086
                           000087   378 G$PCON$0$0 == 0x0087
                           000087   379 _PCON	=	0x0087
                           000088   380 G$TCON$0$0 == 0x0088
                           000088   381 _TCON	=	0x0088
                           000089   382 G$TMOD$0$0 == 0x0089
                           000089   383 _TMOD	=	0x0089
                           00008A   384 G$TL0$0$0 == 0x008a
                           00008A   385 _TL0	=	0x008a
                           00008B   386 G$TL1$0$0 == 0x008b
                           00008B   387 _TL1	=	0x008b
                           00008C   388 G$TH0$0$0 == 0x008c
                           00008C   389 _TH0	=	0x008c
                           00008D   390 G$TH1$0$0 == 0x008d
                           00008D   391 _TH1	=	0x008d
                           00008E   392 G$CKCON$0$0 == 0x008e
                           00008E   393 _CKCON	=	0x008e
                           00008F   394 G$PSCTL$0$0 == 0x008f
                           00008F   395 _PSCTL	=	0x008f
                           000090   396 G$P1$0$0 == 0x0090
                           000090   397 _P1	=	0x0090
                           000091   398 G$TMR3CN$0$0 == 0x0091
                           000091   399 _TMR3CN	=	0x0091
                           000092   400 G$TMR3RLL$0$0 == 0x0092
                           000092   401 _TMR3RLL	=	0x0092
                           000093   402 G$TMR3RLH$0$0 == 0x0093
                           000093   403 _TMR3RLH	=	0x0093
                           000094   404 G$TMR3L$0$0 == 0x0094
                           000094   405 _TMR3L	=	0x0094
                           000095   406 G$TMR3H$0$0 == 0x0095
                           000095   407 _TMR3H	=	0x0095
                           000096   408 G$P7$0$0 == 0x0096
                           000096   409 _P7	=	0x0096
                           000098   410 G$SCON$0$0 == 0x0098
                           000098   411 _SCON	=	0x0098
                           000098   412 G$SCON0$0$0 == 0x0098
                           000098   413 _SCON0	=	0x0098
                           000099   414 G$SBUF$0$0 == 0x0099
                           000099   415 _SBUF	=	0x0099
                           000099   416 G$SBUF0$0$0 == 0x0099
                           000099   417 _SBUF0	=	0x0099
                           00009A   418 G$SPI0CFG$0$0 == 0x009a
                           00009A   419 _SPI0CFG	=	0x009a
                           00009B   420 G$SPI0DAT$0$0 == 0x009b
                           00009B   421 _SPI0DAT	=	0x009b
                           00009C   422 G$ADC1$0$0 == 0x009c
                           00009C   423 _ADC1	=	0x009c
                           00009D   424 G$SPI0CKR$0$0 == 0x009d
                           00009D   425 _SPI0CKR	=	0x009d
                           00009E   426 G$CPT0CN$0$0 == 0x009e
                           00009E   427 _CPT0CN	=	0x009e
                           00009F   428 G$CPT1CN$0$0 == 0x009f
                           00009F   429 _CPT1CN	=	0x009f
                           0000A0   430 G$P2$0$0 == 0x00a0
                           0000A0   431 _P2	=	0x00a0
                           0000A1   432 G$EMI0TC$0$0 == 0x00a1
                           0000A1   433 _EMI0TC	=	0x00a1
                           0000A3   434 G$EMI0CF$0$0 == 0x00a3
                           0000A3   435 _EMI0CF	=	0x00a3
                           0000A4   436 G$PRT0CF$0$0 == 0x00a4
                           0000A4   437 _PRT0CF	=	0x00a4
                           0000A4   438 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   439 _P0MDOUT	=	0x00a4
                           0000A5   440 G$PRT1CF$0$0 == 0x00a5
                           0000A5   441 _PRT1CF	=	0x00a5
                           0000A5   442 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   443 _P1MDOUT	=	0x00a5
                           0000A6   444 G$PRT2CF$0$0 == 0x00a6
                           0000A6   445 _PRT2CF	=	0x00a6
                           0000A6   446 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   447 _P2MDOUT	=	0x00a6
                           0000A7   448 G$PRT3CF$0$0 == 0x00a7
                           0000A7   449 _PRT3CF	=	0x00a7
                           0000A7   450 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   451 _P3MDOUT	=	0x00a7
                           0000A8   452 G$IE$0$0 == 0x00a8
                           0000A8   453 _IE	=	0x00a8
                           0000A9   454 G$SADDR0$0$0 == 0x00a9
                           0000A9   455 _SADDR0	=	0x00a9
                           0000AA   456 G$ADC1CN$0$0 == 0x00aa
                           0000AA   457 _ADC1CN	=	0x00aa
                           0000AB   458 G$ADC1CF$0$0 == 0x00ab
                           0000AB   459 _ADC1CF	=	0x00ab
                           0000AC   460 G$AMX1SL$0$0 == 0x00ac
                           0000AC   461 _AMX1SL	=	0x00ac
                           0000AD   462 G$P3IF$0$0 == 0x00ad
                           0000AD   463 _P3IF	=	0x00ad
                           0000AE   464 G$SADEN1$0$0 == 0x00ae
                           0000AE   465 _SADEN1	=	0x00ae
                           0000AF   466 G$EMI0CN$0$0 == 0x00af
                           0000AF   467 _EMI0CN	=	0x00af
                           0000AF   468 G$_XPAGE$0$0 == 0x00af
                           0000AF   469 __XPAGE	=	0x00af
                           0000B0   470 G$P3$0$0 == 0x00b0
                           0000B0   471 _P3	=	0x00b0
                           0000B1   472 G$OSCXCN$0$0 == 0x00b1
                           0000B1   473 _OSCXCN	=	0x00b1
                           0000B2   474 G$OSCICN$0$0 == 0x00b2
                           0000B2   475 _OSCICN	=	0x00b2
                           0000B5   476 G$P74OUT$0$0 == 0x00b5
                           0000B5   477 _P74OUT	=	0x00b5
                           0000B6   478 G$FLSCL$0$0 == 0x00b6
                           0000B6   479 _FLSCL	=	0x00b6
                           0000B7   480 G$FLACL$0$0 == 0x00b7
                           0000B7   481 _FLACL	=	0x00b7
                           0000B8   482 G$IP$0$0 == 0x00b8
                           0000B8   483 _IP	=	0x00b8
                           0000B9   484 G$SADEN0$0$0 == 0x00b9
                           0000B9   485 _SADEN0	=	0x00b9
                           0000BA   486 G$AMX0CF$0$0 == 0x00ba
                           0000BA   487 _AMX0CF	=	0x00ba
                           0000BB   488 G$AMX0SL$0$0 == 0x00bb
                           0000BB   489 _AMX0SL	=	0x00bb
                           0000BC   490 G$ADC0CF$0$0 == 0x00bc
                           0000BC   491 _ADC0CF	=	0x00bc
                           0000BD   492 G$P1MDIN$0$0 == 0x00bd
                           0000BD   493 _P1MDIN	=	0x00bd
                           0000BE   494 G$ADC0L$0$0 == 0x00be
                           0000BE   495 _ADC0L	=	0x00be
                           0000BF   496 G$ADC0H$0$0 == 0x00bf
                           0000BF   497 _ADC0H	=	0x00bf
                           0000C0   498 G$SMB0CN$0$0 == 0x00c0
                           0000C0   499 _SMB0CN	=	0x00c0
                           0000C1   500 G$SMB0STA$0$0 == 0x00c1
                           0000C1   501 _SMB0STA	=	0x00c1
                           0000C2   502 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   503 _SMB0DAT	=	0x00c2
                           0000C3   504 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   505 _SMB0ADR	=	0x00c3
                           0000C4   506 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   507 _ADC0GTL	=	0x00c4
                           0000C5   508 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   509 _ADC0GTH	=	0x00c5
                           0000C6   510 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   511 _ADC0LTL	=	0x00c6
                           0000C7   512 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   513 _ADC0LTH	=	0x00c7
                           0000C8   514 G$T2CON$0$0 == 0x00c8
                           0000C8   515 _T2CON	=	0x00c8
                           0000C9   516 G$T4CON$0$0 == 0x00c9
                           0000C9   517 _T4CON	=	0x00c9
                           0000CA   518 G$RCAP2L$0$0 == 0x00ca
                           0000CA   519 _RCAP2L	=	0x00ca
                           0000CB   520 G$RCAP2H$0$0 == 0x00cb
                           0000CB   521 _RCAP2H	=	0x00cb
                           0000CC   522 G$TL2$0$0 == 0x00cc
                           0000CC   523 _TL2	=	0x00cc
                           0000CD   524 G$TH2$0$0 == 0x00cd
                           0000CD   525 _TH2	=	0x00cd
                           0000CF   526 G$SMB0CR$0$0 == 0x00cf
                           0000CF   527 _SMB0CR	=	0x00cf
                           0000D0   528 G$PSW$0$0 == 0x00d0
                           0000D0   529 _PSW	=	0x00d0
                           0000D1   530 G$REF0CN$0$0 == 0x00d1
                           0000D1   531 _REF0CN	=	0x00d1
                           0000D2   532 G$DAC0L$0$0 == 0x00d2
                           0000D2   533 _DAC0L	=	0x00d2
                           0000D3   534 G$DAC0H$0$0 == 0x00d3
                           0000D3   535 _DAC0H	=	0x00d3
                           0000D4   536 G$DAC0CN$0$0 == 0x00d4
                           0000D4   537 _DAC0CN	=	0x00d4
                           0000D5   538 G$DAC1L$0$0 == 0x00d5
                           0000D5   539 _DAC1L	=	0x00d5
                           0000D6   540 G$DAC1H$0$0 == 0x00d6
                           0000D6   541 _DAC1H	=	0x00d6
                           0000D7   542 G$DAC1CN$0$0 == 0x00d7
                           0000D7   543 _DAC1CN	=	0x00d7
                           0000D8   544 G$PCA0CN$0$0 == 0x00d8
                           0000D8   545 _PCA0CN	=	0x00d8
                           0000D9   546 G$PCA0MD$0$0 == 0x00d9
                           0000D9   547 _PCA0MD	=	0x00d9
                           0000DA   548 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   549 _PCA0CPM0	=	0x00da
                           0000DB   550 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   551 _PCA0CPM1	=	0x00db
                           0000DC   552 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   553 _PCA0CPM2	=	0x00dc
                           0000DD   554 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   555 _PCA0CPM3	=	0x00dd
                           0000DE   556 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   557 _PCA0CPM4	=	0x00de
                           0000E0   558 G$ACC$0$0 == 0x00e0
                           0000E0   559 _ACC	=	0x00e0
                           0000E1   560 G$XBR0$0$0 == 0x00e1
                           0000E1   561 _XBR0	=	0x00e1
                           0000E2   562 G$XBR1$0$0 == 0x00e2
                           0000E2   563 _XBR1	=	0x00e2
                           0000E3   564 G$XBR2$0$0 == 0x00e3
                           0000E3   565 _XBR2	=	0x00e3
                           0000E4   566 G$RCAP4L$0$0 == 0x00e4
                           0000E4   567 _RCAP4L	=	0x00e4
                           0000E5   568 G$RCAP4H$0$0 == 0x00e5
                           0000E5   569 _RCAP4H	=	0x00e5
                           0000E6   570 G$EIE1$0$0 == 0x00e6
                           0000E6   571 _EIE1	=	0x00e6
                           0000E7   572 G$EIE2$0$0 == 0x00e7
                           0000E7   573 _EIE2	=	0x00e7
                           0000E8   574 G$ADC0CN$0$0 == 0x00e8
                           0000E8   575 _ADC0CN	=	0x00e8
                           0000E9   576 G$PCA0L$0$0 == 0x00e9
                           0000E9   577 _PCA0L	=	0x00e9
                           0000EA   578 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   579 _PCA0CPL0	=	0x00ea
                           0000EB   580 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   581 _PCA0CPL1	=	0x00eb
                           0000EC   582 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   583 _PCA0CPL2	=	0x00ec
                           0000ED   584 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   585 _PCA0CPL3	=	0x00ed
                           0000EE   586 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   587 _PCA0CPL4	=	0x00ee
                           0000EF   588 G$RSTSRC$0$0 == 0x00ef
                           0000EF   589 _RSTSRC	=	0x00ef
                           0000F0   590 G$B$0$0 == 0x00f0
                           0000F0   591 _B	=	0x00f0
                           0000F1   592 G$SCON1$0$0 == 0x00f1
                           0000F1   593 _SCON1	=	0x00f1
                           0000F2   594 G$SBUF1$0$0 == 0x00f2
                           0000F2   595 _SBUF1	=	0x00f2
                           0000F3   596 G$SADDR1$0$0 == 0x00f3
                           0000F3   597 _SADDR1	=	0x00f3
                           0000F4   598 G$TL4$0$0 == 0x00f4
                           0000F4   599 _TL4	=	0x00f4
                           0000F5   600 G$TH4$0$0 == 0x00f5
                           0000F5   601 _TH4	=	0x00f5
                           0000F6   602 G$EIP1$0$0 == 0x00f6
                           0000F6   603 _EIP1	=	0x00f6
                           0000F7   604 G$EIP2$0$0 == 0x00f7
                           0000F7   605 _EIP2	=	0x00f7
                           0000F8   606 G$SPI0CN$0$0 == 0x00f8
                           0000F8   607 _SPI0CN	=	0x00f8
                           0000F9   608 G$PCA0H$0$0 == 0x00f9
                           0000F9   609 _PCA0H	=	0x00f9
                           0000FA   610 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   611 _PCA0CPH0	=	0x00fa
                           0000FB   612 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   613 _PCA0CPH1	=	0x00fb
                           0000FC   614 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   615 _PCA0CPH2	=	0x00fc
                           0000FD   616 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   617 _PCA0CPH3	=	0x00fd
                           0000FE   618 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   619 _PCA0CPH4	=	0x00fe
                           0000FF   620 G$WDTCN$0$0 == 0x00ff
                           0000FF   621 _WDTCN	=	0x00ff
                           008C8A   622 G$TMR0$0$0 == 0x8c8a
                           008C8A   623 _TMR0	=	0x8c8a
                           008D8B   624 G$TMR1$0$0 == 0x8d8b
                           008D8B   625 _TMR1	=	0x8d8b
                           00CDCC   626 G$TMR2$0$0 == 0xcdcc
                           00CDCC   627 _TMR2	=	0xcdcc
                           00CBCA   628 G$RCAP2$0$0 == 0xcbca
                           00CBCA   629 _RCAP2	=	0xcbca
                           009594   630 G$TMR3$0$0 == 0x9594
                           009594   631 _TMR3	=	0x9594
                           009392   632 G$TMR3RL$0$0 == 0x9392
                           009392   633 _TMR3RL	=	0x9392
                           00F5F4   634 G$TMR4$0$0 == 0xf5f4
                           00F5F4   635 _TMR4	=	0xf5f4
                           00E5E4   636 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   637 _RCAP4	=	0xe5e4
                           00BFBE   638 G$ADC0$0$0 == 0xbfbe
                           00BFBE   639 _ADC0	=	0xbfbe
                           00C5C4   640 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   641 _ADC0GT	=	0xc5c4
                           00C7C6   642 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   643 _ADC0LT	=	0xc7c6
                           00D3D2   644 G$DAC0$0$0 == 0xd3d2
                           00D3D2   645 _DAC0	=	0xd3d2
                           00D6D5   646 G$DAC1$0$0 == 0xd6d5
                           00D6D5   647 _DAC1	=	0xd6d5
                           00F9E9   648 G$PCA0$0$0 == 0xf9e9
                           00F9E9   649 _PCA0	=	0xf9e9
                           00FAEA   650 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   651 _PCA0CP0	=	0xfaea
                           00FBEB   652 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   653 _PCA0CP1	=	0xfbeb
                           00FCEC   654 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   655 _PCA0CP2	=	0xfcec
                           00FDED   656 G$PCA0CP3$0$0 == 0xfded
                           00FDED   657 _PCA0CP3	=	0xfded
                           00FEEE   658 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   659 _PCA0CP4	=	0xfeee
                                    660 ;--------------------------------------------------------
                                    661 ; special function bits
                                    662 ;--------------------------------------------------------
                                    663 	.area RSEG    (ABS,DATA)
      000000                        664 	.org 0x0000
                           000080   665 G$P0_0$0$0 == 0x0080
                           000080   666 _P0_0	=	0x0080
                           000081   667 G$P0_1$0$0 == 0x0081
                           000081   668 _P0_1	=	0x0081
                           000082   669 G$P0_2$0$0 == 0x0082
                           000082   670 _P0_2	=	0x0082
                           000083   671 G$P0_3$0$0 == 0x0083
                           000083   672 _P0_3	=	0x0083
                           000084   673 G$P0_4$0$0 == 0x0084
                           000084   674 _P0_4	=	0x0084
                           000085   675 G$P0_5$0$0 == 0x0085
                           000085   676 _P0_5	=	0x0085
                           000086   677 G$P0_6$0$0 == 0x0086
                           000086   678 _P0_6	=	0x0086
                           000087   679 G$P0_7$0$0 == 0x0087
                           000087   680 _P0_7	=	0x0087
                           000088   681 G$IT0$0$0 == 0x0088
                           000088   682 _IT0	=	0x0088
                           000089   683 G$IE0$0$0 == 0x0089
                           000089   684 _IE0	=	0x0089
                           00008A   685 G$IT1$0$0 == 0x008a
                           00008A   686 _IT1	=	0x008a
                           00008B   687 G$IE1$0$0 == 0x008b
                           00008B   688 _IE1	=	0x008b
                           00008C   689 G$TR0$0$0 == 0x008c
                           00008C   690 _TR0	=	0x008c
                           00008D   691 G$TF0$0$0 == 0x008d
                           00008D   692 _TF0	=	0x008d
                           00008E   693 G$TR1$0$0 == 0x008e
                           00008E   694 _TR1	=	0x008e
                           00008F   695 G$TF1$0$0 == 0x008f
                           00008F   696 _TF1	=	0x008f
                           000090   697 G$P1_0$0$0 == 0x0090
                           000090   698 _P1_0	=	0x0090
                           000091   699 G$P1_1$0$0 == 0x0091
                           000091   700 _P1_1	=	0x0091
                           000092   701 G$P1_2$0$0 == 0x0092
                           000092   702 _P1_2	=	0x0092
                           000093   703 G$P1_3$0$0 == 0x0093
                           000093   704 _P1_3	=	0x0093
                           000094   705 G$P1_4$0$0 == 0x0094
                           000094   706 _P1_4	=	0x0094
                           000095   707 G$P1_5$0$0 == 0x0095
                           000095   708 _P1_5	=	0x0095
                           000096   709 G$P1_6$0$0 == 0x0096
                           000096   710 _P1_6	=	0x0096
                           000097   711 G$P1_7$0$0 == 0x0097
                           000097   712 _P1_7	=	0x0097
                           000098   713 G$RI$0$0 == 0x0098
                           000098   714 _RI	=	0x0098
                           000098   715 G$RI0$0$0 == 0x0098
                           000098   716 _RI0	=	0x0098
                           000099   717 G$TI$0$0 == 0x0099
                           000099   718 _TI	=	0x0099
                           000099   719 G$TI0$0$0 == 0x0099
                           000099   720 _TI0	=	0x0099
                           00009A   721 G$RB8$0$0 == 0x009a
                           00009A   722 _RB8	=	0x009a
                           00009A   723 G$RB80$0$0 == 0x009a
                           00009A   724 _RB80	=	0x009a
                           00009B   725 G$TB8$0$0 == 0x009b
                           00009B   726 _TB8	=	0x009b
                           00009B   727 G$TB80$0$0 == 0x009b
                           00009B   728 _TB80	=	0x009b
                           00009C   729 G$REN$0$0 == 0x009c
                           00009C   730 _REN	=	0x009c
                           00009C   731 G$REN0$0$0 == 0x009c
                           00009C   732 _REN0	=	0x009c
                           00009D   733 G$SM2$0$0 == 0x009d
                           00009D   734 _SM2	=	0x009d
                           00009D   735 G$SM20$0$0 == 0x009d
                           00009D   736 _SM20	=	0x009d
                           00009D   737 G$MCE0$0$0 == 0x009d
                           00009D   738 _MCE0	=	0x009d
                           00009E   739 G$SM1$0$0 == 0x009e
                           00009E   740 _SM1	=	0x009e
                           00009E   741 G$SM10$0$0 == 0x009e
                           00009E   742 _SM10	=	0x009e
                           00009F   743 G$SM0$0$0 == 0x009f
                           00009F   744 _SM0	=	0x009f
                           00009F   745 G$SM00$0$0 == 0x009f
                           00009F   746 _SM00	=	0x009f
                           00009F   747 G$S0MODE$0$0 == 0x009f
                           00009F   748 _S0MODE	=	0x009f
                           0000A0   749 G$P2_0$0$0 == 0x00a0
                           0000A0   750 _P2_0	=	0x00a0
                           0000A1   751 G$P2_1$0$0 == 0x00a1
                           0000A1   752 _P2_1	=	0x00a1
                           0000A2   753 G$P2_2$0$0 == 0x00a2
                           0000A2   754 _P2_2	=	0x00a2
                           0000A3   755 G$P2_3$0$0 == 0x00a3
                           0000A3   756 _P2_3	=	0x00a3
                           0000A4   757 G$P2_4$0$0 == 0x00a4
                           0000A4   758 _P2_4	=	0x00a4
                           0000A5   759 G$P2_5$0$0 == 0x00a5
                           0000A5   760 _P2_5	=	0x00a5
                           0000A6   761 G$P2_6$0$0 == 0x00a6
                           0000A6   762 _P2_6	=	0x00a6
                           0000A7   763 G$P2_7$0$0 == 0x00a7
                           0000A7   764 _P2_7	=	0x00a7
                           0000A8   765 G$EX0$0$0 == 0x00a8
                           0000A8   766 _EX0	=	0x00a8
                           0000A9   767 G$ET0$0$0 == 0x00a9
                           0000A9   768 _ET0	=	0x00a9
                           0000AA   769 G$EX1$0$0 == 0x00aa
                           0000AA   770 _EX1	=	0x00aa
                           0000AB   771 G$ET1$0$0 == 0x00ab
                           0000AB   772 _ET1	=	0x00ab
                           0000AC   773 G$ES0$0$0 == 0x00ac
                           0000AC   774 _ES0	=	0x00ac
                           0000AC   775 G$ES$0$0 == 0x00ac
                           0000AC   776 _ES	=	0x00ac
                           0000AD   777 G$ET2$0$0 == 0x00ad
                           0000AD   778 _ET2	=	0x00ad
                           0000AF   779 G$EA$0$0 == 0x00af
                           0000AF   780 _EA	=	0x00af
                           0000B0   781 G$P3_0$0$0 == 0x00b0
                           0000B0   782 _P3_0	=	0x00b0
                           0000B1   783 G$P3_1$0$0 == 0x00b1
                           0000B1   784 _P3_1	=	0x00b1
                           0000B2   785 G$P3_2$0$0 == 0x00b2
                           0000B2   786 _P3_2	=	0x00b2
                           0000B3   787 G$P3_3$0$0 == 0x00b3
                           0000B3   788 _P3_3	=	0x00b3
                           0000B4   789 G$P3_4$0$0 == 0x00b4
                           0000B4   790 _P3_4	=	0x00b4
                           0000B5   791 G$P3_5$0$0 == 0x00b5
                           0000B5   792 _P3_5	=	0x00b5
                           0000B6   793 G$P3_6$0$0 == 0x00b6
                           0000B6   794 _P3_6	=	0x00b6
                           0000B7   795 G$P3_7$0$0 == 0x00b7
                           0000B7   796 _P3_7	=	0x00b7
                           0000B8   797 G$PX0$0$0 == 0x00b8
                           0000B8   798 _PX0	=	0x00b8
                           0000B9   799 G$PT0$0$0 == 0x00b9
                           0000B9   800 _PT0	=	0x00b9
                           0000BA   801 G$PX1$0$0 == 0x00ba
                           0000BA   802 _PX1	=	0x00ba
                           0000BB   803 G$PT1$0$0 == 0x00bb
                           0000BB   804 _PT1	=	0x00bb
                           0000BC   805 G$PS0$0$0 == 0x00bc
                           0000BC   806 _PS0	=	0x00bc
                           0000BC   807 G$PS$0$0 == 0x00bc
                           0000BC   808 _PS	=	0x00bc
                           0000BD   809 G$PT2$0$0 == 0x00bd
                           0000BD   810 _PT2	=	0x00bd
                           0000C0   811 G$SMBTOE$0$0 == 0x00c0
                           0000C0   812 _SMBTOE	=	0x00c0
                           0000C1   813 G$SMBFTE$0$0 == 0x00c1
                           0000C1   814 _SMBFTE	=	0x00c1
                           0000C2   815 G$AA$0$0 == 0x00c2
                           0000C2   816 _AA	=	0x00c2
                           0000C3   817 G$SI$0$0 == 0x00c3
                           0000C3   818 _SI	=	0x00c3
                           0000C4   819 G$STO$0$0 == 0x00c4
                           0000C4   820 _STO	=	0x00c4
                           0000C5   821 G$STA$0$0 == 0x00c5
                           0000C5   822 _STA	=	0x00c5
                           0000C6   823 G$ENSMB$0$0 == 0x00c6
                           0000C6   824 _ENSMB	=	0x00c6
                           0000C7   825 G$BUSY$0$0 == 0x00c7
                           0000C7   826 _BUSY	=	0x00c7
                           0000C8   827 G$CPRL2$0$0 == 0x00c8
                           0000C8   828 _CPRL2	=	0x00c8
                           0000C9   829 G$CT2$0$0 == 0x00c9
                           0000C9   830 _CT2	=	0x00c9
                           0000CA   831 G$TR2$0$0 == 0x00ca
                           0000CA   832 _TR2	=	0x00ca
                           0000CB   833 G$EXEN2$0$0 == 0x00cb
                           0000CB   834 _EXEN2	=	0x00cb
                           0000CC   835 G$TCLK$0$0 == 0x00cc
                           0000CC   836 _TCLK	=	0x00cc
                           0000CD   837 G$RCLK$0$0 == 0x00cd
                           0000CD   838 _RCLK	=	0x00cd
                           0000CE   839 G$EXF2$0$0 == 0x00ce
                           0000CE   840 _EXF2	=	0x00ce
                           0000CF   841 G$TF2$0$0 == 0x00cf
                           0000CF   842 _TF2	=	0x00cf
                           0000D0   843 G$P$0$0 == 0x00d0
                           0000D0   844 _P	=	0x00d0
                           0000D1   845 G$F1$0$0 == 0x00d1
                           0000D1   846 _F1	=	0x00d1
                           0000D2   847 G$OV$0$0 == 0x00d2
                           0000D2   848 _OV	=	0x00d2
                           0000D3   849 G$RS0$0$0 == 0x00d3
                           0000D3   850 _RS0	=	0x00d3
                           0000D4   851 G$RS1$0$0 == 0x00d4
                           0000D4   852 _RS1	=	0x00d4
                           0000D5   853 G$F0$0$0 == 0x00d5
                           0000D5   854 _F0	=	0x00d5
                           0000D6   855 G$AC$0$0 == 0x00d6
                           0000D6   856 _AC	=	0x00d6
                           0000D7   857 G$CY$0$0 == 0x00d7
                           0000D7   858 _CY	=	0x00d7
                           0000D8   859 G$CCF0$0$0 == 0x00d8
                           0000D8   860 _CCF0	=	0x00d8
                           0000D9   861 G$CCF1$0$0 == 0x00d9
                           0000D9   862 _CCF1	=	0x00d9
                           0000DA   863 G$CCF2$0$0 == 0x00da
                           0000DA   864 _CCF2	=	0x00da
                           0000DB   865 G$CCF3$0$0 == 0x00db
                           0000DB   866 _CCF3	=	0x00db
                           0000DC   867 G$CCF4$0$0 == 0x00dc
                           0000DC   868 _CCF4	=	0x00dc
                           0000DE   869 G$CR$0$0 == 0x00de
                           0000DE   870 _CR	=	0x00de
                           0000DF   871 G$CF$0$0 == 0x00df
                           0000DF   872 _CF	=	0x00df
                           0000E8   873 G$ADLJST$0$0 == 0x00e8
                           0000E8   874 _ADLJST	=	0x00e8
                           0000E8   875 G$AD0LJST$0$0 == 0x00e8
                           0000E8   876 _AD0LJST	=	0x00e8
                           0000E9   877 G$ADWINT$0$0 == 0x00e9
                           0000E9   878 _ADWINT	=	0x00e9
                           0000E9   879 G$AD0WINT$0$0 == 0x00e9
                           0000E9   880 _AD0WINT	=	0x00e9
                           0000EA   881 G$ADSTM0$0$0 == 0x00ea
                           0000EA   882 _ADSTM0	=	0x00ea
                           0000EA   883 G$AD0CM0$0$0 == 0x00ea
                           0000EA   884 _AD0CM0	=	0x00ea
                           0000EB   885 G$ADSTM1$0$0 == 0x00eb
                           0000EB   886 _ADSTM1	=	0x00eb
                           0000EB   887 G$AD0CM1$0$0 == 0x00eb
                           0000EB   888 _AD0CM1	=	0x00eb
                           0000EC   889 G$ADBUSY$0$0 == 0x00ec
                           0000EC   890 _ADBUSY	=	0x00ec
                           0000EC   891 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   892 _AD0BUSY	=	0x00ec
                           0000ED   893 G$ADCINT$0$0 == 0x00ed
                           0000ED   894 _ADCINT	=	0x00ed
                           0000ED   895 G$AD0INT$0$0 == 0x00ed
                           0000ED   896 _AD0INT	=	0x00ed
                           0000EE   897 G$ADCTM$0$0 == 0x00ee
                           0000EE   898 _ADCTM	=	0x00ee
                           0000EE   899 G$AD0TM$0$0 == 0x00ee
                           0000EE   900 _AD0TM	=	0x00ee
                           0000EF   901 G$ADCEN$0$0 == 0x00ef
                           0000EF   902 _ADCEN	=	0x00ef
                           0000EF   903 G$AD0EN$0$0 == 0x00ef
                           0000EF   904 _AD0EN	=	0x00ef
                           0000F8   905 G$SPIEN$0$0 == 0x00f8
                           0000F8   906 _SPIEN	=	0x00f8
                           0000F9   907 G$MSTEN$0$0 == 0x00f9
                           0000F9   908 _MSTEN	=	0x00f9
                           0000FA   909 G$SLVSEL$0$0 == 0x00fa
                           0000FA   910 _SLVSEL	=	0x00fa
                           0000FB   911 G$TXBSY$0$0 == 0x00fb
                           0000FB   912 _TXBSY	=	0x00fb
                           0000FC   913 G$RXOVRN$0$0 == 0x00fc
                           0000FC   914 _RXOVRN	=	0x00fc
                           0000FD   915 G$MODF$0$0 == 0x00fd
                           0000FD   916 _MODF	=	0x00fd
                           0000FE   917 G$WCOL$0$0 == 0x00fe
                           0000FE   918 _WCOL	=	0x00fe
                           0000FF   919 G$SPIF$0$0 == 0x00ff
                           0000FF   920 _SPIF	=	0x00ff
                           0000C7   921 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   922 _BUS_BUSY	=	0x00c7
                           0000C6   923 G$BUS_EN$0$0 == 0x00c6
                           0000C6   924 _BUS_EN	=	0x00c6
                           0000C5   925 G$BUS_START$0$0 == 0x00c5
                           0000C5   926 _BUS_START	=	0x00c5
                           0000C4   927 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   928 _BUS_STOP	=	0x00c4
                           0000C3   929 G$BUS_INT$0$0 == 0x00c3
                           0000C3   930 _BUS_INT	=	0x00c3
                           0000C2   931 G$BUS_AA$0$0 == 0x00c2
                           0000C2   932 _BUS_AA	=	0x00c2
                           0000C1   933 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   934 _BUS_FTE	=	0x00c1
                           0000C0   935 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   936 _BUS_TOE	=	0x00c0
                           000083   937 G$BUS_SCL$0$0 == 0x0083
                           000083   938 _BUS_SCL	=	0x0083
                                    939 ;--------------------------------------------------------
                                    940 ; overlayable register banks
                                    941 ;--------------------------------------------------------
                                    942 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        943 	.ds 8
                                    944 ;--------------------------------------------------------
                                    945 ; internal ram data
                                    946 ;--------------------------------------------------------
                                    947 	.area DSEG    (DATA)
                           000000   948 LLab6.lcd_clear$NumBytes$1$77==.
      000000                        949 _lcd_clear_NumBytes_1_77:
      000000                        950 	.ds 1
                           000001   951 LLab6.lcd_clear$Cmd$1$77==.
      000001                        952 _lcd_clear_Cmd_1_77:
      000001                        953 	.ds 2
                           000003   954 LLab6.read_keypad$Data$1$78==.
      000003                        955 _read_keypad_Data_1_78:
      000003                        956 	.ds 2
                           000005   957 LLab6.i2c_write_data$start_reg$1$97==.
      000005                        958 _i2c_write_data_PARM_2:
      000005                        959 	.ds 1
                           000006   960 LLab6.i2c_write_data$buffer$1$97==.
      000006                        961 _i2c_write_data_PARM_3:
      000006                        962 	.ds 3
                           000009   963 LLab6.i2c_write_data$num_bytes$1$97==.
      000009                        964 _i2c_write_data_PARM_4:
      000009                        965 	.ds 1
                           00000A   966 LLab6.i2c_read_data$start_reg$1$99==.
      00000A                        967 _i2c_read_data_PARM_2:
      00000A                        968 	.ds 1
                           00000B   969 LLab6.i2c_read_data$buffer$1$99==.
      00000B                        970 _i2c_read_data_PARM_3:
      00000B                        971 	.ds 3
                           00000E   972 LLab6.i2c_read_data$num_bytes$1$99==.
      00000E                        973 _i2c_read_data_PARM_4:
      00000E                        974 	.ds 1
                           00000F   975 LLab6.Accel_Init$Data2$1$103==.
      00000F                        976 _Accel_Init_Data2_1_103:
      00000F                        977 	.ds 1
                           000010   978 G$temp_motorpw$0$0==.
      000010                        979 _temp_motorpw::
      000010                        980 	.ds 4
                           000014   981 G$new_range$0$0==.
      000014                        982 _new_range::
      000014                        983 	.ds 1
                           000015   984 G$prev_error$0$0==.
      000015                        985 _prev_error::
      000015                        986 	.ds 2
                           000017   987 G$Error$0$0==.
      000017                        988 _Error::
      000017                        989 	.ds 2
                           000019   990 G$Counts$0$0==.
      000019                        991 _Counts::
      000019                        992 	.ds 2
                           00001B   993 G$nCounts$0$0==.
      00001B                        994 _nCounts::
      00001B                        995 	.ds 2
                           00001D   996 G$r_count$0$0==.
      00001D                        997 _r_count::
      00001D                        998 	.ds 1
                           00001E   999 G$a_count$0$0==.
      00001E                       1000 _a_count::
      00001E                       1001 	.ds 1
                           00001F  1002 G$adc_count$0$0==.
      00001F                       1003 _adc_count::
      00001F                       1004 	.ds 1
                           000020  1005 G$delay$0$0==.
      000020                       1006 _delay::
      000020                       1007 	.ds 1
                           000021  1008 G$DRIVE_PW$0$0==.
      000021                       1009 _DRIVE_PW::
      000021                       1010 	.ds 2
                           000023  1011 G$STEER_PW$0$0==.
      000023                       1012 _STEER_PW::
      000023                       1013 	.ds 2
                           000025  1014 G$Data$0$0==.
      000025                       1015 _Data::
      000025                       1016 	.ds 2
                           000027  1017 G$print_delay$0$0==.
      000027                       1018 _print_delay::
      000027                       1019 	.ds 1
                           000028  1020 G$steer_gain$0$0==.
      000028                       1021 _steer_gain::
      000028                       1022 	.ds 4
                           00002C  1023 G$drive_gain$0$0==.
      00002C                       1024 _drive_gain::
      00002C                       1025 	.ds 4
                           000030  1026 G$new_AD$0$0==.
      000030                       1027 _new_AD::
      000030                       1028 	.ds 1
                           000031  1029 G$AD_Result$0$0==.
      000031                       1030 _AD_Result::
      000031                       1031 	.ds 1
                           000032  1032 G$voltage$0$0==.
      000032                       1033 _voltage::
      000032                       1034 	.ds 1
                           000033  1035 G$desired_heading$0$0==.
      000033                       1036 _desired_heading::
      000033                       1037 	.ds 2
                           000035  1038 G$heading$0$0==.
      000035                       1039 _heading::
      000035                       1040 	.ds 2
                                   1041 ;--------------------------------------------------------
                                   1042 ; overlayable items in internal ram 
                                   1043 ;--------------------------------------------------------
                                   1044 	.area	OSEG    (OVR,DATA)
                                   1045 	.area	OSEG    (OVR,DATA)
                                   1046 	.area	OSEG    (OVR,DATA)
                                   1047 	.area	OSEG    (OVR,DATA)
                                   1048 	.area	OSEG    (OVR,DATA)
                                   1049 	.area	OSEG    (OVR,DATA)
                                   1050 	.area	OSEG    (OVR,DATA)
                                   1051 	.area	OSEG    (OVR,DATA)
                                   1052 ;--------------------------------------------------------
                                   1053 ; Stack segment in internal ram 
                                   1054 ;--------------------------------------------------------
                                   1055 	.area	SSEG
      000000                       1056 __start__stack:
      000000                       1057 	.ds	1
                                   1058 
                                   1059 ;--------------------------------------------------------
                                   1060 ; indirectly addressable internal ram data
                                   1061 ;--------------------------------------------------------
                                   1062 	.area ISEG    (DATA)
                                   1063 ;--------------------------------------------------------
                                   1064 ; absolute internal ram data
                                   1065 ;--------------------------------------------------------
                                   1066 	.area IABS    (ABS,DATA)
                                   1067 	.area IABS    (ABS,DATA)
                                   1068 ;--------------------------------------------------------
                                   1069 ; bit data
                                   1070 ;--------------------------------------------------------
                                   1071 	.area BSEG    (BIT)
                                   1072 ;--------------------------------------------------------
                                   1073 ; paged external ram data
                                   1074 ;--------------------------------------------------------
                                   1075 	.area PSEG    (PAG,XDATA)
                                   1076 ;--------------------------------------------------------
                                   1077 ; external ram data
                                   1078 ;--------------------------------------------------------
                                   1079 	.area XSEG    (XDATA)
                           000000  1080 LLab6.lcd_print$text$1$73==.
      000000                       1081 _lcd_print_text_1_73:
      000000                       1082 	.ds 80
                                   1083 ;--------------------------------------------------------
                                   1084 ; absolute external ram data
                                   1085 ;--------------------------------------------------------
                                   1086 	.area XABS    (ABS,XDATA)
                                   1087 ;--------------------------------------------------------
                                   1088 ; external initialized ram data
                                   1089 ;--------------------------------------------------------
                                   1090 	.area XISEG   (XDATA)
                                   1091 	.area HOME    (CODE)
                                   1092 	.area GSINIT0 (CODE)
                                   1093 	.area GSINIT1 (CODE)
                                   1094 	.area GSINIT2 (CODE)
                                   1095 	.area GSINIT3 (CODE)
                                   1096 	.area GSINIT4 (CODE)
                                   1097 	.area GSINIT5 (CODE)
                                   1098 	.area GSINIT  (CODE)
                                   1099 	.area GSFINAL (CODE)
                                   1100 	.area CSEG    (CODE)
                                   1101 ;--------------------------------------------------------
                                   1102 ; interrupt vector 
                                   1103 ;--------------------------------------------------------
                                   1104 	.area HOME    (CODE)
      000000                       1105 __interrupt_vect:
      000000 02r00r00         [24] 1106 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1107 	reti
      000004                       1108 	.ds	7
      00000B 32               [24] 1109 	reti
      00000C                       1110 	.ds	7
      000013 32               [24] 1111 	reti
      000014                       1112 	.ds	7
      00001B 32               [24] 1113 	reti
      00001C                       1114 	.ds	7
      000023 32               [24] 1115 	reti
      000024                       1116 	.ds	7
      00002B 32               [24] 1117 	reti
      00002C                       1118 	.ds	7
      000033 32               [24] 1119 	reti
      000034                       1120 	.ds	7
      00003B 32               [24] 1121 	reti
      00003C                       1122 	.ds	7
      000043 32               [24] 1123 	reti
      000044                       1124 	.ds	7
      00004B 02r05rF5         [24] 1125 	ljmp	_PCA_ISR
                                   1126 ;--------------------------------------------------------
                                   1127 ; global & static initialisations
                                   1128 ;--------------------------------------------------------
                                   1129 	.area HOME    (CODE)
                                   1130 	.area GSINIT  (CODE)
                                   1131 	.area GSFINAL (CODE)
                                   1132 	.area GSINIT  (CODE)
                                   1133 	.globl __sdcc_gsinit_startup
                                   1134 	.globl __sdcc_program_startup
                                   1135 	.globl __start__stack
                                   1136 	.globl __mcs51_genXINIT
                                   1137 	.globl __mcs51_genXRAMCLEAR
                                   1138 	.globl __mcs51_genRAMCLEAR
                           000000  1139 	C$Lab6.c$38$1$155 ==.
                                   1140 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:38: signed long temp_motorpw = 0;
      000000 E4               [12] 1141 	clr	a
      000001 F5*10            [12] 1142 	mov	_temp_motorpw,a
      000003 F5*11            [12] 1143 	mov	(_temp_motorpw + 1),a
      000005 F5*12            [12] 1144 	mov	(_temp_motorpw + 2),a
      000007 F5*13            [12] 1145 	mov	(_temp_motorpw + 3),a
                           000009  1146 	C$Lab6.c$39$1$155 ==.
                                   1147 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:39: unsigned char new_range = 0;
                                   1148 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000009 F5*14            [12] 1149 	mov	_new_range,a
                           00000B  1150 	C$Lab6.c$40$1$155 ==.
                                   1151 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:40: signed int prev_error = 0;
      00000B F5*15            [12] 1152 	mov	_prev_error,a
      00000D F5*16            [12] 1153 	mov	(_prev_error + 1),a
                           00000F  1154 	C$Lab6.c$41$1$155 ==.
                                   1155 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:41: signed int Error = 0;
      00000F F5*17            [12] 1156 	mov	_Error,a
      000011 F5*18            [12] 1157 	mov	(_Error + 1),a
                           000013  1158 	C$Lab6.c$43$1$155 ==.
                                   1159 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:43: unsigned char r_count = 0;
                                   1160 ;	1-genFromRTrack replaced	mov	_r_count,#0x00
      000013 F5*1D            [12] 1161 	mov	_r_count,a
                           000015  1162 	C$Lab6.c$44$1$155 ==.
                                   1163 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:44: unsigned char a_count = 0;
                                   1164 ;	1-genFromRTrack replaced	mov	_a_count,#0x00
      000015 F5*1E            [12] 1165 	mov	_a_count,a
                           000017  1166 	C$Lab6.c$45$1$155 ==.
                                   1167 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:45: unsigned char adc_count = 0;
                                   1168 ;	1-genFromRTrack replaced	mov	_adc_count,#0x00
      000017 F5*1F            [12] 1169 	mov	_adc_count,a
                           000019  1170 	C$Lab6.c$46$1$155 ==.
                                   1171 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:46: unsigned char delay = 0;
                                   1172 ;	1-genFromRTrack replaced	mov	_delay,#0x00
      000019 F5*20            [12] 1173 	mov	_delay,a
                           00001B  1174 	C$Lab6.c$47$1$155 ==.
                                   1175 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:47: unsigned int DRIVE_PW = 2760;
      00001B 75*21 C8         [24] 1176 	mov	_DRIVE_PW,#0xC8
      00001E 75*22 0A         [24] 1177 	mov	(_DRIVE_PW + 1),#0x0A
                           000021  1178 	C$Lab6.c$48$1$155 ==.
                                   1179 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:48: unsigned int STEER_PW = 2760;
      000021 75*23 C8         [24] 1180 	mov	_STEER_PW,#0xC8
      000024 75*24 0A         [24] 1181 	mov	(_STEER_PW + 1),#0x0A
                           000027  1182 	C$Lab6.c$50$1$155 ==.
                                   1183 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:50: unsigned char print_delay = 0;
                                   1184 ;	1-genFromRTrack replaced	mov	_print_delay,#0x00
      000027 F5*27            [12] 1185 	mov	_print_delay,a
                           000029  1186 	C$Lab6.c$51$1$155 ==.
                                   1187 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:51: float steer_gain = 0;
      000029 F5*28            [12] 1188 	mov	_steer_gain,a
      00002B F5*29            [12] 1189 	mov	(_steer_gain + 1),a
      00002D F5*2A            [12] 1190 	mov	(_steer_gain + 2),a
      00002F F5*2B            [12] 1191 	mov	(_steer_gain + 3),a
                           000031  1192 	C$Lab6.c$52$1$155 ==.
                                   1193 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:52: float drive_gain = 0;
      000031 F5*2C            [12] 1194 	mov	_drive_gain,a
      000033 F5*2D            [12] 1195 	mov	(_drive_gain + 1),a
      000035 F5*2E            [12] 1196 	mov	(_drive_gain + 2),a
      000037 F5*2F            [12] 1197 	mov	(_drive_gain + 3),a
                           000039  1198 	C$Lab6.c$53$1$155 ==.
                                   1199 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:53: unsigned char new_AD = 0;
                                   1200 ;	1-genFromRTrack replaced	mov	_new_AD,#0x00
      000039 F5*30            [12] 1201 	mov	_new_AD,a
                           00003B  1202 	C$Lab6.c$54$1$155 ==.
                                   1203 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:54: unsigned char AD_Result = 0;
                                   1204 ;	1-genFromRTrack replaced	mov	_AD_Result,#0x00
      00003B F5*31            [12] 1205 	mov	_AD_Result,a
                           00003D  1206 	C$Lab6.c$55$1$155 ==.
                                   1207 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:55: unsigned char voltage = 0;
                                   1208 ;	1-genFromRTrack replaced	mov	_voltage,#0x00
      00003D F5*32            [12] 1209 	mov	_voltage,a
                           00003F  1210 	C$Lab6.c$57$1$155 ==.
                                   1211 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:57: unsigned int heading = 0;
      00003F F5*35            [12] 1212 	mov	_heading,a
      000041 F5*36            [12] 1213 	mov	(_heading + 1),a
                                   1214 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1215 	ljmp	__sdcc_program_startup
                                   1216 ;--------------------------------------------------------
                                   1217 ; Home
                                   1218 ;--------------------------------------------------------
                                   1219 	.area HOME    (CODE)
                                   1220 	.area HOME    (CODE)
      00004E                       1221 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1222 	ljmp	_main
                                   1223 ;	return from main will return to caller
                                   1224 ;--------------------------------------------------------
                                   1225 ; code
                                   1226 ;--------------------------------------------------------
                                   1227 	.area CSEG    (CODE)
                                   1228 ;------------------------------------------------------------
                                   1229 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1230 ;------------------------------------------------------------
                                   1231 ;i                         Allocated to registers 
                                   1232 ;------------------------------------------------------------
                           000000  1233 	G$SYSCLK_Init$0$0 ==.
                           000000  1234 	C$c8051_SDCC.h$42$0$0 ==.
                                   1235 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1236 ;	-----------------------------------------
                                   1237 ;	 function SYSCLK_Init
                                   1238 ;	-----------------------------------------
      000000                       1239 _SYSCLK_Init:
                           000007  1240 	ar7 = 0x07
                           000006  1241 	ar6 = 0x06
                           000005  1242 	ar5 = 0x05
                           000004  1243 	ar4 = 0x04
                           000003  1244 	ar3 = 0x03
                           000002  1245 	ar2 = 0x02
                           000001  1246 	ar1 = 0x01
                           000000  1247 	ar0 = 0x00
                           000000  1248 	C$c8051_SDCC.h$46$1$31 ==.
                                   1249 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1250 	mov	_OSCXCN,#0x67
                           000003  1251 	C$c8051_SDCC.h$49$1$31 ==.
                                   1252 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1253 	mov	r6,#0x00
      000005 7F 01            [12] 1254 	mov	r7,#0x01
      000007                       1255 00107$:
      000007 1E               [12] 1256 	dec	r6
      000008 BE FF 01         [24] 1257 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1258 	dec	r7
      00000C                       1259 00121$:
      00000C EE               [12] 1260 	mov	a,r6
      00000D 4F               [12] 1261 	orl	a,r7
      00000E 70 F7            [24] 1262 	jnz	00107$
                           000010  1263 	C$c8051_SDCC.h$51$1$31 ==.
                                   1264 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1265 00102$:
      000010 E5 B1            [12] 1266 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1267 	jnb	acc.7,00102$
                           000015  1268 	C$c8051_SDCC.h$53$1$31 ==.
                                   1269 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1270 	mov	_OSCICN,#0x88
                           000018  1271 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1272 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1273 	ret
                                   1274 ;------------------------------------------------------------
                                   1275 ;Allocation info for local variables in function 'UART0_Init'
                                   1276 ;------------------------------------------------------------
                           000019  1277 	G$UART0_Init$0$0 ==.
                           000019  1278 	C$c8051_SDCC.h$64$1$31 ==.
                                   1279 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1280 ;	-----------------------------------------
                                   1281 ;	 function UART0_Init
                                   1282 ;	-----------------------------------------
      000019                       1283 _UART0_Init:
                           000019  1284 	C$c8051_SDCC.h$66$1$33 ==.
                                   1285 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1286 	mov	_SCON0,#0x50
                           00001C  1287 	C$c8051_SDCC.h$67$1$33 ==.
                                   1288 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1289 	mov	_TMOD,#0x20
                           00001F  1290 	C$c8051_SDCC.h$68$1$33 ==.
                                   1291 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1292 	mov	_TH1,#0xDC
                           000022  1293 	C$c8051_SDCC.h$69$1$33 ==.
                                   1294 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1295 	setb	_TR1
                           000024  1296 	C$c8051_SDCC.h$70$1$33 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1298 	orl	_CKCON,#0x10
                           000027  1299 	C$c8051_SDCC.h$71$1$33 ==.
                                   1300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1301 	orl	_PCON,#0x80
                           00002A  1302 	C$c8051_SDCC.h$73$1$33 ==.
                                   1303 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1304 	setb	_TI0
                           00002C  1305 	C$c8051_SDCC.h$74$1$33 ==.
                                   1306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1307 	orl	_P0MDOUT,#0x01
                           00002F  1308 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1309 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1310 	ret
                                   1311 ;------------------------------------------------------------
                                   1312 ;Allocation info for local variables in function 'Sys_Init'
                                   1313 ;------------------------------------------------------------
                           000030  1314 	G$Sys_Init$0$0 ==.
                           000030  1315 	C$c8051_SDCC.h$83$1$33 ==.
                                   1316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1317 ;	-----------------------------------------
                                   1318 ;	 function Sys_Init
                                   1319 ;	-----------------------------------------
      000030                       1320 _Sys_Init:
                           000030  1321 	C$c8051_SDCC.h$85$1$35 ==.
                                   1322 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1323 	mov	_WDTCN,#0xDE
                           000033  1324 	C$c8051_SDCC.h$86$1$35 ==.
                                   1325 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1326 	mov	_WDTCN,#0xAD
                           000036  1327 	C$c8051_SDCC.h$88$1$35 ==.
                                   1328 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1329 	lcall	_SYSCLK_Init
                           000039  1330 	C$c8051_SDCC.h$89$1$35 ==.
                                   1331 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1332 	lcall	_UART0_Init
                           00003C  1333 	C$c8051_SDCC.h$91$1$35 ==.
                                   1334 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1335 	orl	_XBR0,#0x04
                           00003F  1336 	C$c8051_SDCC.h$92$1$35 ==.
                                   1337 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1338 	orl	_XBR2,#0x40
                           000042  1339 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1340 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1341 	ret
                                   1342 ;------------------------------------------------------------
                                   1343 ;Allocation info for local variables in function 'putchar'
                                   1344 ;------------------------------------------------------------
                                   1345 ;c                         Allocated to registers r7 
                                   1346 ;------------------------------------------------------------
                           000043  1347 	G$putchar$0$0 ==.
                           000043  1348 	C$c8051_SDCC.h$98$1$35 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1350 ;	-----------------------------------------
                                   1351 ;	 function putchar
                                   1352 ;	-----------------------------------------
      000043                       1353 _putchar:
      000043 AF 82            [24] 1354 	mov	r7,dpl
                           000045  1355 	C$c8051_SDCC.h$100$1$37 ==.
                                   1356 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1357 00101$:
                           000045  1358 	C$c8051_SDCC.h$101$1$37 ==.
                                   1359 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1360 	jbc	_TI0,00112$
      000048 80 FB            [24] 1361 	sjmp	00101$
      00004A                       1362 00112$:
                           00004A  1363 	C$c8051_SDCC.h$102$1$37 ==.
                                   1364 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1365 	mov	_SBUF0,r7
                           00004C  1366 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1367 	XG$putchar$0$0 ==.
      00004C 22               [24] 1368 	ret
                                   1369 ;------------------------------------------------------------
                                   1370 ;Allocation info for local variables in function 'getchar'
                                   1371 ;------------------------------------------------------------
                                   1372 ;c                         Allocated to registers 
                                   1373 ;------------------------------------------------------------
                           00004D  1374 	G$getchar$0$0 ==.
                           00004D  1375 	C$c8051_SDCC.h$108$1$37 ==.
                                   1376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1377 ;	-----------------------------------------
                                   1378 ;	 function getchar
                                   1379 ;	-----------------------------------------
      00004D                       1380 _getchar:
                           00004D  1381 	C$c8051_SDCC.h$111$1$39 ==.
                                   1382 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1383 00101$:
                           00004D  1384 	C$c8051_SDCC.h$112$1$39 ==.
                                   1385 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1386 	jbc	_RI0,00112$
      000050 80 FB            [24] 1387 	sjmp	00101$
      000052                       1388 00112$:
                           000052  1389 	C$c8051_SDCC.h$113$1$39 ==.
                                   1390 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1391 	mov	dpl,_SBUF0
                           000055  1392 	C$c8051_SDCC.h$114$1$39 ==.
                                   1393 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1394 	lcall	_putchar
                           000058  1395 	C$c8051_SDCC.h$115$1$39 ==.
                                   1396 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1397 	mov	dpl,_SBUF0
                           00005B  1398 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1399 	XG$getchar$0$0 ==.
      00005B 22               [24] 1400 	ret
                                   1401 ;------------------------------------------------------------
                                   1402 ;Allocation info for local variables in function 'lcd_print'
                                   1403 ;------------------------------------------------------------
                                   1404 ;fmt                       Allocated to stack - _bp -5
                                   1405 ;len                       Allocated to registers r6 
                                   1406 ;i                         Allocated to registers 
                                   1407 ;ap                        Allocated to registers 
                                   1408 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1409 ;------------------------------------------------------------
                           00005C  1410 	G$lcd_print$0$0 ==.
                           00005C  1411 	C$i2c.h$81$1$39 ==.
                                   1412 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1413 ;	-----------------------------------------
                                   1414 ;	 function lcd_print
                                   1415 ;	-----------------------------------------
      00005C                       1416 _lcd_print:
      00005C C0*00            [24] 1417 	push	_bp
      00005E 85 81*00         [24] 1418 	mov	_bp,sp
                           000061  1419 	C$i2c.h$87$1$73 ==.
                                   1420 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1421 	mov	a,_bp
      000063 24 FB            [12] 1422 	add	a,#0xfb
      000065 F8               [12] 1423 	mov	r0,a
      000066 86 82            [24] 1424 	mov	dpl,@r0
      000068 08               [12] 1425 	inc	r0
      000069 86 83            [24] 1426 	mov	dph,@r0
      00006B 08               [12] 1427 	inc	r0
      00006C 86 F0            [24] 1428 	mov	b,@r0
      00006E 12r00r00         [24] 1429 	lcall	_strlen
      000071 E5 82            [12] 1430 	mov	a,dpl
      000073 85 83 F0         [24] 1431 	mov	b,dph
      000076 45 F0            [12] 1432 	orl	a,b
      000078 70 02            [24] 1433 	jnz	00102$
      00007A 80 62            [24] 1434 	sjmp	00109$
      00007C                       1435 00102$:
                           00007C  1436 	C$i2c.h$89$2$74 ==.
                                   1437 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1438 	mov	a,_bp
      00007E 24 FB            [12] 1439 	add	a,#0xFB
      000080 FF               [12] 1440 	mov	r7,a
      000081 8F*00            [24] 1441 	mov	_vsprintf_PARM_3,r7
                           000083  1442 	C$i2c.h$90$1$73 ==.
                                   1443 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1444 	mov	a,_bp
      000085 24 FB            [12] 1445 	add	a,#0xfb
      000087 F8               [12] 1446 	mov	r0,a
      000088 86*00            [24] 1447 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1448 	inc	r0
      00008B 86*01            [24] 1449 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1450 	inc	r0
      00008E 86*02            [24] 1451 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1452 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1453 	mov	b,#0x00
      000096 12r00r00         [24] 1454 	lcall	_vsprintf
                           000099  1455 	C$i2c.h$93$1$73 ==.
                                   1456 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1457 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1458 	mov	b,#0x00
      00009F 12r00r00         [24] 1459 	lcall	_strlen
      0000A2 AE 82            [24] 1460 	mov	r6,dpl
                           0000A4  1461 	C$i2c.h$94$1$73 ==.
                                   1462 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1463 	mov	r7,#0x00
      0000A6                       1464 00107$:
      0000A6 C3               [12] 1465 	clr	c
      0000A7 EF               [12] 1466 	mov	a,r7
      0000A8 9E               [12] 1467 	subb	a,r6
      0000A9 50 1F            [24] 1468 	jnc	00105$
                           0000AB  1469 	C$i2c.h$96$2$76 ==.
                                   1470 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1471 	mov	a,r7
      0000AC 24r00            [12] 1472 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1473 	mov	dpl,a
      0000B0 E4               [12] 1474 	clr	a
      0000B1 34s00            [12] 1475 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1476 	mov	dph,a
      0000B5 E0               [24] 1477 	movx	a,@dptr
      0000B6 FD               [12] 1478 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1479 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1480 	mov	a,r7
      0000BB 24r00            [12] 1481 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1482 	mov	dpl,a
      0000BF E4               [12] 1483 	clr	a
      0000C0 34s00            [12] 1484 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1485 	mov	dph,a
      0000C4 74 0D            [12] 1486 	mov	a,#0x0D
      0000C6 F0               [24] 1487 	movx	@dptr,a
      0000C7                       1488 00108$:
                           0000C7  1489 	C$i2c.h$94$1$73 ==.
                                   1490 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1491 	inc	r7
      0000C8 80 DC            [24] 1492 	sjmp	00107$
      0000CA                       1493 00105$:
                           0000CA  1494 	C$i2c.h$99$1$73 ==.
                                   1495 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1496 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1497 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1498 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1499 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1500 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1501 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1502 	lcall	_i2c_write_data
      0000DE                       1503 00109$:
      0000DE D0*00            [24] 1504 	pop	_bp
                           0000E0  1505 	C$i2c.h$100$1$73 ==.
                           0000E0  1506 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1507 	ret
                                   1508 ;------------------------------------------------------------
                                   1509 ;Allocation info for local variables in function 'lcd_clear'
                                   1510 ;------------------------------------------------------------
                                   1511 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1512 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1513 ;------------------------------------------------------------
                           0000E1  1514 	G$lcd_clear$0$0 ==.
                           0000E1  1515 	C$i2c.h$103$1$73 ==.
                                   1516 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1517 ;	-----------------------------------------
                                   1518 ;	 function lcd_clear
                                   1519 ;	-----------------------------------------
      0000E1                       1520 _lcd_clear:
                           0000E1  1521 	C$i2c.h$105$1$73 ==.
                                   1522 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1523 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1524 	C$i2c.h$107$1$77 ==.
                                   1525 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1526 00101$:
      0000E4 74 C0            [12] 1527 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1528 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1529 	jc	00103$
      0000EA 75*0Br00         [24] 1530 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1531 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1532 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1533 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1534 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1535 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1536 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1537 	sjmp	00101$
      000101                       1538 00103$:
                           000101  1539 	C$i2c.h$109$1$77 ==.
                                   1540 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1541 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1542 	C$i2c.h$110$1$77 ==.
                                   1543 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1544 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1545 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1546 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1547 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1548 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1549 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1550 	lcall	_i2c_write_data
                           000119  1551 	C$i2c.h$111$1$77 ==.
                           000119  1552 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1553 	ret
                                   1554 ;------------------------------------------------------------
                                   1555 ;Allocation info for local variables in function 'read_keypad'
                                   1556 ;------------------------------------------------------------
                                   1557 ;i                         Allocated to registers r7 
                                   1558 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1559 ;------------------------------------------------------------
                           00011A  1560 	G$read_keypad$0$0 ==.
                           00011A  1561 	C$i2c.h$114$1$77 ==.
                                   1562 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1563 ;	-----------------------------------------
                                   1564 ;	 function read_keypad
                                   1565 ;	-----------------------------------------
      00011A                       1566 _read_keypad:
                           00011A  1567 	C$i2c.h$118$1$78 ==.
                                   1568 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1569 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1570 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1571 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1572 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1573 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1574 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1575 	lcall	_i2c_read_data
                           00012F  1576 	C$i2c.h$119$1$78 ==.
                                   1577 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1578 	mov	a,#0xFF
      000131 B5*03 05         [24] 1579 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1580 	mov	dpl,#0x00
      000137 80 5F            [24] 1581 	sjmp	00116$
      000139                       1582 00102$:
                           000139  1583 	C$i2c.h$121$1$78 ==.
                                   1584 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1585 	mov	r7,#0x00
      00013B 8F 06            [24] 1586 	mov	ar6,r7
      00013D                       1587 00114$:
                           00013D  1588 	C$i2c.h$123$2$79 ==.
                                   1589 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1590 	mov	b,r6
      00013F 05 F0            [12] 1591 	inc	b
      000141 7C 01            [12] 1592 	mov	r4,#0x01
      000143 7D 00            [12] 1593 	mov	r5,#0x00
      000145 80 06            [24] 1594 	sjmp	00145$
      000147                       1595 00144$:
      000147 EC               [12] 1596 	mov	a,r4
      000148 2C               [12] 1597 	add	a,r4
      000149 FC               [12] 1598 	mov	r4,a
      00014A ED               [12] 1599 	mov	a,r5
      00014B 33               [12] 1600 	rlc	a
      00014C FD               [12] 1601 	mov	r5,a
      00014D                       1602 00145$:
      00014D D5 F0 F7         [24] 1603 	djnz	b,00144$
      000150 AA*03            [24] 1604 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1605 	mov	r3,#0x00
      000154 EA               [12] 1606 	mov	a,r2
      000155 52 04            [12] 1607 	anl	ar4,a
      000157 EB               [12] 1608 	mov	a,r3
      000158 52 05            [12] 1609 	anl	ar5,a
      00015A EC               [12] 1610 	mov	a,r4
      00015B 4D               [12] 1611 	orl	a,r5
      00015C 60 07            [24] 1612 	jz	00115$
                           00015E  1613 	C$i2c.h$124$2$79 ==.
                                   1614 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1615 	mov	a,#0x31
      000160 2F               [12] 1616 	add	a,r7
      000161 F5 82            [12] 1617 	mov	dpl,a
      000163 80 33            [24] 1618 	sjmp	00116$
      000165                       1619 00115$:
                           000165  1620 	C$i2c.h$121$1$78 ==.
                                   1621 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1622 	inc	r6
      000166 8E 07            [24] 1623 	mov	ar7,r6
      000168 BE 08 00         [24] 1624 	cjne	r6,#0x08,00147$
      00016B                       1625 00147$:
      00016B 40 D0            [24] 1626 	jc	00114$
                           00016D  1627 	C$i2c.h$127$1$78 ==.
                                   1628 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1629 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1630 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1631 	mov	dpl,#0x39
      000175 80 21            [24] 1632 	sjmp	00116$
      000177                       1633 00107$:
                           000177  1634 	C$i2c.h$129$1$78 ==.
                                   1635 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1636 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1637 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1638 	mov	dpl,#0x2A
      00017F 80 17            [24] 1639 	sjmp	00116$
      000181                       1640 00109$:
                           000181  1641 	C$i2c.h$131$1$78 ==.
                                   1642 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1643 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1644 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1645 	mov	dpl,#0x30
      000189 80 0D            [24] 1646 	sjmp	00116$
      00018B                       1647 00111$:
                           00018B  1648 	C$i2c.h$133$1$78 ==.
                                   1649 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1650 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1651 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1652 	mov	dpl,#0x23
      000193 80 03            [24] 1653 	sjmp	00116$
      000195                       1654 00113$:
                           000195  1655 	C$i2c.h$135$1$78 ==.
                                   1656 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1657 	mov	dpl,#0xFF
      000198                       1658 00116$:
                           000198  1659 	C$i2c.h$136$1$78 ==.
                           000198  1660 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1661 	ret
                                   1662 ;------------------------------------------------------------
                                   1663 ;Allocation info for local variables in function 'kpd_input'
                                   1664 ;------------------------------------------------------------
                                   1665 ;mode                      Allocated to registers r7 
                                   1666 ;sum                       Allocated to registers r5 r6 
                                   1667 ;key                       Allocated to registers r3 
                                   1668 ;i                         Allocated to registers 
                                   1669 ;------------------------------------------------------------
                           000199  1670 	G$kpd_input$0$0 ==.
                           000199  1671 	C$i2c.h$148$1$78 ==.
                                   1672 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1673 ;	-----------------------------------------
                                   1674 ;	 function kpd_input
                                   1675 ;	-----------------------------------------
      000199                       1676 _kpd_input:
      000199 AF 82            [24] 1677 	mov	r7,dpl
                           00019B  1678 	C$i2c.h$153$1$81 ==.
                                   1679 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1680 	C$i2c.h$156$1$81 ==.
                                   1681 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1682 	clr	a
      00019C FD               [12] 1683 	mov	r5,a
      00019D FE               [12] 1684 	mov	r6,a
      00019E EF               [12] 1685 	mov	a,r7
      00019F 70 1D            [24] 1686 	jnz	00102$
      0001A1 C0 06            [24] 1687 	push	ar6
      0001A3 C0 05            [24] 1688 	push	ar5
      0001A5 74r00            [12] 1689 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1690 	push	acc
      0001A9 74s00            [12] 1691 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1692 	push	acc
      0001AD 74 80            [12] 1693 	mov	a,#0x80
      0001AF C0 E0            [24] 1694 	push	acc
      0001B1 12r00r5C         [24] 1695 	lcall	_lcd_print
      0001B4 15 81            [12] 1696 	dec	sp
      0001B6 15 81            [12] 1697 	dec	sp
      0001B8 15 81            [12] 1698 	dec	sp
      0001BA D0 05            [24] 1699 	pop	ar5
      0001BC D0 06            [24] 1700 	pop	ar6
      0001BE                       1701 00102$:
                           0001BE  1702 	C$i2c.h$158$1$81 ==.
                                   1703 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1704 	push	ar6
      0001C0 C0 05            [24] 1705 	push	ar5
      0001C2 74 08            [12] 1706 	mov	a,#0x08
      0001C4 C0 E0            [24] 1707 	push	acc
      0001C6 E4               [12] 1708 	clr	a
      0001C7 C0 E0            [24] 1709 	push	acc
      0001C9 74 08            [12] 1710 	mov	a,#0x08
      0001CB C0 E0            [24] 1711 	push	acc
      0001CD E4               [12] 1712 	clr	a
      0001CE C0 E0            [24] 1713 	push	acc
      0001D0 74 08            [12] 1714 	mov	a,#0x08
      0001D2 C0 E0            [24] 1715 	push	acc
      0001D4 E4               [12] 1716 	clr	a
      0001D5 C0 E0            [24] 1717 	push	acc
      0001D7 74 08            [12] 1718 	mov	a,#0x08
      0001D9 C0 E0            [24] 1719 	push	acc
      0001DB E4               [12] 1720 	clr	a
      0001DC C0 E0            [24] 1721 	push	acc
      0001DE 74 08            [12] 1722 	mov	a,#0x08
      0001E0 C0 E0            [24] 1723 	push	acc
      0001E2 E4               [12] 1724 	clr	a
      0001E3 C0 E0            [24] 1725 	push	acc
      0001E5 74r16            [12] 1726 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1727 	push	acc
      0001E9 74s00            [12] 1728 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1729 	push	acc
      0001ED 74 80            [12] 1730 	mov	a,#0x80
      0001EF C0 E0            [24] 1731 	push	acc
      0001F1 12r00r5C         [24] 1732 	lcall	_lcd_print
      0001F4 E5 81            [12] 1733 	mov	a,sp
      0001F6 24 F3            [12] 1734 	add	a,#0xf3
      0001F8 F5 81            [12] 1735 	mov	sp,a
                           0001FA  1736 	C$i2c.h$160$1$81 ==.
                                   1737 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1738 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1739 	mov	b,#0x07
      000200 E4               [12] 1740 	clr	a
      000201 12r03r0D         [24] 1741 	lcall	_delay_time
      000204 D0 05            [24] 1742 	pop	ar5
      000206 D0 06            [24] 1743 	pop	ar6
                           000208  1744 	C$i2c.h$164$1$81 ==.
                                   1745 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1746 	mov	r7,#0x00
                           00020A  1747 	C$i2c.h$166$3$84 ==.
                                   1748 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1749 00104$:
      00020A C0 07            [24] 1750 	push	ar7
      00020C C0 06            [24] 1751 	push	ar6
      00020E C0 05            [24] 1752 	push	ar5
      000210 12r01r1A         [24] 1753 	lcall	_read_keypad
      000213 AC 82            [24] 1754 	mov	r4,dpl
      000215 D0 05            [24] 1755 	pop	ar5
      000217 D0 06            [24] 1756 	pop	ar6
      000219 D0 07            [24] 1757 	pop	ar7
      00021B 8C 03            [24] 1758 	mov	ar3,r4
      00021D BC FF 02         [24] 1759 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1760 	sjmp	00105$
      000222                       1761 00146$:
      000222 BB 2A 17         [24] 1762 	cjne	r3,#0x2A,00106$
      000225                       1763 00105$:
      000225 90 27 10         [24] 1764 	mov	dptr,#0x2710
      000228 E4               [12] 1765 	clr	a
      000229 F5 F0            [12] 1766 	mov	b,a
      00022B C0 07            [24] 1767 	push	ar7
      00022D C0 06            [24] 1768 	push	ar6
      00022F C0 05            [24] 1769 	push	ar5
      000231 12r03r0D         [24] 1770 	lcall	_delay_time
      000234 D0 05            [24] 1771 	pop	ar5
      000236 D0 06            [24] 1772 	pop	ar6
      000238 D0 07            [24] 1773 	pop	ar7
      00023A 80 CE            [24] 1774 	sjmp	00104$
      00023C                       1775 00106$:
                           00023C  1776 	C$i2c.h$167$2$82 ==.
                                   1777 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1778 	cjne	r3,#0x23,00114$
                           00023F  1779 	C$i2c.h$169$3$83 ==.
                                   1780 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1781 00107$:
      00023F C0 06            [24] 1782 	push	ar6
      000241 C0 05            [24] 1783 	push	ar5
      000243 12r01r1A         [24] 1784 	lcall	_read_keypad
      000246 AC 82            [24] 1785 	mov	r4,dpl
      000248 D0 05            [24] 1786 	pop	ar5
      00024A D0 06            [24] 1787 	pop	ar6
      00024C BC 23 13         [24] 1788 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1789 	mov	dptr,#0x2710
      000252 E4               [12] 1790 	clr	a
      000253 F5 F0            [12] 1791 	mov	b,a
      000255 C0 06            [24] 1792 	push	ar6
      000257 C0 05            [24] 1793 	push	ar5
      000259 12r03r0D         [24] 1794 	lcall	_delay_time
      00025C D0 05            [24] 1795 	pop	ar5
      00025E D0 06            [24] 1796 	pop	ar6
      000260 80 DD            [24] 1797 	sjmp	00107$
      000262                       1798 00109$:
                           000262  1799 	C$i2c.h$170$3$83 ==.
                                   1800 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1801 	mov	dpl,r5
      000264 8E 83            [24] 1802 	mov	dph,r6
      000266 02r03r0C         [24] 1803 	ljmp	00119$
      000269                       1804 00114$:
                           000269  1805 	C$i2c.h$174$3$84 ==.
                                   1806 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1807 	mov	a,r3
      00026A FA               [12] 1808 	mov	r2,a
      00026B 33               [12] 1809 	rlc	a
      00026C 95 E0            [12] 1810 	subb	a,acc
      00026E FC               [12] 1811 	mov	r4,a
      00026F C0 07            [24] 1812 	push	ar7
      000271 C0 06            [24] 1813 	push	ar6
      000273 C0 05            [24] 1814 	push	ar5
      000275 C0 04            [24] 1815 	push	ar4
      000277 C0 03            [24] 1816 	push	ar3
      000279 C0 02            [24] 1817 	push	ar2
      00027B C0 02            [24] 1818 	push	ar2
      00027D C0 04            [24] 1819 	push	ar4
      00027F 74r26            [12] 1820 	mov	a,#___str_2
      000281 C0 E0            [24] 1821 	push	acc
      000283 74s00            [12] 1822 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1823 	push	acc
      000287 74 80            [12] 1824 	mov	a,#0x80
      000289 C0 E0            [24] 1825 	push	acc
      00028B 12r00r5C         [24] 1826 	lcall	_lcd_print
      00028E E5 81            [12] 1827 	mov	a,sp
      000290 24 FB            [12] 1828 	add	a,#0xfb
      000292 F5 81            [12] 1829 	mov	sp,a
      000294 D0 02            [24] 1830 	pop	ar2
      000296 D0 03            [24] 1831 	pop	ar3
      000298 D0 04            [24] 1832 	pop	ar4
      00029A D0 05            [24] 1833 	pop	ar5
      00029C D0 06            [24] 1834 	pop	ar6
                           00029E  1835 	C$i2c.h$175$1$81 ==.
                                   1836 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1837 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1838 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1839 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1840 	push	ar4
      0002A7 C0 03            [24] 1841 	push	ar3
      0002A9 C0 02            [24] 1842 	push	ar2
      0002AB 12r00r00         [24] 1843 	lcall	__mulint
      0002AE A8 82            [24] 1844 	mov	r0,dpl
      0002B0 A9 83            [24] 1845 	mov	r1,dph
      0002B2 D0 02            [24] 1846 	pop	ar2
      0002B4 D0 03            [24] 1847 	pop	ar3
      0002B6 D0 04            [24] 1848 	pop	ar4
      0002B8 D0 07            [24] 1849 	pop	ar7
      0002BA EA               [12] 1850 	mov	a,r2
      0002BB 28               [12] 1851 	add	a,r0
      0002BC F8               [12] 1852 	mov	r0,a
      0002BD EC               [12] 1853 	mov	a,r4
      0002BE 39               [12] 1854 	addc	a,r1
      0002BF F9               [12] 1855 	mov	r1,a
      0002C0 E8               [12] 1856 	mov	a,r0
      0002C1 24 D0            [12] 1857 	add	a,#0xD0
      0002C3 FD               [12] 1858 	mov	r5,a
      0002C4 E9               [12] 1859 	mov	a,r1
      0002C5 34 FF            [12] 1860 	addc	a,#0xFF
      0002C7 FE               [12] 1861 	mov	r6,a
                           0002C8  1862 	C$i2c.h$176$3$84 ==.
                                   1863 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1864 00110$:
      0002C8 C0 07            [24] 1865 	push	ar7
      0002CA C0 06            [24] 1866 	push	ar6
      0002CC C0 05            [24] 1867 	push	ar5
      0002CE C0 03            [24] 1868 	push	ar3
      0002D0 12r01r1A         [24] 1869 	lcall	_read_keypad
      0002D3 AC 82            [24] 1870 	mov	r4,dpl
      0002D5 D0 03            [24] 1871 	pop	ar3
      0002D7 D0 05            [24] 1872 	pop	ar5
      0002D9 D0 06            [24] 1873 	pop	ar6
      0002DB D0 07            [24] 1874 	pop	ar7
      0002DD EC               [12] 1875 	mov	a,r4
      0002DE B5 03 1B         [24] 1876 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1877 	mov	dptr,#0x2710
      0002E4 E4               [12] 1878 	clr	a
      0002E5 F5 F0            [12] 1879 	mov	b,a
      0002E7 C0 07            [24] 1880 	push	ar7
      0002E9 C0 06            [24] 1881 	push	ar6
      0002EB C0 05            [24] 1882 	push	ar5
      0002ED C0 03            [24] 1883 	push	ar3
      0002EF 12r03r0D         [24] 1884 	lcall	_delay_time
      0002F2 D0 03            [24] 1885 	pop	ar3
      0002F4 D0 05            [24] 1886 	pop	ar5
      0002F6 D0 06            [24] 1887 	pop	ar6
      0002F8 D0 07            [24] 1888 	pop	ar7
      0002FA 80 CC            [24] 1889 	sjmp	00110$
      0002FC                       1890 00118$:
                           0002FC  1891 	C$i2c.h$164$1$81 ==.
                                   1892 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1893 	inc	r7
      0002FD C3               [12] 1894 	clr	c
      0002FE EF               [12] 1895 	mov	a,r7
      0002FF 64 80            [12] 1896 	xrl	a,#0x80
      000301 94 85            [12] 1897 	subb	a,#0x85
      000303 50 03            [24] 1898 	jnc	00155$
      000305 02r02r0A         [24] 1899 	ljmp	00104$
      000308                       1900 00155$:
                           000308  1901 	C$i2c.h$179$1$81 ==.
                                   1902 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1903 	mov	dpl,r5
      00030A 8E 83            [24] 1904 	mov	dph,r6
      00030C                       1905 00119$:
                           00030C  1906 	C$i2c.h$180$1$81 ==.
                           00030C  1907 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1908 	ret
                                   1909 ;------------------------------------------------------------
                                   1910 ;Allocation info for local variables in function 'delay_time'
                                   1911 ;------------------------------------------------------------
                                   1912 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1913 ;index                     Allocated to registers 
                                   1914 ;------------------------------------------------------------
                           00030D  1915 	G$delay_time$0$0 ==.
                           00030D  1916 	C$i2c.h$189$1$81 ==.
                                   1917 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1918 ;	-----------------------------------------
                                   1919 ;	 function delay_time
                                   1920 ;	-----------------------------------------
      00030D                       1921 _delay_time:
      00030D AC 82            [24] 1922 	mov	r4,dpl
      00030F AD 83            [24] 1923 	mov	r5,dph
      000311 AE F0            [24] 1924 	mov	r6,b
      000313 FF               [12] 1925 	mov	r7,a
                           000314  1926 	C$i2c.h$192$1$86 ==.
                                   1927 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1928 	mov	r0,#0x00
      000316 79 00            [12] 1929 	mov	r1,#0x00
      000318 7A 00            [12] 1930 	mov	r2,#0x00
      00031A 7B 00            [12] 1931 	mov	r3,#0x00
      00031C                       1932 00103$:
      00031C C3               [12] 1933 	clr	c
      00031D E8               [12] 1934 	mov	a,r0
      00031E 9C               [12] 1935 	subb	a,r4
      00031F E9               [12] 1936 	mov	a,r1
      000320 9D               [12] 1937 	subb	a,r5
      000321 EA               [12] 1938 	mov	a,r2
      000322 9E               [12] 1939 	subb	a,r6
      000323 EB               [12] 1940 	mov	a,r3
      000324 9F               [12] 1941 	subb	a,r7
      000325 50 0F            [24] 1942 	jnc	00105$
      000327 08               [12] 1943 	inc	r0
      000328 B8 00 09         [24] 1944 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1945 	inc	r1
      00032C B9 00 05         [24] 1946 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1947 	inc	r2
      000330 BA 00 E9         [24] 1948 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1949 	inc	r3
      000334                       1950 00115$:
      000334 80 E6            [24] 1951 	sjmp	00103$
      000336                       1952 00105$:
                           000336  1953 	C$i2c.h$193$1$86 ==.
                           000336  1954 	XG$delay_time$0$0 ==.
      000336 22               [24] 1955 	ret
                                   1956 ;------------------------------------------------------------
                                   1957 ;Allocation info for local variables in function 'i2c_start'
                                   1958 ;------------------------------------------------------------
                           000337  1959 	G$i2c_start$0$0 ==.
                           000337  1960 	C$i2c.h$196$1$86 ==.
                                   1961 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1962 ;	-----------------------------------------
                                   1963 ;	 function i2c_start
                                   1964 ;	-----------------------------------------
      000337                       1965 _i2c_start:
                           000337  1966 	C$i2c.h$198$1$88 ==.
                                   1967 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1968 00101$:
      000337 20 C7 FD         [24] 1969 	jb	_BUSY,00101$
                           00033A  1970 	C$i2c.h$199$1$88 ==.
                                   1971 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1972 	setb	_STA
                           00033C  1973 	C$i2c.h$200$1$88 ==.
                                   1974 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1975 00104$:
      00033C 30 C3 FD         [24] 1976 	jnb	_SI,00104$
                           00033F  1977 	C$i2c.h$201$1$88 ==.
                                   1978 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1979 	clr	_STA
                           000341  1980 	C$i2c.h$202$1$88 ==.
                                   1981 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 1982 	clr	_SI
                           000343  1983 	C$i2c.h$203$1$88 ==.
                           000343  1984 	XG$i2c_start$0$0 ==.
      000343 22               [24] 1985 	ret
                                   1986 ;------------------------------------------------------------
                                   1987 ;Allocation info for local variables in function 'i2c_write'
                                   1988 ;------------------------------------------------------------
                                   1989 ;output_data               Allocated to registers 
                                   1990 ;------------------------------------------------------------
                           000344  1991 	G$i2c_write$0$0 ==.
                           000344  1992 	C$i2c.h$206$1$88 ==.
                                   1993 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   1994 ;	-----------------------------------------
                                   1995 ;	 function i2c_write
                                   1996 ;	-----------------------------------------
      000344                       1997 _i2c_write:
      000344 85 82 C2         [24] 1998 	mov	_SMB0DAT,dpl
                           000347  1999 	C$i2c.h$209$1$90 ==.
                                   2000 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2001 00101$:
                           000347  2002 	C$i2c.h$210$1$90 ==.
                                   2003 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2004 	jbc	_SI,00112$
      00034A 80 FB            [24] 2005 	sjmp	00101$
      00034C                       2006 00112$:
                           00034C  2007 	C$i2c.h$211$1$90 ==.
                           00034C  2008 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2009 	ret
                                   2010 ;------------------------------------------------------------
                                   2011 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2012 ;------------------------------------------------------------
                                   2013 ;output_data               Allocated to registers 
                                   2014 ;------------------------------------------------------------
                           00034D  2015 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2016 	C$i2c.h$214$1$90 ==.
                                   2017 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2018 ;	-----------------------------------------
                                   2019 ;	 function i2c_write_and_stop
                                   2020 ;	-----------------------------------------
      00034D                       2021 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2022 	mov	_SMB0DAT,dpl
                           000350  2023 	C$i2c.h$217$1$92 ==.
                                   2024 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2025 	setb	_STO
                           000352  2026 	C$i2c.h$218$1$92 ==.
                                   2027 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2028 00101$:
                           000352  2029 	C$i2c.h$219$1$92 ==.
                                   2030 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2031 	jbc	_SI,00112$
      000355 80 FB            [24] 2032 	sjmp	00101$
      000357                       2033 00112$:
                           000357  2034 	C$i2c.h$220$1$92 ==.
                           000357  2035 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2036 	ret
                                   2037 ;------------------------------------------------------------
                                   2038 ;Allocation info for local variables in function 'i2c_read'
                                   2039 ;------------------------------------------------------------
                                   2040 ;input_data                Allocated to registers 
                                   2041 ;------------------------------------------------------------
                           000358  2042 	G$i2c_read$0$0 ==.
                           000358  2043 	C$i2c.h$223$1$92 ==.
                                   2044 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2045 ;	-----------------------------------------
                                   2046 ;	 function i2c_read
                                   2047 ;	-----------------------------------------
      000358                       2048 _i2c_read:
                           000358  2049 	C$i2c.h$226$1$94 ==.
                                   2050 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2051 00101$:
      000358 30 C3 FD         [24] 2052 	jnb	_SI,00101$
                           00035B  2053 	C$i2c.h$227$1$94 ==.
                                   2054 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2055 	mov	dpl,_SMB0DAT
                           00035E  2056 	C$i2c.h$228$1$94 ==.
                                   2057 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2058 	clr	_SI
                           000360  2059 	C$i2c.h$229$1$94 ==.
                                   2060 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2061 	C$i2c.h$230$1$94 ==.
                           000360  2062 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2063 	ret
                                   2064 ;------------------------------------------------------------
                                   2065 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2066 ;------------------------------------------------------------
                                   2067 ;input_data                Allocated to registers r7 
                                   2068 ;------------------------------------------------------------
                           000361  2069 	G$i2c_read_and_stop$0$0 ==.
                           000361  2070 	C$i2c.h$233$1$94 ==.
                                   2071 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2072 ;	-----------------------------------------
                                   2073 ;	 function i2c_read_and_stop
                                   2074 ;	-----------------------------------------
      000361                       2075 _i2c_read_and_stop:
                           000361  2076 	C$i2c.h$236$1$96 ==.
                                   2077 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2078 00101$:
      000361 30 C3 FD         [24] 2079 	jnb	_SI,00101$
                           000364  2080 	C$i2c.h$237$1$96 ==.
                                   2081 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2082 	mov	r7,_SMB0DAT
                           000366  2083 	C$i2c.h$238$1$96 ==.
                                   2084 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2085 	clr	_SI
                           000368  2086 	C$i2c.h$239$1$96 ==.
                                   2087 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2088 	setb	_STO
                           00036A  2089 	C$i2c.h$240$1$96 ==.
                                   2090 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2091 00104$:
                           00036A  2092 	C$i2c.h$241$1$96 ==.
                                   2093 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2094 	jbc	_SI,00122$
      00036D 80 FB            [24] 2095 	sjmp	00104$
      00036F                       2096 00122$:
                           00036F  2097 	C$i2c.h$242$1$96 ==.
                                   2098 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2099 	mov	dpl,r7
                           000371  2100 	C$i2c.h$243$1$96 ==.
                           000371  2101 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2102 	ret
                                   2103 ;------------------------------------------------------------
                                   2104 ;Allocation info for local variables in function 'i2c_write_data'
                                   2105 ;------------------------------------------------------------
                                   2106 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2107 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2108 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2109 ;addr                      Allocated to registers r7 
                                   2110 ;i                         Allocated to registers 
                                   2111 ;------------------------------------------------------------
                           000372  2112 	G$i2c_write_data$0$0 ==.
                           000372  2113 	C$i2c.h$246$1$96 ==.
                                   2114 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2115 ;	-----------------------------------------
                                   2116 ;	 function i2c_write_data
                                   2117 ;	-----------------------------------------
      000372                       2118 _i2c_write_data:
      000372 AF 82            [24] 2119 	mov	r7,dpl
                           000374  2120 	C$i2c.h$250$1$98 ==.
                                   2121 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2122 	push	ar7
      000376 12r03r37         [24] 2123 	lcall	_i2c_start
      000379 D0 07            [24] 2124 	pop	ar7
                           00037B  2125 	C$i2c.h$251$1$98 ==.
                                   2126 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2127 	mov	a,#0xFE
      00037D 5F               [12] 2128 	anl	a,r7
      00037E F5 82            [12] 2129 	mov	dpl,a
      000380 12r03r44         [24] 2130 	lcall	_i2c_write
                           000383  2131 	C$i2c.h$252$1$98 ==.
                                   2132 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2133 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2134 	lcall	_i2c_write
                           000389  2135 	C$i2c.h$253$1$98 ==.
                                   2136 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2137 	mov	r7,#0x00
      00038B                       2138 00103$:
      00038B AD*09            [24] 2139 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2140 	mov	r6,#0x00
      00038F 1D               [12] 2141 	dec	r5
      000390 BD FF 01         [24] 2142 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2143 	dec	r6
      000394                       2144 00114$:
      000394 8F 03            [24] 2145 	mov	ar3,r7
      000396 7C 00            [12] 2146 	mov	r4,#0x00
      000398 C3               [12] 2147 	clr	c
      000399 EB               [12] 2148 	mov	a,r3
      00039A 9D               [12] 2149 	subb	a,r5
      00039B EC               [12] 2150 	mov	a,r4
      00039C 64 80            [12] 2151 	xrl	a,#0x80
      00039E 8E F0            [24] 2152 	mov	b,r6
      0003A0 63 F0 80         [24] 2153 	xrl	b,#0x80
      0003A3 95 F0            [12] 2154 	subb	a,b
      0003A5 50 1F            [24] 2155 	jnc	00101$
                           0003A7  2156 	C$i2c.h$254$1$98 ==.
                                   2157 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2158 	mov	a,r7
      0003A8 25*06            [12] 2159 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2160 	mov	r4,a
      0003AB E4               [12] 2161 	clr	a
      0003AC 35*07            [12] 2162 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2163 	mov	r5,a
      0003AF AE*08            [24] 2164 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2165 	mov	dpl,r4
      0003B3 8D 83            [24] 2166 	mov	dph,r5
      0003B5 8E F0            [24] 2167 	mov	b,r6
      0003B7 12r00r00         [24] 2168 	lcall	__gptrget
      0003BA F5 82            [12] 2169 	mov	dpl,a
      0003BC C0 07            [24] 2170 	push	ar7
      0003BE 12r03r44         [24] 2171 	lcall	_i2c_write
      0003C1 D0 07            [24] 2172 	pop	ar7
                           0003C3  2173 	C$i2c.h$253$1$98 ==.
                                   2174 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2175 	inc	r7
      0003C4 80 C5            [24] 2176 	sjmp	00103$
      0003C6                       2177 00101$:
                           0003C6  2178 	C$i2c.h$255$1$98 ==.
                                   2179 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2180 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2181 	mov	r7,#0x00
      0003CA 1E               [12] 2182 	dec	r6
      0003CB BE FF 01         [24] 2183 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2184 	dec	r7
      0003CF                       2185 00116$:
      0003CF EE               [12] 2186 	mov	a,r6
      0003D0 25*06            [12] 2187 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2188 	mov	r6,a
      0003D3 EF               [12] 2189 	mov	a,r7
      0003D4 35*07            [12] 2190 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2191 	mov	r7,a
      0003D7 AD*08            [24] 2192 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2193 	mov	dpl,r6
      0003DB 8F 83            [24] 2194 	mov	dph,r7
      0003DD 8D F0            [24] 2195 	mov	b,r5
      0003DF 12r00r00         [24] 2196 	lcall	__gptrget
      0003E2 F5 82            [12] 2197 	mov	dpl,a
      0003E4 12r03r4D         [24] 2198 	lcall	_i2c_write_and_stop
                           0003E7  2199 	C$i2c.h$256$1$98 ==.
                           0003E7  2200 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2201 	ret
                                   2202 ;------------------------------------------------------------
                                   2203 ;Allocation info for local variables in function 'i2c_read_data'
                                   2204 ;------------------------------------------------------------
                                   2205 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2206 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2207 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2208 ;addr                      Allocated to registers r7 
                                   2209 ;j                         Allocated to registers 
                                   2210 ;------------------------------------------------------------
                           0003E8  2211 	G$i2c_read_data$0$0 ==.
                           0003E8  2212 	C$i2c.h$259$1$98 ==.
                                   2213 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2214 ;	-----------------------------------------
                                   2215 ;	 function i2c_read_data
                                   2216 ;	-----------------------------------------
      0003E8                       2217 _i2c_read_data:
      0003E8 AF 82            [24] 2218 	mov	r7,dpl
                           0003EA  2219 	C$i2c.h$262$1$100 ==.
                                   2220 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2221 	push	ar7
      0003EC 12r03r37         [24] 2222 	lcall	_i2c_start
      0003EF D0 07            [24] 2223 	pop	ar7
                           0003F1  2224 	C$i2c.h$263$1$100 ==.
                                   2225 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2226 	mov	ar6,r7
      0003F3 74 FE            [12] 2227 	mov	a,#0xFE
      0003F5 5E               [12] 2228 	anl	a,r6
      0003F6 F5 82            [12] 2229 	mov	dpl,a
      0003F8 C0 07            [24] 2230 	push	ar7
      0003FA 12r03r44         [24] 2231 	lcall	_i2c_write
                           0003FD  2232 	C$i2c.h$264$1$100 ==.
                                   2233 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2234 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2235 	lcall	_i2c_write_and_stop
                           000403  2236 	C$i2c.h$265$1$100 ==.
                                   2237 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2238 	lcall	_i2c_start
      000406 D0 07            [24] 2239 	pop	ar7
                           000408  2240 	C$i2c.h$266$1$100 ==.
                                   2241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2242 	mov	a,#0x01
      00040A 4F               [12] 2243 	orl	a,r7
      00040B F5 82            [12] 2244 	mov	dpl,a
      00040D 12r03r44         [24] 2245 	lcall	_i2c_write
                           000410  2246 	C$i2c.h$267$1$100 ==.
                                   2247 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2248 	mov	r7,#0x00
      000412                       2249 00103$:
      000412 AD*0E            [24] 2250 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2251 	mov	r6,#0x00
      000416 1D               [12] 2252 	dec	r5
      000417 BD FF 01         [24] 2253 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2254 	dec	r6
      00041B                       2255 00114$:
      00041B 8F 03            [24] 2256 	mov	ar3,r7
      00041D 7C 00            [12] 2257 	mov	r4,#0x00
      00041F C3               [12] 2258 	clr	c
      000420 EB               [12] 2259 	mov	a,r3
      000421 9D               [12] 2260 	subb	a,r5
      000422 EC               [12] 2261 	mov	a,r4
      000423 64 80            [12] 2262 	xrl	a,#0x80
      000425 8E F0            [24] 2263 	mov	b,r6
      000427 63 F0 80         [24] 2264 	xrl	b,#0x80
      00042A 95 F0            [12] 2265 	subb	a,b
      00042C 50 2E            [24] 2266 	jnc	00101$
                           00042E  2267 	C$i2c.h$269$2$101 ==.
                                   2268 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2269 	setb	_AA
                           000430  2270 	C$i2c.h$270$2$101 ==.
                                   2271 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2272 	mov	a,r7
      000431 25*0B            [12] 2273 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2274 	mov	r4,a
      000434 E4               [12] 2275 	clr	a
      000435 35*0C            [12] 2276 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2277 	mov	r5,a
      000438 AE*0D            [24] 2278 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2279 	push	ar7
      00043C C0 06            [24] 2280 	push	ar6
      00043E C0 05            [24] 2281 	push	ar5
      000440 C0 04            [24] 2282 	push	ar4
      000442 12r03r58         [24] 2283 	lcall	_i2c_read
      000445 AB 82            [24] 2284 	mov	r3,dpl
      000447 D0 04            [24] 2285 	pop	ar4
      000449 D0 05            [24] 2286 	pop	ar5
      00044B D0 06            [24] 2287 	pop	ar6
      00044D D0 07            [24] 2288 	pop	ar7
      00044F 8C 82            [24] 2289 	mov	dpl,r4
      000451 8D 83            [24] 2290 	mov	dph,r5
      000453 8E F0            [24] 2291 	mov	b,r6
      000455 EB               [12] 2292 	mov	a,r3
      000456 12r00r00         [24] 2293 	lcall	__gptrput
                           000459  2294 	C$i2c.h$267$1$100 ==.
                                   2295 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2296 	inc	r7
      00045A 80 B6            [24] 2297 	sjmp	00103$
      00045C                       2298 00101$:
                           00045C  2299 	C$i2c.h$272$1$100 ==.
                                   2300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2301 	clr	_AA
                           00045E  2302 	C$i2c.h$273$1$100 ==.
                                   2303 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2304 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2305 	mov	r7,#0x00
      000462 1E               [12] 2306 	dec	r6
      000463 BE FF 01         [24] 2307 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2308 	dec	r7
      000467                       2309 00116$:
      000467 EE               [12] 2310 	mov	a,r6
      000468 25*0B            [12] 2311 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2312 	mov	r6,a
      00046B EF               [12] 2313 	mov	a,r7
      00046C 35*0C            [12] 2314 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2315 	mov	r7,a
      00046F AD*0D            [24] 2316 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2317 	push	ar7
      000473 C0 06            [24] 2318 	push	ar6
      000475 C0 05            [24] 2319 	push	ar5
      000477 12r03r61         [24] 2320 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2321 	mov	r4,dpl
      00047C D0 05            [24] 2322 	pop	ar5
      00047E D0 06            [24] 2323 	pop	ar6
      000480 D0 07            [24] 2324 	pop	ar7
      000482 8E 82            [24] 2325 	mov	dpl,r6
      000484 8F 83            [24] 2326 	mov	dph,r7
      000486 8D F0            [24] 2327 	mov	b,r5
      000488 EC               [12] 2328 	mov	a,r4
      000489 12r00r00         [24] 2329 	lcall	__gptrput
                           00048C  2330 	C$i2c.h$274$1$100 ==.
                           00048C  2331 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2332 	ret
                                   2333 ;------------------------------------------------------------
                                   2334 ;Allocation info for local variables in function 'Accel_Init'
                                   2335 ;------------------------------------------------------------
                                   2336 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2337 ;------------------------------------------------------------
                           00048D  2338 	G$Accel_Init$0$0 ==.
                           00048D  2339 	C$i2c.h$283$1$100 ==.
                                   2340 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2341 ;	-----------------------------------------
                                   2342 ;	 function Accel_Init
                                   2343 ;	-----------------------------------------
      00048D                       2344 _Accel_Init:
                           00048D  2345 	C$i2c.h$287$1$103 ==.
                                   2346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2347 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2348 	C$i2c.h$289$1$103 ==.
                                   2349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2350 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2351 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2352 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2353 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2354 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2355 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2356 	lcall	_i2c_write_data
                           0004A5  2357 	C$i2c.h$290$1$103 ==.
                                   2358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2359 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2360 	C$i2c.h$292$1$103 ==.
                                   2361 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2362 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2363 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2364 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2365 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2366 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2367 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2368 	lcall	_i2c_write_data
                           0004BD  2369 	C$i2c.h$293$1$103 ==.
                                   2370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2371 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2372 	C$i2c.h$294$1$103 ==.
                                   2373 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2374 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2375 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2376 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2377 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2378 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2379 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2380 	lcall	_i2c_write_data
                           0004D5  2381 	C$i2c.h$298$1$103 ==.
                           0004D5  2382 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2383 	ret
                                   2384 ;------------------------------------------------------------
                                   2385 ;Allocation info for local variables in function 'main'
                                   2386 ;------------------------------------------------------------
                           0004D6  2387 	G$main$0$0 ==.
                           0004D6  2388 	C$Lab6.c$62$1$103 ==.
                                   2389 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:62: void main(void)
                                   2390 ;	-----------------------------------------
                                   2391 ;	 function main
                                   2392 ;	-----------------------------------------
      0004D6                       2393 _main:
                           0004D6  2394 	C$Lab6.c$64$1$118 ==.
                                   2395 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:64: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2396 	lcall	_Sys_Init
                           0004D9  2397 	C$Lab6.c$65$1$118 ==.
                                   2398 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:65: Port_Init();   
      0004D9 12r05rBB         [24] 2399 	lcall	_Port_Init
                           0004DC  2400 	C$Lab6.c$66$1$118 ==.
                                   2401 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:66: Interrupt_Init();   
      0004DC 12r05rD9         [24] 2402 	lcall	_Interrupt_Init
                           0004DF  2403 	C$Lab6.c$67$1$118 ==.
                                   2404 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:67: PCA_Init();
      0004DF 12r05rE2         [24] 2405 	lcall	_PCA_Init
                           0004E2  2406 	C$Lab6.c$68$1$118 ==.
                                   2407 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:68: ADC_Init();
      0004E2 12r06r46         [24] 2408 	lcall	_ADC_Init
                           0004E5  2409 	C$Lab6.c$69$1$118 ==.
                                   2410 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:69: SMB0_Init();
      0004E5 12r05rEF         [24] 2411 	lcall	_SMB0_Init
                           0004E8  2412 	C$Lab6.c$70$1$118 ==.
                                   2413 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:70: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2414 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2415 	lcall	_putchar
                           0004EE  2416 	C$Lab6.c$71$1$118 ==.
                                   2417 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:71: printf("\nStart\r\n");
      0004EE 74r29            [12] 2418 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2419 	push	acc
      0004F2 74s00            [12] 2420 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2421 	push	acc
      0004F6 74 80            [12] 2422 	mov	a,#0x80
      0004F8 C0 E0            [24] 2423 	push	acc
      0004FA 12r00r00         [24] 2424 	lcall	_printf
      0004FD 15 81            [12] 2425 	dec	sp
      0004FF 15 81            [12] 2426 	dec	sp
      000501 15 81            [12] 2427 	dec	sp
                           000503  2428 	C$Lab6.c$72$1$118 ==.
                                   2429 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:72: PCA0CP0 = 0xFFFF - PW_CENTER;
      000503 75 EA 37         [24] 2430 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000506 75 FA F5         [24] 2431 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2432 	C$Lab6.c$73$1$118 ==.
                                   2433 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:73: PCA0CP2 = 0xFFFF - PW_CENTER; //Car isn't moving to start
      000509 75 EC 37         [24] 2434 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      00050C 75 FC F5         [24] 2435 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           00050F  2436 	C$Lab6.c$74$1$118 ==.
                                   2437 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:74: Counts = 0;
      00050F E4               [12] 2438 	clr	a
      000510 F5*19            [12] 2439 	mov	_Counts,a
      000512 F5*1A            [12] 2440 	mov	(_Counts + 1),a
                           000514  2441 	C$Lab6.c$75$1$118 ==.
                                   2442 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:75: while (Counts < 1);  // Wait a long time (1s) for motors to initialize
      000514                       2443 00101$:
      000514 C3               [12] 2444 	clr	c
      000515 E5*19            [12] 2445 	mov	a,_Counts
      000517 94 01            [12] 2446 	subb	a,#0x01
      000519 E5*1A            [12] 2447 	mov	a,(_Counts + 1)
      00051B 94 00            [12] 2448 	subb	a,#0x00
      00051D 40 F5            [24] 2449 	jc	00101$
                           00051F  2450 	C$Lab6.c$79$1$118 ==.
                                   2451 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:79: Pick_Heading();
      00051F 12r07rA7         [24] 2452 	lcall	_Pick_Heading
                           000522  2453 	C$Lab6.c$80$1$118 ==.
                                   2454 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:80: Counts = 0;
      000522 E4               [12] 2455 	clr	a
      000523 F5*19            [12] 2456 	mov	_Counts,a
      000525 F5*1A            [12] 2457 	mov	(_Counts + 1),a
                           000527  2458 	C$Lab6.c$81$1$118 ==.
                                   2459 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:81: nCounts = 0;
      000527 F5*1B            [12] 2460 	mov	_nCounts,a
      000529 F5*1C            [12] 2461 	mov	(_nCounts + 1),a
                           00052B  2462 	C$Lab6.c$82$1$118 ==.
                                   2463 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:82: while(Counts <=2) PCA0CP2 = 0xFFFF - 3500;
      00052B                       2464 00104$:
      00052B C3               [12] 2465 	clr	c
      00052C 74 02            [12] 2466 	mov	a,#0x02
      00052E 95*19            [12] 2467 	subb	a,_Counts
      000530 E4               [12] 2468 	clr	a
      000531 95*1A            [12] 2469 	subb	a,(_Counts + 1)
      000533 40 08            [24] 2470 	jc	00113$
      000535 75 EC 53         [24] 2471 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x53
      000538 75 FC F2         [24] 2472 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF2
                           00053B  2473 	C$Lab6.c$87$2$119 ==.
                                   2474 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:87: while(!Hand_Check())	//check to see if a hand is present
      00053B 80 EE            [24] 2475 	sjmp	00104$
      00053D                       2476 00113$:
      00053D 12r07r8C         [24] 2477 	lcall	_Hand_Check
      000540 E5 82            [12] 2478 	mov	a,dpl
      000542 70 64            [24] 2479 	jnz	00115$
                           000544  2480 	C$Lab6.c$89$3$120 ==.
                                   2481 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:89: if ((new_range)) // enough overflow for a new range
      000544 E5*14            [12] 2482 	mov	a,_new_range
      000546 60 0F            [24] 2483 	jz	00108$
                           000548  2484 	C$Lab6.c$91$4$121 ==.
                                   2485 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:91: new_range = 0;	//clear and wait for next ping
      000548 75*14 00         [24] 2486 	mov	_new_range,#0x00
                           00054B  2487 	C$Lab6.c$92$4$121 ==.
                                   2488 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:92: heading = read_ranger();
      00054B 12r08rBA         [24] 2489 	lcall	_read_ranger
      00054E 85 82*35         [24] 2490 	mov	_heading,dpl
      000551 85 83*36         [24] 2491 	mov	(_heading + 1),dph
                           000554  2492 	C$Lab6.c$93$4$121 ==.
                                   2493 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:93: set_PW();
      000554 12r09r02         [24] 2494 	lcall	_set_PW
      000557                       2495 00108$:
                           000557  2496 	C$Lab6.c$107$3$120 ==.
                                   2497 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:107: if(new_AD)
      000557 E5*30            [12] 2498 	mov	a,_new_AD
      000559 60 43            [24] 2499 	jz	00110$
                           00055B  2500 	C$Lab6.c$109$4$122 ==.
                                   2501 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:109: new_AD = 0;
      00055B 75*30 00         [24] 2502 	mov	_new_AD,#0x00
                           00055E  2503 	C$Lab6.c$110$4$122 ==.
                                   2504 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:110: AD_Result = read_AD_input(5); //Read analog input on pin 1.5
      00055E 75 82 05         [24] 2505 	mov	dpl,#0x05
      000561 12r06r50         [24] 2506 	lcall	_read_AD_input
                           000564  2507 	C$Lab6.c$111$1$118 ==.
                                   2508 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:111: voltage = ((12.8/255)*(AD_Result)); //Convert back to input voltage
      000564 85 82*31         [24] 2509 	mov  _AD_Result,dpl
      000567 12r00r00         [24] 2510 	lcall	___uchar2fs
      00056A AC 82            [24] 2511 	mov	r4,dpl
      00056C AD 83            [24] 2512 	mov	r5,dph
      00056E AE F0            [24] 2513 	mov	r6,b
      000570 FF               [12] 2514 	mov	r7,a
      000571 C0 04            [24] 2515 	push	ar4
      000573 C0 05            [24] 2516 	push	ar5
      000575 C0 06            [24] 2517 	push	ar6
      000577 C0 07            [24] 2518 	push	ar7
      000579 90 9A 67         [24] 2519 	mov	dptr,#0x9A67
      00057C 75 F0 4D         [24] 2520 	mov	b,#0x4D
      00057F 74 3D            [12] 2521 	mov	a,#0x3D
      000581 12r00r00         [24] 2522 	lcall	___fsmul
      000584 AC 82            [24] 2523 	mov	r4,dpl
      000586 AD 83            [24] 2524 	mov	r5,dph
      000588 AE F0            [24] 2525 	mov	r6,b
      00058A FF               [12] 2526 	mov	r7,a
      00058B E5 81            [12] 2527 	mov	a,sp
      00058D 24 FC            [12] 2528 	add	a,#0xfc
      00058F F5 81            [12] 2529 	mov	sp,a
      000591 8C 82            [24] 2530 	mov	dpl,r4
      000593 8D 83            [24] 2531 	mov	dph,r5
      000595 8E F0            [24] 2532 	mov	b,r6
      000597 EF               [12] 2533 	mov	a,r7
      000598 12r00r00         [24] 2534 	lcall	___fs2uchar
      00059B 85 82*32         [24] 2535 	mov	_voltage,dpl
      00059E                       2536 00110$:
                           00059E  2537 	C$Lab6.c$113$3$120 ==.
                                   2538 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:113: if(print_delay == 20)
      00059E 74 14            [12] 2539 	mov	a,#0x14
      0005A0 B5*27 9A         [24] 2540 	cjne	a,_print_delay,00113$
                           0005A3  2541 	C$Lab6.c$116$4$123 ==.
                                   2542 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:116: print_delay = 0;
      0005A3 75*27 00         [24] 2543 	mov	_print_delay,#0x00
      0005A6 80 95            [24] 2544 	sjmp	00113$
      0005A8                       2545 00115$:
                           0005A8  2546 	C$Lab6.c$121$2$119 ==.
                                   2547 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:121: PCA0CP0 = 0xFFFF - 2760;
      0005A8 75 EA 37         [24] 2548 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      0005AB 75 FA F5         [24] 2549 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           0005AE  2550 	C$Lab6.c$122$2$119 ==.
                                   2551 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:122: PCA0CP2 = 0xFFFF - 2760;
      0005AE 75 EC 37         [24] 2552 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      0005B1 75 FC F5         [24] 2553 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           0005B4  2554 	C$Lab6.c$123$2$119 ==.
                                   2555 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:123: Pick_Heading();
      0005B4 12r07rA7         [24] 2556 	lcall	_Pick_Heading
      0005B7 02r05r3D         [24] 2557 	ljmp	00113$
                           0005BA  2558 	C$Lab6.c$125$1$118 ==.
                           0005BA  2559 	XG$main$0$0 ==.
      0005BA 22               [24] 2560 	ret
                                   2561 ;------------------------------------------------------------
                                   2562 ;Allocation info for local variables in function 'Port_Init'
                                   2563 ;------------------------------------------------------------
                           0005BB  2564 	G$Port_Init$0$0 ==.
                           0005BB  2565 	C$Lab6.c$129$1$118 ==.
                                   2566 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:129: void Port_Init(void)	
                                   2567 ;	-----------------------------------------
                                   2568 ;	 function Port_Init
                                   2569 ;	-----------------------------------------
      0005BB                       2570 _Port_Init:
                           0005BB  2571 	C$Lab6.c$131$1$125 ==.
                                   2572 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:131: XBR0 = 0x27;
      0005BB 75 E1 27         [24] 2573 	mov	_XBR0,#0x27
                           0005BE  2574 	C$Lab6.c$132$1$125 ==.
                                   2575 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:132: P1MDIN 	&= 0x7F;	// set pin 1.5 for analog input	
      0005BE 53 BD 7F         [24] 2576 	anl	_P1MDIN,#0x7F
                           0005C1  2577 	C$Lab6.c$133$1$125 ==.
                                   2578 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:133: P1MDOUT |= 0x05;	//set output pin for CEX0/2 in push-pull mode
      0005C1 43 A5 05         [24] 2579 	orl	_P1MDOUT,#0x05
                           0005C4  2580 	C$Lab6.c$134$1$125 ==.
                                   2581 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:134: P1MDOUT &= 0x7F;	// set input pin for 1.5 to open-drain
      0005C4 53 A5 7F         [24] 2582 	anl	_P1MDOUT,#0x7F
                           0005C7  2583 	C$Lab6.c$135$1$125 ==.
                                   2584 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:135: P1		|= ~0x7F;	// set input pin for 1.5 to high impedence
      0005C7 AF 90            [24] 2585 	mov	r7,_P1
      0005C9 74 80            [12] 2586 	mov	a,#0x80
      0005CB 4F               [12] 2587 	orl	a,r7
      0005CC F5 90            [12] 2588 	mov	_P1,a
                           0005CE  2589 	C$Lab6.c$136$1$125 ==.
                                   2590 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:136: P3MDOUT &= 0x7F;	// set input pin for 3.6/7 to open-drain
      0005CE 53 A7 7F         [24] 2591 	anl	_P3MDOUT,#0x7F
                           0005D1  2592 	C$Lab6.c$137$1$125 ==.
                                   2593 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:137: P3		|= ~0x7F;	// set input pin for 3.6/7 to high impedence
      0005D1 AF B0            [24] 2594 	mov	r7,_P3
      0005D3 74 80            [12] 2595 	mov	a,#0x80
      0005D5 4F               [12] 2596 	orl	a,r7
      0005D6 F5 B0            [12] 2597 	mov	_P3,a
                           0005D8  2598 	C$Lab6.c$139$1$125 ==.
                           0005D8  2599 	XG$Port_Init$0$0 ==.
      0005D8 22               [24] 2600 	ret
                                   2601 ;------------------------------------------------------------
                                   2602 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2603 ;------------------------------------------------------------
                           0005D9  2604 	G$Interrupt_Init$0$0 ==.
                           0005D9  2605 	C$Lab6.c$143$1$125 ==.
                                   2606 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:143: void Interrupt_Init(void)
                                   2607 ;	-----------------------------------------
                                   2608 ;	 function Interrupt_Init
                                   2609 ;	-----------------------------------------
      0005D9                       2610 _Interrupt_Init:
                           0005D9  2611 	C$Lab6.c$145$1$127 ==.
                                   2612 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:145: IE |= 0x02;
      0005D9 43 A8 02         [24] 2613 	orl	_IE,#0x02
                           0005DC  2614 	C$Lab6.c$146$1$127 ==.
                                   2615 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:146: EIE1 |= 0x08;
      0005DC 43 E6 08         [24] 2616 	orl	_EIE1,#0x08
                           0005DF  2617 	C$Lab6.c$147$1$127 ==.
                                   2618 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:147: EA = 1;
      0005DF D2 AF            [12] 2619 	setb	_EA
                           0005E1  2620 	C$Lab6.c$148$1$127 ==.
                           0005E1  2621 	XG$Interrupt_Init$0$0 ==.
      0005E1 22               [24] 2622 	ret
                                   2623 ;------------------------------------------------------------
                                   2624 ;Allocation info for local variables in function 'PCA_Init'
                                   2625 ;------------------------------------------------------------
                           0005E2  2626 	G$PCA_Init$0$0 ==.
                           0005E2  2627 	C$Lab6.c$152$1$127 ==.
                                   2628 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:152: void PCA_Init(void)
                                   2629 ;	-----------------------------------------
                                   2630 ;	 function PCA_Init
                                   2631 ;	-----------------------------------------
      0005E2                       2632 _PCA_Init:
                           0005E2  2633 	C$Lab6.c$154$1$129 ==.
                                   2634 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:154: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      0005E2 75 D9 81         [24] 2635 	mov	_PCA0MD,#0x81
                           0005E5  2636 	C$Lab6.c$155$1$129 ==.
                                   2637 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:155: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM; NOT USED HERE
      0005E5 75 DA C2         [24] 2638 	mov	_PCA0CPM0,#0xC2
                           0005E8  2639 	C$Lab6.c$156$1$129 ==.
                                   2640 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:156: PCA0CPM2 = 0xC2;
      0005E8 75 DC C2         [24] 2641 	mov	_PCA0CPM2,#0xC2
                           0005EB  2642 	C$Lab6.c$157$1$129 ==.
                                   2643 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:157: PCA0CN = 0x40;     // enable PCA
      0005EB 75 D8 40         [24] 2644 	mov	_PCA0CN,#0x40
                           0005EE  2645 	C$Lab6.c$158$1$129 ==.
                           0005EE  2646 	XG$PCA_Init$0$0 ==.
      0005EE 22               [24] 2647 	ret
                                   2648 ;------------------------------------------------------------
                                   2649 ;Allocation info for local variables in function 'SMB0_Init'
                                   2650 ;------------------------------------------------------------
                           0005EF  2651 	G$SMB0_Init$0$0 ==.
                           0005EF  2652 	C$Lab6.c$162$1$129 ==.
                                   2653 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:162: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2654 ;	-----------------------------------------
                                   2655 ;	 function SMB0_Init
                                   2656 ;	-----------------------------------------
      0005EF                       2657 _SMB0_Init:
                           0005EF  2658 	C$Lab6.c$164$1$131 ==.
                                   2659 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:164: SMB0CR = 0x93;      // Set SCL to 100KHz
      0005EF 75 CF 93         [24] 2660 	mov	_SMB0CR,#0x93
                           0005F2  2661 	C$Lab6.c$165$1$131 ==.
                                   2662 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:165: ENSMB = 1;          // Enable SMBUS0
      0005F2 D2 C6            [12] 2663 	setb	_ENSMB
                           0005F4  2664 	C$Lab6.c$166$1$131 ==.
                           0005F4  2665 	XG$SMB0_Init$0$0 ==.
      0005F4 22               [24] 2666 	ret
                                   2667 ;------------------------------------------------------------
                                   2668 ;Allocation info for local variables in function 'PCA_ISR'
                                   2669 ;------------------------------------------------------------
                           0005F5  2670 	G$PCA_ISR$0$0 ==.
                           0005F5  2671 	C$Lab6.c$170$1$131 ==.
                                   2672 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:170: void PCA_ISR(void) __interrupt 9
                                   2673 ;	-----------------------------------------
                                   2674 ;	 function PCA_ISR
                                   2675 ;	-----------------------------------------
      0005F5                       2676 _PCA_ISR:
      0005F5 C0 E0            [24] 2677 	push	acc
      0005F7 C0 D0            [24] 2678 	push	psw
                           0005F9  2679 	C$Lab6.c$172$1$133 ==.
                                   2680 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:172: if (CF)
                           0005F9  2681 	C$Lab6.c$174$2$134 ==.
                                   2682 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:174: CF = 0;                     // clear the interrupt flag
      0005F9 10 DF 02         [24] 2683 	jbc	_CF,00124$
      0005FC 80 40            [24] 2684 	sjmp	00108$
      0005FE                       2685 00124$:
                           0005FE  2686 	C$Lab6.c$175$2$134 ==.
                                   2687 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:175: nCounts++;					// Counts overflows for initial delay
      0005FE 05*1B            [12] 2688 	inc	_nCounts
      000600 E4               [12] 2689 	clr	a
      000601 B5*1B 02         [24] 2690 	cjne	a,_nCounts,00125$
      000604 05*1C            [12] 2691 	inc	(_nCounts + 1)
      000606                       2692 00125$:
                           000606  2693 	C$Lab6.c$176$2$134 ==.
                                   2694 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:176: PCA0 = PCA_START;
      000606 75 E9 00         [24] 2695 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      000609 75 F9 70         [24] 2696 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           00060C  2697 	C$Lab6.c$177$2$134 ==.
                                   2698 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:177: if (nCounts > 50)			//Initial one second delay
      00060C C3               [12] 2699 	clr	c
      00060D 74 32            [12] 2700 	mov	a,#0x32
      00060F 95*1B            [12] 2701 	subb	a,_nCounts
      000611 E4               [12] 2702 	clr	a
      000612 95*1C            [12] 2703 	subb	a,(_nCounts + 1)
      000614 50 08            [24] 2704 	jnc	00102$
                           000616  2705 	C$Lab6.c$180$3$135 ==.
                                   2706 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:180: Counts++;               // seconds counter
      000616 05*19            [12] 2707 	inc	_Counts
      000618 E4               [12] 2708 	clr	a
      000619 B5*19 02         [24] 2709 	cjne	a,_Counts,00127$
      00061C 05*1A            [12] 2710 	inc	(_Counts + 1)
      00061E                       2711 00127$:
      00061E                       2712 00102$:
                           00061E  2713 	C$Lab6.c$182$2$134 ==.
                                   2714 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:182: print_delay++;				// delay for print statements
      00061E 05*27            [12] 2715 	inc	_print_delay
                           000620  2716 	C$Lab6.c$183$2$134 ==.
                                   2717 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:183: r_count++;
      000620 05*1D            [12] 2718 	inc	_r_count
                           000622  2719 	C$Lab6.c$184$2$134 ==.
                                   2720 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:184: if (r_count>=12)			//delay for ranger reading
      000622 74 F4            [12] 2721 	mov	a,#0x100 - 0x0C
      000624 25*1D            [12] 2722 	add	a,_r_count
      000626 50 06            [24] 2723 	jnc	00104$
                           000628  2724 	C$Lab6.c$186$3$136 ==.
                                   2725 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:186: new_range = 1;
      000628 75*14 01         [24] 2726 	mov	_new_range,#0x01
                           00062B  2727 	C$Lab6.c$187$3$136 ==.
                                   2728 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:187: r_count = 0;
      00062B 75*1D 00         [24] 2729 	mov	_r_count,#0x00
      00062E                       2730 00104$:
                           00062E  2731 	C$Lab6.c$189$2$134 ==.
                                   2732 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:189: adc_count++;
      00062E 05*1F            [12] 2733 	inc	_adc_count
                           000630  2734 	C$Lab6.c$190$2$134 ==.
                                   2735 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:190: if(adc_count >=10)
      000630 74 F6            [12] 2736 	mov	a,#0x100 - 0x0A
      000632 25*1F            [12] 2737 	add	a,_adc_count
      000634 50 0B            [24] 2738 	jnc	00110$
                           000636  2739 	C$Lab6.c$192$3$137 ==.
                                   2740 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:192: adc_count = 0;
      000636 75*1F 00         [24] 2741 	mov	_adc_count,#0x00
                           000639  2742 	C$Lab6.c$193$3$137 ==.
                                   2743 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:193: new_AD = 1;
      000639 75*30 01         [24] 2744 	mov	_new_AD,#0x01
      00063C 80 03            [24] 2745 	sjmp	00110$
      00063E                       2746 00108$:
                           00063E  2747 	C$Lab6.c$196$1$133 ==.
                                   2748 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:196: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      00063E 53 D8 C0         [24] 2749 	anl	_PCA0CN,#0xC0
      000641                       2750 00110$:
      000641 D0 D0            [24] 2751 	pop	psw
      000643 D0 E0            [24] 2752 	pop	acc
                           000645  2753 	C$Lab6.c$197$1$133 ==.
                           000645  2754 	XG$PCA_ISR$0$0 ==.
      000645 32               [24] 2755 	reti
                                   2756 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2757 ;	eliminated unneeded push/pop dpl
                                   2758 ;	eliminated unneeded push/pop dph
                                   2759 ;	eliminated unneeded push/pop b
                                   2760 ;------------------------------------------------------------
                                   2761 ;Allocation info for local variables in function 'ADC_Init'
                                   2762 ;------------------------------------------------------------
                           000646  2763 	G$ADC_Init$0$0 ==.
                           000646  2764 	C$Lab6.c$201$1$133 ==.
                                   2765 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:201: void ADC_Init(void)
                                   2766 ;	-----------------------------------------
                                   2767 ;	 function ADC_Init
                                   2768 ;	-----------------------------------------
      000646                       2769 _ADC_Init:
                           000646  2770 	C$Lab6.c$203$1$139 ==.
                                   2771 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:203: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000646 75 D1 03         [24] 2772 	mov	_REF0CN,#0x03
                           000649  2773 	C$Lab6.c$204$1$139 ==.
                                   2774 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:204: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      000649 75 AA 80         [24] 2775 	mov	_ADC1CN,#0x80
                           00064C  2776 	C$Lab6.c$205$1$139 ==.
                                   2777 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:205: ADC1CF |= 0x01; // Set A/D converter gain to 1
      00064C 43 AB 01         [24] 2778 	orl	_ADC1CF,#0x01
                           00064F  2779 	C$Lab6.c$206$1$139 ==.
                           00064F  2780 	XG$ADC_Init$0$0 ==.
      00064F 22               [24] 2781 	ret
                                   2782 ;------------------------------------------------------------
                                   2783 ;Allocation info for local variables in function 'read_AD_input'
                                   2784 ;------------------------------------------------------------
                                   2785 ;n                         Allocated to registers 
                                   2786 ;------------------------------------------------------------
                           000650  2787 	G$read_AD_input$0$0 ==.
                           000650  2788 	C$Lab6.c$210$1$139 ==.
                                   2789 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:210: unsigned char read_AD_input(unsigned char n)
                                   2790 ;	-----------------------------------------
                                   2791 ;	 function read_AD_input
                                   2792 ;	-----------------------------------------
      000650                       2793 _read_AD_input:
      000650 85 82 AC         [24] 2794 	mov	_AMX1SL,dpl
                           000653  2795 	C$Lab6.c$213$1$141 ==.
                                   2796 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:213: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      000653 AF AA            [24] 2797 	mov	r7,_ADC1CN
      000655 74 DF            [12] 2798 	mov	a,#0xDF
      000657 5F               [12] 2799 	anl	a,r7
      000658 F5 AA            [12] 2800 	mov	_ADC1CN,a
                           00065A  2801 	C$Lab6.c$214$1$141 ==.
                                   2802 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:214: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      00065A 43 AA 10         [24] 2803 	orl	_ADC1CN,#0x10
                           00065D  2804 	C$Lab6.c$216$1$141 ==.
                                   2805 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:216: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      00065D                       2806 00101$:
      00065D E5 AA            [12] 2807 	mov	a,_ADC1CN
      00065F 30 E5 FB         [24] 2808 	jnb	acc.5,00101$
                           000662  2809 	C$Lab6.c$218$1$141 ==.
                                   2810 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:218: return ADC1; // Return digital value in ADC1 register
      000662 85 9C 82         [24] 2811 	mov	dpl,_ADC1
                           000665  2812 	C$Lab6.c$219$1$141 ==.
                           000665  2813 	XG$read_AD_input$0$0 ==.
      000665 22               [24] 2814 	ret
                                   2815 ;------------------------------------------------------------
                                   2816 ;Allocation info for local variables in function 'Pick_Steering_Gain'
                                   2817 ;------------------------------------------------------------
                                   2818 ;input                     Allocated to registers r7 
                                   2819 ;------------------------------------------------------------
                           000666  2820 	G$Pick_Steering_Gain$0$0 ==.
                           000666  2821 	C$Lab6.c$223$1$141 ==.
                                   2822 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:223: void Pick_Steering_Gain(void)
                                   2823 ;	-----------------------------------------
                                   2824 ;	 function Pick_Steering_Gain
                                   2825 ;	-----------------------------------------
      000666                       2826 _Pick_Steering_Gain:
                           000666  2827 	C$Lab6.c$226$1$143 ==.
                                   2828 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:226: printf("\rPlease select a desired steering gain.\n");
      000666 74r32            [12] 2829 	mov	a,#___str_4
      000668 C0 E0            [24] 2830 	push	acc
      00066A 74s00            [12] 2831 	mov	a,#(___str_4 >> 8)
      00066C C0 E0            [24] 2832 	push	acc
      00066E 74 80            [12] 2833 	mov	a,#0x80
      000670 C0 E0            [24] 2834 	push	acc
      000672 12r00r00         [24] 2835 	lcall	_printf
      000675 15 81            [12] 2836 	dec	sp
      000677 15 81            [12] 2837 	dec	sp
      000679 15 81            [12] 2838 	dec	sp
                           00067B  2839 	C$Lab6.c$227$1$143 ==.
                                   2840 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:227: printf("\r'u' will increment by 0.1. 'd' will decrement by 0.1.\n");
      00067B 74r5B            [12] 2841 	mov	a,#___str_5
      00067D C0 E0            [24] 2842 	push	acc
      00067F 74s00            [12] 2843 	mov	a,#(___str_5 >> 8)
      000681 C0 E0            [24] 2844 	push	acc
      000683 74 80            [12] 2845 	mov	a,#0x80
      000685 C0 E0            [24] 2846 	push	acc
      000687 12r00r00         [24] 2847 	lcall	_printf
      00068A 15 81            [12] 2848 	dec	sp
      00068C 15 81            [12] 2849 	dec	sp
      00068E 15 81            [12] 2850 	dec	sp
                           000690  2851 	C$Lab6.c$228$1$143 ==.
                                   2852 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:228: printf("\r'f' when finished\n");
      000690 74r93            [12] 2853 	mov	a,#___str_6
      000692 C0 E0            [24] 2854 	push	acc
      000694 74s00            [12] 2855 	mov	a,#(___str_6 >> 8)
      000696 C0 E0            [24] 2856 	push	acc
      000698 74 80            [12] 2857 	mov	a,#0x80
      00069A C0 E0            [24] 2858 	push	acc
      00069C 12r00r00         [24] 2859 	lcall	_printf
      00069F 15 81            [12] 2860 	dec	sp
      0006A1 15 81            [12] 2861 	dec	sp
      0006A3 15 81            [12] 2862 	dec	sp
                           0006A5  2863 	C$Lab6.c$229$1$143 ==.
                                   2864 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:229: while(1)
      0006A5                       2865 00112$:
                           0006A5  2866 	C$Lab6.c$231$2$144 ==.
                                   2867 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:231: input = getchar();
      0006A5 12r00r4D         [24] 2868 	lcall	_getchar
      0006A8 AF 82            [24] 2869 	mov	r7,dpl
                           0006AA  2870 	C$Lab6.c$232$2$144 ==.
                                   2871 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:232: if(input == 'u') steer_gain += 0.1;
      0006AA BF 75 30         [24] 2872 	cjne	r7,#0x75,00102$
      0006AD C0 07            [24] 2873 	push	ar7
      0006AF 74 CD            [12] 2874 	mov	a,#0xCD
      0006B1 C0 E0            [24] 2875 	push	acc
      0006B3 14               [12] 2876 	dec	a
      0006B4 C0 E0            [24] 2877 	push	acc
      0006B6 C0 E0            [24] 2878 	push	acc
      0006B8 74 3D            [12] 2879 	mov	a,#0x3D
      0006BA C0 E0            [24] 2880 	push	acc
      0006BC 85*28 82         [24] 2881 	mov	dpl,_steer_gain
      0006BF 85*29 83         [24] 2882 	mov	dph,(_steer_gain + 1)
      0006C2 85*2A F0         [24] 2883 	mov	b,(_steer_gain + 2)
      0006C5 E5*2B            [12] 2884 	mov	a,(_steer_gain + 3)
      0006C7 12r00r00         [24] 2885 	lcall	___fsadd
      0006CA 85 82*28         [24] 2886 	mov	_steer_gain,dpl
      0006CD 85 83*29         [24] 2887 	mov	(_steer_gain + 1),dph
      0006D0 85 F0*2A         [24] 2888 	mov	(_steer_gain + 2),b
      0006D3 F5*2B            [12] 2889 	mov	(_steer_gain + 3),a
      0006D5 E5 81            [12] 2890 	mov	a,sp
      0006D7 24 FC            [12] 2891 	add	a,#0xfc
      0006D9 F5 81            [12] 2892 	mov	sp,a
      0006DB D0 07            [24] 2893 	pop	ar7
      0006DD                       2894 00102$:
                           0006DD  2895 	C$Lab6.c$233$2$144 ==.
                                   2896 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:233: if(input == 'd') steer_gain -= 0.1;
      0006DD BF 64 30         [24] 2897 	cjne	r7,#0x64,00104$
      0006E0 C0 07            [24] 2898 	push	ar7
      0006E2 74 CD            [12] 2899 	mov	a,#0xCD
      0006E4 C0 E0            [24] 2900 	push	acc
      0006E6 14               [12] 2901 	dec	a
      0006E7 C0 E0            [24] 2902 	push	acc
      0006E9 C0 E0            [24] 2903 	push	acc
      0006EB 74 3D            [12] 2904 	mov	a,#0x3D
      0006ED C0 E0            [24] 2905 	push	acc
      0006EF 85*28 82         [24] 2906 	mov	dpl,_steer_gain
      0006F2 85*29 83         [24] 2907 	mov	dph,(_steer_gain + 1)
      0006F5 85*2A F0         [24] 2908 	mov	b,(_steer_gain + 2)
      0006F8 E5*2B            [12] 2909 	mov	a,(_steer_gain + 3)
      0006FA 12r00r00         [24] 2910 	lcall	___fssub
      0006FD 85 82*28         [24] 2911 	mov	_steer_gain,dpl
      000700 85 83*29         [24] 2912 	mov	(_steer_gain + 1),dph
      000703 85 F0*2A         [24] 2913 	mov	(_steer_gain + 2),b
      000706 F5*2B            [12] 2914 	mov	(_steer_gain + 3),a
      000708 E5 81            [12] 2915 	mov	a,sp
      00070A 24 FC            [12] 2916 	add	a,#0xfc
      00070C F5 81            [12] 2917 	mov	sp,a
      00070E D0 07            [24] 2918 	pop	ar7
      000710                       2919 00104$:
                           000710  2920 	C$Lab6.c$234$2$144 ==.
                                   2921 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:234: if(input == 'f') return;
      000710 BF 66 02         [24] 2922 	cjne	r7,#0x66,00106$
      000713 80 76            [24] 2923 	sjmp	00114$
      000715                       2924 00106$:
                           000715  2925 	C$Lab6.c$235$1$143 ==.
                                   2926 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:235: if(steer_gain >= 10) steer_gain = 10;
      000715 E4               [12] 2927 	clr	a
      000716 C0 E0            [24] 2928 	push	acc
      000718 C0 E0            [24] 2929 	push	acc
      00071A 74 20            [12] 2930 	mov	a,#0x20
      00071C C0 E0            [24] 2931 	push	acc
      00071E 74 41            [12] 2932 	mov	a,#0x41
      000720 C0 E0            [24] 2933 	push	acc
      000722 85*28 82         [24] 2934 	mov	dpl,_steer_gain
      000725 85*29 83         [24] 2935 	mov	dph,(_steer_gain + 1)
      000728 85*2A F0         [24] 2936 	mov	b,(_steer_gain + 2)
      00072B E5*2B            [12] 2937 	mov	a,(_steer_gain + 3)
      00072D 12r00r00         [24] 2938 	lcall	___fslt
      000730 AF 82            [24] 2939 	mov	r7,dpl
      000732 E5 81            [12] 2940 	mov	a,sp
      000734 24 FC            [12] 2941 	add	a,#0xfc
      000736 F5 81            [12] 2942 	mov	sp,a
      000738 EF               [12] 2943 	mov	a,r7
      000739 70 0A            [24] 2944 	jnz	00108$
      00073B F5*28            [12] 2945 	mov	_steer_gain,a
      00073D F5*29            [12] 2946 	mov	(_steer_gain + 1),a
      00073F 75*2A 20         [24] 2947 	mov	(_steer_gain + 2),#0x20
      000742 75*2B 41         [24] 2948 	mov	(_steer_gain + 3),#0x41
      000745                       2949 00108$:
                           000745  2950 	C$Lab6.c$236$1$143 ==.
                                   2951 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:236: if(steer_gain <= 0) steer_gain = 0;
      000745 E4               [12] 2952 	clr	a
      000746 C0 E0            [24] 2953 	push	acc
      000748 C0 E0            [24] 2954 	push	acc
      00074A C0 E0            [24] 2955 	push	acc
      00074C C0 E0            [24] 2956 	push	acc
      00074E 85*28 82         [24] 2957 	mov	dpl,_steer_gain
      000751 85*29 83         [24] 2958 	mov	dph,(_steer_gain + 1)
      000754 85*2A F0         [24] 2959 	mov	b,(_steer_gain + 2)
      000757 E5*2B            [12] 2960 	mov	a,(_steer_gain + 3)
      000759 12r00r00         [24] 2961 	lcall	___fsgt
      00075C AF 82            [24] 2962 	mov	r7,dpl
      00075E E5 81            [12] 2963 	mov	a,sp
      000760 24 FC            [12] 2964 	add	a,#0xfc
      000762 F5 81            [12] 2965 	mov	sp,a
      000764 EF               [12] 2966 	mov	a,r7
      000765 70 08            [24] 2967 	jnz	00110$
      000767 F5*28            [12] 2968 	mov	_steer_gain,a
      000769 F5*29            [12] 2969 	mov	(_steer_gain + 1),a
      00076B F5*2A            [12] 2970 	mov	(_steer_gain + 2),a
      00076D F5*2B            [12] 2971 	mov	(_steer_gain + 3),a
      00076F                       2972 00110$:
                           00076F  2973 	C$Lab6.c$237$2$144 ==.
                                   2974 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:237: printf_fast_f("\rDesired steering gain: %2.1f\n", steer_gain);
      00076F C0*28            [24] 2975 	push	_steer_gain
      000771 C0*29            [24] 2976 	push	(_steer_gain + 1)
      000773 C0*2A            [24] 2977 	push	(_steer_gain + 2)
      000775 C0*2B            [24] 2978 	push	(_steer_gain + 3)
      000777 74rA7            [12] 2979 	mov	a,#___str_7
      000779 C0 E0            [24] 2980 	push	acc
      00077B 74s00            [12] 2981 	mov	a,#(___str_7 >> 8)
      00077D C0 E0            [24] 2982 	push	acc
      00077F 12r00r00         [24] 2983 	lcall	_printf_fast_f
      000782 E5 81            [12] 2984 	mov	a,sp
      000784 24 FA            [12] 2985 	add	a,#0xfa
      000786 F5 81            [12] 2986 	mov	sp,a
      000788 02r06rA5         [24] 2987 	ljmp	00112$
      00078B                       2988 00114$:
                           00078B  2989 	C$Lab6.c$239$1$143 ==.
                           00078B  2990 	XG$Pick_Steering_Gain$0$0 ==.
      00078B 22               [24] 2991 	ret
                                   2992 ;------------------------------------------------------------
                                   2993 ;Allocation info for local variables in function 'Hand_Check'
                                   2994 ;------------------------------------------------------------
                                   2995 ;temp_int                  Allocated to registers r6 r7 
                                   2996 ;------------------------------------------------------------
                           00078C  2997 	G$Hand_Check$0$0 ==.
                           00078C  2998 	C$Lab6.c$243$1$143 ==.
                                   2999 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:243: char Hand_Check(void)
                                   3000 ;	-----------------------------------------
                                   3001 ;	 function Hand_Check
                                   3002 ;	-----------------------------------------
      00078C                       3003 _Hand_Check:
                           00078C  3004 	C$Lab6.c$245$1$146 ==.
                                   3005 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:245: int temp_int = read_ranger();
      00078C 12r08rBA         [24] 3006 	lcall	_read_ranger
      00078F AE 82            [24] 3007 	mov	r6,dpl
      000791 AF 83            [24] 3008 	mov	r7,dph
                           000793  3009 	C$Lab6.c$246$1$146 ==.
                                   3010 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:246: if(temp_int < 18)
      000793 C3               [12] 3011 	clr	c
      000794 EE               [12] 3012 	mov	a,r6
      000795 94 12            [12] 3013 	subb	a,#0x12
      000797 EF               [12] 3014 	mov	a,r7
      000798 64 80            [12] 3015 	xrl	a,#0x80
      00079A 94 80            [12] 3016 	subb	a,#0x80
      00079C 50 05            [24] 3017 	jnc	00102$
                           00079E  3018 	C$Lab6.c$248$2$147 ==.
                                   3019 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:248: return 1;
      00079E 75 82 01         [24] 3020 	mov	dpl,#0x01
      0007A1 80 03            [24] 3021 	sjmp	00104$
      0007A3                       3022 00102$:
                           0007A3  3023 	C$Lab6.c$250$2$148 ==.
                                   3024 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:250: else { return 0;}
      0007A3 75 82 00         [24] 3025 	mov	dpl,#0x00
      0007A6                       3026 00104$:
                           0007A6  3027 	C$Lab6.c$251$1$146 ==.
                           0007A6  3028 	XG$Hand_Check$0$0 ==.
      0007A6 22               [24] 3029 	ret
                                   3030 ;------------------------------------------------------------
                                   3031 ;Allocation info for local variables in function 'Pick_Heading'
                                   3032 ;------------------------------------------------------------
                                   3033 ;input                     Allocated to registers r7 
                                   3034 ;------------------------------------------------------------
                           0007A7  3035 	G$Pick_Heading$0$0 ==.
                           0007A7  3036 	C$Lab6.c$255$1$146 ==.
                                   3037 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:255: void Pick_Heading(void)
                                   3038 ;	-----------------------------------------
                                   3039 ;	 function Pick_Heading
                                   3040 ;	-----------------------------------------
      0007A7                       3041 _Pick_Heading:
                           0007A7  3042 	C$Lab6.c$258$1$150 ==.
                                   3043 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:258: printf("\rPlease select a desired heading.\n");
      0007A7 74rC6            [12] 3044 	mov	a,#___str_8
      0007A9 C0 E0            [24] 3045 	push	acc
      0007AB 74s00            [12] 3046 	mov	a,#(___str_8 >> 8)
      0007AD C0 E0            [24] 3047 	push	acc
      0007AF 74 80            [12] 3048 	mov	a,#0x80
      0007B1 C0 E0            [24] 3049 	push	acc
      0007B3 12r00r00         [24] 3050 	lcall	_printf
      0007B6 15 81            [12] 3051 	dec	sp
      0007B8 15 81            [12] 3052 	dec	sp
      0007BA 15 81            [12] 3053 	dec	sp
                           0007BC  3054 	C$Lab6.c$259$1$150 ==.
                                   3055 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:259: printf("\r'u' will increment by 0.1. 'd' will decrement by 0.1.\n");
      0007BC 74r5B            [12] 3056 	mov	a,#___str_5
      0007BE C0 E0            [24] 3057 	push	acc
      0007C0 74s00            [12] 3058 	mov	a,#(___str_5 >> 8)
      0007C2 C0 E0            [24] 3059 	push	acc
      0007C4 74 80            [12] 3060 	mov	a,#0x80
      0007C6 C0 E0            [24] 3061 	push	acc
      0007C8 12r00r00         [24] 3062 	lcall	_printf
      0007CB 15 81            [12] 3063 	dec	sp
      0007CD 15 81            [12] 3064 	dec	sp
      0007CF 15 81            [12] 3065 	dec	sp
                           0007D1  3066 	C$Lab6.c$260$1$150 ==.
                                   3067 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:260: printf("\r'f' when finished\n");
      0007D1 74r93            [12] 3068 	mov	a,#___str_6
      0007D3 C0 E0            [24] 3069 	push	acc
      0007D5 74s00            [12] 3070 	mov	a,#(___str_6 >> 8)
      0007D7 C0 E0            [24] 3071 	push	acc
      0007D9 74 80            [12] 3072 	mov	a,#0x80
      0007DB C0 E0            [24] 3073 	push	acc
      0007DD 12r00r00         [24] 3074 	lcall	_printf
      0007E0 15 81            [12] 3075 	dec	sp
      0007E2 15 81            [12] 3076 	dec	sp
      0007E4 15 81            [12] 3077 	dec	sp
                           0007E6  3078 	C$Lab6.c$261$1$150 ==.
                                   3079 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:261: while(1)
      0007E6                       3080 00112$:
                           0007E6  3081 	C$Lab6.c$263$2$151 ==.
                                   3082 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:263: input = getchar();
      0007E6 12r00r4D         [24] 3083 	lcall	_getchar
      0007E9 AF 82            [24] 3084 	mov	r7,dpl
                           0007EB  3085 	C$Lab6.c$264$2$151 ==.
                                   3086 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:264: if(input == 'u') heading += 0.1;
      0007EB BF 75 48         [24] 3087 	cjne	r7,#0x75,00102$
      0007EE 85*35 82         [24] 3088 	mov	dpl,_heading
      0007F1 85*36 83         [24] 3089 	mov	dph,(_heading + 1)
      0007F4 C0 07            [24] 3090 	push	ar7
      0007F6 12r00r00         [24] 3091 	lcall	___uint2fs
      0007F9 AB 82            [24] 3092 	mov	r3,dpl
      0007FB AC 83            [24] 3093 	mov	r4,dph
      0007FD AD F0            [24] 3094 	mov	r5,b
      0007FF FE               [12] 3095 	mov	r6,a
      000800 74 CD            [12] 3096 	mov	a,#0xCD
      000802 C0 E0            [24] 3097 	push	acc
      000804 14               [12] 3098 	dec	a
      000805 C0 E0            [24] 3099 	push	acc
      000807 C0 E0            [24] 3100 	push	acc
      000809 74 3D            [12] 3101 	mov	a,#0x3D
      00080B C0 E0            [24] 3102 	push	acc
      00080D 8B 82            [24] 3103 	mov	dpl,r3
      00080F 8C 83            [24] 3104 	mov	dph,r4
      000811 8D F0            [24] 3105 	mov	b,r5
      000813 EE               [12] 3106 	mov	a,r6
      000814 12r00r00         [24] 3107 	lcall	___fsadd
      000817 AB 82            [24] 3108 	mov	r3,dpl
      000819 AC 83            [24] 3109 	mov	r4,dph
      00081B AD F0            [24] 3110 	mov	r5,b
      00081D FE               [12] 3111 	mov	r6,a
      00081E E5 81            [12] 3112 	mov	a,sp
      000820 24 FC            [12] 3113 	add	a,#0xfc
      000822 F5 81            [12] 3114 	mov	sp,a
      000824 8B 82            [24] 3115 	mov	dpl,r3
      000826 8C 83            [24] 3116 	mov	dph,r4
      000828 8D F0            [24] 3117 	mov	b,r5
      00082A EE               [12] 3118 	mov	a,r6
      00082B 12r00r00         [24] 3119 	lcall	___fs2uint
      00082E 85 82*35         [24] 3120 	mov	_heading,dpl
      000831 85 83*36         [24] 3121 	mov	(_heading + 1),dph
      000834 D0 07            [24] 3122 	pop	ar7
      000836                       3123 00102$:
                           000836  3124 	C$Lab6.c$265$2$151 ==.
                                   3125 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:265: if(input == 'd') heading -= 0.1;
      000836 BF 64 48         [24] 3126 	cjne	r7,#0x64,00104$
      000839 85*35 82         [24] 3127 	mov	dpl,_heading
      00083C 85*36 83         [24] 3128 	mov	dph,(_heading + 1)
      00083F C0 07            [24] 3129 	push	ar7
      000841 12r00r00         [24] 3130 	lcall	___uint2fs
      000844 AB 82            [24] 3131 	mov	r3,dpl
      000846 AC 83            [24] 3132 	mov	r4,dph
      000848 AD F0            [24] 3133 	mov	r5,b
      00084A FE               [12] 3134 	mov	r6,a
      00084B 74 CD            [12] 3135 	mov	a,#0xCD
      00084D C0 E0            [24] 3136 	push	acc
      00084F 14               [12] 3137 	dec	a
      000850 C0 E0            [24] 3138 	push	acc
      000852 C0 E0            [24] 3139 	push	acc
      000854 74 3D            [12] 3140 	mov	a,#0x3D
      000856 C0 E0            [24] 3141 	push	acc
      000858 8B 82            [24] 3142 	mov	dpl,r3
      00085A 8C 83            [24] 3143 	mov	dph,r4
      00085C 8D F0            [24] 3144 	mov	b,r5
      00085E EE               [12] 3145 	mov	a,r6
      00085F 12r00r00         [24] 3146 	lcall	___fssub
      000862 AB 82            [24] 3147 	mov	r3,dpl
      000864 AC 83            [24] 3148 	mov	r4,dph
      000866 AD F0            [24] 3149 	mov	r5,b
      000868 FE               [12] 3150 	mov	r6,a
      000869 E5 81            [12] 3151 	mov	a,sp
      00086B 24 FC            [12] 3152 	add	a,#0xfc
      00086D F5 81            [12] 3153 	mov	sp,a
      00086F 8B 82            [24] 3154 	mov	dpl,r3
      000871 8C 83            [24] 3155 	mov	dph,r4
      000873 8D F0            [24] 3156 	mov	b,r5
      000875 EE               [12] 3157 	mov	a,r6
      000876 12r00r00         [24] 3158 	lcall	___fs2uint
      000879 85 82*35         [24] 3159 	mov	_heading,dpl
      00087C 85 83*36         [24] 3160 	mov	(_heading + 1),dph
      00087F D0 07            [24] 3161 	pop	ar7
      000881                       3162 00104$:
                           000881  3163 	C$Lab6.c$266$2$151 ==.
                                   3164 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:266: if(input == 'f') return;
      000881 BF 66 02         [24] 3165 	cjne	r7,#0x66,00106$
      000884 80 33            [24] 3166 	sjmp	00114$
      000886                       3167 00106$:
                           000886  3168 	C$Lab6.c$267$2$151 ==.
                                   3169 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:267: if(heading >= 10) heading = 10;
      000886 C3               [12] 3170 	clr	c
      000887 E5*35            [12] 3171 	mov	a,_heading
      000889 94 0A            [12] 3172 	subb	a,#0x0A
      00088B E5*36            [12] 3173 	mov	a,(_heading + 1)
      00088D 94 00            [12] 3174 	subb	a,#0x00
      00088F 40 06            [24] 3175 	jc	00108$
      000891 75*35 0A         [24] 3176 	mov	_heading,#0x0A
      000894 75*36 00         [24] 3177 	mov	(_heading + 1),#0x00
      000897                       3178 00108$:
                           000897  3179 	C$Lab6.c$268$2$151 ==.
                                   3180 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:268: if(heading <= 0) heading = 0;
      000897 E5*35            [12] 3181 	mov	a,_heading
      000899 45*36            [12] 3182 	orl	a,(_heading + 1)
      00089B 70 04            [24] 3183 	jnz	00110$
      00089D F5*35            [12] 3184 	mov	_heading,a
      00089F F5*36            [12] 3185 	mov	(_heading + 1),a
      0008A1                       3186 00110$:
                           0008A1  3187 	C$Lab6.c$269$2$151 ==.
                                   3188 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:269: printf_fast_f("\rDesired heading: %2.1f\n", heading);
      0008A1 C0*35            [24] 3189 	push	_heading
      0008A3 C0*36            [24] 3190 	push	(_heading + 1)
      0008A5 74rE9            [12] 3191 	mov	a,#___str_9
      0008A7 C0 E0            [24] 3192 	push	acc
      0008A9 74s00            [12] 3193 	mov	a,#(___str_9 >> 8)
      0008AB C0 E0            [24] 3194 	push	acc
      0008AD 12r00r00         [24] 3195 	lcall	_printf_fast_f
      0008B0 E5 81            [12] 3196 	mov	a,sp
      0008B2 24 FC            [12] 3197 	add	a,#0xfc
      0008B4 F5 81            [12] 3198 	mov	sp,a
      0008B6 02r07rE6         [24] 3199 	ljmp	00112$
      0008B9                       3200 00114$:
                           0008B9  3201 	C$Lab6.c$271$1$150 ==.
                           0008B9  3202 	XG$Pick_Heading$0$0 ==.
      0008B9 22               [24] 3203 	ret
                                   3204 ;------------------------------------------------------------
                                   3205 ;Allocation info for local variables in function 'read_ranger'
                                   3206 ;------------------------------------------------------------
                                   3207 ;addr                      Allocated to registers 
                                   3208 ;st_range                  Allocated to registers r6 r7 
                                   3209 ;------------------------------------------------------------
                           0008BA  3210 	G$read_ranger$0$0 ==.
                           0008BA  3211 	C$Lab6.c$275$1$150 ==.
                                   3212 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:275: int read_ranger(void)
                                   3213 ;	-----------------------------------------
                                   3214 ;	 function read_ranger
                                   3215 ;	-----------------------------------------
      0008BA                       3216 _read_ranger:
                           0008BA  3217 	C$Lab6.c$279$1$153 ==.
                                   3218 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:279: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0008BA 75*0Br25         [24] 3219 	mov	_i2c_read_data_PARM_3,#_Data
      0008BD 75*0C 00         [24] 3220 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0008C0 75*0D 40         [24] 3221 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0008C3 75*0A 02         [24] 3222 	mov	_i2c_read_data_PARM_2,#0x02
      0008C6 75*0E 02         [24] 3223 	mov	_i2c_read_data_PARM_4,#0x02
      0008C9 75 82 E0         [24] 3224 	mov	dpl,#0xE0
      0008CC 12r03rE8         [24] 3225 	lcall	_i2c_read_data
                           0008CF  3226 	C$Lab6.c$280$1$153 ==.
                                   3227 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:280: st_range =((Data[0] << 8) | Data[1]); //combine the two values
      0008CF AF*25            [24] 3228 	mov	r7,_Data
      0008D1 7E 00            [12] 3229 	mov	r6,#0x00
      0008D3 AC*26            [24] 3230 	mov	r4,(_Data + 0x0001)
      0008D5 7D 00            [12] 3231 	mov	r5,#0x00
      0008D7 EC               [12] 3232 	mov	a,r4
      0008D8 42 06            [12] 3233 	orl	ar6,a
      0008DA ED               [12] 3234 	mov	a,r5
      0008DB 42 07            [12] 3235 	orl	ar7,a
                           0008DD  3236 	C$Lab6.c$282$1$153 ==.
                                   3237 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:282: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      0008DD 75*25 51         [24] 3238 	mov	_Data,#0x51
                           0008E0  3239 	C$Lab6.c$283$1$153 ==.
                                   3240 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:283: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      0008E0 75*06r25         [24] 3241 	mov	_i2c_write_data_PARM_3,#_Data
      0008E3 75*07 00         [24] 3242 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0008E6 75*08 40         [24] 3243 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0008E9 75*05 00         [24] 3244 	mov	_i2c_write_data_PARM_2,#0x00
      0008EC 75*09 01         [24] 3245 	mov	_i2c_write_data_PARM_4,#0x01
      0008EF 75 82 E0         [24] 3246 	mov	dpl,#0xE0
      0008F2 C0 07            [24] 3247 	push	ar7
      0008F4 C0 06            [24] 3248 	push	ar6
      0008F6 12r03r72         [24] 3249 	lcall	_i2c_write_data
      0008F9 D0 06            [24] 3250 	pop	ar6
      0008FB D0 07            [24] 3251 	pop	ar7
                           0008FD  3252 	C$Lab6.c$284$1$153 ==.
                                   3253 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:284: return st_range;
      0008FD 8E 82            [24] 3254 	mov	dpl,r6
      0008FF 8F 83            [24] 3255 	mov	dph,r7
                           000901  3256 	C$Lab6.c$285$1$153 ==.
                           000901  3257 	XG$read_ranger$0$0 ==.
      000901 22               [24] 3258 	ret
                                   3259 ;------------------------------------------------------------
                                   3260 ;Allocation info for local variables in function 'set_PW'
                                   3261 ;------------------------------------------------------------
                           000902  3262 	G$set_PW$0$0 ==.
                           000902  3263 	C$Lab6.c$289$1$153 ==.
                                   3264 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:289: void set_PW(void)
                                   3265 ;	-----------------------------------------
                                   3266 ;	 function set_PW
                                   3267 ;	-----------------------------------------
      000902                       3268 _set_PW:
                           000902  3269 	C$Lab6.c$292$1$155 ==.
                                   3270 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:292: Error = (desired_heading) - heading;	//Calculate the error
      000902 E5*33            [12] 3271 	mov	a,_desired_heading
      000904 C3               [12] 3272 	clr	c
      000905 95*35            [12] 3273 	subb	a,_heading
      000907 F5*17            [12] 3274 	mov	_Error,a
      000909 E5*34            [12] 3275 	mov	a,(_desired_heading + 1)
      00090B 95*36            [12] 3276 	subb	a,(_heading + 1)
      00090D F5*18            [12] 3277 	mov	(_Error + 1),a
                           00090F  3278 	C$Lab6.c$293$1$155 ==.
                                   3279 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:293: if(Error < -1800) { Error = Error + 3600; } //Adjust error so that we turn efficiently
      00090F C3               [12] 3280 	clr	c
      000910 E5*17            [12] 3281 	mov	a,_Error
      000912 94 F8            [12] 3282 	subb	a,#0xF8
      000914 E5*18            [12] 3283 	mov	a,(_Error + 1)
      000916 64 80            [12] 3284 	xrl	a,#0x80
      000918 94 78            [12] 3285 	subb	a,#0x78
      00091A 50 0C            [24] 3286 	jnc	00102$
      00091C 74 10            [12] 3287 	mov	a,#0x10
      00091E 25*17            [12] 3288 	add	a,_Error
      000920 F5*17            [12] 3289 	mov	_Error,a
      000922 74 0E            [12] 3290 	mov	a,#0x0E
      000924 35*18            [12] 3291 	addc	a,(_Error + 1)
      000926 F5*18            [12] 3292 	mov	(_Error + 1),a
      000928                       3293 00102$:
                           000928  3294 	C$Lab6.c$294$1$155 ==.
                                   3295 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:294: if(Error > 1800)  { Error = Error - 3600; }
      000928 C3               [12] 3296 	clr	c
      000929 74 08            [12] 3297 	mov	a,#0x08
      00092B 95*17            [12] 3298 	subb	a,_Error
      00092D 74 87            [12] 3299 	mov	a,#(0x07 ^ 0x80)
      00092F 85*18 F0         [24] 3300 	mov	b,(_Error + 1)
      000932 63 F0 80         [24] 3301 	xrl	b,#0x80
      000935 95 F0            [12] 3302 	subb	a,b
      000937 50 0C            [24] 3303 	jnc	00104$
      000939 E5*17            [12] 3304 	mov	a,_Error
      00093B 24 F0            [12] 3305 	add	a,#0xF0
      00093D F5*17            [12] 3306 	mov	_Error,a
      00093F E5*18            [12] 3307 	mov	a,(_Error + 1)
      000941 34 F1            [12] 3308 	addc	a,#0xF1
      000943 F5*18            [12] 3309 	mov	(_Error + 1),a
      000945                       3310 00104$:
                           000945  3311 	C$Lab6.c$297$1$155 ==.
                                   3312 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:297: temp_motorpw = (long)PW_CENTER + (long)kp*(long)(Error) + (long)kd*(long)(Error-prev_error);
      000945 85*17*00         [24] 3313 	mov	__mullong_PARM_2,_Error
      000948 E5*18            [12] 3314 	mov	a,(_Error + 1)
      00094A F5*01            [12] 3315 	mov	(__mullong_PARM_2 + 1),a
      00094C 33               [12] 3316 	rlc	a
      00094D 95 E0            [12] 3317 	subb	a,acc
      00094F F5*02            [12] 3318 	mov	(__mullong_PARM_2 + 2),a
      000951 F5*03            [12] 3319 	mov	(__mullong_PARM_2 + 3),a
      000953 90 42 40         [24] 3320 	mov	dptr,#0x4240
      000956 75 F0 0F         [24] 3321 	mov	b,#0x0F
      000959 E4               [12] 3322 	clr	a
      00095A 12r00r00         [24] 3323 	lcall	__mullong
      00095D AC 82            [24] 3324 	mov	r4,dpl
      00095F AD 83            [24] 3325 	mov	r5,dph
      000961 AE F0            [24] 3326 	mov	r6,b
      000963 FF               [12] 3327 	mov	r7,a
      000964 74 C8            [12] 3328 	mov	a,#0xC8
      000966 2C               [12] 3329 	add	a,r4
      000967 FC               [12] 3330 	mov	r4,a
      000968 74 0A            [12] 3331 	mov	a,#0x0A
      00096A 3D               [12] 3332 	addc	a,r5
      00096B FD               [12] 3333 	mov	r5,a
      00096C E4               [12] 3334 	clr	a
      00096D 3E               [12] 3335 	addc	a,r6
      00096E FE               [12] 3336 	mov	r6,a
      00096F E4               [12] 3337 	clr	a
      000970 3F               [12] 3338 	addc	a,r7
      000971 FF               [12] 3339 	mov	r7,a
      000972 E5*17            [12] 3340 	mov	a,_Error
      000974 C3               [12] 3341 	clr	c
      000975 95*15            [12] 3342 	subb	a,_prev_error
      000977 FA               [12] 3343 	mov	r2,a
      000978 E5*18            [12] 3344 	mov	a,(_Error + 1)
      00097A 95*16            [12] 3345 	subb	a,(_prev_error + 1)
      00097C FB               [12] 3346 	mov	r3,a
      00097D 8A*00            [24] 3347 	mov	__mullong_PARM_2,r2
      00097F EB               [12] 3348 	mov	a,r3
      000980 F5*01            [12] 3349 	mov	(__mullong_PARM_2 + 1),a
      000982 33               [12] 3350 	rlc	a
      000983 95 E0            [12] 3351 	subb	a,acc
      000985 F5*02            [12] 3352 	mov	(__mullong_PARM_2 + 2),a
      000987 F5*03            [12] 3353 	mov	(__mullong_PARM_2 + 3),a
      000989 90 42 40         [24] 3354 	mov	dptr,#0x4240
      00098C 75 F0 0F         [24] 3355 	mov	b,#0x0F
      00098F E4               [12] 3356 	clr	a
      000990 C0 07            [24] 3357 	push	ar7
      000992 C0 06            [24] 3358 	push	ar6
      000994 C0 05            [24] 3359 	push	ar5
      000996 C0 04            [24] 3360 	push	ar4
      000998 12r00r00         [24] 3361 	lcall	__mullong
      00099B A8 82            [24] 3362 	mov	r0,dpl
      00099D A9 83            [24] 3363 	mov	r1,dph
      00099F AA F0            [24] 3364 	mov	r2,b
      0009A1 FB               [12] 3365 	mov	r3,a
      0009A2 D0 04            [24] 3366 	pop	ar4
      0009A4 D0 05            [24] 3367 	pop	ar5
      0009A6 D0 06            [24] 3368 	pop	ar6
      0009A8 D0 07            [24] 3369 	pop	ar7
      0009AA E8               [12] 3370 	mov	a,r0
      0009AB 2C               [12] 3371 	add	a,r4
      0009AC F5*10            [12] 3372 	mov	_temp_motorpw,a
      0009AE E9               [12] 3373 	mov	a,r1
      0009AF 3D               [12] 3374 	addc	a,r5
      0009B0 F5*11            [12] 3375 	mov	(_temp_motorpw + 1),a
      0009B2 EA               [12] 3376 	mov	a,r2
      0009B3 3E               [12] 3377 	addc	a,r6
      0009B4 F5*12            [12] 3378 	mov	(_temp_motorpw + 2),a
      0009B6 EB               [12] 3379 	mov	a,r3
      0009B7 3F               [12] 3380 	addc	a,r7
      0009B8 F5*13            [12] 3381 	mov	(_temp_motorpw + 3),a
                           0009BA  3382 	C$Lab6.c$298$1$155 ==.
                                   3383 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:298: prev_error = Error;
      0009BA 85*17*15         [24] 3384 	mov	_prev_error,_Error
      0009BD 85*18*16         [24] 3385 	mov	(_prev_error + 1),(_Error + 1)
                           0009C0  3386 	C$Lab6.c$301$1$155 ==.
                                   3387 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:301: if(temp_motorpw < 2100) { temp_motorpw = 2100; } // min
      0009C0 C3               [12] 3388 	clr	c
      0009C1 E5*10            [12] 3389 	mov	a,_temp_motorpw
      0009C3 94 34            [12] 3390 	subb	a,#0x34
      0009C5 E5*11            [12] 3391 	mov	a,(_temp_motorpw + 1)
      0009C7 94 08            [12] 3392 	subb	a,#0x08
      0009C9 E5*12            [12] 3393 	mov	a,(_temp_motorpw + 2)
      0009CB 94 00            [12] 3394 	subb	a,#0x00
      0009CD E5*13            [12] 3395 	mov	a,(_temp_motorpw + 3)
      0009CF 64 80            [12] 3396 	xrl	a,#0x80
      0009D1 94 80            [12] 3397 	subb	a,#0x80
      0009D3 50 0B            [24] 3398 	jnc	00106$
      0009D5 75*10 34         [24] 3399 	mov	_temp_motorpw,#0x34
      0009D8 75*11 08         [24] 3400 	mov	(_temp_motorpw + 1),#0x08
      0009DB E4               [12] 3401 	clr	a
      0009DC F5*12            [12] 3402 	mov	(_temp_motorpw + 2),a
      0009DE F5*13            [12] 3403 	mov	(_temp_motorpw + 3),a
      0009E0                       3404 00106$:
                           0009E0  3405 	C$Lab6.c$302$1$155 ==.
                                   3406 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:302: if(temp_motorpw > 3400) { temp_motorpw = 3400; } // max
      0009E0 C3               [12] 3407 	clr	c
      0009E1 74 48            [12] 3408 	mov	a,#0x48
      0009E3 95*10            [12] 3409 	subb	a,_temp_motorpw
      0009E5 74 0D            [12] 3410 	mov	a,#0x0D
      0009E7 95*11            [12] 3411 	subb	a,(_temp_motorpw + 1)
      0009E9 E4               [12] 3412 	clr	a
      0009EA 95*12            [12] 3413 	subb	a,(_temp_motorpw + 2)
      0009EC 74 80            [12] 3414 	mov	a,#(0x00 ^ 0x80)
      0009EE 85*13 F0         [24] 3415 	mov	b,(_temp_motorpw + 3)
      0009F1 63 F0 80         [24] 3416 	xrl	b,#0x80
      0009F4 95 F0            [12] 3417 	subb	a,b
      0009F6 50 0B            [24] 3418 	jnc	00108$
      0009F8 75*10 48         [24] 3419 	mov	_temp_motorpw,#0x48
      0009FB 75*11 0D         [24] 3420 	mov	(_temp_motorpw + 1),#0x0D
      0009FE E4               [12] 3421 	clr	a
      0009FF F5*12            [12] 3422 	mov	(_temp_motorpw + 2),a
      000A01 F5*13            [12] 3423 	mov	(_temp_motorpw + 3),a
      000A03                       3424 00108$:
                           000A03  3425 	C$Lab6.c$304$1$155 ==.
                                   3426 ;	C:\Users\Kathryn\Dropbox\2015 Spring\LITEC\Labs\LITEC\Lab 6\Lab6.c:304: PCA0CP0 = 0xFFFF - temp_motorpw; // Change pulse width
      000A03 74 FF            [12] 3427 	mov	a,#0xFF
      000A05 C3               [12] 3428 	clr	c
      000A06 95*10            [12] 3429 	subb	a,_temp_motorpw
      000A08 FC               [12] 3430 	mov	r4,a
      000A09 74 FF            [12] 3431 	mov	a,#0xFF
      000A0B 95*11            [12] 3432 	subb	a,(_temp_motorpw + 1)
      000A0D FD               [12] 3433 	mov	r5,a
      000A0E E4               [12] 3434 	clr	a
      000A0F 95*12            [12] 3435 	subb	a,(_temp_motorpw + 2)
      000A11 E4               [12] 3436 	clr	a
      000A12 95*13            [12] 3437 	subb	a,(_temp_motorpw + 3)
      000A14 8C EA            [24] 3438 	mov	((_PCA0CP0 >> 0) & 0xFF),r4
      000A16 8D FA            [24] 3439 	mov	((_PCA0CP0 >> 8) & 0xFF),r5
                           000A18  3440 	C$Lab6.c$305$1$155 ==.
                           000A18  3441 	XG$set_PW$0$0 ==.
      000A18 22               [24] 3442 	ret
                                   3443 	.area CSEG    (CODE)
                                   3444 	.area CONST   (CODE)
                           000000  3445 FLab6$__str_0$0$0 == .
      000000                       3446 ___str_0:
      000000 0A                    3447 	.db 0x0A
      000001 54 79 70 65 20 64 69  3448 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3449 	.db 0x00
                           000016  3450 FLab6$__str_1$0$0 == .
      000016                       3451 ___str_1:
      000016 20 20 20 20 20 25 63  3452 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3453 	.db 0x00
                           000026  3454 FLab6$__str_2$0$0 == .
      000026                       3455 ___str_2:
      000026 25 63                 3456 	.ascii "%c"
      000028 00                    3457 	.db 0x00
                           000029  3458 FLab6$__str_3$0$0 == .
      000029                       3459 ___str_3:
      000029 0A                    3460 	.db 0x0A
      00002A 53 74 61 72 74        3461 	.ascii "Start"
      00002F 0D                    3462 	.db 0x0D
      000030 0A                    3463 	.db 0x0A
      000031 00                    3464 	.db 0x00
                           000032  3465 FLab6$__str_4$0$0 == .
      000032                       3466 ___str_4:
      000032 0D                    3467 	.db 0x0D
      000033 50 6C 65 61 73 65 20  3468 	.ascii "Please select a desired steering gain."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 73 74 65 65
             72 69 6E 67 20 67 61
             69 6E 2E
      000059 0A                    3469 	.db 0x0A
      00005A 00                    3470 	.db 0x00
                           00005B  3471 FLab6$__str_5$0$0 == .
      00005B                       3472 ___str_5:
      00005B 0D                    3473 	.db 0x0D
      00005C 27 75 27 20 77 69 6C  3474 	.ascii "'u' will increment by 0.1. 'd' will decrement by 0.1."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 30 2E 31 2E 20 27
             64 27 20 77 69 6C 6C
             20 64 65 63 72 65 6D
             65 6E 74 20 62 79 20
             30 2E 31 2E
      000091 0A                    3475 	.db 0x0A
      000092 00                    3476 	.db 0x00
                           000093  3477 FLab6$__str_6$0$0 == .
      000093                       3478 ___str_6:
      000093 0D                    3479 	.db 0x0D
      000094 27 66 27 20 77 68 65  3480 	.ascii "'f' when finished"
             6E 20 66 69 6E 69 73
             68 65 64
      0000A5 0A                    3481 	.db 0x0A
      0000A6 00                    3482 	.db 0x00
                           0000A7  3483 FLab6$__str_7$0$0 == .
      0000A7                       3484 ___str_7:
      0000A7 0D                    3485 	.db 0x0D
      0000A8 44 65 73 69 72 65 64  3486 	.ascii "Desired steering gain: %2.1f"
             20 73 74 65 65 72 69
             6E 67 20 67 61 69 6E
             3A 20 25 32 2E 31 66
      0000C4 0A                    3487 	.db 0x0A
      0000C5 00                    3488 	.db 0x00
                           0000C6  3489 FLab6$__str_8$0$0 == .
      0000C6                       3490 ___str_8:
      0000C6 0D                    3491 	.db 0x0D
      0000C7 50 6C 65 61 73 65 20  3492 	.ascii "Please select a desired heading."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 2E
      0000E7 0A                    3493 	.db 0x0A
      0000E8 00                    3494 	.db 0x00
                           0000E9  3495 FLab6$__str_9$0$0 == .
      0000E9                       3496 ___str_9:
      0000E9 0D                    3497 	.db 0x0D
      0000EA 44 65 73 69 72 65 64  3498 	.ascii "Desired heading: %2.1f"
             20 68 65 61 64 69 6E
             67 3A 20 25 32 2E 31
             66
      000100 0A                    3499 	.db 0x0A
      000101 00                    3500 	.db 0x00
                                   3501 	.area XINIT   (CODE)
                                   3502 	.area CABS    (ABS,CODE)
