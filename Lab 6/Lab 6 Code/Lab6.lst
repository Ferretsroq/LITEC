                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Fri May 01 13:41:55 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _Pick_Steering_Gain
                                     13 	.globl _main
                                     14 	.globl _read_keypad
                                     15 	.globl _strlen
                                     16 	.globl _Sys_Init
                                     17 	.globl _UART0_Init
                                     18 	.globl _SYSCLK_Init
                                     19 	.globl _printf_fast_f
                                     20 	.globl _vsprintf
                                     21 	.globl _printf
                                     22 	.globl _BUS_SCL
                                     23 	.globl _BUS_TOE
                                     24 	.globl _BUS_FTE
                                     25 	.globl _BUS_AA
                                     26 	.globl _BUS_INT
                                     27 	.globl _BUS_STOP
                                     28 	.globl _BUS_START
                                     29 	.globl _BUS_EN
                                     30 	.globl _BUS_BUSY
                                     31 	.globl _SPIF
                                     32 	.globl _WCOL
                                     33 	.globl _MODF
                                     34 	.globl _RXOVRN
                                     35 	.globl _TXBSY
                                     36 	.globl _SLVSEL
                                     37 	.globl _MSTEN
                                     38 	.globl _SPIEN
                                     39 	.globl _AD0EN
                                     40 	.globl _ADCEN
                                     41 	.globl _AD0TM
                                     42 	.globl _ADCTM
                                     43 	.globl _AD0INT
                                     44 	.globl _ADCINT
                                     45 	.globl _AD0BUSY
                                     46 	.globl _ADBUSY
                                     47 	.globl _AD0CM1
                                     48 	.globl _ADSTM1
                                     49 	.globl _AD0CM0
                                     50 	.globl _ADSTM0
                                     51 	.globl _AD0WINT
                                     52 	.globl _ADWINT
                                     53 	.globl _AD0LJST
                                     54 	.globl _ADLJST
                                     55 	.globl _CF
                                     56 	.globl _CR
                                     57 	.globl _CCF4
                                     58 	.globl _CCF3
                                     59 	.globl _CCF2
                                     60 	.globl _CCF1
                                     61 	.globl _CCF0
                                     62 	.globl _CY
                                     63 	.globl _AC
                                     64 	.globl _F0
                                     65 	.globl _RS1
                                     66 	.globl _RS0
                                     67 	.globl _OV
                                     68 	.globl _F1
                                     69 	.globl _P
                                     70 	.globl _TF2
                                     71 	.globl _EXF2
                                     72 	.globl _RCLK
                                     73 	.globl _TCLK
                                     74 	.globl _EXEN2
                                     75 	.globl _TR2
                                     76 	.globl _CT2
                                     77 	.globl _CPRL2
                                     78 	.globl _BUSY
                                     79 	.globl _ENSMB
                                     80 	.globl _STA
                                     81 	.globl _STO
                                     82 	.globl _SI
                                     83 	.globl _AA
                                     84 	.globl _SMBFTE
                                     85 	.globl _SMBTOE
                                     86 	.globl _PT2
                                     87 	.globl _PS
                                     88 	.globl _PS0
                                     89 	.globl _PT1
                                     90 	.globl _PX1
                                     91 	.globl _PT0
                                     92 	.globl _PX0
                                     93 	.globl _P3_7
                                     94 	.globl _P3_6
                                     95 	.globl _P3_5
                                     96 	.globl _P3_4
                                     97 	.globl _P3_3
                                     98 	.globl _P3_2
                                     99 	.globl _P3_1
                                    100 	.globl _P3_0
                                    101 	.globl _EA
                                    102 	.globl _ET2
                                    103 	.globl _ES
                                    104 	.globl _ES0
                                    105 	.globl _ET1
                                    106 	.globl _EX1
                                    107 	.globl _ET0
                                    108 	.globl _EX0
                                    109 	.globl _P2_7
                                    110 	.globl _P2_6
                                    111 	.globl _P2_5
                                    112 	.globl _P2_4
                                    113 	.globl _P2_3
                                    114 	.globl _P2_2
                                    115 	.globl _P2_1
                                    116 	.globl _P2_0
                                    117 	.globl _S0MODE
                                    118 	.globl _SM00
                                    119 	.globl _SM0
                                    120 	.globl _SM10
                                    121 	.globl _SM1
                                    122 	.globl _MCE0
                                    123 	.globl _SM20
                                    124 	.globl _SM2
                                    125 	.globl _REN0
                                    126 	.globl _REN
                                    127 	.globl _TB80
                                    128 	.globl _TB8
                                    129 	.globl _RB80
                                    130 	.globl _RB8
                                    131 	.globl _TI0
                                    132 	.globl _TI
                                    133 	.globl _RI0
                                    134 	.globl _RI
                                    135 	.globl _P1_7
                                    136 	.globl _P1_6
                                    137 	.globl _P1_5
                                    138 	.globl _P1_4
                                    139 	.globl _P1_3
                                    140 	.globl _P1_2
                                    141 	.globl _P1_1
                                    142 	.globl _P1_0
                                    143 	.globl _TF1
                                    144 	.globl _TR1
                                    145 	.globl _TF0
                                    146 	.globl _TR0
                                    147 	.globl _IE1
                                    148 	.globl _IT1
                                    149 	.globl _IE0
                                    150 	.globl _IT0
                                    151 	.globl _P0_7
                                    152 	.globl _P0_6
                                    153 	.globl _P0_5
                                    154 	.globl _P0_4
                                    155 	.globl _P0_3
                                    156 	.globl _P0_2
                                    157 	.globl _P0_1
                                    158 	.globl _P0_0
                                    159 	.globl _PCA0CP4
                                    160 	.globl _PCA0CP3
                                    161 	.globl _PCA0CP2
                                    162 	.globl _PCA0CP1
                                    163 	.globl _PCA0CP0
                                    164 	.globl _PCA0
                                    165 	.globl _DAC1
                                    166 	.globl _DAC0
                                    167 	.globl _ADC0LT
                                    168 	.globl _ADC0GT
                                    169 	.globl _ADC0
                                    170 	.globl _RCAP4
                                    171 	.globl _TMR4
                                    172 	.globl _TMR3RL
                                    173 	.globl _TMR3
                                    174 	.globl _RCAP2
                                    175 	.globl _TMR2
                                    176 	.globl _TMR1
                                    177 	.globl _TMR0
                                    178 	.globl _WDTCN
                                    179 	.globl _PCA0CPH4
                                    180 	.globl _PCA0CPH3
                                    181 	.globl _PCA0CPH2
                                    182 	.globl _PCA0CPH1
                                    183 	.globl _PCA0CPH0
                                    184 	.globl _PCA0H
                                    185 	.globl _SPI0CN
                                    186 	.globl _EIP2
                                    187 	.globl _EIP1
                                    188 	.globl _TH4
                                    189 	.globl _TL4
                                    190 	.globl _SADDR1
                                    191 	.globl _SBUF1
                                    192 	.globl _SCON1
                                    193 	.globl _B
                                    194 	.globl _RSTSRC
                                    195 	.globl _PCA0CPL4
                                    196 	.globl _PCA0CPL3
                                    197 	.globl _PCA0CPL2
                                    198 	.globl _PCA0CPL1
                                    199 	.globl _PCA0CPL0
                                    200 	.globl _PCA0L
                                    201 	.globl _ADC0CN
                                    202 	.globl _EIE2
                                    203 	.globl _EIE1
                                    204 	.globl _RCAP4H
                                    205 	.globl _RCAP4L
                                    206 	.globl _XBR2
                                    207 	.globl _XBR1
                                    208 	.globl _XBR0
                                    209 	.globl _ACC
                                    210 	.globl _PCA0CPM4
                                    211 	.globl _PCA0CPM3
                                    212 	.globl _PCA0CPM2
                                    213 	.globl _PCA0CPM1
                                    214 	.globl _PCA0CPM0
                                    215 	.globl _PCA0MD
                                    216 	.globl _PCA0CN
                                    217 	.globl _DAC1CN
                                    218 	.globl _DAC1H
                                    219 	.globl _DAC1L
                                    220 	.globl _DAC0CN
                                    221 	.globl _DAC0H
                                    222 	.globl _DAC0L
                                    223 	.globl _REF0CN
                                    224 	.globl _PSW
                                    225 	.globl _SMB0CR
                                    226 	.globl _TH2
                                    227 	.globl _TL2
                                    228 	.globl _RCAP2H
                                    229 	.globl _RCAP2L
                                    230 	.globl _T4CON
                                    231 	.globl _T2CON
                                    232 	.globl _ADC0LTH
                                    233 	.globl _ADC0LTL
                                    234 	.globl _ADC0GTH
                                    235 	.globl _ADC0GTL
                                    236 	.globl _SMB0ADR
                                    237 	.globl _SMB0DAT
                                    238 	.globl _SMB0STA
                                    239 	.globl _SMB0CN
                                    240 	.globl _ADC0H
                                    241 	.globl _ADC0L
                                    242 	.globl _P1MDIN
                                    243 	.globl _ADC0CF
                                    244 	.globl _AMX0SL
                                    245 	.globl _AMX0CF
                                    246 	.globl _SADEN0
                                    247 	.globl _IP
                                    248 	.globl _FLACL
                                    249 	.globl _FLSCL
                                    250 	.globl _P74OUT
                                    251 	.globl _OSCICN
                                    252 	.globl _OSCXCN
                                    253 	.globl _P3
                                    254 	.globl __XPAGE
                                    255 	.globl _EMI0CN
                                    256 	.globl _SADEN1
                                    257 	.globl _P3IF
                                    258 	.globl _AMX1SL
                                    259 	.globl _ADC1CF
                                    260 	.globl _ADC1CN
                                    261 	.globl _SADDR0
                                    262 	.globl _IE
                                    263 	.globl _P3MDOUT
                                    264 	.globl _PRT3CF
                                    265 	.globl _P2MDOUT
                                    266 	.globl _PRT2CF
                                    267 	.globl _P1MDOUT
                                    268 	.globl _PRT1CF
                                    269 	.globl _P0MDOUT
                                    270 	.globl _PRT0CF
                                    271 	.globl _EMI0CF
                                    272 	.globl _EMI0TC
                                    273 	.globl _P2
                                    274 	.globl _CPT1CN
                                    275 	.globl _CPT0CN
                                    276 	.globl _SPI0CKR
                                    277 	.globl _ADC1
                                    278 	.globl _SPI0DAT
                                    279 	.globl _SPI0CFG
                                    280 	.globl _SBUF0
                                    281 	.globl _SBUF
                                    282 	.globl _SCON0
                                    283 	.globl _SCON
                                    284 	.globl _P7
                                    285 	.globl _TMR3H
                                    286 	.globl _TMR3L
                                    287 	.globl _TMR3RLH
                                    288 	.globl _TMR3RLL
                                    289 	.globl _TMR3CN
                                    290 	.globl _P1
                                    291 	.globl _PSCTL
                                    292 	.globl _CKCON
                                    293 	.globl _TH1
                                    294 	.globl _TH0
                                    295 	.globl _TL1
                                    296 	.globl _TL0
                                    297 	.globl _TMOD
                                    298 	.globl _TCON
                                    299 	.globl _PCON
                                    300 	.globl _P6
                                    301 	.globl _P5
                                    302 	.globl _P4
                                    303 	.globl _DPH
                                    304 	.globl _DPL
                                    305 	.globl _SP
                                    306 	.globl _P0
                                    307 	.globl _new_heading
                                    308 	.globl _h_count
                                    309 	.globl _range
                                    310 	.globl _heading
                                    311 	.globl _desired_heading
                                    312 	.globl _voltage
                                    313 	.globl _AD_Result
                                    314 	.globl _new_AD
                                    315 	.globl _drive_gain
                                    316 	.globl _steer_gain
                                    317 	.globl _print_delay
                                    318 	.globl _Data
                                    319 	.globl _STEER_PW
                                    320 	.globl _DRIVE_PW
                                    321 	.globl _delay
                                    322 	.globl _adc_count
                                    323 	.globl _a_count
                                    324 	.globl _r_count
                                    325 	.globl _nCounts
                                    326 	.globl _Counts
                                    327 	.globl _Error
                                    328 	.globl _prev_error
                                    329 	.globl _new_range
                                    330 	.globl _temp_motorpw
                                    331 	.globl _i2c_read_data_PARM_4
                                    332 	.globl _i2c_read_data_PARM_3
                                    333 	.globl _i2c_read_data_PARM_2
                                    334 	.globl _i2c_write_data_PARM_4
                                    335 	.globl _i2c_write_data_PARM_3
                                    336 	.globl _i2c_write_data_PARM_2
                                    337 	.globl _putchar
                                    338 	.globl _getchar
                                    339 	.globl _lcd_print
                                    340 	.globl _lcd_clear
                                    341 	.globl _kpd_input
                                    342 	.globl _delay_time
                                    343 	.globl _i2c_start
                                    344 	.globl _i2c_write
                                    345 	.globl _i2c_write_and_stop
                                    346 	.globl _i2c_read
                                    347 	.globl _i2c_read_and_stop
                                    348 	.globl _i2c_write_data
                                    349 	.globl _i2c_read_data
                                    350 	.globl _Accel_Init
                                    351 	.globl _Port_Init
                                    352 	.globl _Interrupt_Init
                                    353 	.globl _PCA_Init
                                    354 	.globl _SMB0_Init
                                    355 	.globl _PCA_ISR
                                    356 	.globl _ADC_Init
                                    357 	.globl _read_AD_input
                                    358 	.globl _Hand_Check
                                    359 	.globl _Pick_Heading
                                    360 	.globl _read_compass
                                    361 	.globl _read_ranger
                                    362 	.globl _set_PW
                                    363 	.globl _Set_Desired_Heading
                                    364 ;--------------------------------------------------------
                                    365 ; special function registers
                                    366 ;--------------------------------------------------------
                                    367 	.area RSEG    (ABS,DATA)
      000000                        368 	.org 0x0000
                           000080   369 G$P0$0$0 == 0x0080
                           000080   370 _P0	=	0x0080
                           000081   371 G$SP$0$0 == 0x0081
                           000081   372 _SP	=	0x0081
                           000082   373 G$DPL$0$0 == 0x0082
                           000082   374 _DPL	=	0x0082
                           000083   375 G$DPH$0$0 == 0x0083
                           000083   376 _DPH	=	0x0083
                           000084   377 G$P4$0$0 == 0x0084
                           000084   378 _P4	=	0x0084
                           000085   379 G$P5$0$0 == 0x0085
                           000085   380 _P5	=	0x0085
                           000086   381 G$P6$0$0 == 0x0086
                           000086   382 _P6	=	0x0086
                           000087   383 G$PCON$0$0 == 0x0087
                           000087   384 _PCON	=	0x0087
                           000088   385 G$TCON$0$0 == 0x0088
                           000088   386 _TCON	=	0x0088
                           000089   387 G$TMOD$0$0 == 0x0089
                           000089   388 _TMOD	=	0x0089
                           00008A   389 G$TL0$0$0 == 0x008a
                           00008A   390 _TL0	=	0x008a
                           00008B   391 G$TL1$0$0 == 0x008b
                           00008B   392 _TL1	=	0x008b
                           00008C   393 G$TH0$0$0 == 0x008c
                           00008C   394 _TH0	=	0x008c
                           00008D   395 G$TH1$0$0 == 0x008d
                           00008D   396 _TH1	=	0x008d
                           00008E   397 G$CKCON$0$0 == 0x008e
                           00008E   398 _CKCON	=	0x008e
                           00008F   399 G$PSCTL$0$0 == 0x008f
                           00008F   400 _PSCTL	=	0x008f
                           000090   401 G$P1$0$0 == 0x0090
                           000090   402 _P1	=	0x0090
                           000091   403 G$TMR3CN$0$0 == 0x0091
                           000091   404 _TMR3CN	=	0x0091
                           000092   405 G$TMR3RLL$0$0 == 0x0092
                           000092   406 _TMR3RLL	=	0x0092
                           000093   407 G$TMR3RLH$0$0 == 0x0093
                           000093   408 _TMR3RLH	=	0x0093
                           000094   409 G$TMR3L$0$0 == 0x0094
                           000094   410 _TMR3L	=	0x0094
                           000095   411 G$TMR3H$0$0 == 0x0095
                           000095   412 _TMR3H	=	0x0095
                           000096   413 G$P7$0$0 == 0x0096
                           000096   414 _P7	=	0x0096
                           000098   415 G$SCON$0$0 == 0x0098
                           000098   416 _SCON	=	0x0098
                           000098   417 G$SCON0$0$0 == 0x0098
                           000098   418 _SCON0	=	0x0098
                           000099   419 G$SBUF$0$0 == 0x0099
                           000099   420 _SBUF	=	0x0099
                           000099   421 G$SBUF0$0$0 == 0x0099
                           000099   422 _SBUF0	=	0x0099
                           00009A   423 G$SPI0CFG$0$0 == 0x009a
                           00009A   424 _SPI0CFG	=	0x009a
                           00009B   425 G$SPI0DAT$0$0 == 0x009b
                           00009B   426 _SPI0DAT	=	0x009b
                           00009C   427 G$ADC1$0$0 == 0x009c
                           00009C   428 _ADC1	=	0x009c
                           00009D   429 G$SPI0CKR$0$0 == 0x009d
                           00009D   430 _SPI0CKR	=	0x009d
                           00009E   431 G$CPT0CN$0$0 == 0x009e
                           00009E   432 _CPT0CN	=	0x009e
                           00009F   433 G$CPT1CN$0$0 == 0x009f
                           00009F   434 _CPT1CN	=	0x009f
                           0000A0   435 G$P2$0$0 == 0x00a0
                           0000A0   436 _P2	=	0x00a0
                           0000A1   437 G$EMI0TC$0$0 == 0x00a1
                           0000A1   438 _EMI0TC	=	0x00a1
                           0000A3   439 G$EMI0CF$0$0 == 0x00a3
                           0000A3   440 _EMI0CF	=	0x00a3
                           0000A4   441 G$PRT0CF$0$0 == 0x00a4
                           0000A4   442 _PRT0CF	=	0x00a4
                           0000A4   443 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   444 _P0MDOUT	=	0x00a4
                           0000A5   445 G$PRT1CF$0$0 == 0x00a5
                           0000A5   446 _PRT1CF	=	0x00a5
                           0000A5   447 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   448 _P1MDOUT	=	0x00a5
                           0000A6   449 G$PRT2CF$0$0 == 0x00a6
                           0000A6   450 _PRT2CF	=	0x00a6
                           0000A6   451 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   452 _P2MDOUT	=	0x00a6
                           0000A7   453 G$PRT3CF$0$0 == 0x00a7
                           0000A7   454 _PRT3CF	=	0x00a7
                           0000A7   455 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   456 _P3MDOUT	=	0x00a7
                           0000A8   457 G$IE$0$0 == 0x00a8
                           0000A8   458 _IE	=	0x00a8
                           0000A9   459 G$SADDR0$0$0 == 0x00a9
                           0000A9   460 _SADDR0	=	0x00a9
                           0000AA   461 G$ADC1CN$0$0 == 0x00aa
                           0000AA   462 _ADC1CN	=	0x00aa
                           0000AB   463 G$ADC1CF$0$0 == 0x00ab
                           0000AB   464 _ADC1CF	=	0x00ab
                           0000AC   465 G$AMX1SL$0$0 == 0x00ac
                           0000AC   466 _AMX1SL	=	0x00ac
                           0000AD   467 G$P3IF$0$0 == 0x00ad
                           0000AD   468 _P3IF	=	0x00ad
                           0000AE   469 G$SADEN1$0$0 == 0x00ae
                           0000AE   470 _SADEN1	=	0x00ae
                           0000AF   471 G$EMI0CN$0$0 == 0x00af
                           0000AF   472 _EMI0CN	=	0x00af
                           0000AF   473 G$_XPAGE$0$0 == 0x00af
                           0000AF   474 __XPAGE	=	0x00af
                           0000B0   475 G$P3$0$0 == 0x00b0
                           0000B0   476 _P3	=	0x00b0
                           0000B1   477 G$OSCXCN$0$0 == 0x00b1
                           0000B1   478 _OSCXCN	=	0x00b1
                           0000B2   479 G$OSCICN$0$0 == 0x00b2
                           0000B2   480 _OSCICN	=	0x00b2
                           0000B5   481 G$P74OUT$0$0 == 0x00b5
                           0000B5   482 _P74OUT	=	0x00b5
                           0000B6   483 G$FLSCL$0$0 == 0x00b6
                           0000B6   484 _FLSCL	=	0x00b6
                           0000B7   485 G$FLACL$0$0 == 0x00b7
                           0000B7   486 _FLACL	=	0x00b7
                           0000B8   487 G$IP$0$0 == 0x00b8
                           0000B8   488 _IP	=	0x00b8
                           0000B9   489 G$SADEN0$0$0 == 0x00b9
                           0000B9   490 _SADEN0	=	0x00b9
                           0000BA   491 G$AMX0CF$0$0 == 0x00ba
                           0000BA   492 _AMX0CF	=	0x00ba
                           0000BB   493 G$AMX0SL$0$0 == 0x00bb
                           0000BB   494 _AMX0SL	=	0x00bb
                           0000BC   495 G$ADC0CF$0$0 == 0x00bc
                           0000BC   496 _ADC0CF	=	0x00bc
                           0000BD   497 G$P1MDIN$0$0 == 0x00bd
                           0000BD   498 _P1MDIN	=	0x00bd
                           0000BE   499 G$ADC0L$0$0 == 0x00be
                           0000BE   500 _ADC0L	=	0x00be
                           0000BF   501 G$ADC0H$0$0 == 0x00bf
                           0000BF   502 _ADC0H	=	0x00bf
                           0000C0   503 G$SMB0CN$0$0 == 0x00c0
                           0000C0   504 _SMB0CN	=	0x00c0
                           0000C1   505 G$SMB0STA$0$0 == 0x00c1
                           0000C1   506 _SMB0STA	=	0x00c1
                           0000C2   507 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   508 _SMB0DAT	=	0x00c2
                           0000C3   509 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   510 _SMB0ADR	=	0x00c3
                           0000C4   511 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   512 _ADC0GTL	=	0x00c4
                           0000C5   513 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   514 _ADC0GTH	=	0x00c5
                           0000C6   515 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   516 _ADC0LTL	=	0x00c6
                           0000C7   517 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   518 _ADC0LTH	=	0x00c7
                           0000C8   519 G$T2CON$0$0 == 0x00c8
                           0000C8   520 _T2CON	=	0x00c8
                           0000C9   521 G$T4CON$0$0 == 0x00c9
                           0000C9   522 _T4CON	=	0x00c9
                           0000CA   523 G$RCAP2L$0$0 == 0x00ca
                           0000CA   524 _RCAP2L	=	0x00ca
                           0000CB   525 G$RCAP2H$0$0 == 0x00cb
                           0000CB   526 _RCAP2H	=	0x00cb
                           0000CC   527 G$TL2$0$0 == 0x00cc
                           0000CC   528 _TL2	=	0x00cc
                           0000CD   529 G$TH2$0$0 == 0x00cd
                           0000CD   530 _TH2	=	0x00cd
                           0000CF   531 G$SMB0CR$0$0 == 0x00cf
                           0000CF   532 _SMB0CR	=	0x00cf
                           0000D0   533 G$PSW$0$0 == 0x00d0
                           0000D0   534 _PSW	=	0x00d0
                           0000D1   535 G$REF0CN$0$0 == 0x00d1
                           0000D1   536 _REF0CN	=	0x00d1
                           0000D2   537 G$DAC0L$0$0 == 0x00d2
                           0000D2   538 _DAC0L	=	0x00d2
                           0000D3   539 G$DAC0H$0$0 == 0x00d3
                           0000D3   540 _DAC0H	=	0x00d3
                           0000D4   541 G$DAC0CN$0$0 == 0x00d4
                           0000D4   542 _DAC0CN	=	0x00d4
                           0000D5   543 G$DAC1L$0$0 == 0x00d5
                           0000D5   544 _DAC1L	=	0x00d5
                           0000D6   545 G$DAC1H$0$0 == 0x00d6
                           0000D6   546 _DAC1H	=	0x00d6
                           0000D7   547 G$DAC1CN$0$0 == 0x00d7
                           0000D7   548 _DAC1CN	=	0x00d7
                           0000D8   549 G$PCA0CN$0$0 == 0x00d8
                           0000D8   550 _PCA0CN	=	0x00d8
                           0000D9   551 G$PCA0MD$0$0 == 0x00d9
                           0000D9   552 _PCA0MD	=	0x00d9
                           0000DA   553 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   554 _PCA0CPM0	=	0x00da
                           0000DB   555 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   556 _PCA0CPM1	=	0x00db
                           0000DC   557 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   558 _PCA0CPM2	=	0x00dc
                           0000DD   559 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   560 _PCA0CPM3	=	0x00dd
                           0000DE   561 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   562 _PCA0CPM4	=	0x00de
                           0000E0   563 G$ACC$0$0 == 0x00e0
                           0000E0   564 _ACC	=	0x00e0
                           0000E1   565 G$XBR0$0$0 == 0x00e1
                           0000E1   566 _XBR0	=	0x00e1
                           0000E2   567 G$XBR1$0$0 == 0x00e2
                           0000E2   568 _XBR1	=	0x00e2
                           0000E3   569 G$XBR2$0$0 == 0x00e3
                           0000E3   570 _XBR2	=	0x00e3
                           0000E4   571 G$RCAP4L$0$0 == 0x00e4
                           0000E4   572 _RCAP4L	=	0x00e4
                           0000E5   573 G$RCAP4H$0$0 == 0x00e5
                           0000E5   574 _RCAP4H	=	0x00e5
                           0000E6   575 G$EIE1$0$0 == 0x00e6
                           0000E6   576 _EIE1	=	0x00e6
                           0000E7   577 G$EIE2$0$0 == 0x00e7
                           0000E7   578 _EIE2	=	0x00e7
                           0000E8   579 G$ADC0CN$0$0 == 0x00e8
                           0000E8   580 _ADC0CN	=	0x00e8
                           0000E9   581 G$PCA0L$0$0 == 0x00e9
                           0000E9   582 _PCA0L	=	0x00e9
                           0000EA   583 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   584 _PCA0CPL0	=	0x00ea
                           0000EB   585 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   586 _PCA0CPL1	=	0x00eb
                           0000EC   587 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   588 _PCA0CPL2	=	0x00ec
                           0000ED   589 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   590 _PCA0CPL3	=	0x00ed
                           0000EE   591 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   592 _PCA0CPL4	=	0x00ee
                           0000EF   593 G$RSTSRC$0$0 == 0x00ef
                           0000EF   594 _RSTSRC	=	0x00ef
                           0000F0   595 G$B$0$0 == 0x00f0
                           0000F0   596 _B	=	0x00f0
                           0000F1   597 G$SCON1$0$0 == 0x00f1
                           0000F1   598 _SCON1	=	0x00f1
                           0000F2   599 G$SBUF1$0$0 == 0x00f2
                           0000F2   600 _SBUF1	=	0x00f2
                           0000F3   601 G$SADDR1$0$0 == 0x00f3
                           0000F3   602 _SADDR1	=	0x00f3
                           0000F4   603 G$TL4$0$0 == 0x00f4
                           0000F4   604 _TL4	=	0x00f4
                           0000F5   605 G$TH4$0$0 == 0x00f5
                           0000F5   606 _TH4	=	0x00f5
                           0000F6   607 G$EIP1$0$0 == 0x00f6
                           0000F6   608 _EIP1	=	0x00f6
                           0000F7   609 G$EIP2$0$0 == 0x00f7
                           0000F7   610 _EIP2	=	0x00f7
                           0000F8   611 G$SPI0CN$0$0 == 0x00f8
                           0000F8   612 _SPI0CN	=	0x00f8
                           0000F9   613 G$PCA0H$0$0 == 0x00f9
                           0000F9   614 _PCA0H	=	0x00f9
                           0000FA   615 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   616 _PCA0CPH0	=	0x00fa
                           0000FB   617 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   618 _PCA0CPH1	=	0x00fb
                           0000FC   619 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   620 _PCA0CPH2	=	0x00fc
                           0000FD   621 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   622 _PCA0CPH3	=	0x00fd
                           0000FE   623 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   624 _PCA0CPH4	=	0x00fe
                           0000FF   625 G$WDTCN$0$0 == 0x00ff
                           0000FF   626 _WDTCN	=	0x00ff
                           008C8A   627 G$TMR0$0$0 == 0x8c8a
                           008C8A   628 _TMR0	=	0x8c8a
                           008D8B   629 G$TMR1$0$0 == 0x8d8b
                           008D8B   630 _TMR1	=	0x8d8b
                           00CDCC   631 G$TMR2$0$0 == 0xcdcc
                           00CDCC   632 _TMR2	=	0xcdcc
                           00CBCA   633 G$RCAP2$0$0 == 0xcbca
                           00CBCA   634 _RCAP2	=	0xcbca
                           009594   635 G$TMR3$0$0 == 0x9594
                           009594   636 _TMR3	=	0x9594
                           009392   637 G$TMR3RL$0$0 == 0x9392
                           009392   638 _TMR3RL	=	0x9392
                           00F5F4   639 G$TMR4$0$0 == 0xf5f4
                           00F5F4   640 _TMR4	=	0xf5f4
                           00E5E4   641 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   642 _RCAP4	=	0xe5e4
                           00BFBE   643 G$ADC0$0$0 == 0xbfbe
                           00BFBE   644 _ADC0	=	0xbfbe
                           00C5C4   645 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   646 _ADC0GT	=	0xc5c4
                           00C7C6   647 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   648 _ADC0LT	=	0xc7c6
                           00D3D2   649 G$DAC0$0$0 == 0xd3d2
                           00D3D2   650 _DAC0	=	0xd3d2
                           00D6D5   651 G$DAC1$0$0 == 0xd6d5
                           00D6D5   652 _DAC1	=	0xd6d5
                           00F9E9   653 G$PCA0$0$0 == 0xf9e9
                           00F9E9   654 _PCA0	=	0xf9e9
                           00FAEA   655 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   656 _PCA0CP0	=	0xfaea
                           00FBEB   657 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   658 _PCA0CP1	=	0xfbeb
                           00FCEC   659 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   660 _PCA0CP2	=	0xfcec
                           00FDED   661 G$PCA0CP3$0$0 == 0xfded
                           00FDED   662 _PCA0CP3	=	0xfded
                           00FEEE   663 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   664 _PCA0CP4	=	0xfeee
                                    665 ;--------------------------------------------------------
                                    666 ; special function bits
                                    667 ;--------------------------------------------------------
                                    668 	.area RSEG    (ABS,DATA)
      000000                        669 	.org 0x0000
                           000080   670 G$P0_0$0$0 == 0x0080
                           000080   671 _P0_0	=	0x0080
                           000081   672 G$P0_1$0$0 == 0x0081
                           000081   673 _P0_1	=	0x0081
                           000082   674 G$P0_2$0$0 == 0x0082
                           000082   675 _P0_2	=	0x0082
                           000083   676 G$P0_3$0$0 == 0x0083
                           000083   677 _P0_3	=	0x0083
                           000084   678 G$P0_4$0$0 == 0x0084
                           000084   679 _P0_4	=	0x0084
                           000085   680 G$P0_5$0$0 == 0x0085
                           000085   681 _P0_5	=	0x0085
                           000086   682 G$P0_6$0$0 == 0x0086
                           000086   683 _P0_6	=	0x0086
                           000087   684 G$P0_7$0$0 == 0x0087
                           000087   685 _P0_7	=	0x0087
                           000088   686 G$IT0$0$0 == 0x0088
                           000088   687 _IT0	=	0x0088
                           000089   688 G$IE0$0$0 == 0x0089
                           000089   689 _IE0	=	0x0089
                           00008A   690 G$IT1$0$0 == 0x008a
                           00008A   691 _IT1	=	0x008a
                           00008B   692 G$IE1$0$0 == 0x008b
                           00008B   693 _IE1	=	0x008b
                           00008C   694 G$TR0$0$0 == 0x008c
                           00008C   695 _TR0	=	0x008c
                           00008D   696 G$TF0$0$0 == 0x008d
                           00008D   697 _TF0	=	0x008d
                           00008E   698 G$TR1$0$0 == 0x008e
                           00008E   699 _TR1	=	0x008e
                           00008F   700 G$TF1$0$0 == 0x008f
                           00008F   701 _TF1	=	0x008f
                           000090   702 G$P1_0$0$0 == 0x0090
                           000090   703 _P1_0	=	0x0090
                           000091   704 G$P1_1$0$0 == 0x0091
                           000091   705 _P1_1	=	0x0091
                           000092   706 G$P1_2$0$0 == 0x0092
                           000092   707 _P1_2	=	0x0092
                           000093   708 G$P1_3$0$0 == 0x0093
                           000093   709 _P1_3	=	0x0093
                           000094   710 G$P1_4$0$0 == 0x0094
                           000094   711 _P1_4	=	0x0094
                           000095   712 G$P1_5$0$0 == 0x0095
                           000095   713 _P1_5	=	0x0095
                           000096   714 G$P1_6$0$0 == 0x0096
                           000096   715 _P1_6	=	0x0096
                           000097   716 G$P1_7$0$0 == 0x0097
                           000097   717 _P1_7	=	0x0097
                           000098   718 G$RI$0$0 == 0x0098
                           000098   719 _RI	=	0x0098
                           000098   720 G$RI0$0$0 == 0x0098
                           000098   721 _RI0	=	0x0098
                           000099   722 G$TI$0$0 == 0x0099
                           000099   723 _TI	=	0x0099
                           000099   724 G$TI0$0$0 == 0x0099
                           000099   725 _TI0	=	0x0099
                           00009A   726 G$RB8$0$0 == 0x009a
                           00009A   727 _RB8	=	0x009a
                           00009A   728 G$RB80$0$0 == 0x009a
                           00009A   729 _RB80	=	0x009a
                           00009B   730 G$TB8$0$0 == 0x009b
                           00009B   731 _TB8	=	0x009b
                           00009B   732 G$TB80$0$0 == 0x009b
                           00009B   733 _TB80	=	0x009b
                           00009C   734 G$REN$0$0 == 0x009c
                           00009C   735 _REN	=	0x009c
                           00009C   736 G$REN0$0$0 == 0x009c
                           00009C   737 _REN0	=	0x009c
                           00009D   738 G$SM2$0$0 == 0x009d
                           00009D   739 _SM2	=	0x009d
                           00009D   740 G$SM20$0$0 == 0x009d
                           00009D   741 _SM20	=	0x009d
                           00009D   742 G$MCE0$0$0 == 0x009d
                           00009D   743 _MCE0	=	0x009d
                           00009E   744 G$SM1$0$0 == 0x009e
                           00009E   745 _SM1	=	0x009e
                           00009E   746 G$SM10$0$0 == 0x009e
                           00009E   747 _SM10	=	0x009e
                           00009F   748 G$SM0$0$0 == 0x009f
                           00009F   749 _SM0	=	0x009f
                           00009F   750 G$SM00$0$0 == 0x009f
                           00009F   751 _SM00	=	0x009f
                           00009F   752 G$S0MODE$0$0 == 0x009f
                           00009F   753 _S0MODE	=	0x009f
                           0000A0   754 G$P2_0$0$0 == 0x00a0
                           0000A0   755 _P2_0	=	0x00a0
                           0000A1   756 G$P2_1$0$0 == 0x00a1
                           0000A1   757 _P2_1	=	0x00a1
                           0000A2   758 G$P2_2$0$0 == 0x00a2
                           0000A2   759 _P2_2	=	0x00a2
                           0000A3   760 G$P2_3$0$0 == 0x00a3
                           0000A3   761 _P2_3	=	0x00a3
                           0000A4   762 G$P2_4$0$0 == 0x00a4
                           0000A4   763 _P2_4	=	0x00a4
                           0000A5   764 G$P2_5$0$0 == 0x00a5
                           0000A5   765 _P2_5	=	0x00a5
                           0000A6   766 G$P2_6$0$0 == 0x00a6
                           0000A6   767 _P2_6	=	0x00a6
                           0000A7   768 G$P2_7$0$0 == 0x00a7
                           0000A7   769 _P2_7	=	0x00a7
                           0000A8   770 G$EX0$0$0 == 0x00a8
                           0000A8   771 _EX0	=	0x00a8
                           0000A9   772 G$ET0$0$0 == 0x00a9
                           0000A9   773 _ET0	=	0x00a9
                           0000AA   774 G$EX1$0$0 == 0x00aa
                           0000AA   775 _EX1	=	0x00aa
                           0000AB   776 G$ET1$0$0 == 0x00ab
                           0000AB   777 _ET1	=	0x00ab
                           0000AC   778 G$ES0$0$0 == 0x00ac
                           0000AC   779 _ES0	=	0x00ac
                           0000AC   780 G$ES$0$0 == 0x00ac
                           0000AC   781 _ES	=	0x00ac
                           0000AD   782 G$ET2$0$0 == 0x00ad
                           0000AD   783 _ET2	=	0x00ad
                           0000AF   784 G$EA$0$0 == 0x00af
                           0000AF   785 _EA	=	0x00af
                           0000B0   786 G$P3_0$0$0 == 0x00b0
                           0000B0   787 _P3_0	=	0x00b0
                           0000B1   788 G$P3_1$0$0 == 0x00b1
                           0000B1   789 _P3_1	=	0x00b1
                           0000B2   790 G$P3_2$0$0 == 0x00b2
                           0000B2   791 _P3_2	=	0x00b2
                           0000B3   792 G$P3_3$0$0 == 0x00b3
                           0000B3   793 _P3_3	=	0x00b3
                           0000B4   794 G$P3_4$0$0 == 0x00b4
                           0000B4   795 _P3_4	=	0x00b4
                           0000B5   796 G$P3_5$0$0 == 0x00b5
                           0000B5   797 _P3_5	=	0x00b5
                           0000B6   798 G$P3_6$0$0 == 0x00b6
                           0000B6   799 _P3_6	=	0x00b6
                           0000B7   800 G$P3_7$0$0 == 0x00b7
                           0000B7   801 _P3_7	=	0x00b7
                           0000B8   802 G$PX0$0$0 == 0x00b8
                           0000B8   803 _PX0	=	0x00b8
                           0000B9   804 G$PT0$0$0 == 0x00b9
                           0000B9   805 _PT0	=	0x00b9
                           0000BA   806 G$PX1$0$0 == 0x00ba
                           0000BA   807 _PX1	=	0x00ba
                           0000BB   808 G$PT1$0$0 == 0x00bb
                           0000BB   809 _PT1	=	0x00bb
                           0000BC   810 G$PS0$0$0 == 0x00bc
                           0000BC   811 _PS0	=	0x00bc
                           0000BC   812 G$PS$0$0 == 0x00bc
                           0000BC   813 _PS	=	0x00bc
                           0000BD   814 G$PT2$0$0 == 0x00bd
                           0000BD   815 _PT2	=	0x00bd
                           0000C0   816 G$SMBTOE$0$0 == 0x00c0
                           0000C0   817 _SMBTOE	=	0x00c0
                           0000C1   818 G$SMBFTE$0$0 == 0x00c1
                           0000C1   819 _SMBFTE	=	0x00c1
                           0000C2   820 G$AA$0$0 == 0x00c2
                           0000C2   821 _AA	=	0x00c2
                           0000C3   822 G$SI$0$0 == 0x00c3
                           0000C3   823 _SI	=	0x00c3
                           0000C4   824 G$STO$0$0 == 0x00c4
                           0000C4   825 _STO	=	0x00c4
                           0000C5   826 G$STA$0$0 == 0x00c5
                           0000C5   827 _STA	=	0x00c5
                           0000C6   828 G$ENSMB$0$0 == 0x00c6
                           0000C6   829 _ENSMB	=	0x00c6
                           0000C7   830 G$BUSY$0$0 == 0x00c7
                           0000C7   831 _BUSY	=	0x00c7
                           0000C8   832 G$CPRL2$0$0 == 0x00c8
                           0000C8   833 _CPRL2	=	0x00c8
                           0000C9   834 G$CT2$0$0 == 0x00c9
                           0000C9   835 _CT2	=	0x00c9
                           0000CA   836 G$TR2$0$0 == 0x00ca
                           0000CA   837 _TR2	=	0x00ca
                           0000CB   838 G$EXEN2$0$0 == 0x00cb
                           0000CB   839 _EXEN2	=	0x00cb
                           0000CC   840 G$TCLK$0$0 == 0x00cc
                           0000CC   841 _TCLK	=	0x00cc
                           0000CD   842 G$RCLK$0$0 == 0x00cd
                           0000CD   843 _RCLK	=	0x00cd
                           0000CE   844 G$EXF2$0$0 == 0x00ce
                           0000CE   845 _EXF2	=	0x00ce
                           0000CF   846 G$TF2$0$0 == 0x00cf
                           0000CF   847 _TF2	=	0x00cf
                           0000D0   848 G$P$0$0 == 0x00d0
                           0000D0   849 _P	=	0x00d0
                           0000D1   850 G$F1$0$0 == 0x00d1
                           0000D1   851 _F1	=	0x00d1
                           0000D2   852 G$OV$0$0 == 0x00d2
                           0000D2   853 _OV	=	0x00d2
                           0000D3   854 G$RS0$0$0 == 0x00d3
                           0000D3   855 _RS0	=	0x00d3
                           0000D4   856 G$RS1$0$0 == 0x00d4
                           0000D4   857 _RS1	=	0x00d4
                           0000D5   858 G$F0$0$0 == 0x00d5
                           0000D5   859 _F0	=	0x00d5
                           0000D6   860 G$AC$0$0 == 0x00d6
                           0000D6   861 _AC	=	0x00d6
                           0000D7   862 G$CY$0$0 == 0x00d7
                           0000D7   863 _CY	=	0x00d7
                           0000D8   864 G$CCF0$0$0 == 0x00d8
                           0000D8   865 _CCF0	=	0x00d8
                           0000D9   866 G$CCF1$0$0 == 0x00d9
                           0000D9   867 _CCF1	=	0x00d9
                           0000DA   868 G$CCF2$0$0 == 0x00da
                           0000DA   869 _CCF2	=	0x00da
                           0000DB   870 G$CCF3$0$0 == 0x00db
                           0000DB   871 _CCF3	=	0x00db
                           0000DC   872 G$CCF4$0$0 == 0x00dc
                           0000DC   873 _CCF4	=	0x00dc
                           0000DE   874 G$CR$0$0 == 0x00de
                           0000DE   875 _CR	=	0x00de
                           0000DF   876 G$CF$0$0 == 0x00df
                           0000DF   877 _CF	=	0x00df
                           0000E8   878 G$ADLJST$0$0 == 0x00e8
                           0000E8   879 _ADLJST	=	0x00e8
                           0000E8   880 G$AD0LJST$0$0 == 0x00e8
                           0000E8   881 _AD0LJST	=	0x00e8
                           0000E9   882 G$ADWINT$0$0 == 0x00e9
                           0000E9   883 _ADWINT	=	0x00e9
                           0000E9   884 G$AD0WINT$0$0 == 0x00e9
                           0000E9   885 _AD0WINT	=	0x00e9
                           0000EA   886 G$ADSTM0$0$0 == 0x00ea
                           0000EA   887 _ADSTM0	=	0x00ea
                           0000EA   888 G$AD0CM0$0$0 == 0x00ea
                           0000EA   889 _AD0CM0	=	0x00ea
                           0000EB   890 G$ADSTM1$0$0 == 0x00eb
                           0000EB   891 _ADSTM1	=	0x00eb
                           0000EB   892 G$AD0CM1$0$0 == 0x00eb
                           0000EB   893 _AD0CM1	=	0x00eb
                           0000EC   894 G$ADBUSY$0$0 == 0x00ec
                           0000EC   895 _ADBUSY	=	0x00ec
                           0000EC   896 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   897 _AD0BUSY	=	0x00ec
                           0000ED   898 G$ADCINT$0$0 == 0x00ed
                           0000ED   899 _ADCINT	=	0x00ed
                           0000ED   900 G$AD0INT$0$0 == 0x00ed
                           0000ED   901 _AD0INT	=	0x00ed
                           0000EE   902 G$ADCTM$0$0 == 0x00ee
                           0000EE   903 _ADCTM	=	0x00ee
                           0000EE   904 G$AD0TM$0$0 == 0x00ee
                           0000EE   905 _AD0TM	=	0x00ee
                           0000EF   906 G$ADCEN$0$0 == 0x00ef
                           0000EF   907 _ADCEN	=	0x00ef
                           0000EF   908 G$AD0EN$0$0 == 0x00ef
                           0000EF   909 _AD0EN	=	0x00ef
                           0000F8   910 G$SPIEN$0$0 == 0x00f8
                           0000F8   911 _SPIEN	=	0x00f8
                           0000F9   912 G$MSTEN$0$0 == 0x00f9
                           0000F9   913 _MSTEN	=	0x00f9
                           0000FA   914 G$SLVSEL$0$0 == 0x00fa
                           0000FA   915 _SLVSEL	=	0x00fa
                           0000FB   916 G$TXBSY$0$0 == 0x00fb
                           0000FB   917 _TXBSY	=	0x00fb
                           0000FC   918 G$RXOVRN$0$0 == 0x00fc
                           0000FC   919 _RXOVRN	=	0x00fc
                           0000FD   920 G$MODF$0$0 == 0x00fd
                           0000FD   921 _MODF	=	0x00fd
                           0000FE   922 G$WCOL$0$0 == 0x00fe
                           0000FE   923 _WCOL	=	0x00fe
                           0000FF   924 G$SPIF$0$0 == 0x00ff
                           0000FF   925 _SPIF	=	0x00ff
                           0000C7   926 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   927 _BUS_BUSY	=	0x00c7
                           0000C6   928 G$BUS_EN$0$0 == 0x00c6
                           0000C6   929 _BUS_EN	=	0x00c6
                           0000C5   930 G$BUS_START$0$0 == 0x00c5
                           0000C5   931 _BUS_START	=	0x00c5
                           0000C4   932 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   933 _BUS_STOP	=	0x00c4
                           0000C3   934 G$BUS_INT$0$0 == 0x00c3
                           0000C3   935 _BUS_INT	=	0x00c3
                           0000C2   936 G$BUS_AA$0$0 == 0x00c2
                           0000C2   937 _BUS_AA	=	0x00c2
                           0000C1   938 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   939 _BUS_FTE	=	0x00c1
                           0000C0   940 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   941 _BUS_TOE	=	0x00c0
                           000083   942 G$BUS_SCL$0$0 == 0x0083
                           000083   943 _BUS_SCL	=	0x0083
                                    944 ;--------------------------------------------------------
                                    945 ; overlayable register banks
                                    946 ;--------------------------------------------------------
                                    947 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        948 	.ds 8
                                    949 ;--------------------------------------------------------
                                    950 ; internal ram data
                                    951 ;--------------------------------------------------------
                                    952 	.area DSEG    (DATA)
                           000000   953 LLab6.lcd_clear$NumBytes$1$77==.
      000000                        954 _lcd_clear_NumBytes_1_77:
      000000                        955 	.ds 1
                           000001   956 LLab6.lcd_clear$Cmd$1$77==.
      000001                        957 _lcd_clear_Cmd_1_77:
      000001                        958 	.ds 2
                           000003   959 LLab6.read_keypad$Data$1$78==.
      000003                        960 _read_keypad_Data_1_78:
      000003                        961 	.ds 2
                           000005   962 LLab6.i2c_write_data$start_reg$1$97==.
      000005                        963 _i2c_write_data_PARM_2:
      000005                        964 	.ds 1
                           000006   965 LLab6.i2c_write_data$buffer$1$97==.
      000006                        966 _i2c_write_data_PARM_3:
      000006                        967 	.ds 3
                           000009   968 LLab6.i2c_write_data$num_bytes$1$97==.
      000009                        969 _i2c_write_data_PARM_4:
      000009                        970 	.ds 1
                           00000A   971 LLab6.i2c_read_data$start_reg$1$99==.
      00000A                        972 _i2c_read_data_PARM_2:
      00000A                        973 	.ds 1
                           00000B   974 LLab6.i2c_read_data$buffer$1$99==.
      00000B                        975 _i2c_read_data_PARM_3:
      00000B                        976 	.ds 3
                           00000E   977 LLab6.i2c_read_data$num_bytes$1$99==.
      00000E                        978 _i2c_read_data_PARM_4:
      00000E                        979 	.ds 1
                           00000F   980 LLab6.Accel_Init$Data2$1$103==.
      00000F                        981 _Accel_Init_Data2_1_103:
      00000F                        982 	.ds 1
                           000010   983 G$temp_motorpw$0$0==.
      000010                        984 _temp_motorpw::
      000010                        985 	.ds 4
                           000014   986 G$new_range$0$0==.
      000014                        987 _new_range::
      000014                        988 	.ds 1
                           000015   989 G$prev_error$0$0==.
      000015                        990 _prev_error::
      000015                        991 	.ds 2
                           000017   992 G$Error$0$0==.
      000017                        993 _Error::
      000017                        994 	.ds 2
                           000019   995 G$Counts$0$0==.
      000019                        996 _Counts::
      000019                        997 	.ds 2
                           00001B   998 G$nCounts$0$0==.
      00001B                        999 _nCounts::
      00001B                       1000 	.ds 2
                           00001D  1001 G$r_count$0$0==.
      00001D                       1002 _r_count::
      00001D                       1003 	.ds 1
                           00001E  1004 G$a_count$0$0==.
      00001E                       1005 _a_count::
      00001E                       1006 	.ds 1
                           00001F  1007 G$adc_count$0$0==.
      00001F                       1008 _adc_count::
      00001F                       1009 	.ds 1
                           000020  1010 G$delay$0$0==.
      000020                       1011 _delay::
      000020                       1012 	.ds 1
                           000021  1013 G$DRIVE_PW$0$0==.
      000021                       1014 _DRIVE_PW::
      000021                       1015 	.ds 2
                           000023  1016 G$STEER_PW$0$0==.
      000023                       1017 _STEER_PW::
      000023                       1018 	.ds 2
                           000025  1019 G$Data$0$0==.
      000025                       1020 _Data::
      000025                       1021 	.ds 2
                           000027  1022 G$print_delay$0$0==.
      000027                       1023 _print_delay::
      000027                       1024 	.ds 1
                           000028  1025 G$steer_gain$0$0==.
      000028                       1026 _steer_gain::
      000028                       1027 	.ds 4
                           00002C  1028 G$drive_gain$0$0==.
      00002C                       1029 _drive_gain::
      00002C                       1030 	.ds 4
                           000030  1031 G$new_AD$0$0==.
      000030                       1032 _new_AD::
      000030                       1033 	.ds 1
                           000031  1034 G$AD_Result$0$0==.
      000031                       1035 _AD_Result::
      000031                       1036 	.ds 1
                           000032  1037 G$voltage$0$0==.
      000032                       1038 _voltage::
      000032                       1039 	.ds 1
                           000033  1040 G$desired_heading$0$0==.
      000033                       1041 _desired_heading::
      000033                       1042 	.ds 2
                           000035  1043 G$heading$0$0==.
      000035                       1044 _heading::
      000035                       1045 	.ds 2
                           000037  1046 G$range$0$0==.
      000037                       1047 _range::
      000037                       1048 	.ds 2
                           000039  1049 G$h_count$0$0==.
      000039                       1050 _h_count::
      000039                       1051 	.ds 1
                           00003A  1052 G$new_heading$0$0==.
      00003A                       1053 _new_heading::
      00003A                       1054 	.ds 1
                           00003B  1055 LLab6.read_compass$Data$1$156==.
      00003B                       1056 _read_compass_Data_1_156:
      00003B                       1057 	.ds 2
                                   1058 ;--------------------------------------------------------
                                   1059 ; overlayable items in internal ram 
                                   1060 ;--------------------------------------------------------
                                   1061 	.area	OSEG    (OVR,DATA)
                                   1062 	.area	OSEG    (OVR,DATA)
                                   1063 	.area	OSEG    (OVR,DATA)
                                   1064 	.area	OSEG    (OVR,DATA)
                                   1065 	.area	OSEG    (OVR,DATA)
                                   1066 	.area	OSEG    (OVR,DATA)
                                   1067 	.area	OSEG    (OVR,DATA)
                                   1068 	.area	OSEG    (OVR,DATA)
                                   1069 ;--------------------------------------------------------
                                   1070 ; Stack segment in internal ram 
                                   1071 ;--------------------------------------------------------
                                   1072 	.area	SSEG
      000000                       1073 __start__stack:
      000000                       1074 	.ds	1
                                   1075 
                                   1076 ;--------------------------------------------------------
                                   1077 ; indirectly addressable internal ram data
                                   1078 ;--------------------------------------------------------
                                   1079 	.area ISEG    (DATA)
                                   1080 ;--------------------------------------------------------
                                   1081 ; absolute internal ram data
                                   1082 ;--------------------------------------------------------
                                   1083 	.area IABS    (ABS,DATA)
                                   1084 	.area IABS    (ABS,DATA)
                                   1085 ;--------------------------------------------------------
                                   1086 ; bit data
                                   1087 ;--------------------------------------------------------
                                   1088 	.area BSEG    (BIT)
                                   1089 ;--------------------------------------------------------
                                   1090 ; paged external ram data
                                   1091 ;--------------------------------------------------------
                                   1092 	.area PSEG    (PAG,XDATA)
                                   1093 ;--------------------------------------------------------
                                   1094 ; external ram data
                                   1095 ;--------------------------------------------------------
                                   1096 	.area XSEG    (XDATA)
                           000000  1097 LLab6.lcd_print$text$1$73==.
      000000                       1098 _lcd_print_text_1_73:
      000000                       1099 	.ds 80
                                   1100 ;--------------------------------------------------------
                                   1101 ; absolute external ram data
                                   1102 ;--------------------------------------------------------
                                   1103 	.area XABS    (ABS,XDATA)
                                   1104 ;--------------------------------------------------------
                                   1105 ; external initialized ram data
                                   1106 ;--------------------------------------------------------
                                   1107 	.area XISEG   (XDATA)
                                   1108 	.area HOME    (CODE)
                                   1109 	.area GSINIT0 (CODE)
                                   1110 	.area GSINIT1 (CODE)
                                   1111 	.area GSINIT2 (CODE)
                                   1112 	.area GSINIT3 (CODE)
                                   1113 	.area GSINIT4 (CODE)
                                   1114 	.area GSINIT5 (CODE)
                                   1115 	.area GSINIT  (CODE)
                                   1116 	.area GSFINAL (CODE)
                                   1117 	.area CSEG    (CODE)
                                   1118 ;--------------------------------------------------------
                                   1119 ; interrupt vector 
                                   1120 ;--------------------------------------------------------
                                   1121 	.area HOME    (CODE)
      000000                       1122 __interrupt_vect:
      000000 02r00r00         [24] 1123 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1124 	reti
      000004                       1125 	.ds	7
      00000B 32               [24] 1126 	reti
      00000C                       1127 	.ds	7
      000013 32               [24] 1128 	reti
      000014                       1129 	.ds	7
      00001B 32               [24] 1130 	reti
      00001C                       1131 	.ds	7
      000023 32               [24] 1132 	reti
      000024                       1133 	.ds	7
      00002B 32               [24] 1134 	reti
      00002C                       1135 	.ds	7
      000033 32               [24] 1136 	reti
      000034                       1137 	.ds	7
      00003B 32               [24] 1138 	reti
      00003C                       1139 	.ds	7
      000043 32               [24] 1140 	reti
      000044                       1141 	.ds	7
      00004B 02r05rF9         [24] 1142 	ljmp	_PCA_ISR
                                   1143 ;--------------------------------------------------------
                                   1144 ; global & static initialisations
                                   1145 ;--------------------------------------------------------
                                   1146 	.area HOME    (CODE)
                                   1147 	.area GSINIT  (CODE)
                                   1148 	.area GSFINAL (CODE)
                                   1149 	.area GSINIT  (CODE)
                                   1150 	.globl __sdcc_gsinit_startup
                                   1151 	.globl __sdcc_program_startup
                                   1152 	.globl __start__stack
                                   1153 	.globl __mcs51_genXINIT
                                   1154 	.globl __mcs51_genXRAMCLEAR
                                   1155 	.globl __mcs51_genRAMCLEAR
                           000000  1156 	C$Lab6.c$40$1$160 ==.
                                   1157 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:40: signed long temp_motorpw = 0;
      000000 E4               [12] 1158 	clr	a
      000001 F5*10            [12] 1159 	mov	_temp_motorpw,a
      000003 F5*11            [12] 1160 	mov	(_temp_motorpw + 1),a
      000005 F5*12            [12] 1161 	mov	(_temp_motorpw + 2),a
      000007 F5*13            [12] 1162 	mov	(_temp_motorpw + 3),a
                           000009  1163 	C$Lab6.c$41$1$160 ==.
                                   1164 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:41: unsigned char new_range = 0;
                                   1165 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000009 F5*14            [12] 1166 	mov	_new_range,a
                           00000B  1167 	C$Lab6.c$42$1$160 ==.
                                   1168 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:42: signed int prev_error = 0;
      00000B F5*15            [12] 1169 	mov	_prev_error,a
      00000D F5*16            [12] 1170 	mov	(_prev_error + 1),a
                           00000F  1171 	C$Lab6.c$43$1$160 ==.
                                   1172 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:43: signed int Error = 0;
      00000F F5*17            [12] 1173 	mov	_Error,a
      000011 F5*18            [12] 1174 	mov	(_Error + 1),a
                           000013  1175 	C$Lab6.c$45$1$160 ==.
                                   1176 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:45: unsigned char r_count = 0;
                                   1177 ;	1-genFromRTrack replaced	mov	_r_count,#0x00
      000013 F5*1D            [12] 1178 	mov	_r_count,a
                           000015  1179 	C$Lab6.c$46$1$160 ==.
                                   1180 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:46: unsigned char a_count = 0;
                                   1181 ;	1-genFromRTrack replaced	mov	_a_count,#0x00
      000015 F5*1E            [12] 1182 	mov	_a_count,a
                           000017  1183 	C$Lab6.c$47$1$160 ==.
                                   1184 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:47: unsigned char adc_count = 0;
                                   1185 ;	1-genFromRTrack replaced	mov	_adc_count,#0x00
      000017 F5*1F            [12] 1186 	mov	_adc_count,a
                           000019  1187 	C$Lab6.c$48$1$160 ==.
                                   1188 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:48: unsigned char delay = 0;
                                   1189 ;	1-genFromRTrack replaced	mov	_delay,#0x00
      000019 F5*20            [12] 1190 	mov	_delay,a
                           00001B  1191 	C$Lab6.c$49$1$160 ==.
                                   1192 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:49: unsigned int DRIVE_PW = 2760;
      00001B 75*21 C8         [24] 1193 	mov	_DRIVE_PW,#0xC8
      00001E 75*22 0A         [24] 1194 	mov	(_DRIVE_PW + 1),#0x0A
                           000021  1195 	C$Lab6.c$50$1$160 ==.
                                   1196 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:50: unsigned int STEER_PW = 2760;
      000021 75*23 C8         [24] 1197 	mov	_STEER_PW,#0xC8
      000024 75*24 0A         [24] 1198 	mov	(_STEER_PW + 1),#0x0A
                           000027  1199 	C$Lab6.c$52$1$160 ==.
                                   1200 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:52: unsigned char print_delay = 0;
                                   1201 ;	1-genFromRTrack replaced	mov	_print_delay,#0x00
      000027 F5*27            [12] 1202 	mov	_print_delay,a
                           000029  1203 	C$Lab6.c$53$1$160 ==.
                                   1204 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:53: float steer_gain = 0;
      000029 F5*28            [12] 1205 	mov	_steer_gain,a
      00002B F5*29            [12] 1206 	mov	(_steer_gain + 1),a
      00002D F5*2A            [12] 1207 	mov	(_steer_gain + 2),a
      00002F F5*2B            [12] 1208 	mov	(_steer_gain + 3),a
                           000031  1209 	C$Lab6.c$54$1$160 ==.
                                   1210 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:54: float drive_gain = 0;
      000031 F5*2C            [12] 1211 	mov	_drive_gain,a
      000033 F5*2D            [12] 1212 	mov	(_drive_gain + 1),a
      000035 F5*2E            [12] 1213 	mov	(_drive_gain + 2),a
      000037 F5*2F            [12] 1214 	mov	(_drive_gain + 3),a
                           000039  1215 	C$Lab6.c$55$1$160 ==.
                                   1216 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:55: unsigned char new_AD = 0;
                                   1217 ;	1-genFromRTrack replaced	mov	_new_AD,#0x00
      000039 F5*30            [12] 1218 	mov	_new_AD,a
                           00003B  1219 	C$Lab6.c$56$1$160 ==.
                                   1220 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:56: unsigned char AD_Result = 0;
                                   1221 ;	1-genFromRTrack replaced	mov	_AD_Result,#0x00
      00003B F5*31            [12] 1222 	mov	_AD_Result,a
                           00003D  1223 	C$Lab6.c$57$1$160 ==.
                                   1224 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:57: unsigned char voltage = 0;
                                   1225 ;	1-genFromRTrack replaced	mov	_voltage,#0x00
      00003D F5*32            [12] 1226 	mov	_voltage,a
                           00003F  1227 	C$Lab6.c$59$1$160 ==.
                                   1228 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:59: unsigned int heading = 0;
      00003F F5*35            [12] 1229 	mov	_heading,a
      000041 F5*36            [12] 1230 	mov	(_heading + 1),a
                           000043  1231 	C$Lab6.c$60$1$160 ==.
                                   1232 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:60: unsigned int range = 0;
      000043 F5*37            [12] 1233 	mov	_range,a
      000045 F5*38            [12] 1234 	mov	(_range + 1),a
                                   1235 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1236 	ljmp	__sdcc_program_startup
                                   1237 ;--------------------------------------------------------
                                   1238 ; Home
                                   1239 ;--------------------------------------------------------
                                   1240 	.area HOME    (CODE)
                                   1241 	.area HOME    (CODE)
      00004E                       1242 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1243 	ljmp	_main
                                   1244 ;	return from main will return to caller
                                   1245 ;--------------------------------------------------------
                                   1246 ; code
                                   1247 ;--------------------------------------------------------
                                   1248 	.area CSEG    (CODE)
                                   1249 ;------------------------------------------------------------
                                   1250 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1251 ;------------------------------------------------------------
                                   1252 ;i                         Allocated to registers 
                                   1253 ;------------------------------------------------------------
                           000000  1254 	G$SYSCLK_Init$0$0 ==.
                           000000  1255 	C$c8051_SDCC.h$42$0$0 ==.
                                   1256 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1257 ;	-----------------------------------------
                                   1258 ;	 function SYSCLK_Init
                                   1259 ;	-----------------------------------------
      000000                       1260 _SYSCLK_Init:
                           000007  1261 	ar7 = 0x07
                           000006  1262 	ar6 = 0x06
                           000005  1263 	ar5 = 0x05
                           000004  1264 	ar4 = 0x04
                           000003  1265 	ar3 = 0x03
                           000002  1266 	ar2 = 0x02
                           000001  1267 	ar1 = 0x01
                           000000  1268 	ar0 = 0x00
                           000000  1269 	C$c8051_SDCC.h$46$1$31 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1271 	mov	_OSCXCN,#0x67
                           000003  1272 	C$c8051_SDCC.h$49$1$31 ==.
                                   1273 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1274 	mov	r6,#0x00
      000005 7F 01            [12] 1275 	mov	r7,#0x01
      000007                       1276 00107$:
      000007 1E               [12] 1277 	dec	r6
      000008 BE FF 01         [24] 1278 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1279 	dec	r7
      00000C                       1280 00121$:
      00000C EE               [12] 1281 	mov	a,r6
      00000D 4F               [12] 1282 	orl	a,r7
      00000E 70 F7            [24] 1283 	jnz	00107$
                           000010  1284 	C$c8051_SDCC.h$51$1$31 ==.
                                   1285 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1286 00102$:
      000010 E5 B1            [12] 1287 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1288 	jnb	acc.7,00102$
                           000015  1289 	C$c8051_SDCC.h$53$1$31 ==.
                                   1290 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1291 	mov	_OSCICN,#0x88
                           000018  1292 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1293 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1294 	ret
                                   1295 ;------------------------------------------------------------
                                   1296 ;Allocation info for local variables in function 'UART0_Init'
                                   1297 ;------------------------------------------------------------
                           000019  1298 	G$UART0_Init$0$0 ==.
                           000019  1299 	C$c8051_SDCC.h$64$1$31 ==.
                                   1300 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1301 ;	-----------------------------------------
                                   1302 ;	 function UART0_Init
                                   1303 ;	-----------------------------------------
      000019                       1304 _UART0_Init:
                           000019  1305 	C$c8051_SDCC.h$66$1$33 ==.
                                   1306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1307 	mov	_SCON0,#0x50
                           00001C  1308 	C$c8051_SDCC.h$67$1$33 ==.
                                   1309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1310 	mov	_TMOD,#0x20
                           00001F  1311 	C$c8051_SDCC.h$68$1$33 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1313 	mov	_TH1,#0xDC
                           000022  1314 	C$c8051_SDCC.h$69$1$33 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1316 	setb	_TR1
                           000024  1317 	C$c8051_SDCC.h$70$1$33 ==.
                                   1318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1319 	orl	_CKCON,#0x10
                           000027  1320 	C$c8051_SDCC.h$71$1$33 ==.
                                   1321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1322 	orl	_PCON,#0x80
                           00002A  1323 	C$c8051_SDCC.h$73$1$33 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1325 	setb	_TI0
                           00002C  1326 	C$c8051_SDCC.h$74$1$33 ==.
                                   1327 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1328 	orl	_P0MDOUT,#0x01
                           00002F  1329 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1330 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1331 	ret
                                   1332 ;------------------------------------------------------------
                                   1333 ;Allocation info for local variables in function 'Sys_Init'
                                   1334 ;------------------------------------------------------------
                           000030  1335 	G$Sys_Init$0$0 ==.
                           000030  1336 	C$c8051_SDCC.h$83$1$33 ==.
                                   1337 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1338 ;	-----------------------------------------
                                   1339 ;	 function Sys_Init
                                   1340 ;	-----------------------------------------
      000030                       1341 _Sys_Init:
                           000030  1342 	C$c8051_SDCC.h$85$1$35 ==.
                                   1343 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1344 	mov	_WDTCN,#0xDE
                           000033  1345 	C$c8051_SDCC.h$86$1$35 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1347 	mov	_WDTCN,#0xAD
                           000036  1348 	C$c8051_SDCC.h$88$1$35 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1350 	lcall	_SYSCLK_Init
                           000039  1351 	C$c8051_SDCC.h$89$1$35 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1353 	lcall	_UART0_Init
                           00003C  1354 	C$c8051_SDCC.h$91$1$35 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1356 	orl	_XBR0,#0x04
                           00003F  1357 	C$c8051_SDCC.h$92$1$35 ==.
                                   1358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1359 	orl	_XBR2,#0x40
                           000042  1360 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1361 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1362 	ret
                                   1363 ;------------------------------------------------------------
                                   1364 ;Allocation info for local variables in function 'putchar'
                                   1365 ;------------------------------------------------------------
                                   1366 ;c                         Allocated to registers r7 
                                   1367 ;------------------------------------------------------------
                           000043  1368 	G$putchar$0$0 ==.
                           000043  1369 	C$c8051_SDCC.h$98$1$35 ==.
                                   1370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1371 ;	-----------------------------------------
                                   1372 ;	 function putchar
                                   1373 ;	-----------------------------------------
      000043                       1374 _putchar:
      000043 AF 82            [24] 1375 	mov	r7,dpl
                           000045  1376 	C$c8051_SDCC.h$100$1$37 ==.
                                   1377 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1378 00101$:
                           000045  1379 	C$c8051_SDCC.h$101$1$37 ==.
                                   1380 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1381 	jbc	_TI0,00112$
      000048 80 FB            [24] 1382 	sjmp	00101$
      00004A                       1383 00112$:
                           00004A  1384 	C$c8051_SDCC.h$102$1$37 ==.
                                   1385 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1386 	mov	_SBUF0,r7
                           00004C  1387 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1388 	XG$putchar$0$0 ==.
      00004C 22               [24] 1389 	ret
                                   1390 ;------------------------------------------------------------
                                   1391 ;Allocation info for local variables in function 'getchar'
                                   1392 ;------------------------------------------------------------
                                   1393 ;c                         Allocated to registers 
                                   1394 ;------------------------------------------------------------
                           00004D  1395 	G$getchar$0$0 ==.
                           00004D  1396 	C$c8051_SDCC.h$108$1$37 ==.
                                   1397 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1398 ;	-----------------------------------------
                                   1399 ;	 function getchar
                                   1400 ;	-----------------------------------------
      00004D                       1401 _getchar:
                           00004D  1402 	C$c8051_SDCC.h$111$1$39 ==.
                                   1403 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1404 00101$:
                           00004D  1405 	C$c8051_SDCC.h$112$1$39 ==.
                                   1406 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1407 	jbc	_RI0,00112$
      000050 80 FB            [24] 1408 	sjmp	00101$
      000052                       1409 00112$:
                           000052  1410 	C$c8051_SDCC.h$113$1$39 ==.
                                   1411 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1412 	mov	dpl,_SBUF0
                           000055  1413 	C$c8051_SDCC.h$114$1$39 ==.
                                   1414 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1415 	lcall	_putchar
                           000058  1416 	C$c8051_SDCC.h$115$1$39 ==.
                                   1417 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1418 	mov	dpl,_SBUF0
                           00005B  1419 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1420 	XG$getchar$0$0 ==.
      00005B 22               [24] 1421 	ret
                                   1422 ;------------------------------------------------------------
                                   1423 ;Allocation info for local variables in function 'lcd_print'
                                   1424 ;------------------------------------------------------------
                                   1425 ;fmt                       Allocated to stack - _bp -5
                                   1426 ;len                       Allocated to registers r6 
                                   1427 ;i                         Allocated to registers 
                                   1428 ;ap                        Allocated to registers 
                                   1429 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1430 ;------------------------------------------------------------
                           00005C  1431 	G$lcd_print$0$0 ==.
                           00005C  1432 	C$i2c.h$81$1$39 ==.
                                   1433 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1434 ;	-----------------------------------------
                                   1435 ;	 function lcd_print
                                   1436 ;	-----------------------------------------
      00005C                       1437 _lcd_print:
      00005C C0*00            [24] 1438 	push	_bp
      00005E 85 81*00         [24] 1439 	mov	_bp,sp
                           000061  1440 	C$i2c.h$87$1$73 ==.
                                   1441 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1442 	mov	a,_bp
      000063 24 FB            [12] 1443 	add	a,#0xfb
      000065 F8               [12] 1444 	mov	r0,a
      000066 86 82            [24] 1445 	mov	dpl,@r0
      000068 08               [12] 1446 	inc	r0
      000069 86 83            [24] 1447 	mov	dph,@r0
      00006B 08               [12] 1448 	inc	r0
      00006C 86 F0            [24] 1449 	mov	b,@r0
      00006E 12r00r00         [24] 1450 	lcall	_strlen
      000071 E5 82            [12] 1451 	mov	a,dpl
      000073 85 83 F0         [24] 1452 	mov	b,dph
      000076 45 F0            [12] 1453 	orl	a,b
      000078 70 02            [24] 1454 	jnz	00102$
      00007A 80 62            [24] 1455 	sjmp	00109$
      00007C                       1456 00102$:
                           00007C  1457 	C$i2c.h$89$2$74 ==.
                                   1458 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1459 	mov	a,_bp
      00007E 24 FB            [12] 1460 	add	a,#0xFB
      000080 FF               [12] 1461 	mov	r7,a
      000081 8F*00            [24] 1462 	mov	_vsprintf_PARM_3,r7
                           000083  1463 	C$i2c.h$90$1$73 ==.
                                   1464 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1465 	mov	a,_bp
      000085 24 FB            [12] 1466 	add	a,#0xfb
      000087 F8               [12] 1467 	mov	r0,a
      000088 86*00            [24] 1468 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1469 	inc	r0
      00008B 86*01            [24] 1470 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1471 	inc	r0
      00008E 86*02            [24] 1472 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1473 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1474 	mov	b,#0x00
      000096 12r00r00         [24] 1475 	lcall	_vsprintf
                           000099  1476 	C$i2c.h$93$1$73 ==.
                                   1477 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1478 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1479 	mov	b,#0x00
      00009F 12r00r00         [24] 1480 	lcall	_strlen
      0000A2 AE 82            [24] 1481 	mov	r6,dpl
                           0000A4  1482 	C$i2c.h$94$1$73 ==.
                                   1483 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1484 	mov	r7,#0x00
      0000A6                       1485 00107$:
      0000A6 C3               [12] 1486 	clr	c
      0000A7 EF               [12] 1487 	mov	a,r7
      0000A8 9E               [12] 1488 	subb	a,r6
      0000A9 50 1F            [24] 1489 	jnc	00105$
                           0000AB  1490 	C$i2c.h$96$2$76 ==.
                                   1491 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1492 	mov	a,r7
      0000AC 24r00            [12] 1493 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1494 	mov	dpl,a
      0000B0 E4               [12] 1495 	clr	a
      0000B1 34s00            [12] 1496 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1497 	mov	dph,a
      0000B5 E0               [24] 1498 	movx	a,@dptr
      0000B6 FD               [12] 1499 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1500 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1501 	mov	a,r7
      0000BB 24r00            [12] 1502 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1503 	mov	dpl,a
      0000BF E4               [12] 1504 	clr	a
      0000C0 34s00            [12] 1505 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1506 	mov	dph,a
      0000C4 74 0D            [12] 1507 	mov	a,#0x0D
      0000C6 F0               [24] 1508 	movx	@dptr,a
      0000C7                       1509 00108$:
                           0000C7  1510 	C$i2c.h$94$1$73 ==.
                                   1511 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1512 	inc	r7
      0000C8 80 DC            [24] 1513 	sjmp	00107$
      0000CA                       1514 00105$:
                           0000CA  1515 	C$i2c.h$99$1$73 ==.
                                   1516 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1517 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1518 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1519 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1520 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1521 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1522 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1523 	lcall	_i2c_write_data
      0000DE                       1524 00109$:
      0000DE D0*00            [24] 1525 	pop	_bp
                           0000E0  1526 	C$i2c.h$100$1$73 ==.
                           0000E0  1527 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1528 	ret
                                   1529 ;------------------------------------------------------------
                                   1530 ;Allocation info for local variables in function 'lcd_clear'
                                   1531 ;------------------------------------------------------------
                                   1532 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1533 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1534 ;------------------------------------------------------------
                           0000E1  1535 	G$lcd_clear$0$0 ==.
                           0000E1  1536 	C$i2c.h$103$1$73 ==.
                                   1537 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1538 ;	-----------------------------------------
                                   1539 ;	 function lcd_clear
                                   1540 ;	-----------------------------------------
      0000E1                       1541 _lcd_clear:
                           0000E1  1542 	C$i2c.h$105$1$73 ==.
                                   1543 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1544 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1545 	C$i2c.h$107$1$77 ==.
                                   1546 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1547 00101$:
      0000E4 74 C0            [12] 1548 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1549 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1550 	jc	00103$
      0000EA 75*0Br00         [24] 1551 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1552 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1553 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1554 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1555 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1556 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1557 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1558 	sjmp	00101$
      000101                       1559 00103$:
                           000101  1560 	C$i2c.h$109$1$77 ==.
                                   1561 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1562 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1563 	C$i2c.h$110$1$77 ==.
                                   1564 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1565 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1566 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1567 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1568 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1569 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1570 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1571 	lcall	_i2c_write_data
                           000119  1572 	C$i2c.h$111$1$77 ==.
                           000119  1573 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1574 	ret
                                   1575 ;------------------------------------------------------------
                                   1576 ;Allocation info for local variables in function 'read_keypad'
                                   1577 ;------------------------------------------------------------
                                   1578 ;i                         Allocated to registers r7 
                                   1579 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1580 ;------------------------------------------------------------
                           00011A  1581 	G$read_keypad$0$0 ==.
                           00011A  1582 	C$i2c.h$114$1$77 ==.
                                   1583 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1584 ;	-----------------------------------------
                                   1585 ;	 function read_keypad
                                   1586 ;	-----------------------------------------
      00011A                       1587 _read_keypad:
                           00011A  1588 	C$i2c.h$118$1$78 ==.
                                   1589 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1590 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1591 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1592 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1593 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1594 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1595 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1596 	lcall	_i2c_read_data
                           00012F  1597 	C$i2c.h$119$1$78 ==.
                                   1598 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1599 	mov	a,#0xFF
      000131 B5*03 05         [24] 1600 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1601 	mov	dpl,#0x00
      000137 80 5F            [24] 1602 	sjmp	00116$
      000139                       1603 00102$:
                           000139  1604 	C$i2c.h$121$1$78 ==.
                                   1605 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1606 	mov	r7,#0x00
      00013B 8F 06            [24] 1607 	mov	ar6,r7
      00013D                       1608 00114$:
                           00013D  1609 	C$i2c.h$123$2$79 ==.
                                   1610 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1611 	mov	b,r6
      00013F 05 F0            [12] 1612 	inc	b
      000141 7C 01            [12] 1613 	mov	r4,#0x01
      000143 7D 00            [12] 1614 	mov	r5,#0x00
      000145 80 06            [24] 1615 	sjmp	00145$
      000147                       1616 00144$:
      000147 EC               [12] 1617 	mov	a,r4
      000148 2C               [12] 1618 	add	a,r4
      000149 FC               [12] 1619 	mov	r4,a
      00014A ED               [12] 1620 	mov	a,r5
      00014B 33               [12] 1621 	rlc	a
      00014C FD               [12] 1622 	mov	r5,a
      00014D                       1623 00145$:
      00014D D5 F0 F7         [24] 1624 	djnz	b,00144$
      000150 AA*03            [24] 1625 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1626 	mov	r3,#0x00
      000154 EA               [12] 1627 	mov	a,r2
      000155 52 04            [12] 1628 	anl	ar4,a
      000157 EB               [12] 1629 	mov	a,r3
      000158 52 05            [12] 1630 	anl	ar5,a
      00015A EC               [12] 1631 	mov	a,r4
      00015B 4D               [12] 1632 	orl	a,r5
      00015C 60 07            [24] 1633 	jz	00115$
                           00015E  1634 	C$i2c.h$124$2$79 ==.
                                   1635 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1636 	mov	a,#0x31
      000160 2F               [12] 1637 	add	a,r7
      000161 F5 82            [12] 1638 	mov	dpl,a
      000163 80 33            [24] 1639 	sjmp	00116$
      000165                       1640 00115$:
                           000165  1641 	C$i2c.h$121$1$78 ==.
                                   1642 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1643 	inc	r6
      000166 8E 07            [24] 1644 	mov	ar7,r6
      000168 BE 08 00         [24] 1645 	cjne	r6,#0x08,00147$
      00016B                       1646 00147$:
      00016B 40 D0            [24] 1647 	jc	00114$
                           00016D  1648 	C$i2c.h$127$1$78 ==.
                                   1649 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1650 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1651 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1652 	mov	dpl,#0x39
      000175 80 21            [24] 1653 	sjmp	00116$
      000177                       1654 00107$:
                           000177  1655 	C$i2c.h$129$1$78 ==.
                                   1656 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1657 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1658 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1659 	mov	dpl,#0x2A
      00017F 80 17            [24] 1660 	sjmp	00116$
      000181                       1661 00109$:
                           000181  1662 	C$i2c.h$131$1$78 ==.
                                   1663 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1664 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1665 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1666 	mov	dpl,#0x30
      000189 80 0D            [24] 1667 	sjmp	00116$
      00018B                       1668 00111$:
                           00018B  1669 	C$i2c.h$133$1$78 ==.
                                   1670 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1671 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1672 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1673 	mov	dpl,#0x23
      000193 80 03            [24] 1674 	sjmp	00116$
      000195                       1675 00113$:
                           000195  1676 	C$i2c.h$135$1$78 ==.
                                   1677 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1678 	mov	dpl,#0xFF
      000198                       1679 00116$:
                           000198  1680 	C$i2c.h$136$1$78 ==.
                           000198  1681 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1682 	ret
                                   1683 ;------------------------------------------------------------
                                   1684 ;Allocation info for local variables in function 'kpd_input'
                                   1685 ;------------------------------------------------------------
                                   1686 ;mode                      Allocated to registers r7 
                                   1687 ;sum                       Allocated to registers r5 r6 
                                   1688 ;key                       Allocated to registers r3 
                                   1689 ;i                         Allocated to registers 
                                   1690 ;------------------------------------------------------------
                           000199  1691 	G$kpd_input$0$0 ==.
                           000199  1692 	C$i2c.h$148$1$78 ==.
                                   1693 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1694 ;	-----------------------------------------
                                   1695 ;	 function kpd_input
                                   1696 ;	-----------------------------------------
      000199                       1697 _kpd_input:
      000199 AF 82            [24] 1698 	mov	r7,dpl
                           00019B  1699 	C$i2c.h$153$1$81 ==.
                                   1700 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1701 	C$i2c.h$156$1$81 ==.
                                   1702 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1703 	clr	a
      00019C FD               [12] 1704 	mov	r5,a
      00019D FE               [12] 1705 	mov	r6,a
      00019E EF               [12] 1706 	mov	a,r7
      00019F 70 1D            [24] 1707 	jnz	00102$
      0001A1 C0 06            [24] 1708 	push	ar6
      0001A3 C0 05            [24] 1709 	push	ar5
      0001A5 74r00            [12] 1710 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1711 	push	acc
      0001A9 74s00            [12] 1712 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1713 	push	acc
      0001AD 74 80            [12] 1714 	mov	a,#0x80
      0001AF C0 E0            [24] 1715 	push	acc
      0001B1 12r00r5C         [24] 1716 	lcall	_lcd_print
      0001B4 15 81            [12] 1717 	dec	sp
      0001B6 15 81            [12] 1718 	dec	sp
      0001B8 15 81            [12] 1719 	dec	sp
      0001BA D0 05            [24] 1720 	pop	ar5
      0001BC D0 06            [24] 1721 	pop	ar6
      0001BE                       1722 00102$:
                           0001BE  1723 	C$i2c.h$158$1$81 ==.
                                   1724 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1725 	push	ar6
      0001C0 C0 05            [24] 1726 	push	ar5
      0001C2 74 08            [12] 1727 	mov	a,#0x08
      0001C4 C0 E0            [24] 1728 	push	acc
      0001C6 E4               [12] 1729 	clr	a
      0001C7 C0 E0            [24] 1730 	push	acc
      0001C9 74 08            [12] 1731 	mov	a,#0x08
      0001CB C0 E0            [24] 1732 	push	acc
      0001CD E4               [12] 1733 	clr	a
      0001CE C0 E0            [24] 1734 	push	acc
      0001D0 74 08            [12] 1735 	mov	a,#0x08
      0001D2 C0 E0            [24] 1736 	push	acc
      0001D4 E4               [12] 1737 	clr	a
      0001D5 C0 E0            [24] 1738 	push	acc
      0001D7 74 08            [12] 1739 	mov	a,#0x08
      0001D9 C0 E0            [24] 1740 	push	acc
      0001DB E4               [12] 1741 	clr	a
      0001DC C0 E0            [24] 1742 	push	acc
      0001DE 74 08            [12] 1743 	mov	a,#0x08
      0001E0 C0 E0            [24] 1744 	push	acc
      0001E2 E4               [12] 1745 	clr	a
      0001E3 C0 E0            [24] 1746 	push	acc
      0001E5 74r16            [12] 1747 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1748 	push	acc
      0001E9 74s00            [12] 1749 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1750 	push	acc
      0001ED 74 80            [12] 1751 	mov	a,#0x80
      0001EF C0 E0            [24] 1752 	push	acc
      0001F1 12r00r5C         [24] 1753 	lcall	_lcd_print
      0001F4 E5 81            [12] 1754 	mov	a,sp
      0001F6 24 F3            [12] 1755 	add	a,#0xf3
      0001F8 F5 81            [12] 1756 	mov	sp,a
                           0001FA  1757 	C$i2c.h$160$1$81 ==.
                                   1758 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1759 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1760 	mov	b,#0x07
      000200 E4               [12] 1761 	clr	a
      000201 12r03r0D         [24] 1762 	lcall	_delay_time
      000204 D0 05            [24] 1763 	pop	ar5
      000206 D0 06            [24] 1764 	pop	ar6
                           000208  1765 	C$i2c.h$164$1$81 ==.
                                   1766 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1767 	mov	r7,#0x00
                           00020A  1768 	C$i2c.h$166$3$84 ==.
                                   1769 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1770 00104$:
      00020A C0 07            [24] 1771 	push	ar7
      00020C C0 06            [24] 1772 	push	ar6
      00020E C0 05            [24] 1773 	push	ar5
      000210 12r01r1A         [24] 1774 	lcall	_read_keypad
      000213 AC 82            [24] 1775 	mov	r4,dpl
      000215 D0 05            [24] 1776 	pop	ar5
      000217 D0 06            [24] 1777 	pop	ar6
      000219 D0 07            [24] 1778 	pop	ar7
      00021B 8C 03            [24] 1779 	mov	ar3,r4
      00021D BC FF 02         [24] 1780 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1781 	sjmp	00105$
      000222                       1782 00146$:
      000222 BB 2A 17         [24] 1783 	cjne	r3,#0x2A,00106$
      000225                       1784 00105$:
      000225 90 27 10         [24] 1785 	mov	dptr,#0x2710
      000228 E4               [12] 1786 	clr	a
      000229 F5 F0            [12] 1787 	mov	b,a
      00022B C0 07            [24] 1788 	push	ar7
      00022D C0 06            [24] 1789 	push	ar6
      00022F C0 05            [24] 1790 	push	ar5
      000231 12r03r0D         [24] 1791 	lcall	_delay_time
      000234 D0 05            [24] 1792 	pop	ar5
      000236 D0 06            [24] 1793 	pop	ar6
      000238 D0 07            [24] 1794 	pop	ar7
      00023A 80 CE            [24] 1795 	sjmp	00104$
      00023C                       1796 00106$:
                           00023C  1797 	C$i2c.h$167$2$82 ==.
                                   1798 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1799 	cjne	r3,#0x23,00114$
                           00023F  1800 	C$i2c.h$169$3$83 ==.
                                   1801 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1802 00107$:
      00023F C0 06            [24] 1803 	push	ar6
      000241 C0 05            [24] 1804 	push	ar5
      000243 12r01r1A         [24] 1805 	lcall	_read_keypad
      000246 AC 82            [24] 1806 	mov	r4,dpl
      000248 D0 05            [24] 1807 	pop	ar5
      00024A D0 06            [24] 1808 	pop	ar6
      00024C BC 23 13         [24] 1809 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1810 	mov	dptr,#0x2710
      000252 E4               [12] 1811 	clr	a
      000253 F5 F0            [12] 1812 	mov	b,a
      000255 C0 06            [24] 1813 	push	ar6
      000257 C0 05            [24] 1814 	push	ar5
      000259 12r03r0D         [24] 1815 	lcall	_delay_time
      00025C D0 05            [24] 1816 	pop	ar5
      00025E D0 06            [24] 1817 	pop	ar6
      000260 80 DD            [24] 1818 	sjmp	00107$
      000262                       1819 00109$:
                           000262  1820 	C$i2c.h$170$3$83 ==.
                                   1821 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1822 	mov	dpl,r5
      000264 8E 83            [24] 1823 	mov	dph,r6
      000266 02r03r0C         [24] 1824 	ljmp	00119$
      000269                       1825 00114$:
                           000269  1826 	C$i2c.h$174$3$84 ==.
                                   1827 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1828 	mov	a,r3
      00026A FA               [12] 1829 	mov	r2,a
      00026B 33               [12] 1830 	rlc	a
      00026C 95 E0            [12] 1831 	subb	a,acc
      00026E FC               [12] 1832 	mov	r4,a
      00026F C0 07            [24] 1833 	push	ar7
      000271 C0 06            [24] 1834 	push	ar6
      000273 C0 05            [24] 1835 	push	ar5
      000275 C0 04            [24] 1836 	push	ar4
      000277 C0 03            [24] 1837 	push	ar3
      000279 C0 02            [24] 1838 	push	ar2
      00027B C0 02            [24] 1839 	push	ar2
      00027D C0 04            [24] 1840 	push	ar4
      00027F 74r26            [12] 1841 	mov	a,#___str_2
      000281 C0 E0            [24] 1842 	push	acc
      000283 74s00            [12] 1843 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1844 	push	acc
      000287 74 80            [12] 1845 	mov	a,#0x80
      000289 C0 E0            [24] 1846 	push	acc
      00028B 12r00r5C         [24] 1847 	lcall	_lcd_print
      00028E E5 81            [12] 1848 	mov	a,sp
      000290 24 FB            [12] 1849 	add	a,#0xfb
      000292 F5 81            [12] 1850 	mov	sp,a
      000294 D0 02            [24] 1851 	pop	ar2
      000296 D0 03            [24] 1852 	pop	ar3
      000298 D0 04            [24] 1853 	pop	ar4
      00029A D0 05            [24] 1854 	pop	ar5
      00029C D0 06            [24] 1855 	pop	ar6
                           00029E  1856 	C$i2c.h$175$1$81 ==.
                                   1857 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1858 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1859 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1860 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1861 	push	ar4
      0002A7 C0 03            [24] 1862 	push	ar3
      0002A9 C0 02            [24] 1863 	push	ar2
      0002AB 12r00r00         [24] 1864 	lcall	__mulint
      0002AE A8 82            [24] 1865 	mov	r0,dpl
      0002B0 A9 83            [24] 1866 	mov	r1,dph
      0002B2 D0 02            [24] 1867 	pop	ar2
      0002B4 D0 03            [24] 1868 	pop	ar3
      0002B6 D0 04            [24] 1869 	pop	ar4
      0002B8 D0 07            [24] 1870 	pop	ar7
      0002BA EA               [12] 1871 	mov	a,r2
      0002BB 28               [12] 1872 	add	a,r0
      0002BC F8               [12] 1873 	mov	r0,a
      0002BD EC               [12] 1874 	mov	a,r4
      0002BE 39               [12] 1875 	addc	a,r1
      0002BF F9               [12] 1876 	mov	r1,a
      0002C0 E8               [12] 1877 	mov	a,r0
      0002C1 24 D0            [12] 1878 	add	a,#0xD0
      0002C3 FD               [12] 1879 	mov	r5,a
      0002C4 E9               [12] 1880 	mov	a,r1
      0002C5 34 FF            [12] 1881 	addc	a,#0xFF
      0002C7 FE               [12] 1882 	mov	r6,a
                           0002C8  1883 	C$i2c.h$176$3$84 ==.
                                   1884 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1885 00110$:
      0002C8 C0 07            [24] 1886 	push	ar7
      0002CA C0 06            [24] 1887 	push	ar6
      0002CC C0 05            [24] 1888 	push	ar5
      0002CE C0 03            [24] 1889 	push	ar3
      0002D0 12r01r1A         [24] 1890 	lcall	_read_keypad
      0002D3 AC 82            [24] 1891 	mov	r4,dpl
      0002D5 D0 03            [24] 1892 	pop	ar3
      0002D7 D0 05            [24] 1893 	pop	ar5
      0002D9 D0 06            [24] 1894 	pop	ar6
      0002DB D0 07            [24] 1895 	pop	ar7
      0002DD EC               [12] 1896 	mov	a,r4
      0002DE B5 03 1B         [24] 1897 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1898 	mov	dptr,#0x2710
      0002E4 E4               [12] 1899 	clr	a
      0002E5 F5 F0            [12] 1900 	mov	b,a
      0002E7 C0 07            [24] 1901 	push	ar7
      0002E9 C0 06            [24] 1902 	push	ar6
      0002EB C0 05            [24] 1903 	push	ar5
      0002ED C0 03            [24] 1904 	push	ar3
      0002EF 12r03r0D         [24] 1905 	lcall	_delay_time
      0002F2 D0 03            [24] 1906 	pop	ar3
      0002F4 D0 05            [24] 1907 	pop	ar5
      0002F6 D0 06            [24] 1908 	pop	ar6
      0002F8 D0 07            [24] 1909 	pop	ar7
      0002FA 80 CC            [24] 1910 	sjmp	00110$
      0002FC                       1911 00118$:
                           0002FC  1912 	C$i2c.h$164$1$81 ==.
                                   1913 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1914 	inc	r7
      0002FD C3               [12] 1915 	clr	c
      0002FE EF               [12] 1916 	mov	a,r7
      0002FF 64 80            [12] 1917 	xrl	a,#0x80
      000301 94 85            [12] 1918 	subb	a,#0x85
      000303 50 03            [24] 1919 	jnc	00155$
      000305 02r02r0A         [24] 1920 	ljmp	00104$
      000308                       1921 00155$:
                           000308  1922 	C$i2c.h$179$1$81 ==.
                                   1923 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1924 	mov	dpl,r5
      00030A 8E 83            [24] 1925 	mov	dph,r6
      00030C                       1926 00119$:
                           00030C  1927 	C$i2c.h$180$1$81 ==.
                           00030C  1928 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1929 	ret
                                   1930 ;------------------------------------------------------------
                                   1931 ;Allocation info for local variables in function 'delay_time'
                                   1932 ;------------------------------------------------------------
                                   1933 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1934 ;index                     Allocated to registers 
                                   1935 ;------------------------------------------------------------
                           00030D  1936 	G$delay_time$0$0 ==.
                           00030D  1937 	C$i2c.h$189$1$81 ==.
                                   1938 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1939 ;	-----------------------------------------
                                   1940 ;	 function delay_time
                                   1941 ;	-----------------------------------------
      00030D                       1942 _delay_time:
      00030D AC 82            [24] 1943 	mov	r4,dpl
      00030F AD 83            [24] 1944 	mov	r5,dph
      000311 AE F0            [24] 1945 	mov	r6,b
      000313 FF               [12] 1946 	mov	r7,a
                           000314  1947 	C$i2c.h$192$1$86 ==.
                                   1948 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1949 	mov	r0,#0x00
      000316 79 00            [12] 1950 	mov	r1,#0x00
      000318 7A 00            [12] 1951 	mov	r2,#0x00
      00031A 7B 00            [12] 1952 	mov	r3,#0x00
      00031C                       1953 00103$:
      00031C C3               [12] 1954 	clr	c
      00031D E8               [12] 1955 	mov	a,r0
      00031E 9C               [12] 1956 	subb	a,r4
      00031F E9               [12] 1957 	mov	a,r1
      000320 9D               [12] 1958 	subb	a,r5
      000321 EA               [12] 1959 	mov	a,r2
      000322 9E               [12] 1960 	subb	a,r6
      000323 EB               [12] 1961 	mov	a,r3
      000324 9F               [12] 1962 	subb	a,r7
      000325 50 0F            [24] 1963 	jnc	00105$
      000327 08               [12] 1964 	inc	r0
      000328 B8 00 09         [24] 1965 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1966 	inc	r1
      00032C B9 00 05         [24] 1967 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1968 	inc	r2
      000330 BA 00 E9         [24] 1969 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1970 	inc	r3
      000334                       1971 00115$:
      000334 80 E6            [24] 1972 	sjmp	00103$
      000336                       1973 00105$:
                           000336  1974 	C$i2c.h$193$1$86 ==.
                           000336  1975 	XG$delay_time$0$0 ==.
      000336 22               [24] 1976 	ret
                                   1977 ;------------------------------------------------------------
                                   1978 ;Allocation info for local variables in function 'i2c_start'
                                   1979 ;------------------------------------------------------------
                           000337  1980 	G$i2c_start$0$0 ==.
                           000337  1981 	C$i2c.h$196$1$86 ==.
                                   1982 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1983 ;	-----------------------------------------
                                   1984 ;	 function i2c_start
                                   1985 ;	-----------------------------------------
      000337                       1986 _i2c_start:
                           000337  1987 	C$i2c.h$198$1$88 ==.
                                   1988 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1989 00101$:
      000337 20 C7 FD         [24] 1990 	jb	_BUSY,00101$
                           00033A  1991 	C$i2c.h$199$1$88 ==.
                                   1992 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1993 	setb	_STA
                           00033C  1994 	C$i2c.h$200$1$88 ==.
                                   1995 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1996 00104$:
      00033C 30 C3 FD         [24] 1997 	jnb	_SI,00104$
                           00033F  1998 	C$i2c.h$201$1$88 ==.
                                   1999 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 2000 	clr	_STA
                           000341  2001 	C$i2c.h$202$1$88 ==.
                                   2002 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 2003 	clr	_SI
                           000343  2004 	C$i2c.h$203$1$88 ==.
                           000343  2005 	XG$i2c_start$0$0 ==.
      000343 22               [24] 2006 	ret
                                   2007 ;------------------------------------------------------------
                                   2008 ;Allocation info for local variables in function 'i2c_write'
                                   2009 ;------------------------------------------------------------
                                   2010 ;output_data               Allocated to registers 
                                   2011 ;------------------------------------------------------------
                           000344  2012 	G$i2c_write$0$0 ==.
                           000344  2013 	C$i2c.h$206$1$88 ==.
                                   2014 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2015 ;	-----------------------------------------
                                   2016 ;	 function i2c_write
                                   2017 ;	-----------------------------------------
      000344                       2018 _i2c_write:
      000344 85 82 C2         [24] 2019 	mov	_SMB0DAT,dpl
                           000347  2020 	C$i2c.h$209$1$90 ==.
                                   2021 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2022 00101$:
                           000347  2023 	C$i2c.h$210$1$90 ==.
                                   2024 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2025 	jbc	_SI,00112$
      00034A 80 FB            [24] 2026 	sjmp	00101$
      00034C                       2027 00112$:
                           00034C  2028 	C$i2c.h$211$1$90 ==.
                           00034C  2029 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2030 	ret
                                   2031 ;------------------------------------------------------------
                                   2032 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2033 ;------------------------------------------------------------
                                   2034 ;output_data               Allocated to registers 
                                   2035 ;------------------------------------------------------------
                           00034D  2036 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2037 	C$i2c.h$214$1$90 ==.
                                   2038 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2039 ;	-----------------------------------------
                                   2040 ;	 function i2c_write_and_stop
                                   2041 ;	-----------------------------------------
      00034D                       2042 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2043 	mov	_SMB0DAT,dpl
                           000350  2044 	C$i2c.h$217$1$92 ==.
                                   2045 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2046 	setb	_STO
                           000352  2047 	C$i2c.h$218$1$92 ==.
                                   2048 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2049 00101$:
                           000352  2050 	C$i2c.h$219$1$92 ==.
                                   2051 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2052 	jbc	_SI,00112$
      000355 80 FB            [24] 2053 	sjmp	00101$
      000357                       2054 00112$:
                           000357  2055 	C$i2c.h$220$1$92 ==.
                           000357  2056 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2057 	ret
                                   2058 ;------------------------------------------------------------
                                   2059 ;Allocation info for local variables in function 'i2c_read'
                                   2060 ;------------------------------------------------------------
                                   2061 ;input_data                Allocated to registers 
                                   2062 ;------------------------------------------------------------
                           000358  2063 	G$i2c_read$0$0 ==.
                           000358  2064 	C$i2c.h$223$1$92 ==.
                                   2065 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2066 ;	-----------------------------------------
                                   2067 ;	 function i2c_read
                                   2068 ;	-----------------------------------------
      000358                       2069 _i2c_read:
                           000358  2070 	C$i2c.h$226$1$94 ==.
                                   2071 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2072 00101$:
      000358 30 C3 FD         [24] 2073 	jnb	_SI,00101$
                           00035B  2074 	C$i2c.h$227$1$94 ==.
                                   2075 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2076 	mov	dpl,_SMB0DAT
                           00035E  2077 	C$i2c.h$228$1$94 ==.
                                   2078 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2079 	clr	_SI
                           000360  2080 	C$i2c.h$229$1$94 ==.
                                   2081 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2082 	C$i2c.h$230$1$94 ==.
                           000360  2083 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2084 	ret
                                   2085 ;------------------------------------------------------------
                                   2086 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2087 ;------------------------------------------------------------
                                   2088 ;input_data                Allocated to registers r7 
                                   2089 ;------------------------------------------------------------
                           000361  2090 	G$i2c_read_and_stop$0$0 ==.
                           000361  2091 	C$i2c.h$233$1$94 ==.
                                   2092 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2093 ;	-----------------------------------------
                                   2094 ;	 function i2c_read_and_stop
                                   2095 ;	-----------------------------------------
      000361                       2096 _i2c_read_and_stop:
                           000361  2097 	C$i2c.h$236$1$96 ==.
                                   2098 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2099 00101$:
      000361 30 C3 FD         [24] 2100 	jnb	_SI,00101$
                           000364  2101 	C$i2c.h$237$1$96 ==.
                                   2102 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2103 	mov	r7,_SMB0DAT
                           000366  2104 	C$i2c.h$238$1$96 ==.
                                   2105 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2106 	clr	_SI
                           000368  2107 	C$i2c.h$239$1$96 ==.
                                   2108 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2109 	setb	_STO
                           00036A  2110 	C$i2c.h$240$1$96 ==.
                                   2111 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2112 00104$:
                           00036A  2113 	C$i2c.h$241$1$96 ==.
                                   2114 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2115 	jbc	_SI,00122$
      00036D 80 FB            [24] 2116 	sjmp	00104$
      00036F                       2117 00122$:
                           00036F  2118 	C$i2c.h$242$1$96 ==.
                                   2119 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2120 	mov	dpl,r7
                           000371  2121 	C$i2c.h$243$1$96 ==.
                           000371  2122 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2123 	ret
                                   2124 ;------------------------------------------------------------
                                   2125 ;Allocation info for local variables in function 'i2c_write_data'
                                   2126 ;------------------------------------------------------------
                                   2127 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2128 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2129 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2130 ;addr                      Allocated to registers r7 
                                   2131 ;i                         Allocated to registers 
                                   2132 ;------------------------------------------------------------
                           000372  2133 	G$i2c_write_data$0$0 ==.
                           000372  2134 	C$i2c.h$246$1$96 ==.
                                   2135 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2136 ;	-----------------------------------------
                                   2137 ;	 function i2c_write_data
                                   2138 ;	-----------------------------------------
      000372                       2139 _i2c_write_data:
      000372 AF 82            [24] 2140 	mov	r7,dpl
                           000374  2141 	C$i2c.h$250$1$98 ==.
                                   2142 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2143 	push	ar7
      000376 12r03r37         [24] 2144 	lcall	_i2c_start
      000379 D0 07            [24] 2145 	pop	ar7
                           00037B  2146 	C$i2c.h$251$1$98 ==.
                                   2147 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2148 	mov	a,#0xFE
      00037D 5F               [12] 2149 	anl	a,r7
      00037E F5 82            [12] 2150 	mov	dpl,a
      000380 12r03r44         [24] 2151 	lcall	_i2c_write
                           000383  2152 	C$i2c.h$252$1$98 ==.
                                   2153 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2154 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2155 	lcall	_i2c_write
                           000389  2156 	C$i2c.h$253$1$98 ==.
                                   2157 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2158 	mov	r7,#0x00
      00038B                       2159 00103$:
      00038B AD*09            [24] 2160 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2161 	mov	r6,#0x00
      00038F 1D               [12] 2162 	dec	r5
      000390 BD FF 01         [24] 2163 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2164 	dec	r6
      000394                       2165 00114$:
      000394 8F 03            [24] 2166 	mov	ar3,r7
      000396 7C 00            [12] 2167 	mov	r4,#0x00
      000398 C3               [12] 2168 	clr	c
      000399 EB               [12] 2169 	mov	a,r3
      00039A 9D               [12] 2170 	subb	a,r5
      00039B EC               [12] 2171 	mov	a,r4
      00039C 64 80            [12] 2172 	xrl	a,#0x80
      00039E 8E F0            [24] 2173 	mov	b,r6
      0003A0 63 F0 80         [24] 2174 	xrl	b,#0x80
      0003A3 95 F0            [12] 2175 	subb	a,b
      0003A5 50 1F            [24] 2176 	jnc	00101$
                           0003A7  2177 	C$i2c.h$254$1$98 ==.
                                   2178 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2179 	mov	a,r7
      0003A8 25*06            [12] 2180 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2181 	mov	r4,a
      0003AB E4               [12] 2182 	clr	a
      0003AC 35*07            [12] 2183 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2184 	mov	r5,a
      0003AF AE*08            [24] 2185 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2186 	mov	dpl,r4
      0003B3 8D 83            [24] 2187 	mov	dph,r5
      0003B5 8E F0            [24] 2188 	mov	b,r6
      0003B7 12r00r00         [24] 2189 	lcall	__gptrget
      0003BA F5 82            [12] 2190 	mov	dpl,a
      0003BC C0 07            [24] 2191 	push	ar7
      0003BE 12r03r44         [24] 2192 	lcall	_i2c_write
      0003C1 D0 07            [24] 2193 	pop	ar7
                           0003C3  2194 	C$i2c.h$253$1$98 ==.
                                   2195 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2196 	inc	r7
      0003C4 80 C5            [24] 2197 	sjmp	00103$
      0003C6                       2198 00101$:
                           0003C6  2199 	C$i2c.h$255$1$98 ==.
                                   2200 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2201 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2202 	mov	r7,#0x00
      0003CA 1E               [12] 2203 	dec	r6
      0003CB BE FF 01         [24] 2204 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2205 	dec	r7
      0003CF                       2206 00116$:
      0003CF EE               [12] 2207 	mov	a,r6
      0003D0 25*06            [12] 2208 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2209 	mov	r6,a
      0003D3 EF               [12] 2210 	mov	a,r7
      0003D4 35*07            [12] 2211 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2212 	mov	r7,a
      0003D7 AD*08            [24] 2213 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2214 	mov	dpl,r6
      0003DB 8F 83            [24] 2215 	mov	dph,r7
      0003DD 8D F0            [24] 2216 	mov	b,r5
      0003DF 12r00r00         [24] 2217 	lcall	__gptrget
      0003E2 F5 82            [12] 2218 	mov	dpl,a
      0003E4 12r03r4D         [24] 2219 	lcall	_i2c_write_and_stop
                           0003E7  2220 	C$i2c.h$256$1$98 ==.
                           0003E7  2221 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2222 	ret
                                   2223 ;------------------------------------------------------------
                                   2224 ;Allocation info for local variables in function 'i2c_read_data'
                                   2225 ;------------------------------------------------------------
                                   2226 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2227 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2228 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2229 ;addr                      Allocated to registers r7 
                                   2230 ;j                         Allocated to registers 
                                   2231 ;------------------------------------------------------------
                           0003E8  2232 	G$i2c_read_data$0$0 ==.
                           0003E8  2233 	C$i2c.h$259$1$98 ==.
                                   2234 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2235 ;	-----------------------------------------
                                   2236 ;	 function i2c_read_data
                                   2237 ;	-----------------------------------------
      0003E8                       2238 _i2c_read_data:
      0003E8 AF 82            [24] 2239 	mov	r7,dpl
                           0003EA  2240 	C$i2c.h$262$1$100 ==.
                                   2241 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2242 	push	ar7
      0003EC 12r03r37         [24] 2243 	lcall	_i2c_start
      0003EF D0 07            [24] 2244 	pop	ar7
                           0003F1  2245 	C$i2c.h$263$1$100 ==.
                                   2246 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2247 	mov	ar6,r7
      0003F3 74 FE            [12] 2248 	mov	a,#0xFE
      0003F5 5E               [12] 2249 	anl	a,r6
      0003F6 F5 82            [12] 2250 	mov	dpl,a
      0003F8 C0 07            [24] 2251 	push	ar7
      0003FA 12r03r44         [24] 2252 	lcall	_i2c_write
                           0003FD  2253 	C$i2c.h$264$1$100 ==.
                                   2254 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2255 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2256 	lcall	_i2c_write_and_stop
                           000403  2257 	C$i2c.h$265$1$100 ==.
                                   2258 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2259 	lcall	_i2c_start
      000406 D0 07            [24] 2260 	pop	ar7
                           000408  2261 	C$i2c.h$266$1$100 ==.
                                   2262 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2263 	mov	a,#0x01
      00040A 4F               [12] 2264 	orl	a,r7
      00040B F5 82            [12] 2265 	mov	dpl,a
      00040D 12r03r44         [24] 2266 	lcall	_i2c_write
                           000410  2267 	C$i2c.h$267$1$100 ==.
                                   2268 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2269 	mov	r7,#0x00
      000412                       2270 00103$:
      000412 AD*0E            [24] 2271 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2272 	mov	r6,#0x00
      000416 1D               [12] 2273 	dec	r5
      000417 BD FF 01         [24] 2274 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2275 	dec	r6
      00041B                       2276 00114$:
      00041B 8F 03            [24] 2277 	mov	ar3,r7
      00041D 7C 00            [12] 2278 	mov	r4,#0x00
      00041F C3               [12] 2279 	clr	c
      000420 EB               [12] 2280 	mov	a,r3
      000421 9D               [12] 2281 	subb	a,r5
      000422 EC               [12] 2282 	mov	a,r4
      000423 64 80            [12] 2283 	xrl	a,#0x80
      000425 8E F0            [24] 2284 	mov	b,r6
      000427 63 F0 80         [24] 2285 	xrl	b,#0x80
      00042A 95 F0            [12] 2286 	subb	a,b
      00042C 50 2E            [24] 2287 	jnc	00101$
                           00042E  2288 	C$i2c.h$269$2$101 ==.
                                   2289 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2290 	setb	_AA
                           000430  2291 	C$i2c.h$270$2$101 ==.
                                   2292 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2293 	mov	a,r7
      000431 25*0B            [12] 2294 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2295 	mov	r4,a
      000434 E4               [12] 2296 	clr	a
      000435 35*0C            [12] 2297 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2298 	mov	r5,a
      000438 AE*0D            [24] 2299 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2300 	push	ar7
      00043C C0 06            [24] 2301 	push	ar6
      00043E C0 05            [24] 2302 	push	ar5
      000440 C0 04            [24] 2303 	push	ar4
      000442 12r03r58         [24] 2304 	lcall	_i2c_read
      000445 AB 82            [24] 2305 	mov	r3,dpl
      000447 D0 04            [24] 2306 	pop	ar4
      000449 D0 05            [24] 2307 	pop	ar5
      00044B D0 06            [24] 2308 	pop	ar6
      00044D D0 07            [24] 2309 	pop	ar7
      00044F 8C 82            [24] 2310 	mov	dpl,r4
      000451 8D 83            [24] 2311 	mov	dph,r5
      000453 8E F0            [24] 2312 	mov	b,r6
      000455 EB               [12] 2313 	mov	a,r3
      000456 12r00r00         [24] 2314 	lcall	__gptrput
                           000459  2315 	C$i2c.h$267$1$100 ==.
                                   2316 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2317 	inc	r7
      00045A 80 B6            [24] 2318 	sjmp	00103$
      00045C                       2319 00101$:
                           00045C  2320 	C$i2c.h$272$1$100 ==.
                                   2321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2322 	clr	_AA
                           00045E  2323 	C$i2c.h$273$1$100 ==.
                                   2324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2325 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2326 	mov	r7,#0x00
      000462 1E               [12] 2327 	dec	r6
      000463 BE FF 01         [24] 2328 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2329 	dec	r7
      000467                       2330 00116$:
      000467 EE               [12] 2331 	mov	a,r6
      000468 25*0B            [12] 2332 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2333 	mov	r6,a
      00046B EF               [12] 2334 	mov	a,r7
      00046C 35*0C            [12] 2335 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2336 	mov	r7,a
      00046F AD*0D            [24] 2337 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2338 	push	ar7
      000473 C0 06            [24] 2339 	push	ar6
      000475 C0 05            [24] 2340 	push	ar5
      000477 12r03r61         [24] 2341 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2342 	mov	r4,dpl
      00047C D0 05            [24] 2343 	pop	ar5
      00047E D0 06            [24] 2344 	pop	ar6
      000480 D0 07            [24] 2345 	pop	ar7
      000482 8E 82            [24] 2346 	mov	dpl,r6
      000484 8F 83            [24] 2347 	mov	dph,r7
      000486 8D F0            [24] 2348 	mov	b,r5
      000488 EC               [12] 2349 	mov	a,r4
      000489 12r00r00         [24] 2350 	lcall	__gptrput
                           00048C  2351 	C$i2c.h$274$1$100 ==.
                           00048C  2352 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2353 	ret
                                   2354 ;------------------------------------------------------------
                                   2355 ;Allocation info for local variables in function 'Accel_Init'
                                   2356 ;------------------------------------------------------------
                                   2357 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2358 ;------------------------------------------------------------
                           00048D  2359 	G$Accel_Init$0$0 ==.
                           00048D  2360 	C$i2c.h$283$1$100 ==.
                                   2361 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2362 ;	-----------------------------------------
                                   2363 ;	 function Accel_Init
                                   2364 ;	-----------------------------------------
      00048D                       2365 _Accel_Init:
                           00048D  2366 	C$i2c.h$287$1$103 ==.
                                   2367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2368 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2369 	C$i2c.h$289$1$103 ==.
                                   2370 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2371 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2372 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2373 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2374 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2375 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2376 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2377 	lcall	_i2c_write_data
                           0004A5  2378 	C$i2c.h$290$1$103 ==.
                                   2379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2380 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2381 	C$i2c.h$292$1$103 ==.
                                   2382 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2383 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2384 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2385 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2386 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2387 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2388 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2389 	lcall	_i2c_write_data
                           0004BD  2390 	C$i2c.h$293$1$103 ==.
                                   2391 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2392 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2393 	C$i2c.h$294$1$103 ==.
                                   2394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2395 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2396 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2397 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2398 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2399 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2400 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2401 	lcall	_i2c_write_data
                           0004D5  2402 	C$i2c.h$298$1$103 ==.
                           0004D5  2403 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2404 	ret
                                   2405 ;------------------------------------------------------------
                                   2406 ;Allocation info for local variables in function 'main'
                                   2407 ;------------------------------------------------------------
                           0004D6  2408 	G$main$0$0 ==.
                           0004D6  2409 	C$Lab6.c$67$1$103 ==.
                                   2410 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:67: void main(void)
                                   2411 ;	-----------------------------------------
                                   2412 ;	 function main
                                   2413 ;	-----------------------------------------
      0004D6                       2414 _main:
                           0004D6  2415 	C$Lab6.c$69$1$120 ==.
                                   2416 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:69: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2417 	lcall	_Sys_Init
                           0004D9  2418 	C$Lab6.c$70$1$120 ==.
                                   2419 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:70: Port_Init();   
      0004D9 12r05rB9         [24] 2420 	lcall	_Port_Init
                           0004DC  2421 	C$Lab6.c$71$1$120 ==.
                                   2422 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:71: Interrupt_Init();   
      0004DC 12r05rD7         [24] 2423 	lcall	_Interrupt_Init
                           0004DF  2424 	C$Lab6.c$72$1$120 ==.
                                   2425 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:72: PCA_Init();
      0004DF 12r05rE0         [24] 2426 	lcall	_PCA_Init
                           0004E2  2427 	C$Lab6.c$73$1$120 ==.
                                   2428 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:73: ADC_Init();
      0004E2 12r06r58         [24] 2429 	lcall	_ADC_Init
                           0004E5  2430 	C$Lab6.c$74$1$120 ==.
                                   2431 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:74: SMB0_Init();
      0004E5 12r05rF3         [24] 2432 	lcall	_SMB0_Init
                           0004E8  2433 	C$Lab6.c$75$1$120 ==.
                                   2434 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:75: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2435 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2436 	lcall	_putchar
                           0004EE  2437 	C$Lab6.c$76$1$120 ==.
                                   2438 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:76: printf("\nStart\r\n");
      0004EE 74r29            [12] 2439 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2440 	push	acc
      0004F2 74s00            [12] 2441 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2442 	push	acc
      0004F6 74 80            [12] 2443 	mov	a,#0x80
      0004F8 C0 E0            [24] 2444 	push	acc
      0004FA 12r00r00         [24] 2445 	lcall	_printf
      0004FD 15 81            [12] 2446 	dec	sp
      0004FF 15 81            [12] 2447 	dec	sp
      000501 15 81            [12] 2448 	dec	sp
                           000503  2449 	C$Lab6.c$77$1$120 ==.
                                   2450 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:77: PCA0CP0 = 0xFFFF - PW_CENTER;
      000503 75 EA 37         [24] 2451 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x37
      000506 75 FA F5         [24] 2452 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2453 	C$Lab6.c$78$1$120 ==.
                                   2454 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:78: PCA0CP1 = 0xFFFF - PW_CENTER;
      000509 75 EB 37         [24] 2455 	mov	((_PCA0CP1 >> 0) & 0xFF),#0x37
      00050C 75 FB F5         [24] 2456 	mov	((_PCA0CP1 >> 8) & 0xFF),#0xF5
                           00050F  2457 	C$Lab6.c$79$1$120 ==.
                                   2458 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:79: PCA0CP2 = 0xFFFF - PW_CENTER; 
      00050F 75 EC 37         [24] 2459 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x37
      000512 75 FC F5         [24] 2460 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000515  2461 	C$Lab6.c$80$1$120 ==.
                                   2462 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:80: PCA0CP3 = 0xFFFF - PW_CENTER;
      000515 75 ED 37         [24] 2463 	mov	((_PCA0CP3 >> 0) & 0xFF),#0x37
      000518 75 FD F5         [24] 2464 	mov	((_PCA0CP3 >> 8) & 0xFF),#0xF5
                           00051B  2465 	C$Lab6.c$81$1$120 ==.
                                   2466 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:81: Counts = 0;
      00051B E4               [12] 2467 	clr	a
      00051C F5*19            [12] 2468 	mov	_Counts,a
      00051E F5*1A            [12] 2469 	mov	(_Counts + 1),a
                           000520  2470 	C$Lab6.c$82$1$120 ==.
                                   2471 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:82: while (Counts < 1);  // Wait a long time (1s) for motors to initialize
      000520                       2472 00101$:
      000520 C3               [12] 2473 	clr	c
      000521 E5*19            [12] 2474 	mov	a,_Counts
      000523 94 01            [12] 2475 	subb	a,#0x01
      000525 E5*1A            [12] 2476 	mov	a,(_Counts + 1)
      000527 94 00            [12] 2477 	subb	a,#0x00
      000529 40 F5            [24] 2478 	jc	00101$
                           00052B  2479 	C$Lab6.c$86$1$120 ==.
                                   2480 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:86: Pick_Heading();
      00052B 12r07rB9         [24] 2481 	lcall	_Pick_Heading
                           00052E  2482 	C$Lab6.c$87$1$120 ==.
                                   2483 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:87: Counts = 0;
      00052E E4               [12] 2484 	clr	a
      00052F F5*19            [12] 2485 	mov	_Counts,a
      000531 F5*1A            [12] 2486 	mov	(_Counts + 1),a
                           000533  2487 	C$Lab6.c$88$1$120 ==.
                                   2488 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:88: nCounts = 0;
      000533 F5*1B            [12] 2489 	mov	_nCounts,a
      000535 F5*1C            [12] 2490 	mov	(_nCounts + 1),a
                           000537  2491 	C$Lab6.c$91$1$120 ==.
                                   2492 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:91: while (1)
      000537                       2493 00115$:
                           000537  2494 	C$Lab6.c$93$2$121 ==.
                                   2495 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:93: if ((new_range)) // enough overflow for a new range
      000537 E5*14            [12] 2496 	mov	a,_new_range
      000539 60 16            [24] 2497 	jz	00107$
                           00053B  2498 	C$Lab6.c$95$3$122 ==.
                                   2499 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:95: new_range = 0;	//clear and wait for next ping
      00053B 75*14 00         [24] 2500 	mov	_new_range,#0x00
                           00053E  2501 	C$Lab6.c$96$3$122 ==.
                                   2502 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:96: range = read_ranger();
      00053E 12r08r7C         [24] 2503 	lcall	_read_ranger
      000541 85 82*37         [24] 2504 	mov	_range,dpl
      000544 85 83*38         [24] 2505 	mov	(_range + 1),dph
                           000547  2506 	C$Lab6.c$97$3$122 ==.
                                   2507 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:97: if(Hand_Check()) Set_Desired_Heading();
      000547 12r07r9E         [24] 2508 	lcall	_Hand_Check
      00054A E5 82            [12] 2509 	mov	a,dpl
      00054C 60 03            [24] 2510 	jz	00107$
      00054E 12r09rDB         [24] 2511 	lcall	_Set_Desired_Heading
      000551                       2512 00107$:
                           000551  2513 	C$Lab6.c$113$2$121 ==.
                                   2514 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:113: if(new_heading)
      000551 E5*3A            [12] 2515 	mov	a,_new_heading
      000553 60 0C            [24] 2516 	jz	00109$
                           000555  2517 	C$Lab6.c$115$3$123 ==.
                                   2518 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:115: new_heading = 0;
      000555 75*3A 00         [24] 2519 	mov	_new_heading,#0x00
                           000558  2520 	C$Lab6.c$116$3$123 ==.
                                   2521 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:116: heading = read_compass();
      000558 12r08r56         [24] 2522 	lcall	_read_compass
      00055B 85 82*35         [24] 2523 	mov	_heading,dpl
      00055E 85 83*36         [24] 2524 	mov	(_heading + 1),dph
      000561                       2525 00109$:
                           000561  2526 	C$Lab6.c$118$2$121 ==.
                                   2527 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:118: if(new_AD)
      000561 E5*30            [12] 2528 	mov	a,_new_AD
      000563 60 43            [24] 2529 	jz	00111$
                           000565  2530 	C$Lab6.c$120$3$124 ==.
                                   2531 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:120: new_AD = 0;
      000565 75*30 00         [24] 2532 	mov	_new_AD,#0x00
                           000568  2533 	C$Lab6.c$121$3$124 ==.
                                   2534 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:121: AD_Result = read_AD_input(5); //Read analog input on pin 1.5
      000568 75 82 05         [24] 2535 	mov	dpl,#0x05
      00056B 12r06r62         [24] 2536 	lcall	_read_AD_input
                           00056E  2537 	C$Lab6.c$122$1$120 ==.
                                   2538 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:122: voltage = ((12.8/255)*(AD_Result)); //Convert back to input voltage
      00056E 85 82*31         [24] 2539 	mov  _AD_Result,dpl
      000571 12r00r00         [24] 2540 	lcall	___uchar2fs
      000574 AC 82            [24] 2541 	mov	r4,dpl
      000576 AD 83            [24] 2542 	mov	r5,dph
      000578 AE F0            [24] 2543 	mov	r6,b
      00057A FF               [12] 2544 	mov	r7,a
      00057B C0 04            [24] 2545 	push	ar4
      00057D C0 05            [24] 2546 	push	ar5
      00057F C0 06            [24] 2547 	push	ar6
      000581 C0 07            [24] 2548 	push	ar7
      000583 90 9A 67         [24] 2549 	mov	dptr,#0x9A67
      000586 75 F0 4D         [24] 2550 	mov	b,#0x4D
      000589 74 3D            [12] 2551 	mov	a,#0x3D
      00058B 12r00r00         [24] 2552 	lcall	___fsmul
      00058E AC 82            [24] 2553 	mov	r4,dpl
      000590 AD 83            [24] 2554 	mov	r5,dph
      000592 AE F0            [24] 2555 	mov	r6,b
      000594 FF               [12] 2556 	mov	r7,a
      000595 E5 81            [12] 2557 	mov	a,sp
      000597 24 FC            [12] 2558 	add	a,#0xfc
      000599 F5 81            [12] 2559 	mov	sp,a
      00059B 8C 82            [24] 2560 	mov	dpl,r4
      00059D 8D 83            [24] 2561 	mov	dph,r5
      00059F 8E F0            [24] 2562 	mov	b,r6
      0005A1 EF               [12] 2563 	mov	a,r7
      0005A2 12r00r00         [24] 2564 	lcall	___fs2uchar
      0005A5 85 82*32         [24] 2565 	mov	_voltage,dpl
      0005A8                       2566 00111$:
                           0005A8  2567 	C$Lab6.c$124$2$121 ==.
                                   2568 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:124: if(print_delay == 20)
      0005A8 74 14            [12] 2569 	mov	a,#0x14
      0005AA B5*27 02         [24] 2570 	cjne	a,_print_delay,00148$
      0005AD 80 03            [24] 2571 	sjmp	00149$
      0005AF                       2572 00148$:
      0005AF 02r05r37         [24] 2573 	ljmp	00115$
      0005B2                       2574 00149$:
                           0005B2  2575 	C$Lab6.c$127$3$125 ==.
                                   2576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:127: print_delay = 0;
      0005B2 75*27 00         [24] 2577 	mov	_print_delay,#0x00
      0005B5 02r05r37         [24] 2578 	ljmp	00115$
                           0005B8  2579 	C$Lab6.c$132$1$120 ==.
                           0005B8  2580 	XG$main$0$0 ==.
      0005B8 22               [24] 2581 	ret
                                   2582 ;------------------------------------------------------------
                                   2583 ;Allocation info for local variables in function 'Port_Init'
                                   2584 ;------------------------------------------------------------
                           0005B9  2585 	G$Port_Init$0$0 ==.
                           0005B9  2586 	C$Lab6.c$136$1$120 ==.
                                   2587 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:136: void Port_Init(void)	
                                   2588 ;	-----------------------------------------
                                   2589 ;	 function Port_Init
                                   2590 ;	-----------------------------------------
      0005B9                       2591 _Port_Init:
                           0005B9  2592 	C$Lab6.c$138$1$127 ==.
                                   2593 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:138: XBR0 = 0x27;
      0005B9 75 E1 27         [24] 2594 	mov	_XBR0,#0x27
                           0005BC  2595 	C$Lab6.c$139$1$127 ==.
                                   2596 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:139: P1MDIN 	&= 0x7F;	// set pin 1.5 for analog input	
      0005BC 53 BD 7F         [24] 2597 	anl	_P1MDIN,#0x7F
                           0005BF  2598 	C$Lab6.c$140$1$127 ==.
                                   2599 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:140: P1MDOUT |= 0x0F;	//set output pin for CEX0-3 in push-pull mode
      0005BF 43 A5 0F         [24] 2600 	orl	_P1MDOUT,#0x0F
                           0005C2  2601 	C$Lab6.c$141$1$127 ==.
                                   2602 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:141: P1MDOUT &= 0x7F;	// set input pin for 1.5 to open-drain
      0005C2 53 A5 7F         [24] 2603 	anl	_P1MDOUT,#0x7F
                           0005C5  2604 	C$Lab6.c$142$1$127 ==.
                                   2605 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:142: P1		|= ~0x7F;	// set input pin for 1.5 to high impedence
      0005C5 AF 90            [24] 2606 	mov	r7,_P1
      0005C7 74 80            [12] 2607 	mov	a,#0x80
      0005C9 4F               [12] 2608 	orl	a,r7
      0005CA F5 90            [12] 2609 	mov	_P1,a
                           0005CC  2610 	C$Lab6.c$143$1$127 ==.
                                   2611 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:143: P3MDOUT &= 0x7F;	// set input pin for 3.6/7 to open-drain
      0005CC 53 A7 7F         [24] 2612 	anl	_P3MDOUT,#0x7F
                           0005CF  2613 	C$Lab6.c$144$1$127 ==.
                                   2614 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:144: P3		|= ~0x7F;	// set input pin for 3.6/7 to high impedence
      0005CF AF B0            [24] 2615 	mov	r7,_P3
      0005D1 74 80            [12] 2616 	mov	a,#0x80
      0005D3 4F               [12] 2617 	orl	a,r7
      0005D4 F5 B0            [12] 2618 	mov	_P3,a
                           0005D6  2619 	C$Lab6.c$146$1$127 ==.
                           0005D6  2620 	XG$Port_Init$0$0 ==.
      0005D6 22               [24] 2621 	ret
                                   2622 ;------------------------------------------------------------
                                   2623 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2624 ;------------------------------------------------------------
                           0005D7  2625 	G$Interrupt_Init$0$0 ==.
                           0005D7  2626 	C$Lab6.c$150$1$127 ==.
                                   2627 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:150: void Interrupt_Init(void)
                                   2628 ;	-----------------------------------------
                                   2629 ;	 function Interrupt_Init
                                   2630 ;	-----------------------------------------
      0005D7                       2631 _Interrupt_Init:
                           0005D7  2632 	C$Lab6.c$152$1$129 ==.
                                   2633 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:152: IE |= 0x02;
      0005D7 43 A8 02         [24] 2634 	orl	_IE,#0x02
                           0005DA  2635 	C$Lab6.c$153$1$129 ==.
                                   2636 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:153: EIE1 |= 0x08;
      0005DA 43 E6 08         [24] 2637 	orl	_EIE1,#0x08
                           0005DD  2638 	C$Lab6.c$154$1$129 ==.
                                   2639 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:154: EA = 1;
      0005DD D2 AF            [12] 2640 	setb	_EA
                           0005DF  2641 	C$Lab6.c$155$1$129 ==.
                           0005DF  2642 	XG$Interrupt_Init$0$0 ==.
      0005DF 22               [24] 2643 	ret
                                   2644 ;------------------------------------------------------------
                                   2645 ;Allocation info for local variables in function 'PCA_Init'
                                   2646 ;------------------------------------------------------------
                           0005E0  2647 	G$PCA_Init$0$0 ==.
                           0005E0  2648 	C$Lab6.c$159$1$129 ==.
                                   2649 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:159: void PCA_Init(void)
                                   2650 ;	-----------------------------------------
                                   2651 ;	 function PCA_Init
                                   2652 ;	-----------------------------------------
      0005E0                       2653 _PCA_Init:
                           0005E0  2654 	C$Lab6.c$161$1$131 ==.
                                   2655 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:161: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      0005E0 75 D9 81         [24] 2656 	mov	_PCA0MD,#0x81
                           0005E3  2657 	C$Lab6.c$162$1$131 ==.
                                   2658 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:162: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM
      0005E3 75 DA C2         [24] 2659 	mov	_PCA0CPM0,#0xC2
                           0005E6  2660 	C$Lab6.c$163$1$131 ==.
                                   2661 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:163: PCA0CPM1 = 0xC2;
      0005E6 75 DB C2         [24] 2662 	mov	_PCA0CPM1,#0xC2
                           0005E9  2663 	C$Lab6.c$164$1$131 ==.
                                   2664 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:164: PCA0CPM2 = 0xC2;
      0005E9 75 DC C2         [24] 2665 	mov	_PCA0CPM2,#0xC2
                           0005EC  2666 	C$Lab6.c$165$1$131 ==.
                                   2667 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:165: PCA0CPM3 = 0xC2;
      0005EC 75 DD C2         [24] 2668 	mov	_PCA0CPM3,#0xC2
                           0005EF  2669 	C$Lab6.c$166$1$131 ==.
                                   2670 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:166: PCA0CN = 0x40;     // enable PCA
      0005EF 75 D8 40         [24] 2671 	mov	_PCA0CN,#0x40
                           0005F2  2672 	C$Lab6.c$167$1$131 ==.
                           0005F2  2673 	XG$PCA_Init$0$0 ==.
      0005F2 22               [24] 2674 	ret
                                   2675 ;------------------------------------------------------------
                                   2676 ;Allocation info for local variables in function 'SMB0_Init'
                                   2677 ;------------------------------------------------------------
                           0005F3  2678 	G$SMB0_Init$0$0 ==.
                           0005F3  2679 	C$Lab6.c$171$1$131 ==.
                                   2680 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:171: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2681 ;	-----------------------------------------
                                   2682 ;	 function SMB0_Init
                                   2683 ;	-----------------------------------------
      0005F3                       2684 _SMB0_Init:
                           0005F3  2685 	C$Lab6.c$173$1$133 ==.
                                   2686 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:173: SMB0CR = 0x93;      // Set SCL to 100KHz
      0005F3 75 CF 93         [24] 2687 	mov	_SMB0CR,#0x93
                           0005F6  2688 	C$Lab6.c$174$1$133 ==.
                                   2689 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:174: ENSMB = 1;          // Enable SMBUS0
      0005F6 D2 C6            [12] 2690 	setb	_ENSMB
                           0005F8  2691 	C$Lab6.c$175$1$133 ==.
                           0005F8  2692 	XG$SMB0_Init$0$0 ==.
      0005F8 22               [24] 2693 	ret
                                   2694 ;------------------------------------------------------------
                                   2695 ;Allocation info for local variables in function 'PCA_ISR'
                                   2696 ;------------------------------------------------------------
                           0005F9  2697 	G$PCA_ISR$0$0 ==.
                           0005F9  2698 	C$Lab6.c$179$1$133 ==.
                                   2699 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:179: void PCA_ISR(void) __interrupt 9
                                   2700 ;	-----------------------------------------
                                   2701 ;	 function PCA_ISR
                                   2702 ;	-----------------------------------------
      0005F9                       2703 _PCA_ISR:
      0005F9 C0 E0            [24] 2704 	push	acc
      0005FB C0 D0            [24] 2705 	push	psw
                           0005FD  2706 	C$Lab6.c$181$1$135 ==.
                                   2707 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:181: if (CF)
                           0005FD  2708 	C$Lab6.c$183$2$136 ==.
                                   2709 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:183: CF = 0;                     // clear the interrupt flag
      0005FD 10 DF 02         [24] 2710 	jbc	_CF,00129$
      000600 80 4E            [24] 2711 	sjmp	00110$
      000602                       2712 00129$:
                           000602  2713 	C$Lab6.c$184$2$136 ==.
                                   2714 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:184: nCounts++;					// Counts overflows for initial delay
      000602 05*1B            [12] 2715 	inc	_nCounts
      000604 E4               [12] 2716 	clr	a
      000605 B5*1B 02         [24] 2717 	cjne	a,_nCounts,00130$
      000608 05*1C            [12] 2718 	inc	(_nCounts + 1)
      00060A                       2719 00130$:
                           00060A  2720 	C$Lab6.c$185$2$136 ==.
                                   2721 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:185: PCA0 = PCA_START;
      00060A 75 E9 00         [24] 2722 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      00060D 75 F9 70         [24] 2723 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000610  2724 	C$Lab6.c$186$2$136 ==.
                                   2725 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:186: if (nCounts > 50)			//Initial one second delay
      000610 C3               [12] 2726 	clr	c
      000611 74 32            [12] 2727 	mov	a,#0x32
      000613 95*1B            [12] 2728 	subb	a,_nCounts
      000615 E4               [12] 2729 	clr	a
      000616 95*1C            [12] 2730 	subb	a,(_nCounts + 1)
      000618 50 08            [24] 2731 	jnc	00102$
                           00061A  2732 	C$Lab6.c$189$3$137 ==.
                                   2733 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:189: Counts++;               // seconds counter
      00061A 05*19            [12] 2734 	inc	_Counts
      00061C E4               [12] 2735 	clr	a
      00061D B5*19 02         [24] 2736 	cjne	a,_Counts,00132$
      000620 05*1A            [12] 2737 	inc	(_Counts + 1)
      000622                       2738 00132$:
      000622                       2739 00102$:
                           000622  2740 	C$Lab6.c$191$2$136 ==.
                                   2741 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:191: print_delay++;				// delay for print statements
      000622 05*27            [12] 2742 	inc	_print_delay
                           000624  2743 	C$Lab6.c$192$2$136 ==.
                                   2744 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:192: r_count++;
      000624 05*1D            [12] 2745 	inc	_r_count
                           000626  2746 	C$Lab6.c$193$2$136 ==.
                                   2747 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:193: if (r_count>=12)			//delay for ranger reading
      000626 74 F4            [12] 2748 	mov	a,#0x100 - 0x0C
      000628 25*1D            [12] 2749 	add	a,_r_count
      00062A 50 06            [24] 2750 	jnc	00104$
                           00062C  2751 	C$Lab6.c$195$3$138 ==.
                                   2752 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:195: new_range = 1;
      00062C 75*14 01         [24] 2753 	mov	_new_range,#0x01
                           00062F  2754 	C$Lab6.c$196$3$138 ==.
                                   2755 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:196: r_count = 0;
      00062F 75*1D 00         [24] 2756 	mov	_r_count,#0x00
      000632                       2757 00104$:
                           000632  2758 	C$Lab6.c$198$2$136 ==.
                                   2759 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:198: h_count++;
      000632 05*39            [12] 2760 	inc	_h_count
                           000634  2761 	C$Lab6.c$199$2$136 ==.
                                   2762 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:199: if (h_count >=8)
      000634 74 F8            [12] 2763 	mov	a,#0x100 - 0x08
      000636 25*39            [12] 2764 	add	a,_h_count
      000638 50 06            [24] 2765 	jnc	00106$
                           00063A  2766 	C$Lab6.c$201$3$139 ==.
                                   2767 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:201: new_heading = 1;
      00063A 75*3A 01         [24] 2768 	mov	_new_heading,#0x01
                           00063D  2769 	C$Lab6.c$202$3$139 ==.
                                   2770 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:202: h_count = 0;
      00063D 75*39 00         [24] 2771 	mov	_h_count,#0x00
      000640                       2772 00106$:
                           000640  2773 	C$Lab6.c$204$2$136 ==.
                                   2774 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:204: adc_count++;
      000640 05*1F            [12] 2775 	inc	_adc_count
                           000642  2776 	C$Lab6.c$205$2$136 ==.
                                   2777 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:205: if(adc_count >=10)
      000642 74 F6            [12] 2778 	mov	a,#0x100 - 0x0A
      000644 25*1F            [12] 2779 	add	a,_adc_count
      000646 50 0B            [24] 2780 	jnc	00112$
                           000648  2781 	C$Lab6.c$207$3$140 ==.
                                   2782 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:207: adc_count = 0;
      000648 75*1F 00         [24] 2783 	mov	_adc_count,#0x00
                           00064B  2784 	C$Lab6.c$208$3$140 ==.
                                   2785 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:208: new_AD = 1;
      00064B 75*30 01         [24] 2786 	mov	_new_AD,#0x01
      00064E 80 03            [24] 2787 	sjmp	00112$
      000650                       2788 00110$:
                           000650  2789 	C$Lab6.c$211$1$135 ==.
                                   2790 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:211: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      000650 53 D8 C0         [24] 2791 	anl	_PCA0CN,#0xC0
      000653                       2792 00112$:
      000653 D0 D0            [24] 2793 	pop	psw
      000655 D0 E0            [24] 2794 	pop	acc
                           000657  2795 	C$Lab6.c$212$1$135 ==.
                           000657  2796 	XG$PCA_ISR$0$0 ==.
      000657 32               [24] 2797 	reti
                                   2798 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2799 ;	eliminated unneeded push/pop dpl
                                   2800 ;	eliminated unneeded push/pop dph
                                   2801 ;	eliminated unneeded push/pop b
                                   2802 ;------------------------------------------------------------
                                   2803 ;Allocation info for local variables in function 'ADC_Init'
                                   2804 ;------------------------------------------------------------
                           000658  2805 	G$ADC_Init$0$0 ==.
                           000658  2806 	C$Lab6.c$216$1$135 ==.
                                   2807 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:216: void ADC_Init(void)
                                   2808 ;	-----------------------------------------
                                   2809 ;	 function ADC_Init
                                   2810 ;	-----------------------------------------
      000658                       2811 _ADC_Init:
                           000658  2812 	C$Lab6.c$218$1$142 ==.
                                   2813 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:218: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      000658 75 D1 03         [24] 2814 	mov	_REF0CN,#0x03
                           00065B  2815 	C$Lab6.c$219$1$142 ==.
                                   2816 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:219: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      00065B 75 AA 80         [24] 2817 	mov	_ADC1CN,#0x80
                           00065E  2818 	C$Lab6.c$220$1$142 ==.
                                   2819 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:220: ADC1CF |= 0x01; // Set A/D converter gain to 1
      00065E 43 AB 01         [24] 2820 	orl	_ADC1CF,#0x01
                           000661  2821 	C$Lab6.c$221$1$142 ==.
                           000661  2822 	XG$ADC_Init$0$0 ==.
      000661 22               [24] 2823 	ret
                                   2824 ;------------------------------------------------------------
                                   2825 ;Allocation info for local variables in function 'read_AD_input'
                                   2826 ;------------------------------------------------------------
                                   2827 ;n                         Allocated to registers 
                                   2828 ;------------------------------------------------------------
                           000662  2829 	G$read_AD_input$0$0 ==.
                           000662  2830 	C$Lab6.c$225$1$142 ==.
                                   2831 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:225: unsigned char read_AD_input(unsigned char n)
                                   2832 ;	-----------------------------------------
                                   2833 ;	 function read_AD_input
                                   2834 ;	-----------------------------------------
      000662                       2835 _read_AD_input:
      000662 85 82 AC         [24] 2836 	mov	_AMX1SL,dpl
                           000665  2837 	C$Lab6.c$228$1$144 ==.
                                   2838 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:228: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      000665 AF AA            [24] 2839 	mov	r7,_ADC1CN
      000667 74 DF            [12] 2840 	mov	a,#0xDF
      000669 5F               [12] 2841 	anl	a,r7
      00066A F5 AA            [12] 2842 	mov	_ADC1CN,a
                           00066C  2843 	C$Lab6.c$229$1$144 ==.
                                   2844 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:229: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      00066C 43 AA 10         [24] 2845 	orl	_ADC1CN,#0x10
                           00066F  2846 	C$Lab6.c$231$1$144 ==.
                                   2847 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:231: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      00066F                       2848 00101$:
      00066F E5 AA            [12] 2849 	mov	a,_ADC1CN
      000671 30 E5 FB         [24] 2850 	jnb	acc.5,00101$
                           000674  2851 	C$Lab6.c$233$1$144 ==.
                                   2852 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:233: return ADC1; // Return digital value in ADC1 register
      000674 85 9C 82         [24] 2853 	mov	dpl,_ADC1
                           000677  2854 	C$Lab6.c$234$1$144 ==.
                           000677  2855 	XG$read_AD_input$0$0 ==.
      000677 22               [24] 2856 	ret
                                   2857 ;------------------------------------------------------------
                                   2858 ;Allocation info for local variables in function 'Pick_Steering_Gain'
                                   2859 ;------------------------------------------------------------
                                   2860 ;input                     Allocated to registers r7 
                                   2861 ;------------------------------------------------------------
                           000678  2862 	G$Pick_Steering_Gain$0$0 ==.
                           000678  2863 	C$Lab6.c$238$1$144 ==.
                                   2864 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:238: void Pick_Steering_Gain(void)
                                   2865 ;	-----------------------------------------
                                   2866 ;	 function Pick_Steering_Gain
                                   2867 ;	-----------------------------------------
      000678                       2868 _Pick_Steering_Gain:
                           000678  2869 	C$Lab6.c$241$1$146 ==.
                                   2870 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:241: printf("\rPlease select a desired steering gain.\n");
      000678 74r32            [12] 2871 	mov	a,#___str_4
      00067A C0 E0            [24] 2872 	push	acc
      00067C 74s00            [12] 2873 	mov	a,#(___str_4 >> 8)
      00067E C0 E0            [24] 2874 	push	acc
      000680 74 80            [12] 2875 	mov	a,#0x80
      000682 C0 E0            [24] 2876 	push	acc
      000684 12r00r00         [24] 2877 	lcall	_printf
      000687 15 81            [12] 2878 	dec	sp
      000689 15 81            [12] 2879 	dec	sp
      00068B 15 81            [12] 2880 	dec	sp
                           00068D  2881 	C$Lab6.c$242$1$146 ==.
                                   2882 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:242: printf("\r'u' will increment by 0.1. 'd' will decrement by 0.1.\n");
      00068D 74r5B            [12] 2883 	mov	a,#___str_5
      00068F C0 E0            [24] 2884 	push	acc
      000691 74s00            [12] 2885 	mov	a,#(___str_5 >> 8)
      000693 C0 E0            [24] 2886 	push	acc
      000695 74 80            [12] 2887 	mov	a,#0x80
      000697 C0 E0            [24] 2888 	push	acc
      000699 12r00r00         [24] 2889 	lcall	_printf
      00069C 15 81            [12] 2890 	dec	sp
      00069E 15 81            [12] 2891 	dec	sp
      0006A0 15 81            [12] 2892 	dec	sp
                           0006A2  2893 	C$Lab6.c$243$1$146 ==.
                                   2894 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:243: printf("\r'f' when finished\n");
      0006A2 74r93            [12] 2895 	mov	a,#___str_6
      0006A4 C0 E0            [24] 2896 	push	acc
      0006A6 74s00            [12] 2897 	mov	a,#(___str_6 >> 8)
      0006A8 C0 E0            [24] 2898 	push	acc
      0006AA 74 80            [12] 2899 	mov	a,#0x80
      0006AC C0 E0            [24] 2900 	push	acc
      0006AE 12r00r00         [24] 2901 	lcall	_printf
      0006B1 15 81            [12] 2902 	dec	sp
      0006B3 15 81            [12] 2903 	dec	sp
      0006B5 15 81            [12] 2904 	dec	sp
                           0006B7  2905 	C$Lab6.c$244$1$146 ==.
                                   2906 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:244: while(1)
      0006B7                       2907 00112$:
                           0006B7  2908 	C$Lab6.c$246$2$147 ==.
                                   2909 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:246: input = getchar();
      0006B7 12r00r4D         [24] 2910 	lcall	_getchar
      0006BA AF 82            [24] 2911 	mov	r7,dpl
                           0006BC  2912 	C$Lab6.c$247$2$147 ==.
                                   2913 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:247: if(input == 'u') steer_gain += 0.1;
      0006BC BF 75 30         [24] 2914 	cjne	r7,#0x75,00102$
      0006BF C0 07            [24] 2915 	push	ar7
      0006C1 74 CD            [12] 2916 	mov	a,#0xCD
      0006C3 C0 E0            [24] 2917 	push	acc
      0006C5 14               [12] 2918 	dec	a
      0006C6 C0 E0            [24] 2919 	push	acc
      0006C8 C0 E0            [24] 2920 	push	acc
      0006CA 74 3D            [12] 2921 	mov	a,#0x3D
      0006CC C0 E0            [24] 2922 	push	acc
      0006CE 85*28 82         [24] 2923 	mov	dpl,_steer_gain
      0006D1 85*29 83         [24] 2924 	mov	dph,(_steer_gain + 1)
      0006D4 85*2A F0         [24] 2925 	mov	b,(_steer_gain + 2)
      0006D7 E5*2B            [12] 2926 	mov	a,(_steer_gain + 3)
      0006D9 12r00r00         [24] 2927 	lcall	___fsadd
      0006DC 85 82*28         [24] 2928 	mov	_steer_gain,dpl
      0006DF 85 83*29         [24] 2929 	mov	(_steer_gain + 1),dph
      0006E2 85 F0*2A         [24] 2930 	mov	(_steer_gain + 2),b
      0006E5 F5*2B            [12] 2931 	mov	(_steer_gain + 3),a
      0006E7 E5 81            [12] 2932 	mov	a,sp
      0006E9 24 FC            [12] 2933 	add	a,#0xfc
      0006EB F5 81            [12] 2934 	mov	sp,a
      0006ED D0 07            [24] 2935 	pop	ar7
      0006EF                       2936 00102$:
                           0006EF  2937 	C$Lab6.c$248$2$147 ==.
                                   2938 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:248: if(input == 'd') steer_gain -= 0.1;
      0006EF BF 64 30         [24] 2939 	cjne	r7,#0x64,00104$
      0006F2 C0 07            [24] 2940 	push	ar7
      0006F4 74 CD            [12] 2941 	mov	a,#0xCD
      0006F6 C0 E0            [24] 2942 	push	acc
      0006F8 14               [12] 2943 	dec	a
      0006F9 C0 E0            [24] 2944 	push	acc
      0006FB C0 E0            [24] 2945 	push	acc
      0006FD 74 3D            [12] 2946 	mov	a,#0x3D
      0006FF C0 E0            [24] 2947 	push	acc
      000701 85*28 82         [24] 2948 	mov	dpl,_steer_gain
      000704 85*29 83         [24] 2949 	mov	dph,(_steer_gain + 1)
      000707 85*2A F0         [24] 2950 	mov	b,(_steer_gain + 2)
      00070A E5*2B            [12] 2951 	mov	a,(_steer_gain + 3)
      00070C 12r00r00         [24] 2952 	lcall	___fssub
      00070F 85 82*28         [24] 2953 	mov	_steer_gain,dpl
      000712 85 83*29         [24] 2954 	mov	(_steer_gain + 1),dph
      000715 85 F0*2A         [24] 2955 	mov	(_steer_gain + 2),b
      000718 F5*2B            [12] 2956 	mov	(_steer_gain + 3),a
      00071A E5 81            [12] 2957 	mov	a,sp
      00071C 24 FC            [12] 2958 	add	a,#0xfc
      00071E F5 81            [12] 2959 	mov	sp,a
      000720 D0 07            [24] 2960 	pop	ar7
      000722                       2961 00104$:
                           000722  2962 	C$Lab6.c$249$2$147 ==.
                                   2963 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:249: if(input == 'f') return;
      000722 BF 66 02         [24] 2964 	cjne	r7,#0x66,00106$
      000725 80 76            [24] 2965 	sjmp	00114$
      000727                       2966 00106$:
                           000727  2967 	C$Lab6.c$250$1$146 ==.
                                   2968 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:250: if(steer_gain >= 10) steer_gain = 10;
      000727 E4               [12] 2969 	clr	a
      000728 C0 E0            [24] 2970 	push	acc
      00072A C0 E0            [24] 2971 	push	acc
      00072C 74 20            [12] 2972 	mov	a,#0x20
      00072E C0 E0            [24] 2973 	push	acc
      000730 74 41            [12] 2974 	mov	a,#0x41
      000732 C0 E0            [24] 2975 	push	acc
      000734 85*28 82         [24] 2976 	mov	dpl,_steer_gain
      000737 85*29 83         [24] 2977 	mov	dph,(_steer_gain + 1)
      00073A 85*2A F0         [24] 2978 	mov	b,(_steer_gain + 2)
      00073D E5*2B            [12] 2979 	mov	a,(_steer_gain + 3)
      00073F 12r00r00         [24] 2980 	lcall	___fslt
      000742 AF 82            [24] 2981 	mov	r7,dpl
      000744 E5 81            [12] 2982 	mov	a,sp
      000746 24 FC            [12] 2983 	add	a,#0xfc
      000748 F5 81            [12] 2984 	mov	sp,a
      00074A EF               [12] 2985 	mov	a,r7
      00074B 70 0A            [24] 2986 	jnz	00108$
      00074D F5*28            [12] 2987 	mov	_steer_gain,a
      00074F F5*29            [12] 2988 	mov	(_steer_gain + 1),a
      000751 75*2A 20         [24] 2989 	mov	(_steer_gain + 2),#0x20
      000754 75*2B 41         [24] 2990 	mov	(_steer_gain + 3),#0x41
      000757                       2991 00108$:
                           000757  2992 	C$Lab6.c$251$1$146 ==.
                                   2993 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:251: if(steer_gain <= 0) steer_gain = 0;
      000757 E4               [12] 2994 	clr	a
      000758 C0 E0            [24] 2995 	push	acc
      00075A C0 E0            [24] 2996 	push	acc
      00075C C0 E0            [24] 2997 	push	acc
      00075E C0 E0            [24] 2998 	push	acc
      000760 85*28 82         [24] 2999 	mov	dpl,_steer_gain
      000763 85*29 83         [24] 3000 	mov	dph,(_steer_gain + 1)
      000766 85*2A F0         [24] 3001 	mov	b,(_steer_gain + 2)
      000769 E5*2B            [12] 3002 	mov	a,(_steer_gain + 3)
      00076B 12r00r00         [24] 3003 	lcall	___fsgt
      00076E AF 82            [24] 3004 	mov	r7,dpl
      000770 E5 81            [12] 3005 	mov	a,sp
      000772 24 FC            [12] 3006 	add	a,#0xfc
      000774 F5 81            [12] 3007 	mov	sp,a
      000776 EF               [12] 3008 	mov	a,r7
      000777 70 08            [24] 3009 	jnz	00110$
      000779 F5*28            [12] 3010 	mov	_steer_gain,a
      00077B F5*29            [12] 3011 	mov	(_steer_gain + 1),a
      00077D F5*2A            [12] 3012 	mov	(_steer_gain + 2),a
      00077F F5*2B            [12] 3013 	mov	(_steer_gain + 3),a
      000781                       3014 00110$:
                           000781  3015 	C$Lab6.c$252$2$147 ==.
                                   3016 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:252: printf_fast_f("\rDesired steering gain: %2.1f\n", steer_gain);
      000781 C0*28            [24] 3017 	push	_steer_gain
      000783 C0*29            [24] 3018 	push	(_steer_gain + 1)
      000785 C0*2A            [24] 3019 	push	(_steer_gain + 2)
      000787 C0*2B            [24] 3020 	push	(_steer_gain + 3)
      000789 74rA7            [12] 3021 	mov	a,#___str_7
      00078B C0 E0            [24] 3022 	push	acc
      00078D 74s00            [12] 3023 	mov	a,#(___str_7 >> 8)
      00078F C0 E0            [24] 3024 	push	acc
      000791 12r00r00         [24] 3025 	lcall	_printf_fast_f
      000794 E5 81            [12] 3026 	mov	a,sp
      000796 24 FA            [12] 3027 	add	a,#0xfa
      000798 F5 81            [12] 3028 	mov	sp,a
      00079A 02r06rB7         [24] 3029 	ljmp	00112$
      00079D                       3030 00114$:
                           00079D  3031 	C$Lab6.c$254$1$146 ==.
                           00079D  3032 	XG$Pick_Steering_Gain$0$0 ==.
      00079D 22               [24] 3033 	ret
                                   3034 ;------------------------------------------------------------
                                   3035 ;Allocation info for local variables in function 'Hand_Check'
                                   3036 ;------------------------------------------------------------
                                   3037 ;temp_int                  Allocated to registers r6 r7 
                                   3038 ;------------------------------------------------------------
                           00079E  3039 	G$Hand_Check$0$0 ==.
                           00079E  3040 	C$Lab6.c$258$1$146 ==.
                                   3041 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:258: char Hand_Check(void)
                                   3042 ;	-----------------------------------------
                                   3043 ;	 function Hand_Check
                                   3044 ;	-----------------------------------------
      00079E                       3045 _Hand_Check:
                           00079E  3046 	C$Lab6.c$260$1$149 ==.
                                   3047 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:260: int temp_int = read_ranger();
      00079E 12r08r7C         [24] 3048 	lcall	_read_ranger
      0007A1 AE 82            [24] 3049 	mov	r6,dpl
      0007A3 AF 83            [24] 3050 	mov	r7,dph
                           0007A5  3051 	C$Lab6.c$261$1$149 ==.
                                   3052 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:261: if(temp_int < 90)
      0007A5 C3               [12] 3053 	clr	c
      0007A6 EE               [12] 3054 	mov	a,r6
      0007A7 94 5A            [12] 3055 	subb	a,#0x5A
      0007A9 EF               [12] 3056 	mov	a,r7
      0007AA 64 80            [12] 3057 	xrl	a,#0x80
      0007AC 94 80            [12] 3058 	subb	a,#0x80
      0007AE 50 05            [24] 3059 	jnc	00102$
                           0007B0  3060 	C$Lab6.c$263$2$150 ==.
                                   3061 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:263: return 1;
      0007B0 75 82 01         [24] 3062 	mov	dpl,#0x01
      0007B3 80 03            [24] 3063 	sjmp	00104$
      0007B5                       3064 00102$:
                           0007B5  3065 	C$Lab6.c$265$2$151 ==.
                                   3066 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:265: else { return 0;}
      0007B5 75 82 00         [24] 3067 	mov	dpl,#0x00
      0007B8                       3068 00104$:
                           0007B8  3069 	C$Lab6.c$266$1$149 ==.
                           0007B8  3070 	XG$Hand_Check$0$0 ==.
      0007B8 22               [24] 3071 	ret
                                   3072 ;------------------------------------------------------------
                                   3073 ;Allocation info for local variables in function 'Pick_Heading'
                                   3074 ;------------------------------------------------------------
                                   3075 ;input                     Allocated to registers r7 
                                   3076 ;------------------------------------------------------------
                           0007B9  3077 	G$Pick_Heading$0$0 ==.
                           0007B9  3078 	C$Lab6.c$270$1$149 ==.
                                   3079 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:270: void Pick_Heading(void)
                                   3080 ;	-----------------------------------------
                                   3081 ;	 function Pick_Heading
                                   3082 ;	-----------------------------------------
      0007B9                       3083 _Pick_Heading:
                           0007B9  3084 	C$Lab6.c$273$1$153 ==.
                                   3085 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:273: printf("\rPlease select a desired heading.\n");
      0007B9 74rC6            [12] 3086 	mov	a,#___str_8
      0007BB C0 E0            [24] 3087 	push	acc
      0007BD 74s00            [12] 3088 	mov	a,#(___str_8 >> 8)
      0007BF C0 E0            [24] 3089 	push	acc
      0007C1 74 80            [12] 3090 	mov	a,#0x80
      0007C3 C0 E0            [24] 3091 	push	acc
      0007C5 12r00r00         [24] 3092 	lcall	_printf
      0007C8 15 81            [12] 3093 	dec	sp
      0007CA 15 81            [12] 3094 	dec	sp
      0007CC 15 81            [12] 3095 	dec	sp
                           0007CE  3096 	C$Lab6.c$274$1$153 ==.
                                   3097 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:274: printf("\r'u' will increment by 5 degrees. 'd' will decrement by 5 degrees.\n");
      0007CE 74rE9            [12] 3098 	mov	a,#___str_9
      0007D0 C0 E0            [24] 3099 	push	acc
      0007D2 74s00            [12] 3100 	mov	a,#(___str_9 >> 8)
      0007D4 C0 E0            [24] 3101 	push	acc
      0007D6 74 80            [12] 3102 	mov	a,#0x80
      0007D8 C0 E0            [24] 3103 	push	acc
      0007DA 12r00r00         [24] 3104 	lcall	_printf
      0007DD 15 81            [12] 3105 	dec	sp
      0007DF 15 81            [12] 3106 	dec	sp
      0007E1 15 81            [12] 3107 	dec	sp
                           0007E3  3108 	C$Lab6.c$275$1$153 ==.
                                   3109 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:275: printf("\r'f' when finished\n");
      0007E3 74r93            [12] 3110 	mov	a,#___str_6
      0007E5 C0 E0            [24] 3111 	push	acc
      0007E7 74s00            [12] 3112 	mov	a,#(___str_6 >> 8)
      0007E9 C0 E0            [24] 3113 	push	acc
      0007EB 74 80            [12] 3114 	mov	a,#0x80
      0007ED C0 E0            [24] 3115 	push	acc
      0007EF 12r00r00         [24] 3116 	lcall	_printf
      0007F2 15 81            [12] 3117 	dec	sp
      0007F4 15 81            [12] 3118 	dec	sp
      0007F6 15 81            [12] 3119 	dec	sp
                           0007F8  3120 	C$Lab6.c$276$2$154 ==.
                                   3121 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:276: while(1)
      0007F8                       3122 00112$:
                           0007F8  3123 	C$Lab6.c$278$2$154 ==.
                                   3124 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:278: input = getchar();
      0007F8 12r00r4D         [24] 3125 	lcall	_getchar
      0007FB AF 82            [24] 3126 	mov	r7,dpl
                           0007FD  3127 	C$Lab6.c$279$2$154 ==.
                                   3128 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:279: if(input == 'u') heading += 50;
      0007FD BF 75 0B         [24] 3129 	cjne	r7,#0x75,00102$
      000800 74 32            [12] 3130 	mov	a,#0x32
      000802 25*35            [12] 3131 	add	a,_heading
      000804 F5*35            [12] 3132 	mov	_heading,a
      000806 E4               [12] 3133 	clr	a
      000807 35*36            [12] 3134 	addc	a,(_heading + 1)
      000809 F5*36            [12] 3135 	mov	(_heading + 1),a
      00080B                       3136 00102$:
                           00080B  3137 	C$Lab6.c$280$2$154 ==.
                                   3138 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:280: if(input == 'd') heading -= 50;
      00080B BF 64 0C         [24] 3139 	cjne	r7,#0x64,00104$
      00080E E5*35            [12] 3140 	mov	a,_heading
      000810 24 CE            [12] 3141 	add	a,#0xCE
      000812 F5*35            [12] 3142 	mov	_heading,a
      000814 E5*36            [12] 3143 	mov	a,(_heading + 1)
      000816 34 FF            [12] 3144 	addc	a,#0xFF
      000818 F5*36            [12] 3145 	mov	(_heading + 1),a
      00081A                       3146 00104$:
                           00081A  3147 	C$Lab6.c$281$2$154 ==.
                                   3148 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:281: if(input == 'f') return;
      00081A BF 66 02         [24] 3149 	cjne	r7,#0x66,00106$
      00081D 80 36            [24] 3150 	sjmp	00114$
      00081F                       3151 00106$:
                           00081F  3152 	C$Lab6.c$282$2$154 ==.
                                   3153 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:282: if(heading >= 3600) heading = 3600;
      00081F C3               [12] 3154 	clr	c
      000820 E5*35            [12] 3155 	mov	a,_heading
      000822 94 10            [12] 3156 	subb	a,#0x10
      000824 E5*36            [12] 3157 	mov	a,(_heading + 1)
      000826 94 0E            [12] 3158 	subb	a,#0x0E
      000828 40 06            [24] 3159 	jc	00108$
      00082A 75*35 10         [24] 3160 	mov	_heading,#0x10
      00082D 75*36 0E         [24] 3161 	mov	(_heading + 1),#0x0E
      000830                       3162 00108$:
                           000830  3163 	C$Lab6.c$283$2$154 ==.
                                   3164 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:283: if(heading <= 0) heading = 0;
      000830 E5*35            [12] 3165 	mov	a,_heading
      000832 45*36            [12] 3166 	orl	a,(_heading + 1)
      000834 70 04            [24] 3167 	jnz	00110$
      000836 F5*35            [12] 3168 	mov	_heading,a
      000838 F5*36            [12] 3169 	mov	(_heading + 1),a
      00083A                       3170 00110$:
                           00083A  3171 	C$Lab6.c$284$2$154 ==.
                                   3172 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:284: printf("\rDesired heading: %u\n", heading);
      00083A C0*35            [24] 3173 	push	_heading
      00083C C0*36            [24] 3174 	push	(_heading + 1)
      00083E 74r2D            [12] 3175 	mov	a,#___str_10
      000840 C0 E0            [24] 3176 	push	acc
      000842 74s01            [12] 3177 	mov	a,#(___str_10 >> 8)
      000844 C0 E0            [24] 3178 	push	acc
      000846 74 80            [12] 3179 	mov	a,#0x80
      000848 C0 E0            [24] 3180 	push	acc
      00084A 12r00r00         [24] 3181 	lcall	_printf
      00084D E5 81            [12] 3182 	mov	a,sp
      00084F 24 FB            [12] 3183 	add	a,#0xfb
      000851 F5 81            [12] 3184 	mov	sp,a
      000853 80 A3            [24] 3185 	sjmp	00112$
      000855                       3186 00114$:
                           000855  3187 	C$Lab6.c$286$1$153 ==.
                           000855  3188 	XG$Pick_Heading$0$0 ==.
      000855 22               [24] 3189 	ret
                                   3190 ;------------------------------------------------------------
                                   3191 ;Allocation info for local variables in function 'read_compass'
                                   3192 ;------------------------------------------------------------
                                   3193 ;addr                      Allocated to registers 
                                   3194 ;Data                      Allocated with name '_read_compass_Data_1_156'
                                   3195 ;read_heading              Allocated to registers 
                                   3196 ;------------------------------------------------------------
                           000856  3197 	G$read_compass$0$0 ==.
                           000856  3198 	C$Lab6.c$290$1$153 ==.
                                   3199 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:290: int read_compass(void)
                                   3200 ;	-----------------------------------------
                                   3201 ;	 function read_compass
                                   3202 ;	-----------------------------------------
      000856                       3203 _read_compass:
                           000856  3204 	C$Lab6.c$295$1$156 ==.
                                   3205 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:295: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      000856 75*0Br3B         [24] 3206 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_156
      000859 75*0C 00         [24] 3207 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      00085C 75*0D 40         [24] 3208 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      00085F 75*0A 02         [24] 3209 	mov	_i2c_read_data_PARM_2,#0x02
      000862 75*0E 02         [24] 3210 	mov	_i2c_read_data_PARM_4,#0x02
      000865 75 82 C0         [24] 3211 	mov	dpl,#0xC0
      000868 12r03rE8         [24] 3212 	lcall	_i2c_read_data
                           00086B  3213 	C$Lab6.c$296$1$156 ==.
                                   3214 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:296: read_heading =((Data[0] << 8) | Data[1]); //combine the two values
      00086B AF*3B            [24] 3215 	mov	r7,_read_compass_Data_1_156
      00086D 7E 00            [12] 3216 	mov	r6,#0x00
      00086F AC*3C            [24] 3217 	mov	r4,(_read_compass_Data_1_156 + 0x0001)
      000871 7D 00            [12] 3218 	mov	r5,#0x00
      000873 EC               [12] 3219 	mov	a,r4
      000874 4E               [12] 3220 	orl	a,r6
      000875 F5 82            [12] 3221 	mov	dpl,a
      000877 ED               [12] 3222 	mov	a,r5
      000878 4F               [12] 3223 	orl	a,r7
      000879 F5 83            [12] 3224 	mov	dph,a
                           00087B  3225 	C$Lab6.c$297$1$156 ==.
                                   3226 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:297: return read_heading; // the heading returned in degrees between 0 and 3599
                           00087B  3227 	C$Lab6.c$298$1$156 ==.
                           00087B  3228 	XG$read_compass$0$0 ==.
      00087B 22               [24] 3229 	ret
                                   3230 ;------------------------------------------------------------
                                   3231 ;Allocation info for local variables in function 'read_ranger'
                                   3232 ;------------------------------------------------------------
                                   3233 ;addr                      Allocated to registers 
                                   3234 ;st_range                  Allocated to registers r6 r7 
                                   3235 ;------------------------------------------------------------
                           00087C  3236 	G$read_ranger$0$0 ==.
                           00087C  3237 	C$Lab6.c$302$1$156 ==.
                                   3238 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:302: int read_ranger(void)
                                   3239 ;	-----------------------------------------
                                   3240 ;	 function read_ranger
                                   3241 ;	-----------------------------------------
      00087C                       3242 _read_ranger:
                           00087C  3243 	C$Lab6.c$306$1$158 ==.
                                   3244 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:306: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      00087C 75*0Br25         [24] 3245 	mov	_i2c_read_data_PARM_3,#_Data
      00087F 75*0C 00         [24] 3246 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000882 75*0D 40         [24] 3247 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000885 75*0A 02         [24] 3248 	mov	_i2c_read_data_PARM_2,#0x02
      000888 75*0E 02         [24] 3249 	mov	_i2c_read_data_PARM_4,#0x02
      00088B 75 82 E0         [24] 3250 	mov	dpl,#0xE0
      00088E 12r03rE8         [24] 3251 	lcall	_i2c_read_data
                           000891  3252 	C$Lab6.c$307$1$158 ==.
                                   3253 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:307: st_range =((Data[0] << 8) | Data[1]); //combine the two values
      000891 AF*25            [24] 3254 	mov	r7,_Data
      000893 7E 00            [12] 3255 	mov	r6,#0x00
      000895 AC*26            [24] 3256 	mov	r4,(_Data + 0x0001)
      000897 7D 00            [12] 3257 	mov	r5,#0x00
      000899 EC               [12] 3258 	mov	a,r4
      00089A 42 06            [12] 3259 	orl	ar6,a
      00089C ED               [12] 3260 	mov	a,r5
      00089D 42 07            [12] 3261 	orl	ar7,a
                           00089F  3262 	C$Lab6.c$309$1$158 ==.
                                   3263 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:309: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      00089F 75*25 51         [24] 3264 	mov	_Data,#0x51
                           0008A2  3265 	C$Lab6.c$310$1$158 ==.
                                   3266 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:310: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      0008A2 75*06r25         [24] 3267 	mov	_i2c_write_data_PARM_3,#_Data
      0008A5 75*07 00         [24] 3268 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0008A8 75*08 40         [24] 3269 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0008AB 75*05 00         [24] 3270 	mov	_i2c_write_data_PARM_2,#0x00
      0008AE 75*09 01         [24] 3271 	mov	_i2c_write_data_PARM_4,#0x01
      0008B1 75 82 E0         [24] 3272 	mov	dpl,#0xE0
      0008B4 C0 07            [24] 3273 	push	ar7
      0008B6 C0 06            [24] 3274 	push	ar6
      0008B8 12r03r72         [24] 3275 	lcall	_i2c_write_data
      0008BB D0 06            [24] 3276 	pop	ar6
      0008BD D0 07            [24] 3277 	pop	ar7
                           0008BF  3278 	C$Lab6.c$311$1$158 ==.
                                   3279 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:311: return st_range;
      0008BF 8E 82            [24] 3280 	mov	dpl,r6
      0008C1 8F 83            [24] 3281 	mov	dph,r7
                           0008C3  3282 	C$Lab6.c$312$1$158 ==.
                           0008C3  3283 	XG$read_ranger$0$0 ==.
      0008C3 22               [24] 3284 	ret
                                   3285 ;------------------------------------------------------------
                                   3286 ;Allocation info for local variables in function 'set_PW'
                                   3287 ;------------------------------------------------------------
                           0008C4  3288 	G$set_PW$0$0 ==.
                           0008C4  3289 	C$Lab6.c$316$1$158 ==.
                                   3290 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:316: void set_PW(void)
                                   3291 ;	-----------------------------------------
                                   3292 ;	 function set_PW
                                   3293 ;	-----------------------------------------
      0008C4                       3294 _set_PW:
                           0008C4  3295 	C$Lab6.c$319$1$160 ==.
                                   3296 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:319: Error = (desired_heading) - heading;	//Calculate the error
      0008C4 E5*33            [12] 3297 	mov	a,_desired_heading
      0008C6 C3               [12] 3298 	clr	c
      0008C7 95*35            [12] 3299 	subb	a,_heading
      0008C9 F5*17            [12] 3300 	mov	_Error,a
      0008CB E5*34            [12] 3301 	mov	a,(_desired_heading + 1)
      0008CD 95*36            [12] 3302 	subb	a,(_heading + 1)
      0008CF F5*18            [12] 3303 	mov	(_Error + 1),a
                           0008D1  3304 	C$Lab6.c$320$1$160 ==.
                                   3305 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:320: if(Error < -1800) { Error = Error + 3600; } //Adjust error so that we turn efficiently
      0008D1 C3               [12] 3306 	clr	c
      0008D2 E5*17            [12] 3307 	mov	a,_Error
      0008D4 94 F8            [12] 3308 	subb	a,#0xF8
      0008D6 E5*18            [12] 3309 	mov	a,(_Error + 1)
      0008D8 64 80            [12] 3310 	xrl	a,#0x80
      0008DA 94 78            [12] 3311 	subb	a,#0x78
      0008DC 50 0C            [24] 3312 	jnc	00102$
      0008DE 74 10            [12] 3313 	mov	a,#0x10
      0008E0 25*17            [12] 3314 	add	a,_Error
      0008E2 F5*17            [12] 3315 	mov	_Error,a
      0008E4 74 0E            [12] 3316 	mov	a,#0x0E
      0008E6 35*18            [12] 3317 	addc	a,(_Error + 1)
      0008E8 F5*18            [12] 3318 	mov	(_Error + 1),a
      0008EA                       3319 00102$:
                           0008EA  3320 	C$Lab6.c$321$1$160 ==.
                                   3321 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:321: if(Error > 1800)  { Error = Error - 3600; }
      0008EA C3               [12] 3322 	clr	c
      0008EB 74 08            [12] 3323 	mov	a,#0x08
      0008ED 95*17            [12] 3324 	subb	a,_Error
      0008EF 74 87            [12] 3325 	mov	a,#(0x07 ^ 0x80)
      0008F1 85*18 F0         [24] 3326 	mov	b,(_Error + 1)
      0008F4 63 F0 80         [24] 3327 	xrl	b,#0x80
      0008F7 95 F0            [12] 3328 	subb	a,b
      0008F9 50 0C            [24] 3329 	jnc	00104$
      0008FB E5*17            [12] 3330 	mov	a,_Error
      0008FD 24 F0            [12] 3331 	add	a,#0xF0
      0008FF F5*17            [12] 3332 	mov	_Error,a
      000901 E5*18            [12] 3333 	mov	a,(_Error + 1)
      000903 34 F1            [12] 3334 	addc	a,#0xF1
      000905 F5*18            [12] 3335 	mov	(_Error + 1),a
      000907                       3336 00104$:
                           000907  3337 	C$Lab6.c$324$1$160 ==.
                                   3338 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:324: temp_motorpw = (long)PW_CENTER + (long)kp*(long)(Error) + (long)kd*(long)(Error-prev_error);
      000907 85*17*00         [24] 3339 	mov	__mullong_PARM_2,_Error
      00090A E5*18            [12] 3340 	mov	a,(_Error + 1)
      00090C F5*01            [12] 3341 	mov	(__mullong_PARM_2 + 1),a
      00090E 33               [12] 3342 	rlc	a
      00090F 95 E0            [12] 3343 	subb	a,acc
      000911 F5*02            [12] 3344 	mov	(__mullong_PARM_2 + 2),a
      000913 F5*03            [12] 3345 	mov	(__mullong_PARM_2 + 3),a
      000915 90 42 40         [24] 3346 	mov	dptr,#0x4240
      000918 75 F0 0F         [24] 3347 	mov	b,#0x0F
      00091B E4               [12] 3348 	clr	a
      00091C 12r00r00         [24] 3349 	lcall	__mullong
      00091F AC 82            [24] 3350 	mov	r4,dpl
      000921 AD 83            [24] 3351 	mov	r5,dph
      000923 AE F0            [24] 3352 	mov	r6,b
      000925 FF               [12] 3353 	mov	r7,a
      000926 74 C8            [12] 3354 	mov	a,#0xC8
      000928 2C               [12] 3355 	add	a,r4
      000929 FC               [12] 3356 	mov	r4,a
      00092A 74 0A            [12] 3357 	mov	a,#0x0A
      00092C 3D               [12] 3358 	addc	a,r5
      00092D FD               [12] 3359 	mov	r5,a
      00092E E4               [12] 3360 	clr	a
      00092F 3E               [12] 3361 	addc	a,r6
      000930 FE               [12] 3362 	mov	r6,a
      000931 E4               [12] 3363 	clr	a
      000932 3F               [12] 3364 	addc	a,r7
      000933 FF               [12] 3365 	mov	r7,a
      000934 E5*17            [12] 3366 	mov	a,_Error
      000936 C3               [12] 3367 	clr	c
      000937 95*15            [12] 3368 	subb	a,_prev_error
      000939 FA               [12] 3369 	mov	r2,a
      00093A E5*18            [12] 3370 	mov	a,(_Error + 1)
      00093C 95*16            [12] 3371 	subb	a,(_prev_error + 1)
      00093E FB               [12] 3372 	mov	r3,a
      00093F 8A*00            [24] 3373 	mov	__mullong_PARM_2,r2
      000941 EB               [12] 3374 	mov	a,r3
      000942 F5*01            [12] 3375 	mov	(__mullong_PARM_2 + 1),a
      000944 33               [12] 3376 	rlc	a
      000945 95 E0            [12] 3377 	subb	a,acc
      000947 F5*02            [12] 3378 	mov	(__mullong_PARM_2 + 2),a
      000949 F5*03            [12] 3379 	mov	(__mullong_PARM_2 + 3),a
      00094B 90 42 40         [24] 3380 	mov	dptr,#0x4240
      00094E 75 F0 0F         [24] 3381 	mov	b,#0x0F
      000951 E4               [12] 3382 	clr	a
      000952 C0 07            [24] 3383 	push	ar7
      000954 C0 06            [24] 3384 	push	ar6
      000956 C0 05            [24] 3385 	push	ar5
      000958 C0 04            [24] 3386 	push	ar4
      00095A 12r00r00         [24] 3387 	lcall	__mullong
      00095D A8 82            [24] 3388 	mov	r0,dpl
      00095F A9 83            [24] 3389 	mov	r1,dph
      000961 AA F0            [24] 3390 	mov	r2,b
      000963 FB               [12] 3391 	mov	r3,a
      000964 D0 04            [24] 3392 	pop	ar4
      000966 D0 05            [24] 3393 	pop	ar5
      000968 D0 06            [24] 3394 	pop	ar6
      00096A D0 07            [24] 3395 	pop	ar7
      00096C E8               [12] 3396 	mov	a,r0
      00096D 2C               [12] 3397 	add	a,r4
      00096E F5*10            [12] 3398 	mov	_temp_motorpw,a
      000970 E9               [12] 3399 	mov	a,r1
      000971 3D               [12] 3400 	addc	a,r5
      000972 F5*11            [12] 3401 	mov	(_temp_motorpw + 1),a
      000974 EA               [12] 3402 	mov	a,r2
      000975 3E               [12] 3403 	addc	a,r6
      000976 F5*12            [12] 3404 	mov	(_temp_motorpw + 2),a
      000978 EB               [12] 3405 	mov	a,r3
      000979 3F               [12] 3406 	addc	a,r7
      00097A F5*13            [12] 3407 	mov	(_temp_motorpw + 3),a
                           00097C  3408 	C$Lab6.c$325$1$160 ==.
                                   3409 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:325: prev_error = Error;
      00097C 85*17*15         [24] 3410 	mov	_prev_error,_Error
      00097F 85*18*16         [24] 3411 	mov	(_prev_error + 1),(_Error + 1)
                           000982  3412 	C$Lab6.c$328$1$160 ==.
                                   3413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:328: if(temp_motorpw < 2100) { temp_motorpw = 2100; } // min
      000982 C3               [12] 3414 	clr	c
      000983 E5*10            [12] 3415 	mov	a,_temp_motorpw
      000985 94 34            [12] 3416 	subb	a,#0x34
      000987 E5*11            [12] 3417 	mov	a,(_temp_motorpw + 1)
      000989 94 08            [12] 3418 	subb	a,#0x08
      00098B E5*12            [12] 3419 	mov	a,(_temp_motorpw + 2)
      00098D 94 00            [12] 3420 	subb	a,#0x00
      00098F E5*13            [12] 3421 	mov	a,(_temp_motorpw + 3)
      000991 64 80            [12] 3422 	xrl	a,#0x80
      000993 94 80            [12] 3423 	subb	a,#0x80
      000995 50 0B            [24] 3424 	jnc	00106$
      000997 75*10 34         [24] 3425 	mov	_temp_motorpw,#0x34
      00099A 75*11 08         [24] 3426 	mov	(_temp_motorpw + 1),#0x08
      00099D E4               [12] 3427 	clr	a
      00099E F5*12            [12] 3428 	mov	(_temp_motorpw + 2),a
      0009A0 F5*13            [12] 3429 	mov	(_temp_motorpw + 3),a
      0009A2                       3430 00106$:
                           0009A2  3431 	C$Lab6.c$329$1$160 ==.
                                   3432 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:329: if(temp_motorpw > 3400) { temp_motorpw = 3400; } // max
      0009A2 C3               [12] 3433 	clr	c
      0009A3 74 48            [12] 3434 	mov	a,#0x48
      0009A5 95*10            [12] 3435 	subb	a,_temp_motorpw
      0009A7 74 0D            [12] 3436 	mov	a,#0x0D
      0009A9 95*11            [12] 3437 	subb	a,(_temp_motorpw + 1)
      0009AB E4               [12] 3438 	clr	a
      0009AC 95*12            [12] 3439 	subb	a,(_temp_motorpw + 2)
      0009AE 74 80            [12] 3440 	mov	a,#(0x00 ^ 0x80)
      0009B0 85*13 F0         [24] 3441 	mov	b,(_temp_motorpw + 3)
      0009B3 63 F0 80         [24] 3442 	xrl	b,#0x80
      0009B6 95 F0            [12] 3443 	subb	a,b
      0009B8 50 0B            [24] 3444 	jnc	00108$
      0009BA 75*10 48         [24] 3445 	mov	_temp_motorpw,#0x48
      0009BD 75*11 0D         [24] 3446 	mov	(_temp_motorpw + 1),#0x0D
      0009C0 E4               [12] 3447 	clr	a
      0009C1 F5*12            [12] 3448 	mov	(_temp_motorpw + 2),a
      0009C3 F5*13            [12] 3449 	mov	(_temp_motorpw + 3),a
      0009C5                       3450 00108$:
                           0009C5  3451 	C$Lab6.c$331$1$160 ==.
                                   3452 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:331: PCA0CP0 = 0xFFFF - temp_motorpw; // Change pulse width
      0009C5 74 FF            [12] 3453 	mov	a,#0xFF
      0009C7 C3               [12] 3454 	clr	c
      0009C8 95*10            [12] 3455 	subb	a,_temp_motorpw
      0009CA FC               [12] 3456 	mov	r4,a
      0009CB 74 FF            [12] 3457 	mov	a,#0xFF
      0009CD 95*11            [12] 3458 	subb	a,(_temp_motorpw + 1)
      0009CF FD               [12] 3459 	mov	r5,a
      0009D0 E4               [12] 3460 	clr	a
      0009D1 95*12            [12] 3461 	subb	a,(_temp_motorpw + 2)
      0009D3 E4               [12] 3462 	clr	a
      0009D4 95*13            [12] 3463 	subb	a,(_temp_motorpw + 3)
      0009D6 8C EA            [24] 3464 	mov	((_PCA0CP0 >> 0) & 0xFF),r4
      0009D8 8D FA            [24] 3465 	mov	((_PCA0CP0 >> 8) & 0xFF),r5
                           0009DA  3466 	C$Lab6.c$332$1$160 ==.
                           0009DA  3467 	XG$set_PW$0$0 ==.
      0009DA 22               [24] 3468 	ret
                                   3469 ;------------------------------------------------------------
                                   3470 ;Allocation info for local variables in function 'Set_Desired_Heading'
                                   3471 ;------------------------------------------------------------
                           0009DB  3472 	G$Set_Desired_Heading$0$0 ==.
                           0009DB  3473 	C$Lab6.c$335$1$160 ==.
                                   3474 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:335: void Set_Desired_Heading(void)
                                   3475 ;	-----------------------------------------
                                   3476 ;	 function Set_Desired_Heading
                                   3477 ;	-----------------------------------------
      0009DB                       3478 _Set_Desired_Heading:
                           0009DB  3479 	C$Lab6.c$338$1$160 ==.
                                   3480 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:338: }
                           0009DB  3481 	C$Lab6.c$338$1$160 ==.
                           0009DB  3482 	XG$Set_Desired_Heading$0$0 ==.
      0009DB 22               [24] 3483 	ret
                                   3484 	.area CSEG    (CODE)
                                   3485 	.area CONST   (CODE)
                           000000  3486 FLab6$__str_0$0$0 == .
      000000                       3487 ___str_0:
      000000 0A                    3488 	.db 0x0A
      000001 54 79 70 65 20 64 69  3489 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3490 	.db 0x00
                           000016  3491 FLab6$__str_1$0$0 == .
      000016                       3492 ___str_1:
      000016 20 20 20 20 20 25 63  3493 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3494 	.db 0x00
                           000026  3495 FLab6$__str_2$0$0 == .
      000026                       3496 ___str_2:
      000026 25 63                 3497 	.ascii "%c"
      000028 00                    3498 	.db 0x00
                           000029  3499 FLab6$__str_3$0$0 == .
      000029                       3500 ___str_3:
      000029 0A                    3501 	.db 0x0A
      00002A 53 74 61 72 74        3502 	.ascii "Start"
      00002F 0D                    3503 	.db 0x0D
      000030 0A                    3504 	.db 0x0A
      000031 00                    3505 	.db 0x00
                           000032  3506 FLab6$__str_4$0$0 == .
      000032                       3507 ___str_4:
      000032 0D                    3508 	.db 0x0D
      000033 50 6C 65 61 73 65 20  3509 	.ascii "Please select a desired steering gain."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 73 74 65 65
             72 69 6E 67 20 67 61
             69 6E 2E
      000059 0A                    3510 	.db 0x0A
      00005A 00                    3511 	.db 0x00
                           00005B  3512 FLab6$__str_5$0$0 == .
      00005B                       3513 ___str_5:
      00005B 0D                    3514 	.db 0x0D
      00005C 27 75 27 20 77 69 6C  3515 	.ascii "'u' will increment by 0.1. 'd' will decrement by 0.1."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 30 2E 31 2E 20 27
             64 27 20 77 69 6C 6C
             20 64 65 63 72 65 6D
             65 6E 74 20 62 79 20
             30 2E 31 2E
      000091 0A                    3516 	.db 0x0A
      000092 00                    3517 	.db 0x00
                           000093  3518 FLab6$__str_6$0$0 == .
      000093                       3519 ___str_6:
      000093 0D                    3520 	.db 0x0D
      000094 27 66 27 20 77 68 65  3521 	.ascii "'f' when finished"
             6E 20 66 69 6E 69 73
             68 65 64
      0000A5 0A                    3522 	.db 0x0A
      0000A6 00                    3523 	.db 0x00
                           0000A7  3524 FLab6$__str_7$0$0 == .
      0000A7                       3525 ___str_7:
      0000A7 0D                    3526 	.db 0x0D
      0000A8 44 65 73 69 72 65 64  3527 	.ascii "Desired steering gain: %2.1f"
             20 73 74 65 65 72 69
             6E 67 20 67 61 69 6E
             3A 20 25 32 2E 31 66
      0000C4 0A                    3528 	.db 0x0A
      0000C5 00                    3529 	.db 0x00
                           0000C6  3530 FLab6$__str_8$0$0 == .
      0000C6                       3531 ___str_8:
      0000C6 0D                    3532 	.db 0x0D
      0000C7 50 6C 65 61 73 65 20  3533 	.ascii "Please select a desired heading."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 2E
      0000E7 0A                    3534 	.db 0x0A
      0000E8 00                    3535 	.db 0x00
                           0000E9  3536 FLab6$__str_9$0$0 == .
      0000E9                       3537 ___str_9:
      0000E9 0D                    3538 	.db 0x0D
      0000EA 27 75 27 20 77 69 6C  3539 	.ascii "'u' will increment by 5 degrees. 'd' will decrement by 5 de"
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 35 20 64 65 67 72
             65 65 73 2E 20 27 64
             27 20 77 69 6C 6C 20
             64 65 63 72 65 6D 65
             6E 74 20 62 79 20 35
             20 64 65
      000125 67 72 65 65 73 2E     3540 	.ascii "grees."
      00012B 0A                    3541 	.db 0x0A
      00012C 00                    3542 	.db 0x00
                           00012D  3543 FLab6$__str_10$0$0 == .
      00012D                       3544 ___str_10:
      00012D 0D                    3545 	.db 0x0D
      00012E 44 65 73 69 72 65 64  3546 	.ascii "Desired heading: %u"
             20 68 65 61 64 69 6E
             67 3A 20 25 75
      000141 0A                    3547 	.db 0x0A
      000142 00                    3548 	.db 0x00
                                   3549 	.area XINIT   (CODE)
                                   3550 	.area CABS    (ABS,CODE)
