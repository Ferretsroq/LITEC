                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.4.0 #8981 (Apr  5 2014) (MINGW32)
                                      4 ; This file was generated Tue May 05 12:31:52 2015
                                      5 ;--------------------------------------------------------
                                      6 	.module Lab6
                                      7 	.optsdcc -mmcs51 --model-small
                                      8 	
                                      9 ;--------------------------------------------------------
                                     10 ; Public variables in this module
                                     11 ;--------------------------------------------------------
                                     12 	.globl _main
                                     13 	.globl _read_keypad
                                     14 	.globl _strlen
                                     15 	.globl _Sys_Init
                                     16 	.globl _UART0_Init
                                     17 	.globl _SYSCLK_Init
                                     18 	.globl _printf_fast_f
                                     19 	.globl _vsprintf
                                     20 	.globl _printf
                                     21 	.globl _BUS_SCL
                                     22 	.globl _BUS_TOE
                                     23 	.globl _BUS_FTE
                                     24 	.globl _BUS_AA
                                     25 	.globl _BUS_INT
                                     26 	.globl _BUS_STOP
                                     27 	.globl _BUS_START
                                     28 	.globl _BUS_EN
                                     29 	.globl _BUS_BUSY
                                     30 	.globl _SPIF
                                     31 	.globl _WCOL
                                     32 	.globl _MODF
                                     33 	.globl _RXOVRN
                                     34 	.globl _TXBSY
                                     35 	.globl _SLVSEL
                                     36 	.globl _MSTEN
                                     37 	.globl _SPIEN
                                     38 	.globl _AD0EN
                                     39 	.globl _ADCEN
                                     40 	.globl _AD0TM
                                     41 	.globl _ADCTM
                                     42 	.globl _AD0INT
                                     43 	.globl _ADCINT
                                     44 	.globl _AD0BUSY
                                     45 	.globl _ADBUSY
                                     46 	.globl _AD0CM1
                                     47 	.globl _ADSTM1
                                     48 	.globl _AD0CM0
                                     49 	.globl _ADSTM0
                                     50 	.globl _AD0WINT
                                     51 	.globl _ADWINT
                                     52 	.globl _AD0LJST
                                     53 	.globl _ADLJST
                                     54 	.globl _CF
                                     55 	.globl _CR
                                     56 	.globl _CCF4
                                     57 	.globl _CCF3
                                     58 	.globl _CCF2
                                     59 	.globl _CCF1
                                     60 	.globl _CCF0
                                     61 	.globl _CY
                                     62 	.globl _AC
                                     63 	.globl _F0
                                     64 	.globl _RS1
                                     65 	.globl _RS0
                                     66 	.globl _OV
                                     67 	.globl _F1
                                     68 	.globl _P
                                     69 	.globl _TF2
                                     70 	.globl _EXF2
                                     71 	.globl _RCLK
                                     72 	.globl _TCLK
                                     73 	.globl _EXEN2
                                     74 	.globl _TR2
                                     75 	.globl _CT2
                                     76 	.globl _CPRL2
                                     77 	.globl _BUSY
                                     78 	.globl _ENSMB
                                     79 	.globl _STA
                                     80 	.globl _STO
                                     81 	.globl _SI
                                     82 	.globl _AA
                                     83 	.globl _SMBFTE
                                     84 	.globl _SMBTOE
                                     85 	.globl _PT2
                                     86 	.globl _PS
                                     87 	.globl _PS0
                                     88 	.globl _PT1
                                     89 	.globl _PX1
                                     90 	.globl _PT0
                                     91 	.globl _PX0
                                     92 	.globl _P3_7
                                     93 	.globl _P3_6
                                     94 	.globl _P3_5
                                     95 	.globl _P3_4
                                     96 	.globl _P3_3
                                     97 	.globl _P3_2
                                     98 	.globl _P3_1
                                     99 	.globl _P3_0
                                    100 	.globl _EA
                                    101 	.globl _ET2
                                    102 	.globl _ES
                                    103 	.globl _ES0
                                    104 	.globl _ET1
                                    105 	.globl _EX1
                                    106 	.globl _ET0
                                    107 	.globl _EX0
                                    108 	.globl _P2_7
                                    109 	.globl _P2_6
                                    110 	.globl _P2_5
                                    111 	.globl _P2_4
                                    112 	.globl _P2_3
                                    113 	.globl _P2_2
                                    114 	.globl _P2_1
                                    115 	.globl _P2_0
                                    116 	.globl _S0MODE
                                    117 	.globl _SM00
                                    118 	.globl _SM0
                                    119 	.globl _SM10
                                    120 	.globl _SM1
                                    121 	.globl _MCE0
                                    122 	.globl _SM20
                                    123 	.globl _SM2
                                    124 	.globl _REN0
                                    125 	.globl _REN
                                    126 	.globl _TB80
                                    127 	.globl _TB8
                                    128 	.globl _RB80
                                    129 	.globl _RB8
                                    130 	.globl _TI0
                                    131 	.globl _TI
                                    132 	.globl _RI0
                                    133 	.globl _RI
                                    134 	.globl _P1_7
                                    135 	.globl _P1_6
                                    136 	.globl _P1_5
                                    137 	.globl _P1_4
                                    138 	.globl _P1_3
                                    139 	.globl _P1_2
                                    140 	.globl _P1_1
                                    141 	.globl _P1_0
                                    142 	.globl _TF1
                                    143 	.globl _TR1
                                    144 	.globl _TF0
                                    145 	.globl _TR0
                                    146 	.globl _IE1
                                    147 	.globl _IT1
                                    148 	.globl _IE0
                                    149 	.globl _IT0
                                    150 	.globl _P0_7
                                    151 	.globl _P0_6
                                    152 	.globl _P0_5
                                    153 	.globl _P0_4
                                    154 	.globl _P0_3
                                    155 	.globl _P0_2
                                    156 	.globl _P0_1
                                    157 	.globl _P0_0
                                    158 	.globl _PCA0CP4
                                    159 	.globl _PCA0CP3
                                    160 	.globl _PCA0CP2
                                    161 	.globl _PCA0CP1
                                    162 	.globl _PCA0CP0
                                    163 	.globl _PCA0
                                    164 	.globl _DAC1
                                    165 	.globl _DAC0
                                    166 	.globl _ADC0LT
                                    167 	.globl _ADC0GT
                                    168 	.globl _ADC0
                                    169 	.globl _RCAP4
                                    170 	.globl _TMR4
                                    171 	.globl _TMR3RL
                                    172 	.globl _TMR3
                                    173 	.globl _RCAP2
                                    174 	.globl _TMR2
                                    175 	.globl _TMR1
                                    176 	.globl _TMR0
                                    177 	.globl _WDTCN
                                    178 	.globl _PCA0CPH4
                                    179 	.globl _PCA0CPH3
                                    180 	.globl _PCA0CPH2
                                    181 	.globl _PCA0CPH1
                                    182 	.globl _PCA0CPH0
                                    183 	.globl _PCA0H
                                    184 	.globl _SPI0CN
                                    185 	.globl _EIP2
                                    186 	.globl _EIP1
                                    187 	.globl _TH4
                                    188 	.globl _TL4
                                    189 	.globl _SADDR1
                                    190 	.globl _SBUF1
                                    191 	.globl _SCON1
                                    192 	.globl _B
                                    193 	.globl _RSTSRC
                                    194 	.globl _PCA0CPL4
                                    195 	.globl _PCA0CPL3
                                    196 	.globl _PCA0CPL2
                                    197 	.globl _PCA0CPL1
                                    198 	.globl _PCA0CPL0
                                    199 	.globl _PCA0L
                                    200 	.globl _ADC0CN
                                    201 	.globl _EIE2
                                    202 	.globl _EIE1
                                    203 	.globl _RCAP4H
                                    204 	.globl _RCAP4L
                                    205 	.globl _XBR2
                                    206 	.globl _XBR1
                                    207 	.globl _XBR0
                                    208 	.globl _ACC
                                    209 	.globl _PCA0CPM4
                                    210 	.globl _PCA0CPM3
                                    211 	.globl _PCA0CPM2
                                    212 	.globl _PCA0CPM1
                                    213 	.globl _PCA0CPM0
                                    214 	.globl _PCA0MD
                                    215 	.globl _PCA0CN
                                    216 	.globl _DAC1CN
                                    217 	.globl _DAC1H
                                    218 	.globl _DAC1L
                                    219 	.globl _DAC0CN
                                    220 	.globl _DAC0H
                                    221 	.globl _DAC0L
                                    222 	.globl _REF0CN
                                    223 	.globl _PSW
                                    224 	.globl _SMB0CR
                                    225 	.globl _TH2
                                    226 	.globl _TL2
                                    227 	.globl _RCAP2H
                                    228 	.globl _RCAP2L
                                    229 	.globl _T4CON
                                    230 	.globl _T2CON
                                    231 	.globl _ADC0LTH
                                    232 	.globl _ADC0LTL
                                    233 	.globl _ADC0GTH
                                    234 	.globl _ADC0GTL
                                    235 	.globl _SMB0ADR
                                    236 	.globl _SMB0DAT
                                    237 	.globl _SMB0STA
                                    238 	.globl _SMB0CN
                                    239 	.globl _ADC0H
                                    240 	.globl _ADC0L
                                    241 	.globl _P1MDIN
                                    242 	.globl _ADC0CF
                                    243 	.globl _AMX0SL
                                    244 	.globl _AMX0CF
                                    245 	.globl _SADEN0
                                    246 	.globl _IP
                                    247 	.globl _FLACL
                                    248 	.globl _FLSCL
                                    249 	.globl _P74OUT
                                    250 	.globl _OSCICN
                                    251 	.globl _OSCXCN
                                    252 	.globl _P3
                                    253 	.globl __XPAGE
                                    254 	.globl _EMI0CN
                                    255 	.globl _SADEN1
                                    256 	.globl _P3IF
                                    257 	.globl _AMX1SL
                                    258 	.globl _ADC1CF
                                    259 	.globl _ADC1CN
                                    260 	.globl _SADDR0
                                    261 	.globl _IE
                                    262 	.globl _P3MDOUT
                                    263 	.globl _PRT3CF
                                    264 	.globl _P2MDOUT
                                    265 	.globl _PRT2CF
                                    266 	.globl _P1MDOUT
                                    267 	.globl _PRT1CF
                                    268 	.globl _P0MDOUT
                                    269 	.globl _PRT0CF
                                    270 	.globl _EMI0CF
                                    271 	.globl _EMI0TC
                                    272 	.globl _P2
                                    273 	.globl _CPT1CN
                                    274 	.globl _CPT0CN
                                    275 	.globl _SPI0CKR
                                    276 	.globl _ADC1
                                    277 	.globl _SPI0DAT
                                    278 	.globl _SPI0CFG
                                    279 	.globl _SBUF0
                                    280 	.globl _SBUF
                                    281 	.globl _SCON0
                                    282 	.globl _SCON
                                    283 	.globl _P7
                                    284 	.globl _TMR3H
                                    285 	.globl _TMR3L
                                    286 	.globl _TMR3RLH
                                    287 	.globl _TMR3RLL
                                    288 	.globl _TMR3CN
                                    289 	.globl _P1
                                    290 	.globl _PSCTL
                                    291 	.globl _CKCON
                                    292 	.globl _TH1
                                    293 	.globl _TH0
                                    294 	.globl _TL1
                                    295 	.globl _TL0
                                    296 	.globl _TMOD
                                    297 	.globl _TCON
                                    298 	.globl _PCON
                                    299 	.globl _P6
                                    300 	.globl _P5
                                    301 	.globl _P4
                                    302 	.globl _DPH
                                    303 	.globl _DPL
                                    304 	.globl _SP
                                    305 	.globl _P0
                                    306 	.globl _print_error
                                    307 	.globl _heading_kd
                                    308 	.globl _heading_kp
                                    309 	.globl _desired_heading
                                    310 	.globl _range
                                    311 	.globl _heading
                                    312 	.globl _voltage
                                    313 	.globl _AD_Result
                                    314 	.globl _print_delay
                                    315 	.globl _Data
                                    316 	.globl _STEER_PW
                                    317 	.globl _DRIVE_PW
                                    318 	.globl _adc_count
                                    319 	.globl _r_count
                                    320 	.globl _h_count
                                    321 	.globl _new_heading
                                    322 	.globl _new_AD
                                    323 	.globl _new_range
                                    324 	.globl _nCounts
                                    325 	.globl _Counts
                                    326 	.globl _prev_error
                                    327 	.globl _Error
                                    328 	.globl _right_pw
                                    329 	.globl _left_pw
                                    330 	.globl _i2c_read_data_PARM_4
                                    331 	.globl _i2c_read_data_PARM_3
                                    332 	.globl _i2c_read_data_PARM_2
                                    333 	.globl _i2c_write_data_PARM_4
                                    334 	.globl _i2c_write_data_PARM_3
                                    335 	.globl _i2c_write_data_PARM_2
                                    336 	.globl _putchar
                                    337 	.globl _getchar
                                    338 	.globl _lcd_print
                                    339 	.globl _lcd_clear
                                    340 	.globl _kpd_input
                                    341 	.globl _delay_time
                                    342 	.globl _i2c_start
                                    343 	.globl _i2c_write
                                    344 	.globl _i2c_write_and_stop
                                    345 	.globl _i2c_read
                                    346 	.globl _i2c_read_and_stop
                                    347 	.globl _i2c_write_data
                                    348 	.globl _i2c_read_data
                                    349 	.globl _Accel_Init
                                    350 	.globl _Port_Init
                                    351 	.globl _Interrupt_Init
                                    352 	.globl _PCA_Init
                                    353 	.globl _SMB0_Init
                                    354 	.globl _PCA_ISR
                                    355 	.globl _ADC_Init
                                    356 	.globl _read_AD_input
                                    357 	.globl _Hand_Check
                                    358 	.globl _Pick_Heading
                                    359 	.globl _read_compass
                                    360 	.globl _read_ranger
                                    361 	.globl _set_PW
                                    362 	.globl _Set_Desired_Heading
                                    363 	.globl _Pick_Heading_kp
                                    364 	.globl _Pick_Heading_kd
                                    365 	.globl _Set_Fan_Angle
                                    366 ;--------------------------------------------------------
                                    367 ; special function registers
                                    368 ;--------------------------------------------------------
                                    369 	.area RSEG    (ABS,DATA)
      000000                        370 	.org 0x0000
                           000080   371 G$P0$0$0 == 0x0080
                           000080   372 _P0	=	0x0080
                           000081   373 G$SP$0$0 == 0x0081
                           000081   374 _SP	=	0x0081
                           000082   375 G$DPL$0$0 == 0x0082
                           000082   376 _DPL	=	0x0082
                           000083   377 G$DPH$0$0 == 0x0083
                           000083   378 _DPH	=	0x0083
                           000084   379 G$P4$0$0 == 0x0084
                           000084   380 _P4	=	0x0084
                           000085   381 G$P5$0$0 == 0x0085
                           000085   382 _P5	=	0x0085
                           000086   383 G$P6$0$0 == 0x0086
                           000086   384 _P6	=	0x0086
                           000087   385 G$PCON$0$0 == 0x0087
                           000087   386 _PCON	=	0x0087
                           000088   387 G$TCON$0$0 == 0x0088
                           000088   388 _TCON	=	0x0088
                           000089   389 G$TMOD$0$0 == 0x0089
                           000089   390 _TMOD	=	0x0089
                           00008A   391 G$TL0$0$0 == 0x008a
                           00008A   392 _TL0	=	0x008a
                           00008B   393 G$TL1$0$0 == 0x008b
                           00008B   394 _TL1	=	0x008b
                           00008C   395 G$TH0$0$0 == 0x008c
                           00008C   396 _TH0	=	0x008c
                           00008D   397 G$TH1$0$0 == 0x008d
                           00008D   398 _TH1	=	0x008d
                           00008E   399 G$CKCON$0$0 == 0x008e
                           00008E   400 _CKCON	=	0x008e
                           00008F   401 G$PSCTL$0$0 == 0x008f
                           00008F   402 _PSCTL	=	0x008f
                           000090   403 G$P1$0$0 == 0x0090
                           000090   404 _P1	=	0x0090
                           000091   405 G$TMR3CN$0$0 == 0x0091
                           000091   406 _TMR3CN	=	0x0091
                           000092   407 G$TMR3RLL$0$0 == 0x0092
                           000092   408 _TMR3RLL	=	0x0092
                           000093   409 G$TMR3RLH$0$0 == 0x0093
                           000093   410 _TMR3RLH	=	0x0093
                           000094   411 G$TMR3L$0$0 == 0x0094
                           000094   412 _TMR3L	=	0x0094
                           000095   413 G$TMR3H$0$0 == 0x0095
                           000095   414 _TMR3H	=	0x0095
                           000096   415 G$P7$0$0 == 0x0096
                           000096   416 _P7	=	0x0096
                           000098   417 G$SCON$0$0 == 0x0098
                           000098   418 _SCON	=	0x0098
                           000098   419 G$SCON0$0$0 == 0x0098
                           000098   420 _SCON0	=	0x0098
                           000099   421 G$SBUF$0$0 == 0x0099
                           000099   422 _SBUF	=	0x0099
                           000099   423 G$SBUF0$0$0 == 0x0099
                           000099   424 _SBUF0	=	0x0099
                           00009A   425 G$SPI0CFG$0$0 == 0x009a
                           00009A   426 _SPI0CFG	=	0x009a
                           00009B   427 G$SPI0DAT$0$0 == 0x009b
                           00009B   428 _SPI0DAT	=	0x009b
                           00009C   429 G$ADC1$0$0 == 0x009c
                           00009C   430 _ADC1	=	0x009c
                           00009D   431 G$SPI0CKR$0$0 == 0x009d
                           00009D   432 _SPI0CKR	=	0x009d
                           00009E   433 G$CPT0CN$0$0 == 0x009e
                           00009E   434 _CPT0CN	=	0x009e
                           00009F   435 G$CPT1CN$0$0 == 0x009f
                           00009F   436 _CPT1CN	=	0x009f
                           0000A0   437 G$P2$0$0 == 0x00a0
                           0000A0   438 _P2	=	0x00a0
                           0000A1   439 G$EMI0TC$0$0 == 0x00a1
                           0000A1   440 _EMI0TC	=	0x00a1
                           0000A3   441 G$EMI0CF$0$0 == 0x00a3
                           0000A3   442 _EMI0CF	=	0x00a3
                           0000A4   443 G$PRT0CF$0$0 == 0x00a4
                           0000A4   444 _PRT0CF	=	0x00a4
                           0000A4   445 G$P0MDOUT$0$0 == 0x00a4
                           0000A4   446 _P0MDOUT	=	0x00a4
                           0000A5   447 G$PRT1CF$0$0 == 0x00a5
                           0000A5   448 _PRT1CF	=	0x00a5
                           0000A5   449 G$P1MDOUT$0$0 == 0x00a5
                           0000A5   450 _P1MDOUT	=	0x00a5
                           0000A6   451 G$PRT2CF$0$0 == 0x00a6
                           0000A6   452 _PRT2CF	=	0x00a6
                           0000A6   453 G$P2MDOUT$0$0 == 0x00a6
                           0000A6   454 _P2MDOUT	=	0x00a6
                           0000A7   455 G$PRT3CF$0$0 == 0x00a7
                           0000A7   456 _PRT3CF	=	0x00a7
                           0000A7   457 G$P3MDOUT$0$0 == 0x00a7
                           0000A7   458 _P3MDOUT	=	0x00a7
                           0000A8   459 G$IE$0$0 == 0x00a8
                           0000A8   460 _IE	=	0x00a8
                           0000A9   461 G$SADDR0$0$0 == 0x00a9
                           0000A9   462 _SADDR0	=	0x00a9
                           0000AA   463 G$ADC1CN$0$0 == 0x00aa
                           0000AA   464 _ADC1CN	=	0x00aa
                           0000AB   465 G$ADC1CF$0$0 == 0x00ab
                           0000AB   466 _ADC1CF	=	0x00ab
                           0000AC   467 G$AMX1SL$0$0 == 0x00ac
                           0000AC   468 _AMX1SL	=	0x00ac
                           0000AD   469 G$P3IF$0$0 == 0x00ad
                           0000AD   470 _P3IF	=	0x00ad
                           0000AE   471 G$SADEN1$0$0 == 0x00ae
                           0000AE   472 _SADEN1	=	0x00ae
                           0000AF   473 G$EMI0CN$0$0 == 0x00af
                           0000AF   474 _EMI0CN	=	0x00af
                           0000AF   475 G$_XPAGE$0$0 == 0x00af
                           0000AF   476 __XPAGE	=	0x00af
                           0000B0   477 G$P3$0$0 == 0x00b0
                           0000B0   478 _P3	=	0x00b0
                           0000B1   479 G$OSCXCN$0$0 == 0x00b1
                           0000B1   480 _OSCXCN	=	0x00b1
                           0000B2   481 G$OSCICN$0$0 == 0x00b2
                           0000B2   482 _OSCICN	=	0x00b2
                           0000B5   483 G$P74OUT$0$0 == 0x00b5
                           0000B5   484 _P74OUT	=	0x00b5
                           0000B6   485 G$FLSCL$0$0 == 0x00b6
                           0000B6   486 _FLSCL	=	0x00b6
                           0000B7   487 G$FLACL$0$0 == 0x00b7
                           0000B7   488 _FLACL	=	0x00b7
                           0000B8   489 G$IP$0$0 == 0x00b8
                           0000B8   490 _IP	=	0x00b8
                           0000B9   491 G$SADEN0$0$0 == 0x00b9
                           0000B9   492 _SADEN0	=	0x00b9
                           0000BA   493 G$AMX0CF$0$0 == 0x00ba
                           0000BA   494 _AMX0CF	=	0x00ba
                           0000BB   495 G$AMX0SL$0$0 == 0x00bb
                           0000BB   496 _AMX0SL	=	0x00bb
                           0000BC   497 G$ADC0CF$0$0 == 0x00bc
                           0000BC   498 _ADC0CF	=	0x00bc
                           0000BD   499 G$P1MDIN$0$0 == 0x00bd
                           0000BD   500 _P1MDIN	=	0x00bd
                           0000BE   501 G$ADC0L$0$0 == 0x00be
                           0000BE   502 _ADC0L	=	0x00be
                           0000BF   503 G$ADC0H$0$0 == 0x00bf
                           0000BF   504 _ADC0H	=	0x00bf
                           0000C0   505 G$SMB0CN$0$0 == 0x00c0
                           0000C0   506 _SMB0CN	=	0x00c0
                           0000C1   507 G$SMB0STA$0$0 == 0x00c1
                           0000C1   508 _SMB0STA	=	0x00c1
                           0000C2   509 G$SMB0DAT$0$0 == 0x00c2
                           0000C2   510 _SMB0DAT	=	0x00c2
                           0000C3   511 G$SMB0ADR$0$0 == 0x00c3
                           0000C3   512 _SMB0ADR	=	0x00c3
                           0000C4   513 G$ADC0GTL$0$0 == 0x00c4
                           0000C4   514 _ADC0GTL	=	0x00c4
                           0000C5   515 G$ADC0GTH$0$0 == 0x00c5
                           0000C5   516 _ADC0GTH	=	0x00c5
                           0000C6   517 G$ADC0LTL$0$0 == 0x00c6
                           0000C6   518 _ADC0LTL	=	0x00c6
                           0000C7   519 G$ADC0LTH$0$0 == 0x00c7
                           0000C7   520 _ADC0LTH	=	0x00c7
                           0000C8   521 G$T2CON$0$0 == 0x00c8
                           0000C8   522 _T2CON	=	0x00c8
                           0000C9   523 G$T4CON$0$0 == 0x00c9
                           0000C9   524 _T4CON	=	0x00c9
                           0000CA   525 G$RCAP2L$0$0 == 0x00ca
                           0000CA   526 _RCAP2L	=	0x00ca
                           0000CB   527 G$RCAP2H$0$0 == 0x00cb
                           0000CB   528 _RCAP2H	=	0x00cb
                           0000CC   529 G$TL2$0$0 == 0x00cc
                           0000CC   530 _TL2	=	0x00cc
                           0000CD   531 G$TH2$0$0 == 0x00cd
                           0000CD   532 _TH2	=	0x00cd
                           0000CF   533 G$SMB0CR$0$0 == 0x00cf
                           0000CF   534 _SMB0CR	=	0x00cf
                           0000D0   535 G$PSW$0$0 == 0x00d0
                           0000D0   536 _PSW	=	0x00d0
                           0000D1   537 G$REF0CN$0$0 == 0x00d1
                           0000D1   538 _REF0CN	=	0x00d1
                           0000D2   539 G$DAC0L$0$0 == 0x00d2
                           0000D2   540 _DAC0L	=	0x00d2
                           0000D3   541 G$DAC0H$0$0 == 0x00d3
                           0000D3   542 _DAC0H	=	0x00d3
                           0000D4   543 G$DAC0CN$0$0 == 0x00d4
                           0000D4   544 _DAC0CN	=	0x00d4
                           0000D5   545 G$DAC1L$0$0 == 0x00d5
                           0000D5   546 _DAC1L	=	0x00d5
                           0000D6   547 G$DAC1H$0$0 == 0x00d6
                           0000D6   548 _DAC1H	=	0x00d6
                           0000D7   549 G$DAC1CN$0$0 == 0x00d7
                           0000D7   550 _DAC1CN	=	0x00d7
                           0000D8   551 G$PCA0CN$0$0 == 0x00d8
                           0000D8   552 _PCA0CN	=	0x00d8
                           0000D9   553 G$PCA0MD$0$0 == 0x00d9
                           0000D9   554 _PCA0MD	=	0x00d9
                           0000DA   555 G$PCA0CPM0$0$0 == 0x00da
                           0000DA   556 _PCA0CPM0	=	0x00da
                           0000DB   557 G$PCA0CPM1$0$0 == 0x00db
                           0000DB   558 _PCA0CPM1	=	0x00db
                           0000DC   559 G$PCA0CPM2$0$0 == 0x00dc
                           0000DC   560 _PCA0CPM2	=	0x00dc
                           0000DD   561 G$PCA0CPM3$0$0 == 0x00dd
                           0000DD   562 _PCA0CPM3	=	0x00dd
                           0000DE   563 G$PCA0CPM4$0$0 == 0x00de
                           0000DE   564 _PCA0CPM4	=	0x00de
                           0000E0   565 G$ACC$0$0 == 0x00e0
                           0000E0   566 _ACC	=	0x00e0
                           0000E1   567 G$XBR0$0$0 == 0x00e1
                           0000E1   568 _XBR0	=	0x00e1
                           0000E2   569 G$XBR1$0$0 == 0x00e2
                           0000E2   570 _XBR1	=	0x00e2
                           0000E3   571 G$XBR2$0$0 == 0x00e3
                           0000E3   572 _XBR2	=	0x00e3
                           0000E4   573 G$RCAP4L$0$0 == 0x00e4
                           0000E4   574 _RCAP4L	=	0x00e4
                           0000E5   575 G$RCAP4H$0$0 == 0x00e5
                           0000E5   576 _RCAP4H	=	0x00e5
                           0000E6   577 G$EIE1$0$0 == 0x00e6
                           0000E6   578 _EIE1	=	0x00e6
                           0000E7   579 G$EIE2$0$0 == 0x00e7
                           0000E7   580 _EIE2	=	0x00e7
                           0000E8   581 G$ADC0CN$0$0 == 0x00e8
                           0000E8   582 _ADC0CN	=	0x00e8
                           0000E9   583 G$PCA0L$0$0 == 0x00e9
                           0000E9   584 _PCA0L	=	0x00e9
                           0000EA   585 G$PCA0CPL0$0$0 == 0x00ea
                           0000EA   586 _PCA0CPL0	=	0x00ea
                           0000EB   587 G$PCA0CPL1$0$0 == 0x00eb
                           0000EB   588 _PCA0CPL1	=	0x00eb
                           0000EC   589 G$PCA0CPL2$0$0 == 0x00ec
                           0000EC   590 _PCA0CPL2	=	0x00ec
                           0000ED   591 G$PCA0CPL3$0$0 == 0x00ed
                           0000ED   592 _PCA0CPL3	=	0x00ed
                           0000EE   593 G$PCA0CPL4$0$0 == 0x00ee
                           0000EE   594 _PCA0CPL4	=	0x00ee
                           0000EF   595 G$RSTSRC$0$0 == 0x00ef
                           0000EF   596 _RSTSRC	=	0x00ef
                           0000F0   597 G$B$0$0 == 0x00f0
                           0000F0   598 _B	=	0x00f0
                           0000F1   599 G$SCON1$0$0 == 0x00f1
                           0000F1   600 _SCON1	=	0x00f1
                           0000F2   601 G$SBUF1$0$0 == 0x00f2
                           0000F2   602 _SBUF1	=	0x00f2
                           0000F3   603 G$SADDR1$0$0 == 0x00f3
                           0000F3   604 _SADDR1	=	0x00f3
                           0000F4   605 G$TL4$0$0 == 0x00f4
                           0000F4   606 _TL4	=	0x00f4
                           0000F5   607 G$TH4$0$0 == 0x00f5
                           0000F5   608 _TH4	=	0x00f5
                           0000F6   609 G$EIP1$0$0 == 0x00f6
                           0000F6   610 _EIP1	=	0x00f6
                           0000F7   611 G$EIP2$0$0 == 0x00f7
                           0000F7   612 _EIP2	=	0x00f7
                           0000F8   613 G$SPI0CN$0$0 == 0x00f8
                           0000F8   614 _SPI0CN	=	0x00f8
                           0000F9   615 G$PCA0H$0$0 == 0x00f9
                           0000F9   616 _PCA0H	=	0x00f9
                           0000FA   617 G$PCA0CPH0$0$0 == 0x00fa
                           0000FA   618 _PCA0CPH0	=	0x00fa
                           0000FB   619 G$PCA0CPH1$0$0 == 0x00fb
                           0000FB   620 _PCA0CPH1	=	0x00fb
                           0000FC   621 G$PCA0CPH2$0$0 == 0x00fc
                           0000FC   622 _PCA0CPH2	=	0x00fc
                           0000FD   623 G$PCA0CPH3$0$0 == 0x00fd
                           0000FD   624 _PCA0CPH3	=	0x00fd
                           0000FE   625 G$PCA0CPH4$0$0 == 0x00fe
                           0000FE   626 _PCA0CPH4	=	0x00fe
                           0000FF   627 G$WDTCN$0$0 == 0x00ff
                           0000FF   628 _WDTCN	=	0x00ff
                           008C8A   629 G$TMR0$0$0 == 0x8c8a
                           008C8A   630 _TMR0	=	0x8c8a
                           008D8B   631 G$TMR1$0$0 == 0x8d8b
                           008D8B   632 _TMR1	=	0x8d8b
                           00CDCC   633 G$TMR2$0$0 == 0xcdcc
                           00CDCC   634 _TMR2	=	0xcdcc
                           00CBCA   635 G$RCAP2$0$0 == 0xcbca
                           00CBCA   636 _RCAP2	=	0xcbca
                           009594   637 G$TMR3$0$0 == 0x9594
                           009594   638 _TMR3	=	0x9594
                           009392   639 G$TMR3RL$0$0 == 0x9392
                           009392   640 _TMR3RL	=	0x9392
                           00F5F4   641 G$TMR4$0$0 == 0xf5f4
                           00F5F4   642 _TMR4	=	0xf5f4
                           00E5E4   643 G$RCAP4$0$0 == 0xe5e4
                           00E5E4   644 _RCAP4	=	0xe5e4
                           00BFBE   645 G$ADC0$0$0 == 0xbfbe
                           00BFBE   646 _ADC0	=	0xbfbe
                           00C5C4   647 G$ADC0GT$0$0 == 0xc5c4
                           00C5C4   648 _ADC0GT	=	0xc5c4
                           00C7C6   649 G$ADC0LT$0$0 == 0xc7c6
                           00C7C6   650 _ADC0LT	=	0xc7c6
                           00D3D2   651 G$DAC0$0$0 == 0xd3d2
                           00D3D2   652 _DAC0	=	0xd3d2
                           00D6D5   653 G$DAC1$0$0 == 0xd6d5
                           00D6D5   654 _DAC1	=	0xd6d5
                           00F9E9   655 G$PCA0$0$0 == 0xf9e9
                           00F9E9   656 _PCA0	=	0xf9e9
                           00FAEA   657 G$PCA0CP0$0$0 == 0xfaea
                           00FAEA   658 _PCA0CP0	=	0xfaea
                           00FBEB   659 G$PCA0CP1$0$0 == 0xfbeb
                           00FBEB   660 _PCA0CP1	=	0xfbeb
                           00FCEC   661 G$PCA0CP2$0$0 == 0xfcec
                           00FCEC   662 _PCA0CP2	=	0xfcec
                           00FDED   663 G$PCA0CP3$0$0 == 0xfded
                           00FDED   664 _PCA0CP3	=	0xfded
                           00FEEE   665 G$PCA0CP4$0$0 == 0xfeee
                           00FEEE   666 _PCA0CP4	=	0xfeee
                                    667 ;--------------------------------------------------------
                                    668 ; special function bits
                                    669 ;--------------------------------------------------------
                                    670 	.area RSEG    (ABS,DATA)
      000000                        671 	.org 0x0000
                           000080   672 G$P0_0$0$0 == 0x0080
                           000080   673 _P0_0	=	0x0080
                           000081   674 G$P0_1$0$0 == 0x0081
                           000081   675 _P0_1	=	0x0081
                           000082   676 G$P0_2$0$0 == 0x0082
                           000082   677 _P0_2	=	0x0082
                           000083   678 G$P0_3$0$0 == 0x0083
                           000083   679 _P0_3	=	0x0083
                           000084   680 G$P0_4$0$0 == 0x0084
                           000084   681 _P0_4	=	0x0084
                           000085   682 G$P0_5$0$0 == 0x0085
                           000085   683 _P0_5	=	0x0085
                           000086   684 G$P0_6$0$0 == 0x0086
                           000086   685 _P0_6	=	0x0086
                           000087   686 G$P0_7$0$0 == 0x0087
                           000087   687 _P0_7	=	0x0087
                           000088   688 G$IT0$0$0 == 0x0088
                           000088   689 _IT0	=	0x0088
                           000089   690 G$IE0$0$0 == 0x0089
                           000089   691 _IE0	=	0x0089
                           00008A   692 G$IT1$0$0 == 0x008a
                           00008A   693 _IT1	=	0x008a
                           00008B   694 G$IE1$0$0 == 0x008b
                           00008B   695 _IE1	=	0x008b
                           00008C   696 G$TR0$0$0 == 0x008c
                           00008C   697 _TR0	=	0x008c
                           00008D   698 G$TF0$0$0 == 0x008d
                           00008D   699 _TF0	=	0x008d
                           00008E   700 G$TR1$0$0 == 0x008e
                           00008E   701 _TR1	=	0x008e
                           00008F   702 G$TF1$0$0 == 0x008f
                           00008F   703 _TF1	=	0x008f
                           000090   704 G$P1_0$0$0 == 0x0090
                           000090   705 _P1_0	=	0x0090
                           000091   706 G$P1_1$0$0 == 0x0091
                           000091   707 _P1_1	=	0x0091
                           000092   708 G$P1_2$0$0 == 0x0092
                           000092   709 _P1_2	=	0x0092
                           000093   710 G$P1_3$0$0 == 0x0093
                           000093   711 _P1_3	=	0x0093
                           000094   712 G$P1_4$0$0 == 0x0094
                           000094   713 _P1_4	=	0x0094
                           000095   714 G$P1_5$0$0 == 0x0095
                           000095   715 _P1_5	=	0x0095
                           000096   716 G$P1_6$0$0 == 0x0096
                           000096   717 _P1_6	=	0x0096
                           000097   718 G$P1_7$0$0 == 0x0097
                           000097   719 _P1_7	=	0x0097
                           000098   720 G$RI$0$0 == 0x0098
                           000098   721 _RI	=	0x0098
                           000098   722 G$RI0$0$0 == 0x0098
                           000098   723 _RI0	=	0x0098
                           000099   724 G$TI$0$0 == 0x0099
                           000099   725 _TI	=	0x0099
                           000099   726 G$TI0$0$0 == 0x0099
                           000099   727 _TI0	=	0x0099
                           00009A   728 G$RB8$0$0 == 0x009a
                           00009A   729 _RB8	=	0x009a
                           00009A   730 G$RB80$0$0 == 0x009a
                           00009A   731 _RB80	=	0x009a
                           00009B   732 G$TB8$0$0 == 0x009b
                           00009B   733 _TB8	=	0x009b
                           00009B   734 G$TB80$0$0 == 0x009b
                           00009B   735 _TB80	=	0x009b
                           00009C   736 G$REN$0$0 == 0x009c
                           00009C   737 _REN	=	0x009c
                           00009C   738 G$REN0$0$0 == 0x009c
                           00009C   739 _REN0	=	0x009c
                           00009D   740 G$SM2$0$0 == 0x009d
                           00009D   741 _SM2	=	0x009d
                           00009D   742 G$SM20$0$0 == 0x009d
                           00009D   743 _SM20	=	0x009d
                           00009D   744 G$MCE0$0$0 == 0x009d
                           00009D   745 _MCE0	=	0x009d
                           00009E   746 G$SM1$0$0 == 0x009e
                           00009E   747 _SM1	=	0x009e
                           00009E   748 G$SM10$0$0 == 0x009e
                           00009E   749 _SM10	=	0x009e
                           00009F   750 G$SM0$0$0 == 0x009f
                           00009F   751 _SM0	=	0x009f
                           00009F   752 G$SM00$0$0 == 0x009f
                           00009F   753 _SM00	=	0x009f
                           00009F   754 G$S0MODE$0$0 == 0x009f
                           00009F   755 _S0MODE	=	0x009f
                           0000A0   756 G$P2_0$0$0 == 0x00a0
                           0000A0   757 _P2_0	=	0x00a0
                           0000A1   758 G$P2_1$0$0 == 0x00a1
                           0000A1   759 _P2_1	=	0x00a1
                           0000A2   760 G$P2_2$0$0 == 0x00a2
                           0000A2   761 _P2_2	=	0x00a2
                           0000A3   762 G$P2_3$0$0 == 0x00a3
                           0000A3   763 _P2_3	=	0x00a3
                           0000A4   764 G$P2_4$0$0 == 0x00a4
                           0000A4   765 _P2_4	=	0x00a4
                           0000A5   766 G$P2_5$0$0 == 0x00a5
                           0000A5   767 _P2_5	=	0x00a5
                           0000A6   768 G$P2_6$0$0 == 0x00a6
                           0000A6   769 _P2_6	=	0x00a6
                           0000A7   770 G$P2_7$0$0 == 0x00a7
                           0000A7   771 _P2_7	=	0x00a7
                           0000A8   772 G$EX0$0$0 == 0x00a8
                           0000A8   773 _EX0	=	0x00a8
                           0000A9   774 G$ET0$0$0 == 0x00a9
                           0000A9   775 _ET0	=	0x00a9
                           0000AA   776 G$EX1$0$0 == 0x00aa
                           0000AA   777 _EX1	=	0x00aa
                           0000AB   778 G$ET1$0$0 == 0x00ab
                           0000AB   779 _ET1	=	0x00ab
                           0000AC   780 G$ES0$0$0 == 0x00ac
                           0000AC   781 _ES0	=	0x00ac
                           0000AC   782 G$ES$0$0 == 0x00ac
                           0000AC   783 _ES	=	0x00ac
                           0000AD   784 G$ET2$0$0 == 0x00ad
                           0000AD   785 _ET2	=	0x00ad
                           0000AF   786 G$EA$0$0 == 0x00af
                           0000AF   787 _EA	=	0x00af
                           0000B0   788 G$P3_0$0$0 == 0x00b0
                           0000B0   789 _P3_0	=	0x00b0
                           0000B1   790 G$P3_1$0$0 == 0x00b1
                           0000B1   791 _P3_1	=	0x00b1
                           0000B2   792 G$P3_2$0$0 == 0x00b2
                           0000B2   793 _P3_2	=	0x00b2
                           0000B3   794 G$P3_3$0$0 == 0x00b3
                           0000B3   795 _P3_3	=	0x00b3
                           0000B4   796 G$P3_4$0$0 == 0x00b4
                           0000B4   797 _P3_4	=	0x00b4
                           0000B5   798 G$P3_5$0$0 == 0x00b5
                           0000B5   799 _P3_5	=	0x00b5
                           0000B6   800 G$P3_6$0$0 == 0x00b6
                           0000B6   801 _P3_6	=	0x00b6
                           0000B7   802 G$P3_7$0$0 == 0x00b7
                           0000B7   803 _P3_7	=	0x00b7
                           0000B8   804 G$PX0$0$0 == 0x00b8
                           0000B8   805 _PX0	=	0x00b8
                           0000B9   806 G$PT0$0$0 == 0x00b9
                           0000B9   807 _PT0	=	0x00b9
                           0000BA   808 G$PX1$0$0 == 0x00ba
                           0000BA   809 _PX1	=	0x00ba
                           0000BB   810 G$PT1$0$0 == 0x00bb
                           0000BB   811 _PT1	=	0x00bb
                           0000BC   812 G$PS0$0$0 == 0x00bc
                           0000BC   813 _PS0	=	0x00bc
                           0000BC   814 G$PS$0$0 == 0x00bc
                           0000BC   815 _PS	=	0x00bc
                           0000BD   816 G$PT2$0$0 == 0x00bd
                           0000BD   817 _PT2	=	0x00bd
                           0000C0   818 G$SMBTOE$0$0 == 0x00c0
                           0000C0   819 _SMBTOE	=	0x00c0
                           0000C1   820 G$SMBFTE$0$0 == 0x00c1
                           0000C1   821 _SMBFTE	=	0x00c1
                           0000C2   822 G$AA$0$0 == 0x00c2
                           0000C2   823 _AA	=	0x00c2
                           0000C3   824 G$SI$0$0 == 0x00c3
                           0000C3   825 _SI	=	0x00c3
                           0000C4   826 G$STO$0$0 == 0x00c4
                           0000C4   827 _STO	=	0x00c4
                           0000C5   828 G$STA$0$0 == 0x00c5
                           0000C5   829 _STA	=	0x00c5
                           0000C6   830 G$ENSMB$0$0 == 0x00c6
                           0000C6   831 _ENSMB	=	0x00c6
                           0000C7   832 G$BUSY$0$0 == 0x00c7
                           0000C7   833 _BUSY	=	0x00c7
                           0000C8   834 G$CPRL2$0$0 == 0x00c8
                           0000C8   835 _CPRL2	=	0x00c8
                           0000C9   836 G$CT2$0$0 == 0x00c9
                           0000C9   837 _CT2	=	0x00c9
                           0000CA   838 G$TR2$0$0 == 0x00ca
                           0000CA   839 _TR2	=	0x00ca
                           0000CB   840 G$EXEN2$0$0 == 0x00cb
                           0000CB   841 _EXEN2	=	0x00cb
                           0000CC   842 G$TCLK$0$0 == 0x00cc
                           0000CC   843 _TCLK	=	0x00cc
                           0000CD   844 G$RCLK$0$0 == 0x00cd
                           0000CD   845 _RCLK	=	0x00cd
                           0000CE   846 G$EXF2$0$0 == 0x00ce
                           0000CE   847 _EXF2	=	0x00ce
                           0000CF   848 G$TF2$0$0 == 0x00cf
                           0000CF   849 _TF2	=	0x00cf
                           0000D0   850 G$P$0$0 == 0x00d0
                           0000D0   851 _P	=	0x00d0
                           0000D1   852 G$F1$0$0 == 0x00d1
                           0000D1   853 _F1	=	0x00d1
                           0000D2   854 G$OV$0$0 == 0x00d2
                           0000D2   855 _OV	=	0x00d2
                           0000D3   856 G$RS0$0$0 == 0x00d3
                           0000D3   857 _RS0	=	0x00d3
                           0000D4   858 G$RS1$0$0 == 0x00d4
                           0000D4   859 _RS1	=	0x00d4
                           0000D5   860 G$F0$0$0 == 0x00d5
                           0000D5   861 _F0	=	0x00d5
                           0000D6   862 G$AC$0$0 == 0x00d6
                           0000D6   863 _AC	=	0x00d6
                           0000D7   864 G$CY$0$0 == 0x00d7
                           0000D7   865 _CY	=	0x00d7
                           0000D8   866 G$CCF0$0$0 == 0x00d8
                           0000D8   867 _CCF0	=	0x00d8
                           0000D9   868 G$CCF1$0$0 == 0x00d9
                           0000D9   869 _CCF1	=	0x00d9
                           0000DA   870 G$CCF2$0$0 == 0x00da
                           0000DA   871 _CCF2	=	0x00da
                           0000DB   872 G$CCF3$0$0 == 0x00db
                           0000DB   873 _CCF3	=	0x00db
                           0000DC   874 G$CCF4$0$0 == 0x00dc
                           0000DC   875 _CCF4	=	0x00dc
                           0000DE   876 G$CR$0$0 == 0x00de
                           0000DE   877 _CR	=	0x00de
                           0000DF   878 G$CF$0$0 == 0x00df
                           0000DF   879 _CF	=	0x00df
                           0000E8   880 G$ADLJST$0$0 == 0x00e8
                           0000E8   881 _ADLJST	=	0x00e8
                           0000E8   882 G$AD0LJST$0$0 == 0x00e8
                           0000E8   883 _AD0LJST	=	0x00e8
                           0000E9   884 G$ADWINT$0$0 == 0x00e9
                           0000E9   885 _ADWINT	=	0x00e9
                           0000E9   886 G$AD0WINT$0$0 == 0x00e9
                           0000E9   887 _AD0WINT	=	0x00e9
                           0000EA   888 G$ADSTM0$0$0 == 0x00ea
                           0000EA   889 _ADSTM0	=	0x00ea
                           0000EA   890 G$AD0CM0$0$0 == 0x00ea
                           0000EA   891 _AD0CM0	=	0x00ea
                           0000EB   892 G$ADSTM1$0$0 == 0x00eb
                           0000EB   893 _ADSTM1	=	0x00eb
                           0000EB   894 G$AD0CM1$0$0 == 0x00eb
                           0000EB   895 _AD0CM1	=	0x00eb
                           0000EC   896 G$ADBUSY$0$0 == 0x00ec
                           0000EC   897 _ADBUSY	=	0x00ec
                           0000EC   898 G$AD0BUSY$0$0 == 0x00ec
                           0000EC   899 _AD0BUSY	=	0x00ec
                           0000ED   900 G$ADCINT$0$0 == 0x00ed
                           0000ED   901 _ADCINT	=	0x00ed
                           0000ED   902 G$AD0INT$0$0 == 0x00ed
                           0000ED   903 _AD0INT	=	0x00ed
                           0000EE   904 G$ADCTM$0$0 == 0x00ee
                           0000EE   905 _ADCTM	=	0x00ee
                           0000EE   906 G$AD0TM$0$0 == 0x00ee
                           0000EE   907 _AD0TM	=	0x00ee
                           0000EF   908 G$ADCEN$0$0 == 0x00ef
                           0000EF   909 _ADCEN	=	0x00ef
                           0000EF   910 G$AD0EN$0$0 == 0x00ef
                           0000EF   911 _AD0EN	=	0x00ef
                           0000F8   912 G$SPIEN$0$0 == 0x00f8
                           0000F8   913 _SPIEN	=	0x00f8
                           0000F9   914 G$MSTEN$0$0 == 0x00f9
                           0000F9   915 _MSTEN	=	0x00f9
                           0000FA   916 G$SLVSEL$0$0 == 0x00fa
                           0000FA   917 _SLVSEL	=	0x00fa
                           0000FB   918 G$TXBSY$0$0 == 0x00fb
                           0000FB   919 _TXBSY	=	0x00fb
                           0000FC   920 G$RXOVRN$0$0 == 0x00fc
                           0000FC   921 _RXOVRN	=	0x00fc
                           0000FD   922 G$MODF$0$0 == 0x00fd
                           0000FD   923 _MODF	=	0x00fd
                           0000FE   924 G$WCOL$0$0 == 0x00fe
                           0000FE   925 _WCOL	=	0x00fe
                           0000FF   926 G$SPIF$0$0 == 0x00ff
                           0000FF   927 _SPIF	=	0x00ff
                           0000C7   928 G$BUS_BUSY$0$0 == 0x00c7
                           0000C7   929 _BUS_BUSY	=	0x00c7
                           0000C6   930 G$BUS_EN$0$0 == 0x00c6
                           0000C6   931 _BUS_EN	=	0x00c6
                           0000C5   932 G$BUS_START$0$0 == 0x00c5
                           0000C5   933 _BUS_START	=	0x00c5
                           0000C4   934 G$BUS_STOP$0$0 == 0x00c4
                           0000C4   935 _BUS_STOP	=	0x00c4
                           0000C3   936 G$BUS_INT$0$0 == 0x00c3
                           0000C3   937 _BUS_INT	=	0x00c3
                           0000C2   938 G$BUS_AA$0$0 == 0x00c2
                           0000C2   939 _BUS_AA	=	0x00c2
                           0000C1   940 G$BUS_FTE$0$0 == 0x00c1
                           0000C1   941 _BUS_FTE	=	0x00c1
                           0000C0   942 G$BUS_TOE$0$0 == 0x00c0
                           0000C0   943 _BUS_TOE	=	0x00c0
                           000083   944 G$BUS_SCL$0$0 == 0x0083
                           000083   945 _BUS_SCL	=	0x0083
                                    946 ;--------------------------------------------------------
                                    947 ; overlayable register banks
                                    948 ;--------------------------------------------------------
                                    949 	.area REG_BANK_0	(REL,OVR,DATA)
      000000                        950 	.ds 8
                                    951 ;--------------------------------------------------------
                                    952 ; internal ram data
                                    953 ;--------------------------------------------------------
                                    954 	.area DSEG    (DATA)
                           000000   955 LLab6.lcd_clear$NumBytes$1$77==.
      000000                        956 _lcd_clear_NumBytes_1_77:
      000000                        957 	.ds 1
                           000001   958 LLab6.lcd_clear$Cmd$1$77==.
      000001                        959 _lcd_clear_Cmd_1_77:
      000001                        960 	.ds 2
                           000003   961 LLab6.read_keypad$Data$1$78==.
      000003                        962 _read_keypad_Data_1_78:
      000003                        963 	.ds 2
                           000005   964 LLab6.i2c_write_data$start_reg$1$97==.
      000005                        965 _i2c_write_data_PARM_2:
      000005                        966 	.ds 1
                           000006   967 LLab6.i2c_write_data$buffer$1$97==.
      000006                        968 _i2c_write_data_PARM_3:
      000006                        969 	.ds 3
                           000009   970 LLab6.i2c_write_data$num_bytes$1$97==.
      000009                        971 _i2c_write_data_PARM_4:
      000009                        972 	.ds 1
                           00000A   973 LLab6.i2c_read_data$start_reg$1$99==.
      00000A                        974 _i2c_read_data_PARM_2:
      00000A                        975 	.ds 1
                           00000B   976 LLab6.i2c_read_data$buffer$1$99==.
      00000B                        977 _i2c_read_data_PARM_3:
      00000B                        978 	.ds 3
                           00000E   979 LLab6.i2c_read_data$num_bytes$1$99==.
      00000E                        980 _i2c_read_data_PARM_4:
      00000E                        981 	.ds 1
                           00000F   982 LLab6.Accel_Init$Data2$1$103==.
      00000F                        983 _Accel_Init_Data2_1_103:
      00000F                        984 	.ds 1
                           000010   985 G$left_pw$0$0==.
      000010                        986 _left_pw::
      000010                        987 	.ds 2
                           000012   988 G$right_pw$0$0==.
      000012                        989 _right_pw::
      000012                        990 	.ds 2
                           000014   991 G$Error$0$0==.
      000014                        992 _Error::
      000014                        993 	.ds 2
                           000016   994 G$prev_error$0$0==.
      000016                        995 _prev_error::
      000016                        996 	.ds 2
                           000018   997 G$Counts$0$0==.
      000018                        998 _Counts::
      000018                        999 	.ds 1
                           000019  1000 G$nCounts$0$0==.
      000019                       1001 _nCounts::
      000019                       1002 	.ds 1
                           00001A  1003 G$new_range$0$0==.
      00001A                       1004 _new_range::
      00001A                       1005 	.ds 1
                           00001B  1006 G$new_AD$0$0==.
      00001B                       1007 _new_AD::
      00001B                       1008 	.ds 1
                           00001C  1009 G$new_heading$0$0==.
      00001C                       1010 _new_heading::
      00001C                       1011 	.ds 1
                           00001D  1012 G$h_count$0$0==.
      00001D                       1013 _h_count::
      00001D                       1014 	.ds 1
                           00001E  1015 G$r_count$0$0==.
      00001E                       1016 _r_count::
      00001E                       1017 	.ds 1
                           00001F  1018 G$adc_count$0$0==.
      00001F                       1019 _adc_count::
      00001F                       1020 	.ds 1
                           000020  1021 G$DRIVE_PW$0$0==.
      000020                       1022 _DRIVE_PW::
      000020                       1023 	.ds 2
                           000022  1024 G$STEER_PW$0$0==.
      000022                       1025 _STEER_PW::
      000022                       1026 	.ds 2
                           000024  1027 G$Data$0$0==.
      000024                       1028 _Data::
      000024                       1029 	.ds 2
                           000026  1030 G$print_delay$0$0==.
      000026                       1031 _print_delay::
      000026                       1032 	.ds 1
                           000027  1033 G$AD_Result$0$0==.
      000027                       1034 _AD_Result::
      000027                       1035 	.ds 1
                           000028  1036 G$voltage$0$0==.
      000028                       1037 _voltage::
      000028                       1038 	.ds 1
                           000029  1039 G$heading$0$0==.
      000029                       1040 _heading::
      000029                       1041 	.ds 2
                           00002B  1042 G$range$0$0==.
      00002B                       1043 _range::
      00002B                       1044 	.ds 2
                           00002D  1045 G$desired_heading$0$0==.
      00002D                       1046 _desired_heading::
      00002D                       1047 	.ds 2
                           00002F  1048 G$heading_kp$0$0==.
      00002F                       1049 _heading_kp::
      00002F                       1050 	.ds 4
                           000033  1051 G$heading_kd$0$0==.
      000033                       1052 _heading_kd::
      000033                       1053 	.ds 1
                           000034  1054 G$print_error$0$0==.
      000034                       1055 _print_error::
      000034                       1056 	.ds 2
                           000036  1057 LLab6.read_compass$Data$1$155==.
      000036                       1058 _read_compass_Data_1_155:
      000036                       1059 	.ds 2
                           000038  1060 LLab6.set_PW$sloc0$1$0==.
      000038                       1061 _set_PW_sloc0_1_0:
      000038                       1062 	.ds 4
                                   1063 ;--------------------------------------------------------
                                   1064 ; overlayable items in internal ram 
                                   1065 ;--------------------------------------------------------
                                   1066 	.area	OSEG    (OVR,DATA)
                                   1067 	.area	OSEG    (OVR,DATA)
                                   1068 	.area	OSEG    (OVR,DATA)
                                   1069 	.area	OSEG    (OVR,DATA)
                                   1070 	.area	OSEG    (OVR,DATA)
                                   1071 	.area	OSEG    (OVR,DATA)
                                   1072 	.area	OSEG    (OVR,DATA)
                                   1073 	.area	OSEG    (OVR,DATA)
                                   1074 ;--------------------------------------------------------
                                   1075 ; Stack segment in internal ram 
                                   1076 ;--------------------------------------------------------
                                   1077 	.area	SSEG
      000000                       1078 __start__stack:
      000000                       1079 	.ds	1
                                   1080 
                                   1081 ;--------------------------------------------------------
                                   1082 ; indirectly addressable internal ram data
                                   1083 ;--------------------------------------------------------
                                   1084 	.area ISEG    (DATA)
                                   1085 ;--------------------------------------------------------
                                   1086 ; absolute internal ram data
                                   1087 ;--------------------------------------------------------
                                   1088 	.area IABS    (ABS,DATA)
                                   1089 	.area IABS    (ABS,DATA)
                                   1090 ;--------------------------------------------------------
                                   1091 ; bit data
                                   1092 ;--------------------------------------------------------
                                   1093 	.area BSEG    (BIT)
                                   1094 ;--------------------------------------------------------
                                   1095 ; paged external ram data
                                   1096 ;--------------------------------------------------------
                                   1097 	.area PSEG    (PAG,XDATA)
                                   1098 ;--------------------------------------------------------
                                   1099 ; external ram data
                                   1100 ;--------------------------------------------------------
                                   1101 	.area XSEG    (XDATA)
                           000000  1102 LLab6.lcd_print$text$1$73==.
      000000                       1103 _lcd_print_text_1_73:
      000000                       1104 	.ds 80
                                   1105 ;--------------------------------------------------------
                                   1106 ; absolute external ram data
                                   1107 ;--------------------------------------------------------
                                   1108 	.area XABS    (ABS,XDATA)
                                   1109 ;--------------------------------------------------------
                                   1110 ; external initialized ram data
                                   1111 ;--------------------------------------------------------
                                   1112 	.area XISEG   (XDATA)
                                   1113 	.area HOME    (CODE)
                                   1114 	.area GSINIT0 (CODE)
                                   1115 	.area GSINIT1 (CODE)
                                   1116 	.area GSINIT2 (CODE)
                                   1117 	.area GSINIT3 (CODE)
                                   1118 	.area GSINIT4 (CODE)
                                   1119 	.area GSINIT5 (CODE)
                                   1120 	.area GSINIT  (CODE)
                                   1121 	.area GSFINAL (CODE)
                                   1122 	.area CSEG    (CODE)
                                   1123 ;--------------------------------------------------------
                                   1124 ; interrupt vector 
                                   1125 ;--------------------------------------------------------
                                   1126 	.area HOME    (CODE)
      000000                       1127 __interrupt_vect:
      000000 02r00r00         [24] 1128 	ljmp	__sdcc_gsinit_startup
      000003 32               [24] 1129 	reti
      000004                       1130 	.ds	7
      00000B 32               [24] 1131 	reti
      00000C                       1132 	.ds	7
      000013 32               [24] 1133 	reti
      000014                       1134 	.ds	7
      00001B 32               [24] 1135 	reti
      00001C                       1136 	.ds	7
      000023 32               [24] 1137 	reti
      000024                       1138 	.ds	7
      00002B 32               [24] 1139 	reti
      00002C                       1140 	.ds	7
      000033 32               [24] 1141 	reti
      000034                       1142 	.ds	7
      00003B 32               [24] 1143 	reti
      00003C                       1144 	.ds	7
      000043 32               [24] 1145 	reti
      000044                       1146 	.ds	7
      00004B 02r06r5F         [24] 1147 	ljmp	_PCA_ISR
                                   1148 ;--------------------------------------------------------
                                   1149 ; global & static initialisations
                                   1150 ;--------------------------------------------------------
                                   1151 	.area HOME    (CODE)
                                   1152 	.area GSINIT  (CODE)
                                   1153 	.area GSFINAL (CODE)
                                   1154 	.area GSINIT  (CODE)
                                   1155 	.globl __sdcc_gsinit_startup
                                   1156 	.globl __sdcc_program_startup
                                   1157 	.globl __start__stack
                                   1158 	.globl __mcs51_genXINIT
                                   1159 	.globl __mcs51_genXRAMCLEAR
                                   1160 	.globl __mcs51_genRAMCLEAR
                           000000  1161 	C$Lab6.c$46$1$169 ==.
                                   1162 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:46: signed int Error = 0;
      000000 E4               [12] 1163 	clr	a
      000001 F5*14            [12] 1164 	mov	_Error,a
      000003 F5*15            [12] 1165 	mov	(_Error + 1),a
                           000005  1166 	C$Lab6.c$47$1$169 ==.
                                   1167 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:47: signed int prev_error = 0;
      000005 F5*16            [12] 1168 	mov	_prev_error,a
      000007 F5*17            [12] 1169 	mov	(_prev_error + 1),a
                           000009  1170 	C$Lab6.c$49$1$169 ==.
                                   1171 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:49: unsigned char new_range = 0;
                                   1172 ;	1-genFromRTrack replaced	mov	_new_range,#0x00
      000009 F5*1A            [12] 1173 	mov	_new_range,a
                           00000B  1174 	C$Lab6.c$50$1$169 ==.
                                   1175 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:50: unsigned char new_AD = 0;
                                   1176 ;	1-genFromRTrack replaced	mov	_new_AD,#0x00
      00000B F5*1B            [12] 1177 	mov	_new_AD,a
                           00000D  1178 	C$Lab6.c$53$1$169 ==.
                                   1179 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:53: unsigned char r_count = 0;
                                   1180 ;	1-genFromRTrack replaced	mov	_r_count,#0x00
      00000D F5*1E            [12] 1181 	mov	_r_count,a
                           00000F  1182 	C$Lab6.c$54$1$169 ==.
                                   1183 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:54: unsigned char adc_count = 0;
                                   1184 ;	1-genFromRTrack replaced	mov	_adc_count,#0x00
      00000F F5*1F            [12] 1185 	mov	_adc_count,a
                           000011  1186 	C$Lab6.c$57$1$169 ==.
                                   1187 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:57: unsigned int DRIVE_PW = 2760;
      000011 75*20 C8         [24] 1188 	mov	_DRIVE_PW,#0xC8
      000014 75*21 0A         [24] 1189 	mov	(_DRIVE_PW + 1),#0x0A
                           000017  1190 	C$Lab6.c$58$1$169 ==.
                                   1191 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:58: unsigned int STEER_PW = 2760;
      000017 75*22 C8         [24] 1192 	mov	_STEER_PW,#0xC8
      00001A 75*23 0A         [24] 1193 	mov	(_STEER_PW + 1),#0x0A
                           00001D  1194 	C$Lab6.c$60$1$169 ==.
                                   1195 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:60: unsigned char print_delay = 0;
                                   1196 ;	1-genFromRTrack replaced	mov	_print_delay,#0x00
      00001D F5*26            [12] 1197 	mov	_print_delay,a
                           00001F  1198 	C$Lab6.c$61$1$169 ==.
                                   1199 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:61: unsigned char AD_Result = 0;
                                   1200 ;	1-genFromRTrack replaced	mov	_AD_Result,#0x00
      00001F F5*27            [12] 1201 	mov	_AD_Result,a
                           000021  1202 	C$Lab6.c$62$1$169 ==.
                                   1203 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:62: unsigned char voltage = 0;
                                   1204 ;	1-genFromRTrack replaced	mov	_voltage,#0x00
      000021 F5*28            [12] 1205 	mov	_voltage,a
                           000023  1206 	C$Lab6.c$63$1$169 ==.
                                   1207 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:63: unsigned int heading = 0;
      000023 F5*29            [12] 1208 	mov	_heading,a
      000025 F5*2A            [12] 1209 	mov	(_heading + 1),a
                           000027  1210 	C$Lab6.c$64$1$169 ==.
                                   1211 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:64: unsigned int range = 0;
      000027 F5*2B            [12] 1212 	mov	_range,a
      000029 F5*2C            [12] 1213 	mov	(_range + 1),a
                           00002B  1214 	C$Lab6.c$65$1$169 ==.
                                   1215 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:65: unsigned int desired_heading = 0;
      00002B F5*2D            [12] 1216 	mov	_desired_heading,a
      00002D F5*2E            [12] 1217 	mov	(_desired_heading + 1),a
                           00002F  1218 	C$Lab6.c$66$1$169 ==.
                                   1219 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:66: float heading_kp = 0;
      00002F F5*2F            [12] 1220 	mov	_heading_kp,a
      000031 F5*30            [12] 1221 	mov	(_heading_kp + 1),a
      000033 F5*31            [12] 1222 	mov	(_heading_kp + 2),a
      000035 F5*32            [12] 1223 	mov	(_heading_kp + 3),a
                           000037  1224 	C$Lab6.c$67$1$169 ==.
                                   1225 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:67: unsigned char heading_kd = 0;
                                   1226 ;	1-genFromRTrack replaced	mov	_heading_kd,#0x00
      000037 F5*33            [12] 1227 	mov	_heading_kd,a
                           000039  1228 	C$Lab6.c$68$1$169 ==.
                                   1229 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:68: int print_error = 0;
      000039 F5*34            [12] 1230 	mov	_print_error,a
      00003B F5*35            [12] 1231 	mov	(_print_error + 1),a
                                   1232 	.area GSFINAL (CODE)
      000000 02r00r4E         [24] 1233 	ljmp	__sdcc_program_startup
                                   1234 ;--------------------------------------------------------
                                   1235 ; Home
                                   1236 ;--------------------------------------------------------
                                   1237 	.area HOME    (CODE)
                                   1238 	.area HOME    (CODE)
      00004E                       1239 __sdcc_program_startup:
      00004E 02r04rD6         [24] 1240 	ljmp	_main
                                   1241 ;	return from main will return to caller
                                   1242 ;--------------------------------------------------------
                                   1243 ; code
                                   1244 ;--------------------------------------------------------
                                   1245 	.area CSEG    (CODE)
                                   1246 ;------------------------------------------------------------
                                   1247 ;Allocation info for local variables in function 'SYSCLK_Init'
                                   1248 ;------------------------------------------------------------
                                   1249 ;i                         Allocated to registers 
                                   1250 ;------------------------------------------------------------
                           000000  1251 	G$SYSCLK_Init$0$0 ==.
                           000000  1252 	C$c8051_SDCC.h$42$0$0 ==.
                                   1253 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:42: void SYSCLK_Init(void)
                                   1254 ;	-----------------------------------------
                                   1255 ;	 function SYSCLK_Init
                                   1256 ;	-----------------------------------------
      000000                       1257 _SYSCLK_Init:
                           000007  1258 	ar7 = 0x07
                           000006  1259 	ar6 = 0x06
                           000005  1260 	ar5 = 0x05
                           000004  1261 	ar4 = 0x04
                           000003  1262 	ar3 = 0x03
                           000002  1263 	ar2 = 0x02
                           000001  1264 	ar1 = 0x01
                           000000  1265 	ar0 = 0x00
                           000000  1266 	C$c8051_SDCC.h$46$1$31 ==.
                                   1267 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:46: OSCXCN = 0x67;                      // start external oscillator with
      000000 75 B1 67         [24] 1268 	mov	_OSCXCN,#0x67
                           000003  1269 	C$c8051_SDCC.h$49$1$31 ==.
                                   1270 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:49: for (i=0; i < 256; i++);            // wait for oscillator to start
      000003 7E 00            [12] 1271 	mov	r6,#0x00
      000005 7F 01            [12] 1272 	mov	r7,#0x01
      000007                       1273 00107$:
      000007 1E               [12] 1274 	dec	r6
      000008 BE FF 01         [24] 1275 	cjne	r6,#0xFF,00121$
      00000B 1F               [12] 1276 	dec	r7
      00000C                       1277 00121$:
      00000C EE               [12] 1278 	mov	a,r6
      00000D 4F               [12] 1279 	orl	a,r7
      00000E 70 F7            [24] 1280 	jnz	00107$
                           000010  1281 	C$c8051_SDCC.h$51$1$31 ==.
                                   1282 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:51: while (!(OSCXCN & 0x80));           // Wait for crystal osc. to settle
      000010                       1283 00102$:
      000010 E5 B1            [12] 1284 	mov	a,_OSCXCN
      000012 30 E7 FB         [24] 1285 	jnb	acc.7,00102$
                           000015  1286 	C$c8051_SDCC.h$53$1$31 ==.
                                   1287 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:53: OSCICN = 0x88;                      // select external oscillator as SYSCLK
      000015 75 B2 88         [24] 1288 	mov	_OSCICN,#0x88
                           000018  1289 	C$c8051_SDCC.h$56$1$31 ==.
                           000018  1290 	XG$SYSCLK_Init$0$0 ==.
      000018 22               [24] 1291 	ret
                                   1292 ;------------------------------------------------------------
                                   1293 ;Allocation info for local variables in function 'UART0_Init'
                                   1294 ;------------------------------------------------------------
                           000019  1295 	G$UART0_Init$0$0 ==.
                           000019  1296 	C$c8051_SDCC.h$64$1$31 ==.
                                   1297 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:64: void UART0_Init(void)
                                   1298 ;	-----------------------------------------
                                   1299 ;	 function UART0_Init
                                   1300 ;	-----------------------------------------
      000019                       1301 _UART0_Init:
                           000019  1302 	C$c8051_SDCC.h$66$1$33 ==.
                                   1303 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:66: SCON0  = 0x50;                      // SCON0: mode 1, 8-bit UART, enable RX
      000019 75 98 50         [24] 1304 	mov	_SCON0,#0x50
                           00001C  1305 	C$c8051_SDCC.h$67$1$33 ==.
                                   1306 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:67: TMOD   = 0x20;                      // TMOD: timer 1, mode 2, 8-bit reload
      00001C 75 89 20         [24] 1307 	mov	_TMOD,#0x20
                           00001F  1308 	C$c8051_SDCC.h$68$1$33 ==.
                                   1309 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:68: TH1    = -(SYSCLK/BAUDRATE/16);     // set Timer1 reload value for baudrate
      00001F 75 8D DC         [24] 1310 	mov	_TH1,#0xDC
                           000022  1311 	C$c8051_SDCC.h$69$1$33 ==.
                                   1312 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:69: TR1    = 1;                         // start Timer1
      000022 D2 8E            [12] 1313 	setb	_TR1
                           000024  1314 	C$c8051_SDCC.h$70$1$33 ==.
                                   1315 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:70: CKCON |= 0x10;                      // Timer1 uses SYSCLK as time base
      000024 43 8E 10         [24] 1316 	orl	_CKCON,#0x10
                           000027  1317 	C$c8051_SDCC.h$71$1$33 ==.
                                   1318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:71: PCON  |= 0x80;                      // SMOD00 = 1 (disable baud rate 
      000027 43 87 80         [24] 1319 	orl	_PCON,#0x80
                           00002A  1320 	C$c8051_SDCC.h$73$1$33 ==.
                                   1321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:73: TI0    = 1;                         // Indicate TX0 ready
      00002A D2 99            [12] 1322 	setb	_TI0
                           00002C  1323 	C$c8051_SDCC.h$74$1$33 ==.
                                   1324 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:74: P0MDOUT |= 0x01;                    // Set TX0 to push/pull
      00002C 43 A4 01         [24] 1325 	orl	_P0MDOUT,#0x01
                           00002F  1326 	C$c8051_SDCC.h$75$1$33 ==.
                           00002F  1327 	XG$UART0_Init$0$0 ==.
      00002F 22               [24] 1328 	ret
                                   1329 ;------------------------------------------------------------
                                   1330 ;Allocation info for local variables in function 'Sys_Init'
                                   1331 ;------------------------------------------------------------
                           000030  1332 	G$Sys_Init$0$0 ==.
                           000030  1333 	C$c8051_SDCC.h$83$1$33 ==.
                                   1334 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:83: void Sys_Init(void)
                                   1335 ;	-----------------------------------------
                                   1336 ;	 function Sys_Init
                                   1337 ;	-----------------------------------------
      000030                       1338 _Sys_Init:
                           000030  1339 	C$c8051_SDCC.h$85$1$35 ==.
                                   1340 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:85: WDTCN = 0xde;			// disable watchdog timer
      000030 75 FF DE         [24] 1341 	mov	_WDTCN,#0xDE
                           000033  1342 	C$c8051_SDCC.h$86$1$35 ==.
                                   1343 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:86: WDTCN = 0xad;
      000033 75 FF AD         [24] 1344 	mov	_WDTCN,#0xAD
                           000036  1345 	C$c8051_SDCC.h$88$1$35 ==.
                                   1346 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:88: SYSCLK_Init();			// initialize oscillator
      000036 12r00r00         [24] 1347 	lcall	_SYSCLK_Init
                           000039  1348 	C$c8051_SDCC.h$89$1$35 ==.
                                   1349 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:89: UART0_Init();			// initialize UART0
      000039 12r00r19         [24] 1350 	lcall	_UART0_Init
                           00003C  1351 	C$c8051_SDCC.h$91$1$35 ==.
                                   1352 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:91: XBR0 |= 0x04;
      00003C 43 E1 04         [24] 1353 	orl	_XBR0,#0x04
                           00003F  1354 	C$c8051_SDCC.h$92$1$35 ==.
                                   1355 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:92: XBR2 |= 0x40;                    	// Enable crossbar and weak pull-ups
      00003F 43 E3 40         [24] 1356 	orl	_XBR2,#0x40
                           000042  1357 	C$c8051_SDCC.h$93$1$35 ==.
                           000042  1358 	XG$Sys_Init$0$0 ==.
      000042 22               [24] 1359 	ret
                                   1360 ;------------------------------------------------------------
                                   1361 ;Allocation info for local variables in function 'putchar'
                                   1362 ;------------------------------------------------------------
                                   1363 ;c                         Allocated to registers r7 
                                   1364 ;------------------------------------------------------------
                           000043  1365 	G$putchar$0$0 ==.
                           000043  1366 	C$c8051_SDCC.h$98$1$35 ==.
                                   1367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:98: void putchar(char c)
                                   1368 ;	-----------------------------------------
                                   1369 ;	 function putchar
                                   1370 ;	-----------------------------------------
      000043                       1371 _putchar:
      000043 AF 82            [24] 1372 	mov	r7,dpl
                           000045  1373 	C$c8051_SDCC.h$100$1$37 ==.
                                   1374 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:100: while (!TI0); 
      000045                       1375 00101$:
                           000045  1376 	C$c8051_SDCC.h$101$1$37 ==.
                                   1377 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:101: TI0 = 0;
      000045 10 99 02         [24] 1378 	jbc	_TI0,00112$
      000048 80 FB            [24] 1379 	sjmp	00101$
      00004A                       1380 00112$:
                           00004A  1381 	C$c8051_SDCC.h$102$1$37 ==.
                                   1382 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:102: SBUF0 = c;
      00004A 8F 99            [24] 1383 	mov	_SBUF0,r7
                           00004C  1384 	C$c8051_SDCC.h$103$1$37 ==.
                           00004C  1385 	XG$putchar$0$0 ==.
      00004C 22               [24] 1386 	ret
                                   1387 ;------------------------------------------------------------
                                   1388 ;Allocation info for local variables in function 'getchar'
                                   1389 ;------------------------------------------------------------
                                   1390 ;c                         Allocated to registers 
                                   1391 ;------------------------------------------------------------
                           00004D  1392 	G$getchar$0$0 ==.
                           00004D  1393 	C$c8051_SDCC.h$108$1$37 ==.
                                   1394 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:108: char getchar(void)
                                   1395 ;	-----------------------------------------
                                   1396 ;	 function getchar
                                   1397 ;	-----------------------------------------
      00004D                       1398 _getchar:
                           00004D  1399 	C$c8051_SDCC.h$111$1$39 ==.
                                   1400 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:111: while (!RI0);
      00004D                       1401 00101$:
                           00004D  1402 	C$c8051_SDCC.h$112$1$39 ==.
                                   1403 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:112: RI0 = 0;
      00004D 10 98 02         [24] 1404 	jbc	_RI0,00112$
      000050 80 FB            [24] 1405 	sjmp	00101$
      000052                       1406 00112$:
                           000052  1407 	C$c8051_SDCC.h$113$1$39 ==.
                                   1408 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:113: c = SBUF0;
      000052 85 99 82         [24] 1409 	mov	dpl,_SBUF0
                           000055  1410 	C$c8051_SDCC.h$114$1$39 ==.
                                   1411 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:114: putchar(c);                          // echo to terminal
      000055 12r00r43         [24] 1412 	lcall	_putchar
                           000058  1413 	C$c8051_SDCC.h$115$1$39 ==.
                                   1414 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/c8051_SDCC.h:115: return SBUF0;
      000058 85 99 82         [24] 1415 	mov	dpl,_SBUF0
                           00005B  1416 	C$c8051_SDCC.h$116$1$39 ==.
                           00005B  1417 	XG$getchar$0$0 ==.
      00005B 22               [24] 1418 	ret
                                   1419 ;------------------------------------------------------------
                                   1420 ;Allocation info for local variables in function 'lcd_print'
                                   1421 ;------------------------------------------------------------
                                   1422 ;fmt                       Allocated to stack - _bp -5
                                   1423 ;len                       Allocated to registers r6 
                                   1424 ;i                         Allocated to registers 
                                   1425 ;ap                        Allocated to registers 
                                   1426 ;text                      Allocated with name '_lcd_print_text_1_73'
                                   1427 ;------------------------------------------------------------
                           00005C  1428 	G$lcd_print$0$0 ==.
                           00005C  1429 	C$i2c.h$81$1$39 ==.
                                   1430 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:81: void lcd_print(const char *fmt, ...)
                                   1431 ;	-----------------------------------------
                                   1432 ;	 function lcd_print
                                   1433 ;	-----------------------------------------
      00005C                       1434 _lcd_print:
      00005C C0*00            [24] 1435 	push	_bp
      00005E 85 81*00         [24] 1436 	mov	_bp,sp
                           000061  1437 	C$i2c.h$87$1$73 ==.
                                   1438 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:87: if ( strlen(fmt) <= 0 ) return;   //If there is no data to print, return
      000061 E5*00            [12] 1439 	mov	a,_bp
      000063 24 FB            [12] 1440 	add	a,#0xfb
      000065 F8               [12] 1441 	mov	r0,a
      000066 86 82            [24] 1442 	mov	dpl,@r0
      000068 08               [12] 1443 	inc	r0
      000069 86 83            [24] 1444 	mov	dph,@r0
      00006B 08               [12] 1445 	inc	r0
      00006C 86 F0            [24] 1446 	mov	b,@r0
      00006E 12r00r00         [24] 1447 	lcall	_strlen
      000071 E5 82            [12] 1448 	mov	a,dpl
      000073 85 83 F0         [24] 1449 	mov	b,dph
      000076 45 F0            [12] 1450 	orl	a,b
      000078 70 02            [24] 1451 	jnz	00102$
      00007A 80 62            [24] 1452 	sjmp	00109$
      00007C                       1453 00102$:
                           00007C  1454 	C$i2c.h$89$2$74 ==.
                                   1455 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:89: va_start(ap, fmt);
      00007C E5*00            [12] 1456 	mov	a,_bp
      00007E 24 FB            [12] 1457 	add	a,#0xFB
      000080 FF               [12] 1458 	mov	r7,a
      000081 8F*00            [24] 1459 	mov	_vsprintf_PARM_3,r7
                           000083  1460 	C$i2c.h$90$1$73 ==.
                                   1461 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:90: vsprintf(text, fmt, ap);
      000083 E5*00            [12] 1462 	mov	a,_bp
      000085 24 FB            [12] 1463 	add	a,#0xfb
      000087 F8               [12] 1464 	mov	r0,a
      000088 86*00            [24] 1465 	mov	_vsprintf_PARM_2,@r0
      00008A 08               [12] 1466 	inc	r0
      00008B 86*01            [24] 1467 	mov	(_vsprintf_PARM_2 + 1),@r0
      00008D 08               [12] 1468 	inc	r0
      00008E 86*02            [24] 1469 	mov	(_vsprintf_PARM_2 + 2),@r0
      000090 90r00r00         [24] 1470 	mov	dptr,#_lcd_print_text_1_73
      000093 75 F0 00         [24] 1471 	mov	b,#0x00
      000096 12r00r00         [24] 1472 	lcall	_vsprintf
                           000099  1473 	C$i2c.h$93$1$73 ==.
                                   1474 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:93: len = strlen(text);
      000099 90r00r00         [24] 1475 	mov	dptr,#_lcd_print_text_1_73
      00009C 75 F0 00         [24] 1476 	mov	b,#0x00
      00009F 12r00r00         [24] 1477 	lcall	_strlen
      0000A2 AE 82            [24] 1478 	mov	r6,dpl
                           0000A4  1479 	C$i2c.h$94$1$73 ==.
                                   1480 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000A4 7F 00            [12] 1481 	mov	r7,#0x00
      0000A6                       1482 00107$:
      0000A6 C3               [12] 1483 	clr	c
      0000A7 EF               [12] 1484 	mov	a,r7
      0000A8 9E               [12] 1485 	subb	a,r6
      0000A9 50 1F            [24] 1486 	jnc	00105$
                           0000AB  1487 	C$i2c.h$96$2$76 ==.
                                   1488 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:96: if(text[i] == (unsigned char)'\n') text[i] = 13;
      0000AB EF               [12] 1489 	mov	a,r7
      0000AC 24r00            [12] 1490 	add	a,#_lcd_print_text_1_73
      0000AE F5 82            [12] 1491 	mov	dpl,a
      0000B0 E4               [12] 1492 	clr	a
      0000B1 34s00            [12] 1493 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000B3 F5 83            [12] 1494 	mov	dph,a
      0000B5 E0               [24] 1495 	movx	a,@dptr
      0000B6 FD               [12] 1496 	mov	r5,a
      0000B7 BD 0A 0D         [24] 1497 	cjne	r5,#0x0A,00108$
      0000BA EF               [12] 1498 	mov	a,r7
      0000BB 24r00            [12] 1499 	add	a,#_lcd_print_text_1_73
      0000BD F5 82            [12] 1500 	mov	dpl,a
      0000BF E4               [12] 1501 	clr	a
      0000C0 34s00            [12] 1502 	addc	a,#(_lcd_print_text_1_73 >> 8)
      0000C2 F5 83            [12] 1503 	mov	dph,a
      0000C4 74 0D            [12] 1504 	mov	a,#0x0D
      0000C6 F0               [24] 1505 	movx	@dptr,a
      0000C7                       1506 00108$:
                           0000C7  1507 	C$i2c.h$94$1$73 ==.
                                   1508 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:94: for(i=0; i<len; i++)
      0000C7 0F               [12] 1509 	inc	r7
      0000C8 80 DC            [24] 1510 	sjmp	00107$
      0000CA                       1511 00105$:
                           0000CA  1512 	C$i2c.h$99$1$73 ==.
                                   1513 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:99: i2c_write_data(0xC6, 0x00, text, len);
      0000CA 75*06r00         [24] 1514 	mov	_i2c_write_data_PARM_3,#_lcd_print_text_1_73
      0000CD 75*07s00         [24] 1515 	mov	(_i2c_write_data_PARM_3 + 1),#(_lcd_print_text_1_73 >> 8)
      0000D0 75*08 00         [24] 1516 	mov	(_i2c_write_data_PARM_3 + 2),#0x00
      0000D3 75*05 00         [24] 1517 	mov	_i2c_write_data_PARM_2,#0x00
      0000D6 8E*09            [24] 1518 	mov	_i2c_write_data_PARM_4,r6
      0000D8 75 82 C6         [24] 1519 	mov	dpl,#0xC6
      0000DB 12r03r72         [24] 1520 	lcall	_i2c_write_data
      0000DE                       1521 00109$:
      0000DE D0*00            [24] 1522 	pop	_bp
                           0000E0  1523 	C$i2c.h$100$1$73 ==.
                           0000E0  1524 	XG$lcd_print$0$0 ==.
      0000E0 22               [24] 1525 	ret
                                   1526 ;------------------------------------------------------------
                                   1527 ;Allocation info for local variables in function 'lcd_clear'
                                   1528 ;------------------------------------------------------------
                                   1529 ;NumBytes                  Allocated with name '_lcd_clear_NumBytes_1_77'
                                   1530 ;Cmd                       Allocated with name '_lcd_clear_Cmd_1_77'
                                   1531 ;------------------------------------------------------------
                           0000E1  1532 	G$lcd_clear$0$0 ==.
                           0000E1  1533 	C$i2c.h$103$1$73 ==.
                                   1534 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:103: void lcd_clear()
                                   1535 ;	-----------------------------------------
                                   1536 ;	 function lcd_clear
                                   1537 ;	-----------------------------------------
      0000E1                       1538 _lcd_clear:
                           0000E1  1539 	C$i2c.h$105$1$73 ==.
                                   1540 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:105: unsigned char NumBytes=0, Cmd[2];
      0000E1 75*00 00         [24] 1541 	mov	_lcd_clear_NumBytes_1_77,#0x00
                           0000E4  1542 	C$i2c.h$107$1$77 ==.
                                   1543 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:107: while(NumBytes < 64) i2c_read_data(0xC6, 0x00, &NumBytes, 1);
      0000E4                       1544 00101$:
      0000E4 74 C0            [12] 1545 	mov	a,#0x100 - 0x40
      0000E6 25*00            [12] 1546 	add	a,_lcd_clear_NumBytes_1_77
      0000E8 40 17            [24] 1547 	jc	00103$
      0000EA 75*0Br00         [24] 1548 	mov	_i2c_read_data_PARM_3,#_lcd_clear_NumBytes_1_77
      0000ED 75*0C 00         [24] 1549 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0000F0 75*0D 40         [24] 1550 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0000F3 75*0A 00         [24] 1551 	mov	_i2c_read_data_PARM_2,#0x00
      0000F6 75*0E 01         [24] 1552 	mov	_i2c_read_data_PARM_4,#0x01
      0000F9 75 82 C6         [24] 1553 	mov	dpl,#0xC6
      0000FC 12r03rE8         [24] 1554 	lcall	_i2c_read_data
      0000FF 80 E3            [24] 1555 	sjmp	00101$
      000101                       1556 00103$:
                           000101  1557 	C$i2c.h$109$1$77 ==.
                                   1558 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:109: Cmd[0] = 12;
      000101 75*01 0C         [24] 1559 	mov	_lcd_clear_Cmd_1_77,#0x0C
                           000104  1560 	C$i2c.h$110$1$77 ==.
                                   1561 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:110: i2c_write_data(0xC6, 0x00, Cmd, 1);
      000104 75*06r01         [24] 1562 	mov	_i2c_write_data_PARM_3,#_lcd_clear_Cmd_1_77
      000107 75*07 00         [24] 1563 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      00010A 75*08 40         [24] 1564 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      00010D 75*05 00         [24] 1565 	mov	_i2c_write_data_PARM_2,#0x00
      000110 75*09 01         [24] 1566 	mov	_i2c_write_data_PARM_4,#0x01
      000113 75 82 C6         [24] 1567 	mov	dpl,#0xC6
      000116 12r03r72         [24] 1568 	lcall	_i2c_write_data
                           000119  1569 	C$i2c.h$111$1$77 ==.
                           000119  1570 	XG$lcd_clear$0$0 ==.
      000119 22               [24] 1571 	ret
                                   1572 ;------------------------------------------------------------
                                   1573 ;Allocation info for local variables in function 'read_keypad'
                                   1574 ;------------------------------------------------------------
                                   1575 ;i                         Allocated to registers r7 
                                   1576 ;Data                      Allocated with name '_read_keypad_Data_1_78'
                                   1577 ;------------------------------------------------------------
                           00011A  1578 	G$read_keypad$0$0 ==.
                           00011A  1579 	C$i2c.h$114$1$77 ==.
                                   1580 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:114: char read_keypad()
                                   1581 ;	-----------------------------------------
                                   1582 ;	 function read_keypad
                                   1583 ;	-----------------------------------------
      00011A                       1584 _read_keypad:
                           00011A  1585 	C$i2c.h$118$1$78 ==.
                                   1586 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:118: i2c_read_data(0xC6, 0x01, Data, 2); //Read I2C data on address 192, register 1, 2 bytes of data.
      00011A 75*0Br03         [24] 1587 	mov	_i2c_read_data_PARM_3,#_read_keypad_Data_1_78
      00011D 75*0C 00         [24] 1588 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      000120 75*0D 40         [24] 1589 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      000123 75*0A 01         [24] 1590 	mov	_i2c_read_data_PARM_2,#0x01
      000126 75*0E 02         [24] 1591 	mov	_i2c_read_data_PARM_4,#0x02
      000129 75 82 C6         [24] 1592 	mov	dpl,#0xC6
      00012C 12r03rE8         [24] 1593 	lcall	_i2c_read_data
                           00012F  1594 	C$i2c.h$119$1$78 ==.
                                   1595 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:119: if(Data[0] == 0xFF) return 0;  //No response on bus, no display
      00012F 74 FF            [12] 1596 	mov	a,#0xFF
      000131 B5*03 05         [24] 1597 	cjne	a,_read_keypad_Data_1_78,00102$
      000134 75 82 00         [24] 1598 	mov	dpl,#0x00
      000137 80 5F            [24] 1599 	sjmp	00116$
      000139                       1600 00102$:
                           000139  1601 	C$i2c.h$121$1$78 ==.
                                   1602 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000139 7F 00            [12] 1603 	mov	r7,#0x00
      00013B 8F 06            [24] 1604 	mov	ar6,r7
      00013D                       1605 00114$:
                           00013D  1606 	C$i2c.h$123$2$79 ==.
                                   1607 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:123: if(Data[0] & (0x01 << i))  //find the ASCII value of the keypad read, if it is the current loop value
      00013D 8E F0            [24] 1608 	mov	b,r6
      00013F 05 F0            [12] 1609 	inc	b
      000141 7C 01            [12] 1610 	mov	r4,#0x01
      000143 7D 00            [12] 1611 	mov	r5,#0x00
      000145 80 06            [24] 1612 	sjmp	00145$
      000147                       1613 00144$:
      000147 EC               [12] 1614 	mov	a,r4
      000148 2C               [12] 1615 	add	a,r4
      000149 FC               [12] 1616 	mov	r4,a
      00014A ED               [12] 1617 	mov	a,r5
      00014B 33               [12] 1618 	rlc	a
      00014C FD               [12] 1619 	mov	r5,a
      00014D                       1620 00145$:
      00014D D5 F0 F7         [24] 1621 	djnz	b,00144$
      000150 AA*03            [24] 1622 	mov	r2,_read_keypad_Data_1_78
      000152 7B 00            [12] 1623 	mov	r3,#0x00
      000154 EA               [12] 1624 	mov	a,r2
      000155 52 04            [12] 1625 	anl	ar4,a
      000157 EB               [12] 1626 	mov	a,r3
      000158 52 05            [12] 1627 	anl	ar5,a
      00015A EC               [12] 1628 	mov	a,r4
      00015B 4D               [12] 1629 	orl	a,r5
      00015C 60 07            [24] 1630 	jz	00115$
                           00015E  1631 	C$i2c.h$124$2$79 ==.
                                   1632 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:124: return i+49;
      00015E 74 31            [12] 1633 	mov	a,#0x31
      000160 2F               [12] 1634 	add	a,r7
      000161 F5 82            [12] 1635 	mov	dpl,a
      000163 80 33            [24] 1636 	sjmp	00116$
      000165                       1637 00115$:
                           000165  1638 	C$i2c.h$121$1$78 ==.
                                   1639 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:121: for(i=0; i<8; i++)             //loop 8 times
      000165 0E               [12] 1640 	inc	r6
      000166 8E 07            [24] 1641 	mov	ar7,r6
      000168 BE 08 00         [24] 1642 	cjne	r6,#0x08,00147$
      00016B                       1643 00147$:
      00016B 40 D0            [24] 1644 	jc	00114$
                           00016D  1645 	C$i2c.h$127$1$78 ==.
                                   1646 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:127: if(Data[1] & 0x01) return '9'; //if the value is equal to 9 return 9.
      00016D E5*04            [12] 1647 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00016F 30 E0 05         [24] 1648 	jnb	acc.0,00107$
      000172 75 82 39         [24] 1649 	mov	dpl,#0x39
      000175 80 21            [24] 1650 	sjmp	00116$
      000177                       1651 00107$:
                           000177  1652 	C$i2c.h$129$1$78 ==.
                                   1653 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:129: if(Data[1] & 0x02) return '*'; //if the value is equal to the star.
      000177 E5*04            [12] 1654 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000179 30 E1 05         [24] 1655 	jnb	acc.1,00109$
      00017C 75 82 2A         [24] 1656 	mov	dpl,#0x2A
      00017F 80 17            [24] 1657 	sjmp	00116$
      000181                       1658 00109$:
                           000181  1659 	C$i2c.h$131$1$78 ==.
                                   1660 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:131: if(Data[1] & 0x04) return '0'; //if the value is equal to the 0 key
      000181 E5*04            [12] 1661 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      000183 30 E2 05         [24] 1662 	jnb	acc.2,00111$
      000186 75 82 30         [24] 1663 	mov	dpl,#0x30
      000189 80 0D            [24] 1664 	sjmp	00116$
      00018B                       1665 00111$:
                           00018B  1666 	C$i2c.h$133$1$78 ==.
                                   1667 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:133: if(Data[1] & 0x08) return '#'; //if the value is equal to the pound key
      00018B E5*04            [12] 1668 	mov	a,(_read_keypad_Data_1_78 + 0x0001)
      00018D 30 E3 05         [24] 1669 	jnb	acc.3,00113$
      000190 75 82 23         [24] 1670 	mov	dpl,#0x23
      000193 80 03            [24] 1671 	sjmp	00116$
      000195                       1672 00113$:
                           000195  1673 	C$i2c.h$135$1$78 ==.
                                   1674 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:135: return -1;                     //else return a numerical -1 (0xFF)
      000195 75 82 FF         [24] 1675 	mov	dpl,#0xFF
      000198                       1676 00116$:
                           000198  1677 	C$i2c.h$136$1$78 ==.
                           000198  1678 	XG$read_keypad$0$0 ==.
      000198 22               [24] 1679 	ret
                                   1680 ;------------------------------------------------------------
                                   1681 ;Allocation info for local variables in function 'kpd_input'
                                   1682 ;------------------------------------------------------------
                                   1683 ;mode                      Allocated to registers r7 
                                   1684 ;sum                       Allocated to registers r5 r6 
                                   1685 ;key                       Allocated to registers r3 
                                   1686 ;i                         Allocated to registers 
                                   1687 ;------------------------------------------------------------
                           000199  1688 	G$kpd_input$0$0 ==.
                           000199  1689 	C$i2c.h$148$1$78 ==.
                                   1690 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:148: unsigned int kpd_input(char mode)
                                   1691 ;	-----------------------------------------
                                   1692 ;	 function kpd_input
                                   1693 ;	-----------------------------------------
      000199                       1694 _kpd_input:
      000199 AF 82            [24] 1695 	mov	r7,dpl
                           00019B  1696 	C$i2c.h$153$1$81 ==.
                                   1697 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:153: sum = 0;
                           00019B  1698 	C$i2c.h$156$1$81 ==.
                                   1699 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:156: if(mode==0)lcd_print("\nType digits; end w/#");
      00019B E4               [12] 1700 	clr	a
      00019C FD               [12] 1701 	mov	r5,a
      00019D FE               [12] 1702 	mov	r6,a
      00019E EF               [12] 1703 	mov	a,r7
      00019F 70 1D            [24] 1704 	jnz	00102$
      0001A1 C0 06            [24] 1705 	push	ar6
      0001A3 C0 05            [24] 1706 	push	ar5
      0001A5 74r00            [12] 1707 	mov	a,#___str_0
      0001A7 C0 E0            [24] 1708 	push	acc
      0001A9 74s00            [12] 1709 	mov	a,#(___str_0 >> 8)
      0001AB C0 E0            [24] 1710 	push	acc
      0001AD 74 80            [12] 1711 	mov	a,#0x80
      0001AF C0 E0            [24] 1712 	push	acc
      0001B1 12r00r5C         [24] 1713 	lcall	_lcd_print
      0001B4 15 81            [12] 1714 	dec	sp
      0001B6 15 81            [12] 1715 	dec	sp
      0001B8 15 81            [12] 1716 	dec	sp
      0001BA D0 05            [24] 1717 	pop	ar5
      0001BC D0 06            [24] 1718 	pop	ar6
      0001BE                       1719 00102$:
                           0001BE  1720 	C$i2c.h$158$1$81 ==.
                                   1721 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:158: lcd_print("     %c%c%c%c%c",0x08,0x08,0x08,0x08,0x08);
      0001BE C0 06            [24] 1722 	push	ar6
      0001C0 C0 05            [24] 1723 	push	ar5
      0001C2 74 08            [12] 1724 	mov	a,#0x08
      0001C4 C0 E0            [24] 1725 	push	acc
      0001C6 E4               [12] 1726 	clr	a
      0001C7 C0 E0            [24] 1727 	push	acc
      0001C9 74 08            [12] 1728 	mov	a,#0x08
      0001CB C0 E0            [24] 1729 	push	acc
      0001CD E4               [12] 1730 	clr	a
      0001CE C0 E0            [24] 1731 	push	acc
      0001D0 74 08            [12] 1732 	mov	a,#0x08
      0001D2 C0 E0            [24] 1733 	push	acc
      0001D4 E4               [12] 1734 	clr	a
      0001D5 C0 E0            [24] 1735 	push	acc
      0001D7 74 08            [12] 1736 	mov	a,#0x08
      0001D9 C0 E0            [24] 1737 	push	acc
      0001DB E4               [12] 1738 	clr	a
      0001DC C0 E0            [24] 1739 	push	acc
      0001DE 74 08            [12] 1740 	mov	a,#0x08
      0001E0 C0 E0            [24] 1741 	push	acc
      0001E2 E4               [12] 1742 	clr	a
      0001E3 C0 E0            [24] 1743 	push	acc
      0001E5 74r16            [12] 1744 	mov	a,#___str_1
      0001E7 C0 E0            [24] 1745 	push	acc
      0001E9 74s00            [12] 1746 	mov	a,#(___str_1 >> 8)
      0001EB C0 E0            [24] 1747 	push	acc
      0001ED 74 80            [12] 1748 	mov	a,#0x80
      0001EF C0 E0            [24] 1749 	push	acc
      0001F1 12r00r5C         [24] 1750 	lcall	_lcd_print
      0001F4 E5 81            [12] 1751 	mov	a,sp
      0001F6 24 F3            [12] 1752 	add	a,#0xf3
      0001F8 F5 81            [12] 1753 	mov	sp,a
                           0001FA  1754 	C$i2c.h$160$1$81 ==.
                                   1755 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:160: delay_time(500000);	//Add 20ms delay before reading i2c in loop
      0001FA 90 A1 20         [24] 1756 	mov	dptr,#0xA120
      0001FD 75 F0 07         [24] 1757 	mov	b,#0x07
      000200 E4               [12] 1758 	clr	a
      000201 12r03r0D         [24] 1759 	lcall	_delay_time
      000204 D0 05            [24] 1760 	pop	ar5
      000206 D0 06            [24] 1761 	pop	ar6
                           000208  1762 	C$i2c.h$164$1$81 ==.
                                   1763 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      000208 7F 00            [12] 1764 	mov	r7,#0x00
                           00020A  1765 	C$i2c.h$166$3$84 ==.
                                   1766 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:166: while(((key=read_keypad()) == -1) || (key == '*'))delay_time(10000);
      00020A                       1767 00104$:
      00020A C0 07            [24] 1768 	push	ar7
      00020C C0 06            [24] 1769 	push	ar6
      00020E C0 05            [24] 1770 	push	ar5
      000210 12r01r1A         [24] 1771 	lcall	_read_keypad
      000213 AC 82            [24] 1772 	mov	r4,dpl
      000215 D0 05            [24] 1773 	pop	ar5
      000217 D0 06            [24] 1774 	pop	ar6
      000219 D0 07            [24] 1775 	pop	ar7
      00021B 8C 03            [24] 1776 	mov	ar3,r4
      00021D BC FF 02         [24] 1777 	cjne	r4,#0xFF,00146$
      000220 80 03            [24] 1778 	sjmp	00105$
      000222                       1779 00146$:
      000222 BB 2A 17         [24] 1780 	cjne	r3,#0x2A,00106$
      000225                       1781 00105$:
      000225 90 27 10         [24] 1782 	mov	dptr,#0x2710
      000228 E4               [12] 1783 	clr	a
      000229 F5 F0            [12] 1784 	mov	b,a
      00022B C0 07            [24] 1785 	push	ar7
      00022D C0 06            [24] 1786 	push	ar6
      00022F C0 05            [24] 1787 	push	ar5
      000231 12r03r0D         [24] 1788 	lcall	_delay_time
      000234 D0 05            [24] 1789 	pop	ar5
      000236 D0 06            [24] 1790 	pop	ar6
      000238 D0 07            [24] 1791 	pop	ar7
      00023A 80 CE            [24] 1792 	sjmp	00104$
      00023C                       1793 00106$:
                           00023C  1794 	C$i2c.h$167$2$82 ==.
                                   1795 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:167: if(key == '#')
      00023C BB 23 2A         [24] 1796 	cjne	r3,#0x23,00114$
                           00023F  1797 	C$i2c.h$169$3$83 ==.
                                   1798 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:169: while(read_keypad() == '#')delay_time(10000);
      00023F                       1799 00107$:
      00023F C0 06            [24] 1800 	push	ar6
      000241 C0 05            [24] 1801 	push	ar5
      000243 12r01r1A         [24] 1802 	lcall	_read_keypad
      000246 AC 82            [24] 1803 	mov	r4,dpl
      000248 D0 05            [24] 1804 	pop	ar5
      00024A D0 06            [24] 1805 	pop	ar6
      00024C BC 23 13         [24] 1806 	cjne	r4,#0x23,00109$
      00024F 90 27 10         [24] 1807 	mov	dptr,#0x2710
      000252 E4               [12] 1808 	clr	a
      000253 F5 F0            [12] 1809 	mov	b,a
      000255 C0 06            [24] 1810 	push	ar6
      000257 C0 05            [24] 1811 	push	ar5
      000259 12r03r0D         [24] 1812 	lcall	_delay_time
      00025C D0 05            [24] 1813 	pop	ar5
      00025E D0 06            [24] 1814 	pop	ar6
      000260 80 DD            [24] 1815 	sjmp	00107$
      000262                       1816 00109$:
                           000262  1817 	C$i2c.h$170$3$83 ==.
                                   1818 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:170: return sum;
      000262 8D 82            [24] 1819 	mov	dpl,r5
      000264 8E 83            [24] 1820 	mov	dph,r6
      000266 02r03r0C         [24] 1821 	ljmp	00119$
      000269                       1822 00114$:
                           000269  1823 	C$i2c.h$174$3$84 ==.
                                   1824 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:174: lcd_print("%c", key);
      000269 EB               [12] 1825 	mov	a,r3
      00026A FA               [12] 1826 	mov	r2,a
      00026B 33               [12] 1827 	rlc	a
      00026C 95 E0            [12] 1828 	subb	a,acc
      00026E FC               [12] 1829 	mov	r4,a
      00026F C0 07            [24] 1830 	push	ar7
      000271 C0 06            [24] 1831 	push	ar6
      000273 C0 05            [24] 1832 	push	ar5
      000275 C0 04            [24] 1833 	push	ar4
      000277 C0 03            [24] 1834 	push	ar3
      000279 C0 02            [24] 1835 	push	ar2
      00027B C0 02            [24] 1836 	push	ar2
      00027D C0 04            [24] 1837 	push	ar4
      00027F 74r26            [12] 1838 	mov	a,#___str_2
      000281 C0 E0            [24] 1839 	push	acc
      000283 74s00            [12] 1840 	mov	a,#(___str_2 >> 8)
      000285 C0 E0            [24] 1841 	push	acc
      000287 74 80            [12] 1842 	mov	a,#0x80
      000289 C0 E0            [24] 1843 	push	acc
      00028B 12r00r5C         [24] 1844 	lcall	_lcd_print
      00028E E5 81            [12] 1845 	mov	a,sp
      000290 24 FB            [12] 1846 	add	a,#0xfb
      000292 F5 81            [12] 1847 	mov	sp,a
      000294 D0 02            [24] 1848 	pop	ar2
      000296 D0 03            [24] 1849 	pop	ar3
      000298 D0 04            [24] 1850 	pop	ar4
      00029A D0 05            [24] 1851 	pop	ar5
      00029C D0 06            [24] 1852 	pop	ar6
                           00029E  1853 	C$i2c.h$175$1$81 ==.
                                   1854 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:175: sum = sum*10 + key - '0';
      00029E 8D*00            [24] 1855 	mov	__mulint_PARM_2,r5
      0002A0 8E*01            [24] 1856 	mov	(__mulint_PARM_2 + 1),r6
      0002A2 90 00 0A         [24] 1857 	mov	dptr,#0x000A
      0002A5 C0 04            [24] 1858 	push	ar4
      0002A7 C0 03            [24] 1859 	push	ar3
      0002A9 C0 02            [24] 1860 	push	ar2
      0002AB 12r00r00         [24] 1861 	lcall	__mulint
      0002AE A8 82            [24] 1862 	mov	r0,dpl
      0002B0 A9 83            [24] 1863 	mov	r1,dph
      0002B2 D0 02            [24] 1864 	pop	ar2
      0002B4 D0 03            [24] 1865 	pop	ar3
      0002B6 D0 04            [24] 1866 	pop	ar4
      0002B8 D0 07            [24] 1867 	pop	ar7
      0002BA EA               [12] 1868 	mov	a,r2
      0002BB 28               [12] 1869 	add	a,r0
      0002BC F8               [12] 1870 	mov	r0,a
      0002BD EC               [12] 1871 	mov	a,r4
      0002BE 39               [12] 1872 	addc	a,r1
      0002BF F9               [12] 1873 	mov	r1,a
      0002C0 E8               [12] 1874 	mov	a,r0
      0002C1 24 D0            [12] 1875 	add	a,#0xD0
      0002C3 FD               [12] 1876 	mov	r5,a
      0002C4 E9               [12] 1877 	mov	a,r1
      0002C5 34 FF            [12] 1878 	addc	a,#0xFF
      0002C7 FE               [12] 1879 	mov	r6,a
                           0002C8  1880 	C$i2c.h$176$3$84 ==.
                                   1881 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:176: while(read_keypad() == key)delay_time(10000); //wait for key to be released
      0002C8                       1882 00110$:
      0002C8 C0 07            [24] 1883 	push	ar7
      0002CA C0 06            [24] 1884 	push	ar6
      0002CC C0 05            [24] 1885 	push	ar5
      0002CE C0 03            [24] 1886 	push	ar3
      0002D0 12r01r1A         [24] 1887 	lcall	_read_keypad
      0002D3 AC 82            [24] 1888 	mov	r4,dpl
      0002D5 D0 03            [24] 1889 	pop	ar3
      0002D7 D0 05            [24] 1890 	pop	ar5
      0002D9 D0 06            [24] 1891 	pop	ar6
      0002DB D0 07            [24] 1892 	pop	ar7
      0002DD EC               [12] 1893 	mov	a,r4
      0002DE B5 03 1B         [24] 1894 	cjne	a,ar3,00118$
      0002E1 90 27 10         [24] 1895 	mov	dptr,#0x2710
      0002E4 E4               [12] 1896 	clr	a
      0002E5 F5 F0            [12] 1897 	mov	b,a
      0002E7 C0 07            [24] 1898 	push	ar7
      0002E9 C0 06            [24] 1899 	push	ar6
      0002EB C0 05            [24] 1900 	push	ar5
      0002ED C0 03            [24] 1901 	push	ar3
      0002EF 12r03r0D         [24] 1902 	lcall	_delay_time
      0002F2 D0 03            [24] 1903 	pop	ar3
      0002F4 D0 05            [24] 1904 	pop	ar5
      0002F6 D0 06            [24] 1905 	pop	ar6
      0002F8 D0 07            [24] 1906 	pop	ar7
      0002FA 80 CC            [24] 1907 	sjmp	00110$
      0002FC                       1908 00118$:
                           0002FC  1909 	C$i2c.h$164$1$81 ==.
                                   1910 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:164: for(i=0; i<5; i++)
      0002FC 0F               [12] 1911 	inc	r7
      0002FD C3               [12] 1912 	clr	c
      0002FE EF               [12] 1913 	mov	a,r7
      0002FF 64 80            [12] 1914 	xrl	a,#0x80
      000301 94 85            [12] 1915 	subb	a,#0x85
      000303 50 03            [24] 1916 	jnc	00155$
      000305 02r02r0A         [24] 1917 	ljmp	00104$
      000308                       1918 00155$:
                           000308  1919 	C$i2c.h$179$1$81 ==.
                                   1920 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:179: return sum;
      000308 8D 82            [24] 1921 	mov	dpl,r5
      00030A 8E 83            [24] 1922 	mov	dph,r6
      00030C                       1923 00119$:
                           00030C  1924 	C$i2c.h$180$1$81 ==.
                           00030C  1925 	XG$kpd_input$0$0 ==.
      00030C 22               [24] 1926 	ret
                                   1927 ;------------------------------------------------------------
                                   1928 ;Allocation info for local variables in function 'delay_time'
                                   1929 ;------------------------------------------------------------
                                   1930 ;time_end                  Allocated to registers r4 r5 r6 r7 
                                   1931 ;index                     Allocated to registers 
                                   1932 ;------------------------------------------------------------
                           00030D  1933 	G$delay_time$0$0 ==.
                           00030D  1934 	C$i2c.h$189$1$81 ==.
                                   1935 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:189: void delay_time (unsigned long time_end)
                                   1936 ;	-----------------------------------------
                                   1937 ;	 function delay_time
                                   1938 ;	-----------------------------------------
      00030D                       1939 _delay_time:
      00030D AC 82            [24] 1940 	mov	r4,dpl
      00030F AD 83            [24] 1941 	mov	r5,dph
      000311 AE F0            [24] 1942 	mov	r6,b
      000313 FF               [12] 1943 	mov	r7,a
                           000314  1944 	C$i2c.h$192$1$86 ==.
                                   1945 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:192: for (index = 0; index < time_end; index++); //for loop delay
      000314 78 00            [12] 1946 	mov	r0,#0x00
      000316 79 00            [12] 1947 	mov	r1,#0x00
      000318 7A 00            [12] 1948 	mov	r2,#0x00
      00031A 7B 00            [12] 1949 	mov	r3,#0x00
      00031C                       1950 00103$:
      00031C C3               [12] 1951 	clr	c
      00031D E8               [12] 1952 	mov	a,r0
      00031E 9C               [12] 1953 	subb	a,r4
      00031F E9               [12] 1954 	mov	a,r1
      000320 9D               [12] 1955 	subb	a,r5
      000321 EA               [12] 1956 	mov	a,r2
      000322 9E               [12] 1957 	subb	a,r6
      000323 EB               [12] 1958 	mov	a,r3
      000324 9F               [12] 1959 	subb	a,r7
      000325 50 0F            [24] 1960 	jnc	00105$
      000327 08               [12] 1961 	inc	r0
      000328 B8 00 09         [24] 1962 	cjne	r0,#0x00,00115$
      00032B 09               [12] 1963 	inc	r1
      00032C B9 00 05         [24] 1964 	cjne	r1,#0x00,00115$
      00032F 0A               [12] 1965 	inc	r2
      000330 BA 00 E9         [24] 1966 	cjne	r2,#0x00,00103$
      000333 0B               [12] 1967 	inc	r3
      000334                       1968 00115$:
      000334 80 E6            [24] 1969 	sjmp	00103$
      000336                       1970 00105$:
                           000336  1971 	C$i2c.h$193$1$86 ==.
                           000336  1972 	XG$delay_time$0$0 ==.
      000336 22               [24] 1973 	ret
                                   1974 ;------------------------------------------------------------
                                   1975 ;Allocation info for local variables in function 'i2c_start'
                                   1976 ;------------------------------------------------------------
                           000337  1977 	G$i2c_start$0$0 ==.
                           000337  1978 	C$i2c.h$196$1$86 ==.
                                   1979 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:196: void i2c_start(void)
                                   1980 ;	-----------------------------------------
                                   1981 ;	 function i2c_start
                                   1982 ;	-----------------------------------------
      000337                       1983 _i2c_start:
                           000337  1984 	C$i2c.h$198$1$88 ==.
                                   1985 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:198: while(BUSY);              //Wait until SMBus0 is free
      000337                       1986 00101$:
      000337 20 C7 FD         [24] 1987 	jb	_BUSY,00101$
                           00033A  1988 	C$i2c.h$199$1$88 ==.
                                   1989 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:199: STA = 1;                  //Set Start Bit
      00033A D2 C5            [12] 1990 	setb	_STA
                           00033C  1991 	C$i2c.h$200$1$88 ==.
                                   1992 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:200: while(!SI);               //Wait until start sent
      00033C                       1993 00104$:
      00033C 30 C3 FD         [24] 1994 	jnb	_SI,00104$
                           00033F  1995 	C$i2c.h$201$1$88 ==.
                                   1996 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:201: STA = 0;                  //Clear start bit
      00033F C2 C5            [12] 1997 	clr	_STA
                           000341  1998 	C$i2c.h$202$1$88 ==.
                                   1999 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:202: SI = 0;                   //Clear SI
      000341 C2 C3            [12] 2000 	clr	_SI
                           000343  2001 	C$i2c.h$203$1$88 ==.
                           000343  2002 	XG$i2c_start$0$0 ==.
      000343 22               [24] 2003 	ret
                                   2004 ;------------------------------------------------------------
                                   2005 ;Allocation info for local variables in function 'i2c_write'
                                   2006 ;------------------------------------------------------------
                                   2007 ;output_data               Allocated to registers 
                                   2008 ;------------------------------------------------------------
                           000344  2009 	G$i2c_write$0$0 ==.
                           000344  2010 	C$i2c.h$206$1$88 ==.
                                   2011 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:206: void i2c_write(unsigned char output_data)
                                   2012 ;	-----------------------------------------
                                   2013 ;	 function i2c_write
                                   2014 ;	-----------------------------------------
      000344                       2015 _i2c_write:
      000344 85 82 C2         [24] 2016 	mov	_SMB0DAT,dpl
                           000347  2017 	C$i2c.h$209$1$90 ==.
                                   2018 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:209: while(!SI);               //Wait until send is complete
      000347                       2019 00101$:
                           000347  2020 	C$i2c.h$210$1$90 ==.
                                   2021 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:210: SI = 0;                   //Clear SI
      000347 10 C3 02         [24] 2022 	jbc	_SI,00112$
      00034A 80 FB            [24] 2023 	sjmp	00101$
      00034C                       2024 00112$:
                           00034C  2025 	C$i2c.h$211$1$90 ==.
                           00034C  2026 	XG$i2c_write$0$0 ==.
      00034C 22               [24] 2027 	ret
                                   2028 ;------------------------------------------------------------
                                   2029 ;Allocation info for local variables in function 'i2c_write_and_stop'
                                   2030 ;------------------------------------------------------------
                                   2031 ;output_data               Allocated to registers 
                                   2032 ;------------------------------------------------------------
                           00034D  2033 	G$i2c_write_and_stop$0$0 ==.
                           00034D  2034 	C$i2c.h$214$1$90 ==.
                                   2035 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:214: void i2c_write_and_stop(unsigned char output_data)
                                   2036 ;	-----------------------------------------
                                   2037 ;	 function i2c_write_and_stop
                                   2038 ;	-----------------------------------------
      00034D                       2039 _i2c_write_and_stop:
      00034D 85 82 C2         [24] 2040 	mov	_SMB0DAT,dpl
                           000350  2041 	C$i2c.h$217$1$92 ==.
                                   2042 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:217: STO = 1;                  //Set stop bit
      000350 D2 C4            [12] 2043 	setb	_STO
                           000352  2044 	C$i2c.h$218$1$92 ==.
                                   2045 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:218: while(!SI);               //Wait until send is complete
      000352                       2046 00101$:
                           000352  2047 	C$i2c.h$219$1$92 ==.
                                   2048 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:219: SI = 0;                   //clear SI
      000352 10 C3 02         [24] 2049 	jbc	_SI,00112$
      000355 80 FB            [24] 2050 	sjmp	00101$
      000357                       2051 00112$:
                           000357  2052 	C$i2c.h$220$1$92 ==.
                           000357  2053 	XG$i2c_write_and_stop$0$0 ==.
      000357 22               [24] 2054 	ret
                                   2055 ;------------------------------------------------------------
                                   2056 ;Allocation info for local variables in function 'i2c_read'
                                   2057 ;------------------------------------------------------------
                                   2058 ;input_data                Allocated to registers 
                                   2059 ;------------------------------------------------------------
                           000358  2060 	G$i2c_read$0$0 ==.
                           000358  2061 	C$i2c.h$223$1$92 ==.
                                   2062 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:223: unsigned char i2c_read(void)
                                   2063 ;	-----------------------------------------
                                   2064 ;	 function i2c_read
                                   2065 ;	-----------------------------------------
      000358                       2066 _i2c_read:
                           000358  2067 	C$i2c.h$226$1$94 ==.
                                   2068 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:226: while(!SI);                //Wait until we have data to read
      000358                       2069 00101$:
      000358 30 C3 FD         [24] 2070 	jnb	_SI,00101$
                           00035B  2071 	C$i2c.h$227$1$94 ==.
                                   2072 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:227: input_data = SMB0DAT;      //Read the data
      00035B 85 C2 82         [24] 2073 	mov	dpl,_SMB0DAT
                           00035E  2074 	C$i2c.h$228$1$94 ==.
                                   2075 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:228: SI = 0;                    //Clear SI
      00035E C2 C3            [12] 2076 	clr	_SI
                           000360  2077 	C$i2c.h$229$1$94 ==.
                                   2078 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:229: return input_data;         //Return the read data
                           000360  2079 	C$i2c.h$230$1$94 ==.
                           000360  2080 	XG$i2c_read$0$0 ==.
      000360 22               [24] 2081 	ret
                                   2082 ;------------------------------------------------------------
                                   2083 ;Allocation info for local variables in function 'i2c_read_and_stop'
                                   2084 ;------------------------------------------------------------
                                   2085 ;input_data                Allocated to registers r7 
                                   2086 ;------------------------------------------------------------
                           000361  2087 	G$i2c_read_and_stop$0$0 ==.
                           000361  2088 	C$i2c.h$233$1$94 ==.
                                   2089 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:233: unsigned char i2c_read_and_stop(void)
                                   2090 ;	-----------------------------------------
                                   2091 ;	 function i2c_read_and_stop
                                   2092 ;	-----------------------------------------
      000361                       2093 _i2c_read_and_stop:
                           000361  2094 	C$i2c.h$236$1$96 ==.
                                   2095 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:236: while(!SI);                //Wait until we have data to read
      000361                       2096 00101$:
      000361 30 C3 FD         [24] 2097 	jnb	_SI,00101$
                           000364  2098 	C$i2c.h$237$1$96 ==.
                                   2099 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:237: input_data = SMB0DAT;      //Read the data
      000364 AF C2            [24] 2100 	mov	r7,_SMB0DAT
                           000366  2101 	C$i2c.h$238$1$96 ==.
                                   2102 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:238: SI = 0;                    //Clear SI
      000366 C2 C3            [12] 2103 	clr	_SI
                           000368  2104 	C$i2c.h$239$1$96 ==.
                                   2105 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:239: STO = 1;                   //Set stop bit
      000368 D2 C4            [12] 2106 	setb	_STO
                           00036A  2107 	C$i2c.h$240$1$96 ==.
                                   2108 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:240: while(!SI);                //Wait for stop
      00036A                       2109 00104$:
                           00036A  2110 	C$i2c.h$241$1$96 ==.
                                   2111 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:241: SI = 0;
      00036A 10 C3 02         [24] 2112 	jbc	_SI,00122$
      00036D 80 FB            [24] 2113 	sjmp	00104$
      00036F                       2114 00122$:
                           00036F  2115 	C$i2c.h$242$1$96 ==.
                                   2116 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:242: return input_data;         //Return the read data
      00036F 8F 82            [24] 2117 	mov	dpl,r7
                           000371  2118 	C$i2c.h$243$1$96 ==.
                           000371  2119 	XG$i2c_read_and_stop$0$0 ==.
      000371 22               [24] 2120 	ret
                                   2121 ;------------------------------------------------------------
                                   2122 ;Allocation info for local variables in function 'i2c_write_data'
                                   2123 ;------------------------------------------------------------
                                   2124 ;start_reg                 Allocated with name '_i2c_write_data_PARM_2'
                                   2125 ;buffer                    Allocated with name '_i2c_write_data_PARM_3'
                                   2126 ;num_bytes                 Allocated with name '_i2c_write_data_PARM_4'
                                   2127 ;addr                      Allocated to registers r7 
                                   2128 ;i                         Allocated to registers 
                                   2129 ;------------------------------------------------------------
                           000372  2130 	G$i2c_write_data$0$0 ==.
                           000372  2131 	C$i2c.h$246$1$96 ==.
                                   2132 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:246: void i2c_write_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2133 ;	-----------------------------------------
                                   2134 ;	 function i2c_write_data
                                   2135 ;	-----------------------------------------
      000372                       2136 _i2c_write_data:
      000372 AF 82            [24] 2137 	mov	r7,dpl
                           000374  2138 	C$i2c.h$250$1$98 ==.
                                   2139 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:250: i2c_start();               //initiate I2C transfer
      000374 C0 07            [24] 2140 	push	ar7
      000376 12r03r37         [24] 2141 	lcall	_i2c_start
      000379 D0 07            [24] 2142 	pop	ar7
                           00037B  2143 	C$i2c.h$251$1$98 ==.
                                   2144 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:251: i2c_write(addr & ~0x01);   //write the desired address to the bus
      00037B 74 FE            [12] 2145 	mov	a,#0xFE
      00037D 5F               [12] 2146 	anl	a,r7
      00037E F5 82            [12] 2147 	mov	dpl,a
      000380 12r03r44         [24] 2148 	lcall	_i2c_write
                           000383  2149 	C$i2c.h$252$1$98 ==.
                                   2150 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:252: i2c_write(start_reg);      //write the start register to the bus
      000383 85*05 82         [24] 2151 	mov	dpl,_i2c_write_data_PARM_2
      000386 12r03r44         [24] 2152 	lcall	_i2c_write
                           000389  2153 	C$i2c.h$253$1$98 ==.
                                   2154 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      000389 7F 00            [12] 2155 	mov	r7,#0x00
      00038B                       2156 00103$:
      00038B AD*09            [24] 2157 	mov	r5,_i2c_write_data_PARM_4
      00038D 7E 00            [12] 2158 	mov	r6,#0x00
      00038F 1D               [12] 2159 	dec	r5
      000390 BD FF 01         [24] 2160 	cjne	r5,#0xFF,00114$
      000393 1E               [12] 2161 	dec	r6
      000394                       2162 00114$:
      000394 8F 03            [24] 2163 	mov	ar3,r7
      000396 7C 00            [12] 2164 	mov	r4,#0x00
      000398 C3               [12] 2165 	clr	c
      000399 EB               [12] 2166 	mov	a,r3
      00039A 9D               [12] 2167 	subb	a,r5
      00039B EC               [12] 2168 	mov	a,r4
      00039C 64 80            [12] 2169 	xrl	a,#0x80
      00039E 8E F0            [24] 2170 	mov	b,r6
      0003A0 63 F0 80         [24] 2171 	xrl	b,#0x80
      0003A3 95 F0            [12] 2172 	subb	a,b
      0003A5 50 1F            [24] 2173 	jnc	00101$
                           0003A7  2174 	C$i2c.h$254$1$98 ==.
                                   2175 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:254: i2c_write(buffer[i]);
      0003A7 EF               [12] 2176 	mov	a,r7
      0003A8 25*06            [12] 2177 	add	a,_i2c_write_data_PARM_3
      0003AA FC               [12] 2178 	mov	r4,a
      0003AB E4               [12] 2179 	clr	a
      0003AC 35*07            [12] 2180 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003AE FD               [12] 2181 	mov	r5,a
      0003AF AE*08            [24] 2182 	mov	r6,(_i2c_write_data_PARM_3 + 2)
      0003B1 8C 82            [24] 2183 	mov	dpl,r4
      0003B3 8D 83            [24] 2184 	mov	dph,r5
      0003B5 8E F0            [24] 2185 	mov	b,r6
      0003B7 12r00r00         [24] 2186 	lcall	__gptrget
      0003BA F5 82            [12] 2187 	mov	dpl,a
      0003BC C0 07            [24] 2188 	push	ar7
      0003BE 12r03r44         [24] 2189 	lcall	_i2c_write
      0003C1 D0 07            [24] 2190 	pop	ar7
                           0003C3  2191 	C$i2c.h$253$1$98 ==.
                                   2192 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:253: for(i=0; i<num_bytes-1; i++) //write the data to the register(s)
      0003C3 0F               [12] 2193 	inc	r7
      0003C4 80 C5            [24] 2194 	sjmp	00103$
      0003C6                       2195 00101$:
                           0003C6  2196 	C$i2c.h$255$1$98 ==.
                                   2197 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:255: i2c_write_and_stop(buffer[num_bytes-1]); //Stop transfer
      0003C6 AE*09            [24] 2198 	mov	r6,_i2c_write_data_PARM_4
      0003C8 7F 00            [12] 2199 	mov	r7,#0x00
      0003CA 1E               [12] 2200 	dec	r6
      0003CB BE FF 01         [24] 2201 	cjne	r6,#0xFF,00116$
      0003CE 1F               [12] 2202 	dec	r7
      0003CF                       2203 00116$:
      0003CF EE               [12] 2204 	mov	a,r6
      0003D0 25*06            [12] 2205 	add	a,_i2c_write_data_PARM_3
      0003D2 FE               [12] 2206 	mov	r6,a
      0003D3 EF               [12] 2207 	mov	a,r7
      0003D4 35*07            [12] 2208 	addc	a,(_i2c_write_data_PARM_3 + 1)
      0003D6 FF               [12] 2209 	mov	r7,a
      0003D7 AD*08            [24] 2210 	mov	r5,(_i2c_write_data_PARM_3 + 2)
      0003D9 8E 82            [24] 2211 	mov	dpl,r6
      0003DB 8F 83            [24] 2212 	mov	dph,r7
      0003DD 8D F0            [24] 2213 	mov	b,r5
      0003DF 12r00r00         [24] 2214 	lcall	__gptrget
      0003E2 F5 82            [12] 2215 	mov	dpl,a
      0003E4 12r03r4D         [24] 2216 	lcall	_i2c_write_and_stop
                           0003E7  2217 	C$i2c.h$256$1$98 ==.
                           0003E7  2218 	XG$i2c_write_data$0$0 ==.
      0003E7 22               [24] 2219 	ret
                                   2220 ;------------------------------------------------------------
                                   2221 ;Allocation info for local variables in function 'i2c_read_data'
                                   2222 ;------------------------------------------------------------
                                   2223 ;start_reg                 Allocated with name '_i2c_read_data_PARM_2'
                                   2224 ;buffer                    Allocated with name '_i2c_read_data_PARM_3'
                                   2225 ;num_bytes                 Allocated with name '_i2c_read_data_PARM_4'
                                   2226 ;addr                      Allocated to registers r7 
                                   2227 ;j                         Allocated to registers 
                                   2228 ;------------------------------------------------------------
                           0003E8  2229 	G$i2c_read_data$0$0 ==.
                           0003E8  2230 	C$i2c.h$259$1$98 ==.
                                   2231 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:259: void i2c_read_data(unsigned char addr, unsigned char start_reg, unsigned char *buffer, unsigned char num_bytes)
                                   2232 ;	-----------------------------------------
                                   2233 ;	 function i2c_read_data
                                   2234 ;	-----------------------------------------
      0003E8                       2235 _i2c_read_data:
      0003E8 AF 82            [24] 2236 	mov	r7,dpl
                           0003EA  2237 	C$i2c.h$262$1$100 ==.
                                   2238 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:262: i2c_start();               //Start I2C transfer
      0003EA C0 07            [24] 2239 	push	ar7
      0003EC 12r03r37         [24] 2240 	lcall	_i2c_start
      0003EF D0 07            [24] 2241 	pop	ar7
                           0003F1  2242 	C$i2c.h$263$1$100 ==.
                                   2243 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:263: i2c_write(addr & ~0x01);   //Write address of device that will be written to, send 0
      0003F1 8F 06            [24] 2244 	mov	ar6,r7
      0003F3 74 FE            [12] 2245 	mov	a,#0xFE
      0003F5 5E               [12] 2246 	anl	a,r6
      0003F6 F5 82            [12] 2247 	mov	dpl,a
      0003F8 C0 07            [24] 2248 	push	ar7
      0003FA 12r03r44         [24] 2249 	lcall	_i2c_write
                           0003FD  2250 	C$i2c.h$264$1$100 ==.
                                   2251 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:264: i2c_write_and_stop(start_reg); //Write & stop the 1st register to be read
      0003FD 85*0A 82         [24] 2252 	mov	dpl,_i2c_read_data_PARM_2
      000400 12r03r4D         [24] 2253 	lcall	_i2c_write_and_stop
                           000403  2254 	C$i2c.h$265$1$100 ==.
                                   2255 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:265: i2c_start();               //Start I2C transfer
      000403 12r03r37         [24] 2256 	lcall	_i2c_start
      000406 D0 07            [24] 2257 	pop	ar7
                           000408  2258 	C$i2c.h$266$1$100 ==.
                                   2259 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:266: i2c_write(addr | 0x01);    //Write address again, this time indicating a read operation
      000408 74 01            [12] 2260 	mov	a,#0x01
      00040A 4F               [12] 2261 	orl	a,r7
      00040B F5 82            [12] 2262 	mov	dpl,a
      00040D 12r03r44         [24] 2263 	lcall	_i2c_write
                           000410  2264 	C$i2c.h$267$1$100 ==.
                                   2265 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000410 7F 00            [12] 2266 	mov	r7,#0x00
      000412                       2267 00103$:
      000412 AD*0E            [24] 2268 	mov	r5,_i2c_read_data_PARM_4
      000414 7E 00            [12] 2269 	mov	r6,#0x00
      000416 1D               [12] 2270 	dec	r5
      000417 BD FF 01         [24] 2271 	cjne	r5,#0xFF,00114$
      00041A 1E               [12] 2272 	dec	r6
      00041B                       2273 00114$:
      00041B 8F 03            [24] 2274 	mov	ar3,r7
      00041D 7C 00            [12] 2275 	mov	r4,#0x00
      00041F C3               [12] 2276 	clr	c
      000420 EB               [12] 2277 	mov	a,r3
      000421 9D               [12] 2278 	subb	a,r5
      000422 EC               [12] 2279 	mov	a,r4
      000423 64 80            [12] 2280 	xrl	a,#0x80
      000425 8E F0            [24] 2281 	mov	b,r6
      000427 63 F0 80         [24] 2282 	xrl	b,#0x80
      00042A 95 F0            [12] 2283 	subb	a,b
      00042C 50 2E            [24] 2284 	jnc	00101$
                           00042E  2285 	C$i2c.h$269$2$101 ==.
                                   2286 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:269: AA = 1;                //Set acknowledge bit
      00042E D2 C2            [12] 2287 	setb	_AA
                           000430  2288 	C$i2c.h$270$2$101 ==.
                                   2289 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:270: buffer[j] = i2c_read();//Read data, save it in buffer
      000430 EF               [12] 2290 	mov	a,r7
      000431 25*0B            [12] 2291 	add	a,_i2c_read_data_PARM_3
      000433 FC               [12] 2292 	mov	r4,a
      000434 E4               [12] 2293 	clr	a
      000435 35*0C            [12] 2294 	addc	a,(_i2c_read_data_PARM_3 + 1)
      000437 FD               [12] 2295 	mov	r5,a
      000438 AE*0D            [24] 2296 	mov	r6,(_i2c_read_data_PARM_3 + 2)
      00043A C0 07            [24] 2297 	push	ar7
      00043C C0 06            [24] 2298 	push	ar6
      00043E C0 05            [24] 2299 	push	ar5
      000440 C0 04            [24] 2300 	push	ar4
      000442 12r03r58         [24] 2301 	lcall	_i2c_read
      000445 AB 82            [24] 2302 	mov	r3,dpl
      000447 D0 04            [24] 2303 	pop	ar4
      000449 D0 05            [24] 2304 	pop	ar5
      00044B D0 06            [24] 2305 	pop	ar6
      00044D D0 07            [24] 2306 	pop	ar7
      00044F 8C 82            [24] 2307 	mov	dpl,r4
      000451 8D 83            [24] 2308 	mov	dph,r5
      000453 8E F0            [24] 2309 	mov	b,r6
      000455 EB               [12] 2310 	mov	a,r3
      000456 12r00r00         [24] 2311 	lcall	__gptrput
                           000459  2312 	C$i2c.h$267$1$100 ==.
                                   2313 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:267: for(j = 0; j < num_bytes - 1; j++)
      000459 0F               [12] 2314 	inc	r7
      00045A 80 B6            [24] 2315 	sjmp	00103$
      00045C                       2316 00101$:
                           00045C  2317 	C$i2c.h$272$1$100 ==.
                                   2318 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:272: AA = 0;
      00045C C2 C2            [12] 2319 	clr	_AA
                           00045E  2320 	C$i2c.h$273$1$100 ==.
                                   2321 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:273: buffer[num_bytes - 1] = i2c_read_and_stop(); //Read the last byte and stop, save it in the buffer
      00045E AE*0E            [24] 2322 	mov	r6,_i2c_read_data_PARM_4
      000460 7F 00            [12] 2323 	mov	r7,#0x00
      000462 1E               [12] 2324 	dec	r6
      000463 BE FF 01         [24] 2325 	cjne	r6,#0xFF,00116$
      000466 1F               [12] 2326 	dec	r7
      000467                       2327 00116$:
      000467 EE               [12] 2328 	mov	a,r6
      000468 25*0B            [12] 2329 	add	a,_i2c_read_data_PARM_3
      00046A FE               [12] 2330 	mov	r6,a
      00046B EF               [12] 2331 	mov	a,r7
      00046C 35*0C            [12] 2332 	addc	a,(_i2c_read_data_PARM_3 + 1)
      00046E FF               [12] 2333 	mov	r7,a
      00046F AD*0D            [24] 2334 	mov	r5,(_i2c_read_data_PARM_3 + 2)
      000471 C0 07            [24] 2335 	push	ar7
      000473 C0 06            [24] 2336 	push	ar6
      000475 C0 05            [24] 2337 	push	ar5
      000477 12r03r61         [24] 2338 	lcall	_i2c_read_and_stop
      00047A AC 82            [24] 2339 	mov	r4,dpl
      00047C D0 05            [24] 2340 	pop	ar5
      00047E D0 06            [24] 2341 	pop	ar6
      000480 D0 07            [24] 2342 	pop	ar7
      000482 8E 82            [24] 2343 	mov	dpl,r6
      000484 8F 83            [24] 2344 	mov	dph,r7
      000486 8D F0            [24] 2345 	mov	b,r5
      000488 EC               [12] 2346 	mov	a,r4
      000489 12r00r00         [24] 2347 	lcall	__gptrput
                           00048C  2348 	C$i2c.h$274$1$100 ==.
                           00048C  2349 	XG$i2c_read_data$0$0 ==.
      00048C 22               [24] 2350 	ret
                                   2351 ;------------------------------------------------------------
                                   2352 ;Allocation info for local variables in function 'Accel_Init'
                                   2353 ;------------------------------------------------------------
                                   2354 ;Data2                     Allocated with name '_Accel_Init_Data2_1_103'
                                   2355 ;------------------------------------------------------------
                           00048D  2356 	G$Accel_Init$0$0 ==.
                           00048D  2357 	C$i2c.h$283$1$100 ==.
                                   2358 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:283: void Accel_Init(void)
                                   2359 ;	-----------------------------------------
                                   2360 ;	 function Accel_Init
                                   2361 ;	-----------------------------------------
      00048D                       2362 _Accel_Init:
                           00048D  2363 	C$i2c.h$287$1$103 ==.
                                   2364 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:287: Data2[0]=0x23;	//normal power mode, 50Hz ODR, y & x axes enabled
      00048D 75*0F 23         [24] 2365 	mov	_Accel_Init_Data2_1_103,#0x23
                           000490  2366 	C$i2c.h$289$1$103 ==.
                                   2367 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:289: i2c_write_data(addr_accel, 0x20, Data2, 1);
      000490 75*06r0F         [24] 2368 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      000493 75*07 00         [24] 2369 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      000496 75*08 40         [24] 2370 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      000499 75*05 20         [24] 2371 	mov	_i2c_write_data_PARM_2,#0x20
      00049C 75*09 01         [24] 2372 	mov	_i2c_write_data_PARM_4,#0x01
      00049F 75 82 30         [24] 2373 	mov	dpl,#0x30
      0004A2 12r03r72         [24] 2374 	lcall	_i2c_write_data
                           0004A5  2375 	C$i2c.h$290$1$103 ==.
                                   2376 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:290: Data2[0]=0x00;	//Default - no filtering
      0004A5 75*0F 00         [24] 2377 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004A8  2378 	C$i2c.h$292$1$103 ==.
                                   2379 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:292: i2c_write_data(addr_accel, 0x21, Data2, 1);
      0004A8 75*06r0F         [24] 2380 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004AB 75*07 00         [24] 2381 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004AE 75*08 40         [24] 2382 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004B1 75*05 21         [24] 2383 	mov	_i2c_write_data_PARM_2,#0x21
      0004B4 75*09 01         [24] 2384 	mov	_i2c_write_data_PARM_4,#0x01
      0004B7 75 82 30         [24] 2385 	mov	dpl,#0x30
      0004BA 12r03r72         [24] 2386 	lcall	_i2c_write_data
                           0004BD  2387 	C$i2c.h$293$1$103 ==.
                                   2388 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:293: Data2[0]=0x00;	//default - no interrupts enabled
      0004BD 75*0F 00         [24] 2389 	mov	_Accel_Init_Data2_1_103,#0x00
                           0004C0  2390 	C$i2c.h$294$1$103 ==.
                                   2391 ;	C:/Program Files (x86)/SDCC/bin/../include/mcs51/i2c.h:294: i2c_write_data(addr_accel, 0x22, Data2, 1);
      0004C0 75*06r0F         [24] 2392 	mov	_i2c_write_data_PARM_3,#_Accel_Init_Data2_1_103
      0004C3 75*07 00         [24] 2393 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0004C6 75*08 40         [24] 2394 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0004C9 75*05 22         [24] 2395 	mov	_i2c_write_data_PARM_2,#0x22
      0004CC 75*09 01         [24] 2396 	mov	_i2c_write_data_PARM_4,#0x01
      0004CF 75 82 30         [24] 2397 	mov	dpl,#0x30
      0004D2 12r03r72         [24] 2398 	lcall	_i2c_write_data
                           0004D5  2399 	C$i2c.h$298$1$103 ==.
                           0004D5  2400 	XG$Accel_Init$0$0 ==.
      0004D5 22               [24] 2401 	ret
                                   2402 ;------------------------------------------------------------
                                   2403 ;Allocation info for local variables in function 'main'
                                   2404 ;------------------------------------------------------------
                           0004D6  2405 	G$main$0$0 ==.
                           0004D6  2406 	C$Lab6.c$75$1$103 ==.
                                   2407 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:75: void main(void)
                                   2408 ;	-----------------------------------------
                                   2409 ;	 function main
                                   2410 ;	-----------------------------------------
      0004D6                       2411 _main:
                           0004D6  2412 	C$Lab6.c$77$1$123 ==.
                                   2413 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:77: Sys_Init();     // System Initialization - MUST BE 1st EXECUTABLE STATEMENT
      0004D6 12r00r30         [24] 2414 	lcall	_Sys_Init
                           0004D9  2415 	C$Lab6.c$78$1$123 ==.
                                   2416 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:78: Port_Init();   
      0004D9 12r06r1F         [24] 2417 	lcall	_Port_Init
                           0004DC  2418 	C$Lab6.c$79$1$123 ==.
                                   2419 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:79: Interrupt_Init();   
      0004DC 12r06r3D         [24] 2420 	lcall	_Interrupt_Init
                           0004DF  2421 	C$Lab6.c$80$1$123 ==.
                                   2422 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:80: PCA_Init();
      0004DF 12r06r46         [24] 2423 	lcall	_PCA_Init
                           0004E2  2424 	C$Lab6.c$81$1$123 ==.
                                   2425 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:81: ADC_Init();
      0004E2 12r06rAE         [24] 2426 	lcall	_ADC_Init
                           0004E5  2427 	C$Lab6.c$82$1$123 ==.
                                   2428 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:82: SMB0_Init();
      0004E5 12r06r59         [24] 2429 	lcall	_SMB0_Init
                           0004E8  2430 	C$Lab6.c$83$1$123 ==.
                                   2431 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:83: putchar('\r');  // Dummy write to serial port
      0004E8 75 82 0D         [24] 2432 	mov	dpl,#0x0D
      0004EB 12r00r43         [24] 2433 	lcall	_putchar
                           0004EE  2434 	C$Lab6.c$84$1$123 ==.
                                   2435 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:84: printf("\nStart\r\n");
      0004EE 74r29            [12] 2436 	mov	a,#___str_3
      0004F0 C0 E0            [24] 2437 	push	acc
      0004F2 74s00            [12] 2438 	mov	a,#(___str_3 >> 8)
      0004F4 C0 E0            [24] 2439 	push	acc
      0004F6 74 80            [12] 2440 	mov	a,#0x80
      0004F8 C0 E0            [24] 2441 	push	acc
      0004FA 12r00r00         [24] 2442 	lcall	_printf
      0004FD 15 81            [12] 2443 	dec	sp
      0004FF 15 81            [12] 2444 	dec	sp
      000501 15 81            [12] 2445 	dec	sp
                           000503  2446 	C$Lab6.c$85$1$123 ==.
                                   2447 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:85: PCA0CP0 = 0xFFFF - PW_CENTER;
      000503 75 EA 32         [24] 2448 	mov	((_PCA0CP0 >> 0) & 0xFF),#0x32
      000506 75 FA F5         [24] 2449 	mov	((_PCA0CP0 >> 8) & 0xFF),#0xF5
                           000509  2450 	C$Lab6.c$86$1$123 ==.
                                   2451 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:86: PCA0CP1 = 0xFFFF - PW_CENTER;
      000509 75 EB 32         [24] 2452 	mov	((_PCA0CP1 >> 0) & 0xFF),#0x32
      00050C 75 FB F5         [24] 2453 	mov	((_PCA0CP1 >> 8) & 0xFF),#0xF5
                           00050F  2454 	C$Lab6.c$87$1$123 ==.
                                   2455 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:87: PCA0CP2 = 0xFFFF - PW_CENTER; 
      00050F 75 EC 32         [24] 2456 	mov	((_PCA0CP2 >> 0) & 0xFF),#0x32
      000512 75 FC F5         [24] 2457 	mov	((_PCA0CP2 >> 8) & 0xFF),#0xF5
                           000515  2458 	C$Lab6.c$88$1$123 ==.
                                   2459 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:88: PCA0CP3 = 0xFFFF - PW_CENTER;
      000515 75 ED 32         [24] 2460 	mov	((_PCA0CP3 >> 0) & 0xFF),#0x32
      000518 75 FD F5         [24] 2461 	mov	((_PCA0CP3 >> 8) & 0xFF),#0xF5
                           00051B  2462 	C$Lab6.c$89$1$123 ==.
                                   2463 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:89: Counts = 0;
      00051B 75*18 00         [24] 2464 	mov	_Counts,#0x00
                           00051E  2465 	C$Lab6.c$90$1$123 ==.
                                   2466 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:90: while (Counts < 1);  // Wait a long time (1s) for motors to initialize
      00051E                       2467 00101$:
      00051E 74 FF            [12] 2468 	mov	a,#0x100 - 0x01
      000520 25*18            [12] 2469 	add	a,_Counts
      000522 50 FA            [24] 2470 	jnc	00101$
                           000524  2471 	C$Lab6.c$94$1$123 ==.
                                   2472 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:94: Set_Fan_Angle();
      000524 12r0Br79         [24] 2473 	lcall	_Set_Fan_Angle
                           000527  2474 	C$Lab6.c$95$1$123 ==.
                                   2475 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:95: Pick_Heading();
      000527 12r06rE9         [24] 2476 	lcall	_Pick_Heading
                           00052A  2477 	C$Lab6.c$96$1$123 ==.
                                   2478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:96: Pick_Heading_kp();
      00052A 12r09rC9         [24] 2479 	lcall	_Pick_Heading_kp
                           00052D  2480 	C$Lab6.c$97$1$123 ==.
                                   2481 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:97: Pick_Heading_kd();
      00052D 12r0ArEF         [24] 2482 	lcall	_Pick_Heading_kd
                           000530  2483 	C$Lab6.c$102$1$123 ==.
                                   2484 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:102: printf_fast_f("\rhkp: %2.1f \n\rhkd: %u", heading_kp, heading_kd);
      000530 AE*33            [24] 2485 	mov	r6,_heading_kd
      000532 7F 00            [12] 2486 	mov	r7,#0x00
      000534 C0 06            [24] 2487 	push	ar6
      000536 C0 07            [24] 2488 	push	ar7
      000538 C0*2F            [24] 2489 	push	_heading_kp
      00053A C0*30            [24] 2490 	push	(_heading_kp + 1)
      00053C C0*31            [24] 2491 	push	(_heading_kp + 2)
      00053E C0*32            [24] 2492 	push	(_heading_kp + 3)
      000540 74r32            [12] 2493 	mov	a,#___str_4
      000542 C0 E0            [24] 2494 	push	acc
      000544 74s00            [12] 2495 	mov	a,#(___str_4 >> 8)
      000546 C0 E0            [24] 2496 	push	acc
      000548 12r00r00         [24] 2497 	lcall	_printf_fast_f
      00054B E5 81            [12] 2498 	mov	a,sp
      00054D 24 F8            [12] 2499 	add	a,#0xf8
      00054F F5 81            [12] 2500 	mov	sp,a
                           000551  2501 	C$Lab6.c$103$1$123 ==.
                                   2502 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:103: Counts = 0;
                           000551  2503 	C$Lab6.c$104$1$123 ==.
                                   2504 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:104: nCounts = 0;
                           000551  2505 	C$Lab6.c$105$1$123 ==.
                                   2506 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:105: printf("\n\r------------DATA COLLECTION------------\n");
      000551 E4               [12] 2507 	clr	a
      000552 F5*18            [12] 2508 	mov	_Counts,a
      000554 F5*19            [12] 2509 	mov	_nCounts,a
      000556 74r48            [12] 2510 	mov	a,#___str_5
      000558 C0 E0            [24] 2511 	push	acc
      00055A 74s00            [12] 2512 	mov	a,#(___str_5 >> 8)
      00055C C0 E0            [24] 2513 	push	acc
      00055E 74 80            [12] 2514 	mov	a,#0x80
      000560 C0 E0            [24] 2515 	push	acc
      000562 12r00r00         [24] 2516 	lcall	_printf
      000565 15 81            [12] 2517 	dec	sp
      000567 15 81            [12] 2518 	dec	sp
      000569 15 81            [12] 2519 	dec	sp
                           00056B  2520 	C$Lab6.c$106$1$123 ==.
                                   2521 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:106: printf("\n\rHeading	|	Left PW	|	Right PW|	Error	|	prev_error\n\r");
      00056B 74r73            [12] 2522 	mov	a,#___str_6
      00056D C0 E0            [24] 2523 	push	acc
      00056F 74s00            [12] 2524 	mov	a,#(___str_6 >> 8)
      000571 C0 E0            [24] 2525 	push	acc
      000573 74 80            [12] 2526 	mov	a,#0x80
      000575 C0 E0            [24] 2527 	push	acc
      000577 12r00r00         [24] 2528 	lcall	_printf
      00057A 15 81            [12] 2529 	dec	sp
      00057C 15 81            [12] 2530 	dec	sp
      00057E 15 81            [12] 2531 	dec	sp
                           000580  2532 	C$Lab6.c$107$1$123 ==.
                                   2533 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:107: while (1)
      000580                       2534 00113$:
                           000580  2535 	C$Lab6.c$109$2$124 ==.
                                   2536 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:109: if ((new_range)) // enough overflow for a new range
      000580 E5*1A            [12] 2537 	mov	a,_new_range
      000582 60 0C            [24] 2538 	jz	00105$
                           000584  2539 	C$Lab6.c$111$3$125 ==.
                                   2540 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:111: new_range = 0;	//clear and wait for next ping
      000584 75*1A 00         [24] 2541 	mov	_new_range,#0x00
                           000587  2542 	C$Lab6.c$112$3$125 ==.
                                   2543 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:112: range = read_ranger();
      000587 12r07rC0         [24] 2544 	lcall	_read_ranger
      00058A 85 82*2B         [24] 2545 	mov	_range,dpl
      00058D 85 83*2C         [24] 2546 	mov	(_range + 1),dph
      000590                       2547 00105$:
                           000590  2548 	C$Lab6.c$129$2$124 ==.
                                   2549 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:129: if(new_heading)
      000590 E5*1C            [12] 2550 	mov	a,_new_heading
      000592 60 0F            [24] 2551 	jz	00107$
                           000594  2552 	C$Lab6.c$131$3$126 ==.
                                   2553 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:131: new_heading = 0;
      000594 75*1C 00         [24] 2554 	mov	_new_heading,#0x00
                           000597  2555 	C$Lab6.c$132$3$126 ==.
                                   2556 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:132: heading = read_compass();
      000597 12r07r9A         [24] 2557 	lcall	_read_compass
      00059A 85 82*29         [24] 2558 	mov	_heading,dpl
      00059D 85 83*2A         [24] 2559 	mov	(_heading + 1),dph
                           0005A0  2560 	C$Lab6.c$133$3$126 ==.
                                   2561 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:133: set_PW();
      0005A0 12r08r08         [24] 2562 	lcall	_set_PW
      0005A3                       2563 00107$:
                           0005A3  2564 	C$Lab6.c$135$2$124 ==.
                                   2565 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:135: if(new_AD)
      0005A3 E5*1B            [12] 2566 	mov	a,_new_AD
      0005A5 60 43            [24] 2567 	jz	00109$
                           0005A7  2568 	C$Lab6.c$137$3$127 ==.
                                   2569 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:137: new_AD = 0;
      0005A7 75*1B 00         [24] 2570 	mov	_new_AD,#0x00
                           0005AA  2571 	C$Lab6.c$138$3$127 ==.
                                   2572 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:138: AD_Result = read_AD_input(5); //Read analog input on pin 1.5
      0005AA 75 82 05         [24] 2573 	mov	dpl,#0x05
      0005AD 12r06rB8         [24] 2574 	lcall	_read_AD_input
                           0005B0  2575 	C$Lab6.c$139$1$123 ==.
                                   2576 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:139: voltage = ((12.8/255)*(AD_Result)); //Convert back to input voltage
      0005B0 85 82*27         [24] 2577 	mov  _AD_Result,dpl
      0005B3 12r00r00         [24] 2578 	lcall	___uchar2fs
      0005B6 AC 82            [24] 2579 	mov	r4,dpl
      0005B8 AD 83            [24] 2580 	mov	r5,dph
      0005BA AE F0            [24] 2581 	mov	r6,b
      0005BC FF               [12] 2582 	mov	r7,a
      0005BD C0 04            [24] 2583 	push	ar4
      0005BF C0 05            [24] 2584 	push	ar5
      0005C1 C0 06            [24] 2585 	push	ar6
      0005C3 C0 07            [24] 2586 	push	ar7
      0005C5 90 9A 67         [24] 2587 	mov	dptr,#0x9A67
      0005C8 75 F0 4D         [24] 2588 	mov	b,#0x4D
      0005CB 74 3D            [12] 2589 	mov	a,#0x3D
      0005CD 12r00r00         [24] 2590 	lcall	___fsmul
      0005D0 AC 82            [24] 2591 	mov	r4,dpl
      0005D2 AD 83            [24] 2592 	mov	r5,dph
      0005D4 AE F0            [24] 2593 	mov	r6,b
      0005D6 FF               [12] 2594 	mov	r7,a
      0005D7 E5 81            [12] 2595 	mov	a,sp
      0005D9 24 FC            [12] 2596 	add	a,#0xfc
      0005DB F5 81            [12] 2597 	mov	sp,a
      0005DD 8C 82            [24] 2598 	mov	dpl,r4
      0005DF 8D 83            [24] 2599 	mov	dph,r5
      0005E1 8E F0            [24] 2600 	mov	b,r6
      0005E3 EF               [12] 2601 	mov	a,r7
      0005E4 12r00r00         [24] 2602 	lcall	___fs2uchar
      0005E7 85 82*28         [24] 2603 	mov	_voltage,dpl
      0005EA                       2604 00109$:
                           0005EA  2605 	C$Lab6.c$141$2$124 ==.
                                   2606 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:141: if(print_delay == 20)
      0005EA 74 14            [12] 2607 	mov	a,#0x14
      0005EC B5*26 91         [24] 2608 	cjne	a,_print_delay,00113$
                           0005EF  2609 	C$Lab6.c$143$3$128 ==.
                                   2610 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:143: printf("\r%u	|	%u	|	%u	|	%d	|	%d\n", (heading), left_pw, right_pw, Error, print_error);
      0005EF C0*34            [24] 2611 	push	_print_error
      0005F1 C0*35            [24] 2612 	push	(_print_error + 1)
      0005F3 C0*14            [24] 2613 	push	_Error
      0005F5 C0*15            [24] 2614 	push	(_Error + 1)
      0005F7 C0*12            [24] 2615 	push	_right_pw
      0005F9 C0*13            [24] 2616 	push	(_right_pw + 1)
      0005FB C0*10            [24] 2617 	push	_left_pw
      0005FD C0*11            [24] 2618 	push	(_left_pw + 1)
      0005FF C0*29            [24] 2619 	push	_heading
      000601 C0*2A            [24] 2620 	push	(_heading + 1)
      000603 74rA8            [12] 2621 	mov	a,#___str_7
      000605 C0 E0            [24] 2622 	push	acc
      000607 74s00            [12] 2623 	mov	a,#(___str_7 >> 8)
      000609 C0 E0            [24] 2624 	push	acc
      00060B 74 80            [12] 2625 	mov	a,#0x80
      00060D C0 E0            [24] 2626 	push	acc
      00060F 12r00r00         [24] 2627 	lcall	_printf
      000612 E5 81            [12] 2628 	mov	a,sp
      000614 24 F3            [12] 2629 	add	a,#0xf3
      000616 F5 81            [12] 2630 	mov	sp,a
                           000618  2631 	C$Lab6.c$144$3$128 ==.
                                   2632 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:144: print_delay = 0;
      000618 75*26 00         [24] 2633 	mov	_print_delay,#0x00
      00061B 02r05r80         [24] 2634 	ljmp	00113$
                           00061E  2635 	C$Lab6.c$149$1$123 ==.
                           00061E  2636 	XG$main$0$0 ==.
      00061E 22               [24] 2637 	ret
                                   2638 ;------------------------------------------------------------
                                   2639 ;Allocation info for local variables in function 'Port_Init'
                                   2640 ;------------------------------------------------------------
                           00061F  2641 	G$Port_Init$0$0 ==.
                           00061F  2642 	C$Lab6.c$153$1$123 ==.
                                   2643 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:153: void Port_Init(void)	
                                   2644 ;	-----------------------------------------
                                   2645 ;	 function Port_Init
                                   2646 ;	-----------------------------------------
      00061F                       2647 _Port_Init:
                           00061F  2648 	C$Lab6.c$155$1$130 ==.
                                   2649 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:155: XBR0 = 0x27;
      00061F 75 E1 27         [24] 2650 	mov	_XBR0,#0x27
                           000622  2651 	C$Lab6.c$156$1$130 ==.
                                   2652 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:156: P1MDIN 	&= 0x7F;	// set pin 1.5 for analog input	
      000622 53 BD 7F         [24] 2653 	anl	_P1MDIN,#0x7F
                           000625  2654 	C$Lab6.c$157$1$130 ==.
                                   2655 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:157: P1MDOUT |= 0x0F;	//set output pin for CEX0-3 in push-pull mode
      000625 43 A5 0F         [24] 2656 	orl	_P1MDOUT,#0x0F
                           000628  2657 	C$Lab6.c$158$1$130 ==.
                                   2658 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:158: P1MDOUT &= 0x7F;	// set input pin for 1.5 to open-drain
      000628 53 A5 7F         [24] 2659 	anl	_P1MDOUT,#0x7F
                           00062B  2660 	C$Lab6.c$159$1$130 ==.
                                   2661 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:159: P1		|= ~0x7F;	// set input pin for 1.5 to high impedence
      00062B AF 90            [24] 2662 	mov	r7,_P1
      00062D 74 80            [12] 2663 	mov	a,#0x80
      00062F 4F               [12] 2664 	orl	a,r7
      000630 F5 90            [12] 2665 	mov	_P1,a
                           000632  2666 	C$Lab6.c$160$1$130 ==.
                                   2667 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:160: P3MDOUT &= 0x7F;	// set input pin for 3.6/7 to open-drain
      000632 53 A7 7F         [24] 2668 	anl	_P3MDOUT,#0x7F
                           000635  2669 	C$Lab6.c$161$1$130 ==.
                                   2670 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:161: P3		|= ~0x7F;	// set input pin for 3.6/7 to high impedence
      000635 AF B0            [24] 2671 	mov	r7,_P3
      000637 74 80            [12] 2672 	mov	a,#0x80
      000639 4F               [12] 2673 	orl	a,r7
      00063A F5 B0            [12] 2674 	mov	_P3,a
                           00063C  2675 	C$Lab6.c$163$1$130 ==.
                           00063C  2676 	XG$Port_Init$0$0 ==.
      00063C 22               [24] 2677 	ret
                                   2678 ;------------------------------------------------------------
                                   2679 ;Allocation info for local variables in function 'Interrupt_Init'
                                   2680 ;------------------------------------------------------------
                           00063D  2681 	G$Interrupt_Init$0$0 ==.
                           00063D  2682 	C$Lab6.c$167$1$130 ==.
                                   2683 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:167: void Interrupt_Init(void)
                                   2684 ;	-----------------------------------------
                                   2685 ;	 function Interrupt_Init
                                   2686 ;	-----------------------------------------
      00063D                       2687 _Interrupt_Init:
                           00063D  2688 	C$Lab6.c$169$1$132 ==.
                                   2689 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:169: IE |= 0x02;
      00063D 43 A8 02         [24] 2690 	orl	_IE,#0x02
                           000640  2691 	C$Lab6.c$170$1$132 ==.
                                   2692 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:170: EIE1 |= 0x08;
      000640 43 E6 08         [24] 2693 	orl	_EIE1,#0x08
                           000643  2694 	C$Lab6.c$171$1$132 ==.
                                   2695 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:171: EA = 1;
      000643 D2 AF            [12] 2696 	setb	_EA
                           000645  2697 	C$Lab6.c$172$1$132 ==.
                           000645  2698 	XG$Interrupt_Init$0$0 ==.
      000645 22               [24] 2699 	ret
                                   2700 ;------------------------------------------------------------
                                   2701 ;Allocation info for local variables in function 'PCA_Init'
                                   2702 ;------------------------------------------------------------
                           000646  2703 	G$PCA_Init$0$0 ==.
                           000646  2704 	C$Lab6.c$176$1$132 ==.
                                   2705 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:176: void PCA_Init(void)
                                   2706 ;	-----------------------------------------
                                   2707 ;	 function PCA_Init
                                   2708 ;	-----------------------------------------
      000646                       2709 _PCA_Init:
                           000646  2710 	C$Lab6.c$178$1$134 ==.
                                   2711 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:178: PCA0MD = 0x81;      // SYSCLK/12, enable CF interrupts, suspend when idle
      000646 75 D9 81         [24] 2712 	mov	_PCA0MD,#0x81
                           000649  2713 	C$Lab6.c$179$1$134 ==.
                                   2714 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:179: PCA0CPM0 = 0xC2;    // 16 bit, enable compare, enable PWM
      000649 75 DA C2         [24] 2715 	mov	_PCA0CPM0,#0xC2
                           00064C  2716 	C$Lab6.c$180$1$134 ==.
                                   2717 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:180: PCA0CPM1 = 0xC2;
      00064C 75 DB C2         [24] 2718 	mov	_PCA0CPM1,#0xC2
                           00064F  2719 	C$Lab6.c$181$1$134 ==.
                                   2720 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:181: PCA0CPM2 = 0xC2;
      00064F 75 DC C2         [24] 2721 	mov	_PCA0CPM2,#0xC2
                           000652  2722 	C$Lab6.c$182$1$134 ==.
                                   2723 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:182: PCA0CPM3 = 0xC2;
      000652 75 DD C2         [24] 2724 	mov	_PCA0CPM3,#0xC2
                           000655  2725 	C$Lab6.c$183$1$134 ==.
                                   2726 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:183: PCA0CN = 0x40;     // enable PCA
      000655 75 D8 40         [24] 2727 	mov	_PCA0CN,#0x40
                           000658  2728 	C$Lab6.c$184$1$134 ==.
                           000658  2729 	XG$PCA_Init$0$0 ==.
      000658 22               [24] 2730 	ret
                                   2731 ;------------------------------------------------------------
                                   2732 ;Allocation info for local variables in function 'SMB0_Init'
                                   2733 ;------------------------------------------------------------
                           000659  2734 	G$SMB0_Init$0$0 ==.
                           000659  2735 	C$Lab6.c$188$1$134 ==.
                                   2736 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:188: void SMB0_Init(void)    // This was at the top, moved it here to call wait()
                                   2737 ;	-----------------------------------------
                                   2738 ;	 function SMB0_Init
                                   2739 ;	-----------------------------------------
      000659                       2740 _SMB0_Init:
                           000659  2741 	C$Lab6.c$190$1$136 ==.
                                   2742 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:190: SMB0CR = 0x93;      // Set SCL to 100KHz
      000659 75 CF 93         [24] 2743 	mov	_SMB0CR,#0x93
                           00065C  2744 	C$Lab6.c$191$1$136 ==.
                                   2745 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:191: ENSMB = 1;          // Enable SMBUS0
      00065C D2 C6            [12] 2746 	setb	_ENSMB
                           00065E  2747 	C$Lab6.c$192$1$136 ==.
                           00065E  2748 	XG$SMB0_Init$0$0 ==.
      00065E 22               [24] 2749 	ret
                                   2750 ;------------------------------------------------------------
                                   2751 ;Allocation info for local variables in function 'PCA_ISR'
                                   2752 ;------------------------------------------------------------
                           00065F  2753 	G$PCA_ISR$0$0 ==.
                           00065F  2754 	C$Lab6.c$196$1$136 ==.
                                   2755 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:196: void PCA_ISR(void) __interrupt 9
                                   2756 ;	-----------------------------------------
                                   2757 ;	 function PCA_ISR
                                   2758 ;	-----------------------------------------
      00065F                       2759 _PCA_ISR:
      00065F C0 E0            [24] 2760 	push	acc
      000661 C0 D0            [24] 2761 	push	psw
                           000663  2762 	C$Lab6.c$198$1$138 ==.
                                   2763 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:198: if (CF)
                           000663  2764 	C$Lab6.c$200$2$139 ==.
                                   2765 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:200: CF = 0;                     // clear the interrupt flag
      000663 10 DF 02         [24] 2766 	jbc	_CF,00129$
      000666 80 3E            [24] 2767 	sjmp	00110$
      000668                       2768 00129$:
                           000668  2769 	C$Lab6.c$201$2$139 ==.
                                   2770 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:201: nCounts++;					// Counts overflows for initial delay
      000668 05*19            [12] 2771 	inc	_nCounts
                           00066A  2772 	C$Lab6.c$202$2$139 ==.
                                   2773 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:202: PCA0 = PCA_START;
      00066A 75 E9 00         [24] 2774 	mov	((_PCA0 >> 0) & 0xFF),#0x00
      00066D 75 F9 70         [24] 2775 	mov	((_PCA0 >> 8) & 0xFF),#0x70
                           000670  2776 	C$Lab6.c$203$2$139 ==.
                                   2777 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:203: if (nCounts > 50)			//Initial one second delay
      000670 E5*19            [12] 2778 	mov	a,_nCounts
      000672 24 CD            [12] 2779 	add	a,#0xff - 0x32
      000674 50 02            [24] 2780 	jnc	00102$
                           000676  2781 	C$Lab6.c$206$3$140 ==.
                                   2782 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:206: Counts++;               // seconds counter
      000676 05*18            [12] 2783 	inc	_Counts
      000678                       2784 00102$:
                           000678  2785 	C$Lab6.c$208$2$139 ==.
                                   2786 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:208: print_delay++;				// delay for print statements
      000678 05*26            [12] 2787 	inc	_print_delay
                           00067A  2788 	C$Lab6.c$209$2$139 ==.
                                   2789 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:209: r_count++;
      00067A 05*1E            [12] 2790 	inc	_r_count
                           00067C  2791 	C$Lab6.c$210$2$139 ==.
                                   2792 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:210: if (r_count>=12)			//delay for ranger reading
      00067C 74 F4            [12] 2793 	mov	a,#0x100 - 0x0C
      00067E 25*1E            [12] 2794 	add	a,_r_count
      000680 50 06            [24] 2795 	jnc	00104$
                           000682  2796 	C$Lab6.c$212$3$141 ==.
                                   2797 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:212: new_range = 1;
      000682 75*1A 01         [24] 2798 	mov	_new_range,#0x01
                           000685  2799 	C$Lab6.c$213$3$141 ==.
                                   2800 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:213: r_count = 0;
      000685 75*1E 00         [24] 2801 	mov	_r_count,#0x00
      000688                       2802 00104$:
                           000688  2803 	C$Lab6.c$215$2$139 ==.
                                   2804 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:215: h_count++;
      000688 05*1D            [12] 2805 	inc	_h_count
                           00068A  2806 	C$Lab6.c$216$2$139 ==.
                                   2807 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:216: if (h_count >=8)
      00068A 74 F8            [12] 2808 	mov	a,#0x100 - 0x08
      00068C 25*1D            [12] 2809 	add	a,_h_count
      00068E 50 06            [24] 2810 	jnc	00106$
                           000690  2811 	C$Lab6.c$218$3$142 ==.
                                   2812 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:218: new_heading = 1;
      000690 75*1C 01         [24] 2813 	mov	_new_heading,#0x01
                           000693  2814 	C$Lab6.c$219$3$142 ==.
                                   2815 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:219: h_count = 0;
      000693 75*1D 00         [24] 2816 	mov	_h_count,#0x00
      000696                       2817 00106$:
                           000696  2818 	C$Lab6.c$221$2$139 ==.
                                   2819 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:221: adc_count++;
      000696 05*1F            [12] 2820 	inc	_adc_count
                           000698  2821 	C$Lab6.c$222$2$139 ==.
                                   2822 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:222: if(adc_count >=10)
      000698 74 F6            [12] 2823 	mov	a,#0x100 - 0x0A
      00069A 25*1F            [12] 2824 	add	a,_adc_count
      00069C 50 0B            [24] 2825 	jnc	00112$
                           00069E  2826 	C$Lab6.c$224$3$143 ==.
                                   2827 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:224: adc_count = 0;
      00069E 75*1F 00         [24] 2828 	mov	_adc_count,#0x00
                           0006A1  2829 	C$Lab6.c$225$3$143 ==.
                                   2830 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:225: new_AD = 1;
      0006A1 75*1B 01         [24] 2831 	mov	_new_AD,#0x01
      0006A4 80 03            [24] 2832 	sjmp	00112$
      0006A6                       2833 00110$:
                           0006A6  2834 	C$Lab6.c$228$1$138 ==.
                                   2835 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:228: else PCA0CN &= 0xC0;           // clear all other 9-type interrupts
      0006A6 53 D8 C0         [24] 2836 	anl	_PCA0CN,#0xC0
      0006A9                       2837 00112$:
      0006A9 D0 D0            [24] 2838 	pop	psw
      0006AB D0 E0            [24] 2839 	pop	acc
                           0006AD  2840 	C$Lab6.c$229$1$138 ==.
                           0006AD  2841 	XG$PCA_ISR$0$0 ==.
      0006AD 32               [24] 2842 	reti
                                   2843 ;	eliminated unneeded mov psw,# (no regs used in bank)
                                   2844 ;	eliminated unneeded push/pop dpl
                                   2845 ;	eliminated unneeded push/pop dph
                                   2846 ;	eliminated unneeded push/pop b
                                   2847 ;------------------------------------------------------------
                                   2848 ;Allocation info for local variables in function 'ADC_Init'
                                   2849 ;------------------------------------------------------------
                           0006AE  2850 	G$ADC_Init$0$0 ==.
                           0006AE  2851 	C$Lab6.c$233$1$138 ==.
                                   2852 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:233: void ADC_Init(void)
                                   2853 ;	-----------------------------------------
                                   2854 ;	 function ADC_Init
                                   2855 ;	-----------------------------------------
      0006AE                       2856 _ADC_Init:
                           0006AE  2857 	C$Lab6.c$235$1$145 ==.
                                   2858 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:235: REF0CN = 0x03; // Set Vref to use internal reference voltage (2.4 V)
      0006AE 75 D1 03         [24] 2859 	mov	_REF0CN,#0x03
                           0006B1  2860 	C$Lab6.c$236$1$145 ==.
                                   2861 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:236: ADC1CN = 0x80; // Enable A/D converter (ADC1)
      0006B1 75 AA 80         [24] 2862 	mov	_ADC1CN,#0x80
                           0006B4  2863 	C$Lab6.c$237$1$145 ==.
                                   2864 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:237: ADC1CF |= 0x01; // Set A/D converter gain to 1
      0006B4 43 AB 01         [24] 2865 	orl	_ADC1CF,#0x01
                           0006B7  2866 	C$Lab6.c$238$1$145 ==.
                           0006B7  2867 	XG$ADC_Init$0$0 ==.
      0006B7 22               [24] 2868 	ret
                                   2869 ;------------------------------------------------------------
                                   2870 ;Allocation info for local variables in function 'read_AD_input'
                                   2871 ;------------------------------------------------------------
                                   2872 ;n                         Allocated to registers 
                                   2873 ;------------------------------------------------------------
                           0006B8  2874 	G$read_AD_input$0$0 ==.
                           0006B8  2875 	C$Lab6.c$242$1$145 ==.
                                   2876 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:242: unsigned char read_AD_input(unsigned char n)
                                   2877 ;	-----------------------------------------
                                   2878 ;	 function read_AD_input
                                   2879 ;	-----------------------------------------
      0006B8                       2880 _read_AD_input:
      0006B8 85 82 AC         [24] 2881 	mov	_AMX1SL,dpl
                           0006BB  2882 	C$Lab6.c$245$1$147 ==.
                                   2883 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:245: ADC1CN = ADC1CN & ~0x20; // Clear the "Conversion Completed" flag
      0006BB AF AA            [24] 2884 	mov	r7,_ADC1CN
      0006BD 74 DF            [12] 2885 	mov	a,#0xDF
      0006BF 5F               [12] 2886 	anl	a,r7
      0006C0 F5 AA            [12] 2887 	mov	_ADC1CN,a
                           0006C2  2888 	C$Lab6.c$246$1$147 ==.
                                   2889 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:246: ADC1CN = ADC1CN | 0x10; // Initiate A/D conversion
      0006C2 43 AA 10         [24] 2890 	orl	_ADC1CN,#0x10
                           0006C5  2891 	C$Lab6.c$248$1$147 ==.
                                   2892 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:248: while ((ADC1CN & 0x20) == 0x00);// Wait for conversion to complete
      0006C5                       2893 00101$:
      0006C5 E5 AA            [12] 2894 	mov	a,_ADC1CN
      0006C7 30 E5 FB         [24] 2895 	jnb	acc.5,00101$
                           0006CA  2896 	C$Lab6.c$250$1$147 ==.
                                   2897 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:250: return ADC1; // Return digital value in ADC1 register
      0006CA 85 9C 82         [24] 2898 	mov	dpl,_ADC1
                           0006CD  2899 	C$Lab6.c$251$1$147 ==.
                           0006CD  2900 	XG$read_AD_input$0$0 ==.
      0006CD 22               [24] 2901 	ret
                                   2902 ;------------------------------------------------------------
                                   2903 ;Allocation info for local variables in function 'Hand_Check'
                                   2904 ;------------------------------------------------------------
                                   2905 ;temp_int                  Allocated to registers r6 r7 
                                   2906 ;------------------------------------------------------------
                           0006CE  2907 	G$Hand_Check$0$0 ==.
                           0006CE  2908 	C$Lab6.c$275$1$147 ==.
                                   2909 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:275: char Hand_Check(void)
                                   2910 ;	-----------------------------------------
                                   2911 ;	 function Hand_Check
                                   2912 ;	-----------------------------------------
      0006CE                       2913 _Hand_Check:
                           0006CE  2914 	C$Lab6.c$277$1$149 ==.
                                   2915 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:277: int temp_int = read_ranger();
      0006CE 12r07rC0         [24] 2916 	lcall	_read_ranger
      0006D1 AE 82            [24] 2917 	mov	r6,dpl
      0006D3 AF 83            [24] 2918 	mov	r7,dph
                           0006D5  2919 	C$Lab6.c$278$1$149 ==.
                                   2920 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:278: if(temp_int < 90)
      0006D5 C3               [12] 2921 	clr	c
      0006D6 EE               [12] 2922 	mov	a,r6
      0006D7 94 5A            [12] 2923 	subb	a,#0x5A
      0006D9 EF               [12] 2924 	mov	a,r7
      0006DA 64 80            [12] 2925 	xrl	a,#0x80
      0006DC 94 80            [12] 2926 	subb	a,#0x80
      0006DE 50 05            [24] 2927 	jnc	00102$
                           0006E0  2928 	C$Lab6.c$280$2$150 ==.
                                   2929 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:280: return 1;
      0006E0 75 82 01         [24] 2930 	mov	dpl,#0x01
      0006E3 80 03            [24] 2931 	sjmp	00104$
      0006E5                       2932 00102$:
                           0006E5  2933 	C$Lab6.c$282$1$149 ==.
                                   2934 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:282: else  return 0;
      0006E5 75 82 00         [24] 2935 	mov	dpl,#0x00
      0006E8                       2936 00104$:
                           0006E8  2937 	C$Lab6.c$283$1$149 ==.
                           0006E8  2938 	XG$Hand_Check$0$0 ==.
      0006E8 22               [24] 2939 	ret
                                   2940 ;------------------------------------------------------------
                                   2941 ;Allocation info for local variables in function 'Pick_Heading'
                                   2942 ;------------------------------------------------------------
                                   2943 ;input                     Allocated to registers r7 
                                   2944 ;------------------------------------------------------------
                           0006E9  2945 	G$Pick_Heading$0$0 ==.
                           0006E9  2946 	C$Lab6.c$287$1$149 ==.
                                   2947 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:287: void Pick_Heading(void)
                                   2948 ;	-----------------------------------------
                                   2949 ;	 function Pick_Heading
                                   2950 ;	-----------------------------------------
      0006E9                       2951 _Pick_Heading:
                           0006E9  2952 	C$Lab6.c$290$1$152 ==.
                                   2953 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:290: printf("\rPlease select a desired heading.\n");
      0006E9 74rC1            [12] 2954 	mov	a,#___str_8
      0006EB C0 E0            [24] 2955 	push	acc
      0006ED 74s00            [12] 2956 	mov	a,#(___str_8 >> 8)
      0006EF C0 E0            [24] 2957 	push	acc
      0006F1 74 80            [12] 2958 	mov	a,#0x80
      0006F3 C0 E0            [24] 2959 	push	acc
      0006F5 12r00r00         [24] 2960 	lcall	_printf
      0006F8 15 81            [12] 2961 	dec	sp
      0006FA 15 81            [12] 2962 	dec	sp
      0006FC 15 81            [12] 2963 	dec	sp
                           0006FE  2964 	C$Lab6.c$291$1$152 ==.
                                   2965 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:291: printf("\r'u' will increment by 5 degrees. 'd' will decrement by 5 degrees.\n");
      0006FE 74rE4            [12] 2966 	mov	a,#___str_9
      000700 C0 E0            [24] 2967 	push	acc
      000702 74s00            [12] 2968 	mov	a,#(___str_9 >> 8)
      000704 C0 E0            [24] 2969 	push	acc
      000706 74 80            [12] 2970 	mov	a,#0x80
      000708 C0 E0            [24] 2971 	push	acc
      00070A 12r00r00         [24] 2972 	lcall	_printf
      00070D 15 81            [12] 2973 	dec	sp
      00070F 15 81            [12] 2974 	dec	sp
      000711 15 81            [12] 2975 	dec	sp
                           000713  2976 	C$Lab6.c$292$1$152 ==.
                                   2977 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:292: printf("\r'f' when finished\n");
      000713 74r28            [12] 2978 	mov	a,#___str_10
      000715 C0 E0            [24] 2979 	push	acc
      000717 74s01            [12] 2980 	mov	a,#(___str_10 >> 8)
      000719 C0 E0            [24] 2981 	push	acc
      00071B 74 80            [12] 2982 	mov	a,#0x80
      00071D C0 E0            [24] 2983 	push	acc
      00071F 12r00r00         [24] 2984 	lcall	_printf
      000722 15 81            [12] 2985 	dec	sp
      000724 15 81            [12] 2986 	dec	sp
      000726 15 81            [12] 2987 	dec	sp
                           000728  2988 	C$Lab6.c$293$2$153 ==.
                                   2989 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:293: while(1)
      000728                       2990 00112$:
                           000728  2991 	C$Lab6.c$295$2$153 ==.
                                   2992 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:295: input = getchar();
      000728 12r00r4D         [24] 2993 	lcall	_getchar
      00072B AF 82            [24] 2994 	mov	r7,dpl
                           00072D  2995 	C$Lab6.c$296$2$153 ==.
                                   2996 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:296: if(input == 'u') desired_heading += 50;
      00072D BF 75 0B         [24] 2997 	cjne	r7,#0x75,00102$
      000730 74 32            [12] 2998 	mov	a,#0x32
      000732 25*2D            [12] 2999 	add	a,_desired_heading
      000734 F5*2D            [12] 3000 	mov	_desired_heading,a
      000736 E4               [12] 3001 	clr	a
      000737 35*2E            [12] 3002 	addc	a,(_desired_heading + 1)
      000739 F5*2E            [12] 3003 	mov	(_desired_heading + 1),a
      00073B                       3004 00102$:
                           00073B  3005 	C$Lab6.c$297$2$153 ==.
                                   3006 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:297: if(input == 'd') desired_heading -= 50;
      00073B BF 64 0C         [24] 3007 	cjne	r7,#0x64,00104$
      00073E E5*2D            [12] 3008 	mov	a,_desired_heading
      000740 24 CE            [12] 3009 	add	a,#0xCE
      000742 F5*2D            [12] 3010 	mov	_desired_heading,a
      000744 E5*2E            [12] 3011 	mov	a,(_desired_heading + 1)
      000746 34 FF            [12] 3012 	addc	a,#0xFF
      000748 F5*2E            [12] 3013 	mov	(_desired_heading + 1),a
      00074A                       3014 00104$:
                           00074A  3015 	C$Lab6.c$298$2$153 ==.
                                   3016 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:298: if(input == 'f') return;
      00074A BF 66 02         [24] 3017 	cjne	r7,#0x66,00106$
      00074D 80 4A            [24] 3018 	sjmp	00114$
      00074F                       3019 00106$:
                           00074F  3020 	C$Lab6.c$299$2$153 ==.
                                   3021 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:299: if(desired_heading >= 3600) desired_heading = 3600;
      00074F C3               [12] 3022 	clr	c
      000750 E5*2D            [12] 3023 	mov	a,_desired_heading
      000752 94 10            [12] 3024 	subb	a,#0x10
      000754 E5*2E            [12] 3025 	mov	a,(_desired_heading + 1)
      000756 94 0E            [12] 3026 	subb	a,#0x0E
      000758 40 06            [24] 3027 	jc	00108$
      00075A 75*2D 10         [24] 3028 	mov	_desired_heading,#0x10
      00075D 75*2E 0E         [24] 3029 	mov	(_desired_heading + 1),#0x0E
      000760                       3030 00108$:
                           000760  3031 	C$Lab6.c$300$2$153 ==.
                                   3032 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:300: if(desired_heading <= 0) desired_heading = 0;
      000760 E5*2D            [12] 3033 	mov	a,_desired_heading
      000762 45*2E            [12] 3034 	orl	a,(_desired_heading + 1)
      000764 70 04            [24] 3035 	jnz	00110$
      000766 F5*2D            [12] 3036 	mov	_desired_heading,a
      000768 F5*2E            [12] 3037 	mov	(_desired_heading + 1),a
      00076A                       3038 00110$:
                           00076A  3039 	C$Lab6.c$301$1$152 ==.
                                   3040 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:301: printf("\rDesired heading: %u\n", (desired_heading)/10);
      00076A 75*00 0A         [24] 3041 	mov	__divuint_PARM_2,#0x0A
      00076D 75*01 00         [24] 3042 	mov	(__divuint_PARM_2 + 1),#0x00
      000770 85*2D 82         [24] 3043 	mov	dpl,_desired_heading
      000773 85*2E 83         [24] 3044 	mov	dph,(_desired_heading + 1)
      000776 12r00r00         [24] 3045 	lcall	__divuint
      000779 AE 82            [24] 3046 	mov	r6,dpl
      00077B AF 83            [24] 3047 	mov	r7,dph
      00077D C0 06            [24] 3048 	push	ar6
      00077F C0 07            [24] 3049 	push	ar7
      000781 74r3C            [12] 3050 	mov	a,#___str_11
      000783 C0 E0            [24] 3051 	push	acc
      000785 74s01            [12] 3052 	mov	a,#(___str_11 >> 8)
      000787 C0 E0            [24] 3053 	push	acc
      000789 74 80            [12] 3054 	mov	a,#0x80
      00078B C0 E0            [24] 3055 	push	acc
      00078D 12r00r00         [24] 3056 	lcall	_printf
      000790 E5 81            [12] 3057 	mov	a,sp
      000792 24 FB            [12] 3058 	add	a,#0xfb
      000794 F5 81            [12] 3059 	mov	sp,a
      000796 02r07r28         [24] 3060 	ljmp	00112$
      000799                       3061 00114$:
                           000799  3062 	C$Lab6.c$303$1$152 ==.
                           000799  3063 	XG$Pick_Heading$0$0 ==.
      000799 22               [24] 3064 	ret
                                   3065 ;------------------------------------------------------------
                                   3066 ;Allocation info for local variables in function 'read_compass'
                                   3067 ;------------------------------------------------------------
                                   3068 ;addr                      Allocated to registers 
                                   3069 ;Data                      Allocated with name '_read_compass_Data_1_155'
                                   3070 ;read_heading              Allocated to registers 
                                   3071 ;------------------------------------------------------------
                           00079A  3072 	G$read_compass$0$0 ==.
                           00079A  3073 	C$Lab6.c$307$1$152 ==.
                                   3074 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:307: int read_compass(void)
                                   3075 ;	-----------------------------------------
                                   3076 ;	 function read_compass
                                   3077 ;	-----------------------------------------
      00079A                       3078 _read_compass:
                           00079A  3079 	C$Lab6.c$312$1$155 ==.
                                   3080 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:312: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      00079A 75*0Br36         [24] 3081 	mov	_i2c_read_data_PARM_3,#_read_compass_Data_1_155
      00079D 75*0C 00         [24] 3082 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007A0 75*0D 40         [24] 3083 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007A3 75*0A 02         [24] 3084 	mov	_i2c_read_data_PARM_2,#0x02
      0007A6 75*0E 02         [24] 3085 	mov	_i2c_read_data_PARM_4,#0x02
      0007A9 75 82 C0         [24] 3086 	mov	dpl,#0xC0
      0007AC 12r03rE8         [24] 3087 	lcall	_i2c_read_data
                           0007AF  3088 	C$Lab6.c$313$1$155 ==.
                                   3089 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:313: read_heading =((Data[0] << 8) | Data[1]); //combine the two values
      0007AF AF*36            [24] 3090 	mov	r7,_read_compass_Data_1_155
      0007B1 7E 00            [12] 3091 	mov	r6,#0x00
      0007B3 AC*37            [24] 3092 	mov	r4,(_read_compass_Data_1_155 + 0x0001)
      0007B5 7D 00            [12] 3093 	mov	r5,#0x00
      0007B7 EC               [12] 3094 	mov	a,r4
      0007B8 4E               [12] 3095 	orl	a,r6
      0007B9 F5 82            [12] 3096 	mov	dpl,a
      0007BB ED               [12] 3097 	mov	a,r5
      0007BC 4F               [12] 3098 	orl	a,r7
      0007BD F5 83            [12] 3099 	mov	dph,a
                           0007BF  3100 	C$Lab6.c$314$1$155 ==.
                                   3101 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:314: return read_heading; // the heading returned in degrees between 0 and 3599
                           0007BF  3102 	C$Lab6.c$315$1$155 ==.
                           0007BF  3103 	XG$read_compass$0$0 ==.
      0007BF 22               [24] 3104 	ret
                                   3105 ;------------------------------------------------------------
                                   3106 ;Allocation info for local variables in function 'read_ranger'
                                   3107 ;------------------------------------------------------------
                                   3108 ;addr                      Allocated to registers 
                                   3109 ;st_range                  Allocated to registers r6 r7 
                                   3110 ;------------------------------------------------------------
                           0007C0  3111 	G$read_ranger$0$0 ==.
                           0007C0  3112 	C$Lab6.c$319$1$155 ==.
                                   3113 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:319: int read_ranger(void)
                                   3114 ;	-----------------------------------------
                                   3115 ;	 function read_ranger
                                   3116 ;	-----------------------------------------
      0007C0                       3117 _read_ranger:
                           0007C0  3118 	C$Lab6.c$323$1$157 ==.
                                   3119 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:323: i2c_read_data(addr, 2, Data, 2); // read two byte, starting at reg 2
      0007C0 75*0Br24         [24] 3120 	mov	_i2c_read_data_PARM_3,#_Data
      0007C3 75*0C 00         [24] 3121 	mov	(_i2c_read_data_PARM_3 + 1),#0x00
      0007C6 75*0D 40         [24] 3122 	mov	(_i2c_read_data_PARM_3 + 2),#0x40
      0007C9 75*0A 02         [24] 3123 	mov	_i2c_read_data_PARM_2,#0x02
      0007CC 75*0E 02         [24] 3124 	mov	_i2c_read_data_PARM_4,#0x02
      0007CF 75 82 E0         [24] 3125 	mov	dpl,#0xE0
      0007D2 12r03rE8         [24] 3126 	lcall	_i2c_read_data
                           0007D5  3127 	C$Lab6.c$324$1$157 ==.
                                   3128 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:324: st_range =((Data[0] << 8) | Data[1]); //combine the two values
      0007D5 AF*24            [24] 3129 	mov	r7,_Data
      0007D7 7E 00            [12] 3130 	mov	r6,#0x00
      0007D9 AC*25            [24] 3131 	mov	r4,(_Data + 0x0001)
      0007DB 7D 00            [12] 3132 	mov	r5,#0x00
      0007DD EC               [12] 3133 	mov	a,r4
      0007DE 42 06            [12] 3134 	orl	ar6,a
      0007E0 ED               [12] 3135 	mov	a,r5
      0007E1 42 07            [12] 3136 	orl	ar7,a
                           0007E3  3137 	C$Lab6.c$326$1$157 ==.
                                   3138 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:326: Data[0] = 0x51 ; // write 0x51 to reg 0 of the ranger:
      0007E3 75*24 51         [24] 3139 	mov	_Data,#0x51
                           0007E6  3140 	C$Lab6.c$327$1$157 ==.
                                   3141 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:327: i2c_write_data(addr, 0, Data, 1) ; // write one byte of data to reg 0 at addr
      0007E6 75*06r24         [24] 3142 	mov	_i2c_write_data_PARM_3,#_Data
      0007E9 75*07 00         [24] 3143 	mov	(_i2c_write_data_PARM_3 + 1),#0x00
      0007EC 75*08 40         [24] 3144 	mov	(_i2c_write_data_PARM_3 + 2),#0x40
      0007EF 75*05 00         [24] 3145 	mov	_i2c_write_data_PARM_2,#0x00
      0007F2 75*09 01         [24] 3146 	mov	_i2c_write_data_PARM_4,#0x01
      0007F5 75 82 E0         [24] 3147 	mov	dpl,#0xE0
      0007F8 C0 07            [24] 3148 	push	ar7
      0007FA C0 06            [24] 3149 	push	ar6
      0007FC 12r03r72         [24] 3150 	lcall	_i2c_write_data
      0007FF D0 06            [24] 3151 	pop	ar6
      000801 D0 07            [24] 3152 	pop	ar7
                           000803  3153 	C$Lab6.c$328$1$157 ==.
                                   3154 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:328: return st_range;
      000803 8E 82            [24] 3155 	mov	dpl,r6
      000805 8F 83            [24] 3156 	mov	dph,r7
                           000807  3157 	C$Lab6.c$329$1$157 ==.
                           000807  3158 	XG$read_ranger$0$0 ==.
      000807 22               [24] 3159 	ret
                                   3160 ;------------------------------------------------------------
                                   3161 ;Allocation info for local variables in function 'set_PW'
                                   3162 ;------------------------------------------------------------
                                   3163 ;temp_motorpw              Allocated to registers r4 r5 r6 r7 
                                   3164 ;sloc0                     Allocated with name '_set_PW_sloc0_1_0'
                                   3165 ;------------------------------------------------------------
                           000808  3166 	G$set_PW$0$0 ==.
                           000808  3167 	C$Lab6.c$333$1$157 ==.
                                   3168 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:333: void set_PW(void)
                                   3169 ;	-----------------------------------------
                                   3170 ;	 function set_PW
                                   3171 ;	-----------------------------------------
      000808                       3172 _set_PW:
                           000808  3173 	C$Lab6.c$338$1$159 ==.
                                   3174 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:338: Error = (desired_heading) - heading;	//Calculate the error
      000808 E5*2D            [12] 3175 	mov	a,_desired_heading
      00080A C3               [12] 3176 	clr	c
      00080B 95*29            [12] 3177 	subb	a,_heading
      00080D F5*14            [12] 3178 	mov	_Error,a
      00080F E5*2E            [12] 3179 	mov	a,(_desired_heading + 1)
      000811 95*2A            [12] 3180 	subb	a,(_heading + 1)
      000813 F5*15            [12] 3181 	mov	(_Error + 1),a
                           000815  3182 	C$Lab6.c$339$1$159 ==.
                                   3183 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:339: if(Error < -1800)  Error = Error + 3600;  //Adjust error so that we turn efficiently
      000815 C3               [12] 3184 	clr	c
      000816 E5*14            [12] 3185 	mov	a,_Error
      000818 94 F8            [12] 3186 	subb	a,#0xF8
      00081A E5*15            [12] 3187 	mov	a,(_Error + 1)
      00081C 64 80            [12] 3188 	xrl	a,#0x80
      00081E 94 78            [12] 3189 	subb	a,#0x78
      000820 50 0C            [24] 3190 	jnc	00102$
      000822 74 10            [12] 3191 	mov	a,#0x10
      000824 25*14            [12] 3192 	add	a,_Error
      000826 F5*14            [12] 3193 	mov	_Error,a
      000828 74 0E            [12] 3194 	mov	a,#0x0E
      00082A 35*15            [12] 3195 	addc	a,(_Error + 1)
      00082C F5*15            [12] 3196 	mov	(_Error + 1),a
      00082E                       3197 00102$:
                           00082E  3198 	C$Lab6.c$340$1$159 ==.
                                   3199 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:340: if(Error > 1800)   Error = Error - 3600; 
      00082E C3               [12] 3200 	clr	c
      00082F 74 08            [12] 3201 	mov	a,#0x08
      000831 95*14            [12] 3202 	subb	a,_Error
      000833 74 87            [12] 3203 	mov	a,#(0x07 ^ 0x80)
      000835 85*15 F0         [24] 3204 	mov	b,(_Error + 1)
      000838 63 F0 80         [24] 3205 	xrl	b,#0x80
      00083B 95 F0            [12] 3206 	subb	a,b
      00083D 50 0C            [24] 3207 	jnc	00104$
      00083F E5*14            [12] 3208 	mov	a,_Error
      000841 24 F0            [12] 3209 	add	a,#0xF0
      000843 F5*14            [12] 3210 	mov	_Error,a
      000845 E5*15            [12] 3211 	mov	a,(_Error + 1)
      000847 34 F1            [12] 3212 	addc	a,#0xF1
      000849 F5*15            [12] 3213 	mov	(_Error + 1),a
      00084B                       3214 00104$:
                           00084B  3215 	C$Lab6.c$348$1$159 ==.
                                   3216 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:348: temp_motorpw = (long)((heading_kp)*(long)(Error)) + ((long)(heading_kd)*(long)(Error - prev_error));
      00084B AC*14            [24] 3217 	mov	r4,_Error
      00084D E5*15            [12] 3218 	mov	a,(_Error + 1)
      00084F FD               [12] 3219 	mov	r5,a
      000850 33               [12] 3220 	rlc	a
      000851 95 E0            [12] 3221 	subb	a,acc
      000853 FE               [12] 3222 	mov	r6,a
      000854 8C 82            [24] 3223 	mov	dpl,r4
      000856 8D 83            [24] 3224 	mov	dph,r5
      000858 8E F0            [24] 3225 	mov	b,r6
      00085A 12r00r00         [24] 3226 	lcall	___slong2fs
      00085D AC 82            [24] 3227 	mov	r4,dpl
      00085F AD 83            [24] 3228 	mov	r5,dph
      000861 AE F0            [24] 3229 	mov	r6,b
      000863 FF               [12] 3230 	mov	r7,a
      000864 C0 04            [24] 3231 	push	ar4
      000866 C0 05            [24] 3232 	push	ar5
      000868 C0 06            [24] 3233 	push	ar6
      00086A C0 07            [24] 3234 	push	ar7
      00086C 85*2F 82         [24] 3235 	mov	dpl,_heading_kp
      00086F 85*30 83         [24] 3236 	mov	dph,(_heading_kp + 1)
      000872 85*31 F0         [24] 3237 	mov	b,(_heading_kp + 2)
      000875 E5*32            [12] 3238 	mov	a,(_heading_kp + 3)
      000877 12r00r00         [24] 3239 	lcall	___fsmul
      00087A AC 82            [24] 3240 	mov	r4,dpl
      00087C AD 83            [24] 3241 	mov	r5,dph
      00087E AE F0            [24] 3242 	mov	r6,b
      000880 FF               [12] 3243 	mov	r7,a
      000881 E5 81            [12] 3244 	mov	a,sp
      000883 24 FC            [12] 3245 	add	a,#0xfc
      000885 F5 81            [12] 3246 	mov	sp,a
      000887 8C 82            [24] 3247 	mov	dpl,r4
      000889 8D 83            [24] 3248 	mov	dph,r5
      00088B 8E F0            [24] 3249 	mov	b,r6
      00088D EF               [12] 3250 	mov	a,r7
      00088E 12r00r00         [24] 3251 	lcall	___fs2slong
      000891 AC 82            [24] 3252 	mov	r4,dpl
      000893 AD 83            [24] 3253 	mov	r5,dph
      000895 AE F0            [24] 3254 	mov	r6,b
      000897 FF               [12] 3255 	mov	r7,a
      000898 85*33*38         [24] 3256 	mov	_set_PW_sloc0_1_0,_heading_kd
      00089B E4               [12] 3257 	clr	a
      00089C F5*39            [12] 3258 	mov	(_set_PW_sloc0_1_0 + 1),a
      00089E F5*3A            [12] 3259 	mov	(_set_PW_sloc0_1_0 + 2),a
      0008A0 F5*3B            [12] 3260 	mov	(_set_PW_sloc0_1_0 + 3),a
      0008A2 E5*14            [12] 3261 	mov	a,_Error
      0008A4 C3               [12] 3262 	clr	c
      0008A5 95*16            [12] 3263 	subb	a,_prev_error
      0008A7 FA               [12] 3264 	mov	r2,a
      0008A8 E5*15            [12] 3265 	mov	a,(_Error + 1)
      0008AA 95*17            [12] 3266 	subb	a,(_prev_error + 1)
      0008AC 8A*00            [24] 3267 	mov	__mullong_PARM_2,r2
      0008AE F5*01            [12] 3268 	mov	(__mullong_PARM_2 + 1),a
      0008B0 33               [12] 3269 	rlc	a
      0008B1 95 E0            [12] 3270 	subb	a,acc
      0008B3 F5*02            [12] 3271 	mov	(__mullong_PARM_2 + 2),a
      0008B5 F5*03            [12] 3272 	mov	(__mullong_PARM_2 + 3),a
      0008B7 85*38 82         [24] 3273 	mov	dpl,_set_PW_sloc0_1_0
      0008BA 85*39 83         [24] 3274 	mov	dph,(_set_PW_sloc0_1_0 + 1)
      0008BD 85*3A F0         [24] 3275 	mov	b,(_set_PW_sloc0_1_0 + 2)
      0008C0 E5*3B            [12] 3276 	mov	a,(_set_PW_sloc0_1_0 + 3)
      0008C2 C0 07            [24] 3277 	push	ar7
      0008C4 C0 06            [24] 3278 	push	ar6
      0008C6 C0 05            [24] 3279 	push	ar5
      0008C8 C0 04            [24] 3280 	push	ar4
      0008CA 12r00r00         [24] 3281 	lcall	__mullong
      0008CD A8 82            [24] 3282 	mov	r0,dpl
      0008CF A9 83            [24] 3283 	mov	r1,dph
      0008D1 AA F0            [24] 3284 	mov	r2,b
      0008D3 FB               [12] 3285 	mov	r3,a
      0008D4 D0 04            [24] 3286 	pop	ar4
      0008D6 D0 05            [24] 3287 	pop	ar5
      0008D8 D0 06            [24] 3288 	pop	ar6
      0008DA D0 07            [24] 3289 	pop	ar7
      0008DC E8               [12] 3290 	mov	a,r0
      0008DD 2C               [12] 3291 	add	a,r4
      0008DE FC               [12] 3292 	mov	r4,a
      0008DF E9               [12] 3293 	mov	a,r1
      0008E0 3D               [12] 3294 	addc	a,r5
      0008E1 FD               [12] 3295 	mov	r5,a
      0008E2 EA               [12] 3296 	mov	a,r2
      0008E3 3E               [12] 3297 	addc	a,r6
      0008E4 FE               [12] 3298 	mov	r6,a
      0008E5 EB               [12] 3299 	mov	a,r3
      0008E6 3F               [12] 3300 	addc	a,r7
      0008E7 FF               [12] 3301 	mov	r7,a
                           0008E8  3302 	C$Lab6.c$349$1$159 ==.
                                   3303 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:349: if(temp_motorpw > 800) temp_motorpw = 800;
      0008E8 C3               [12] 3304 	clr	c
      0008E9 74 20            [12] 3305 	mov	a,#0x20
      0008EB 9C               [12] 3306 	subb	a,r4
      0008EC 74 03            [12] 3307 	mov	a,#0x03
      0008EE 9D               [12] 3308 	subb	a,r5
      0008EF E4               [12] 3309 	clr	a
      0008F0 9E               [12] 3310 	subb	a,r6
      0008F1 74 80            [12] 3311 	mov	a,#(0x00 ^ 0x80)
      0008F3 8F F0            [24] 3312 	mov	b,r7
      0008F5 63 F0 80         [24] 3313 	xrl	b,#0x80
      0008F8 95 F0            [12] 3314 	subb	a,b
      0008FA 50 08            [24] 3315 	jnc	00106$
      0008FC 7C 20            [12] 3316 	mov	r4,#0x20
      0008FE 7D 03            [12] 3317 	mov	r5,#0x03
      000900 7E 00            [12] 3318 	mov	r6,#0x00
      000902 7F 00            [12] 3319 	mov	r7,#0x00
      000904                       3320 00106$:
                           000904  3321 	C$Lab6.c$350$1$159 ==.
                                   3322 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:350: if(temp_motorpw < -800) temp_motorpw = -800;
      000904 C3               [12] 3323 	clr	c
      000905 EC               [12] 3324 	mov	a,r4
      000906 94 E0            [12] 3325 	subb	a,#0xE0
      000908 ED               [12] 3326 	mov	a,r5
      000909 94 FC            [12] 3327 	subb	a,#0xFC
      00090B EE               [12] 3328 	mov	a,r6
      00090C 94 FF            [12] 3329 	subb	a,#0xFF
      00090E EF               [12] 3330 	mov	a,r7
      00090F 64 80            [12] 3331 	xrl	a,#0x80
      000911 94 7F            [12] 3332 	subb	a,#0x7f
      000913 50 08            [24] 3333 	jnc	00108$
      000915 7C E0            [12] 3334 	mov	r4,#0xE0
      000917 7D FC            [12] 3335 	mov	r5,#0xFC
      000919 7E FF            [12] 3336 	mov	r6,#0xFF
      00091B 7F FF            [12] 3337 	mov	r7,#0xFF
      00091D                       3338 00108$:
                           00091D  3339 	C$Lab6.c$351$1$159 ==.
                                   3340 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:351: print_error = prev_error;
      00091D 85*16*34         [24] 3341 	mov	_print_error,_prev_error
      000920 85*17*35         [24] 3342 	mov	(_print_error + 1),(_prev_error + 1)
                           000923  3343 	C$Lab6.c$352$1$159 ==.
                                   3344 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:352: prev_error = Error;
      000923 85*14*16         [24] 3345 	mov	_prev_error,_Error
      000926 85*15*17         [24] 3346 	mov	(_prev_error + 1),(_Error + 1)
                           000929  3347 	C$Lab6.c$353$1$159 ==.
                                   3348 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:353: left_pw = PW_CENTER - (int)temp_motorpw;
      000929 8C 02            [24] 3349 	mov	ar2,r4
      00092B 8D 03            [24] 3350 	mov	ar3,r5
      00092D 74 CD            [12] 3351 	mov	a,#0xCD
      00092F C3               [12] 3352 	clr	c
      000930 9A               [12] 3353 	subb	a,r2
      000931 F5*10            [12] 3354 	mov	_left_pw,a
      000933 74 0A            [12] 3355 	mov	a,#0x0A
      000935 9B               [12] 3356 	subb	a,r3
      000936 F5*11            [12] 3357 	mov	(_left_pw + 1),a
                           000938  3358 	C$Lab6.c$354$1$159 ==.
                                   3359 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:354: right_pw = PW_CENTER + (int)temp_motorpw;
      000938 74 CD            [12] 3360 	mov	a,#0xCD
      00093A 2A               [12] 3361 	add	a,r2
      00093B F5*12            [12] 3362 	mov	_right_pw,a
      00093D 74 0A            [12] 3363 	mov	a,#0x0A
      00093F 3B               [12] 3364 	addc	a,r3
      000940 F5*13            [12] 3365 	mov	(_right_pw + 1),a
                           000942  3366 	C$Lab6.c$356$1$159 ==.
                                   3367 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:356: if(left_pw < 2200) left_pw = 2200;  // min
      000942 C3               [12] 3368 	clr	c
      000943 E5*10            [12] 3369 	mov	a,_left_pw
      000945 94 98            [12] 3370 	subb	a,#0x98
      000947 E5*11            [12] 3371 	mov	a,(_left_pw + 1)
      000949 64 80            [12] 3372 	xrl	a,#0x80
      00094B 94 88            [12] 3373 	subb	a,#0x88
      00094D 50 06            [24] 3374 	jnc	00110$
      00094F 75*10 98         [24] 3375 	mov	_left_pw,#0x98
      000952 75*11 08         [24] 3376 	mov	(_left_pw + 1),#0x08
      000955                       3377 00110$:
                           000955  3378 	C$Lab6.c$357$1$159 ==.
                                   3379 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:357: if(left_pw > 3300) left_pw = 3300;  // max
      000955 C3               [12] 3380 	clr	c
      000956 74 E4            [12] 3381 	mov	a,#0xE4
      000958 95*10            [12] 3382 	subb	a,_left_pw
      00095A 74 8C            [12] 3383 	mov	a,#(0x0C ^ 0x80)
      00095C 85*11 F0         [24] 3384 	mov	b,(_left_pw + 1)
      00095F 63 F0 80         [24] 3385 	xrl	b,#0x80
      000962 95 F0            [12] 3386 	subb	a,b
      000964 50 06            [24] 3387 	jnc	00112$
      000966 75*10 E4         [24] 3388 	mov	_left_pw,#0xE4
      000969 75*11 0C         [24] 3389 	mov	(_left_pw + 1),#0x0C
      00096C                       3390 00112$:
                           00096C  3391 	C$Lab6.c$358$1$159 ==.
                                   3392 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:358: if(right_pw < 2200) right_pw = 2200;
      00096C C3               [12] 3393 	clr	c
      00096D E5*12            [12] 3394 	mov	a,_right_pw
      00096F 94 98            [12] 3395 	subb	a,#0x98
      000971 E5*13            [12] 3396 	mov	a,(_right_pw + 1)
      000973 64 80            [12] 3397 	xrl	a,#0x80
      000975 94 88            [12] 3398 	subb	a,#0x88
      000977 50 06            [24] 3399 	jnc	00114$
      000979 75*12 98         [24] 3400 	mov	_right_pw,#0x98
      00097C 75*13 08         [24] 3401 	mov	(_right_pw + 1),#0x08
      00097F                       3402 00114$:
                           00097F  3403 	C$Lab6.c$359$1$159 ==.
                                   3404 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:359: if(right_pw > 3300) right_pw = 3300;
      00097F C3               [12] 3405 	clr	c
      000980 74 E4            [12] 3406 	mov	a,#0xE4
      000982 95*12            [12] 3407 	subb	a,_right_pw
      000984 74 8C            [12] 3408 	mov	a,#(0x0C ^ 0x80)
      000986 85*13 F0         [24] 3409 	mov	b,(_right_pw + 1)
      000989 63 F0 80         [24] 3410 	xrl	b,#0x80
      00098C 95 F0            [12] 3411 	subb	a,b
      00098E 50 06            [24] 3412 	jnc	00116$
      000990 75*12 E4         [24] 3413 	mov	_right_pw,#0xE4
      000993 75*13 0C         [24] 3414 	mov	(_right_pw + 1),#0x0C
      000996                       3415 00116$:
                           000996  3416 	C$Lab6.c$361$1$159 ==.
                                   3417 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:361: PCA0CP0 = 0xFFFF - (PW_CENTER + (int)temp_motorpw); // Change pulse width
      000996 74 CD            [12] 3418 	mov	a,#0xCD
      000998 2C               [12] 3419 	add	a,r4
      000999 FC               [12] 3420 	mov	r4,a
      00099A 74 0A            [12] 3421 	mov	a,#0x0A
      00099C 3D               [12] 3422 	addc	a,r5
      00099D FD               [12] 3423 	mov	r5,a
      00099E 74 FF            [12] 3424 	mov	a,#0xFF
      0009A0 C3               [12] 3425 	clr	c
      0009A1 9C               [12] 3426 	subb	a,r4
      0009A2 F5 EA            [12] 3427 	mov	((_PCA0CP0 >> 0) & 0xFF),a
      0009A4 74 FF            [12] 3428 	mov	a,#0xFF
      0009A6 9D               [12] 3429 	subb	a,r5
      0009A7 F5 FA            [12] 3430 	mov	((_PCA0CP0 >> 8) & 0xFF),a
                           0009A9  3431 	C$Lab6.c$362$1$159 ==.
                                   3432 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:362: PCA0CP2 = 0xFFFF - right_pw;
      0009A9 AE*12            [24] 3433 	mov	r6,_right_pw
      0009AB AF*13            [24] 3434 	mov	r7,(_right_pw + 1)
      0009AD 74 FF            [12] 3435 	mov	a,#0xFF
      0009AF C3               [12] 3436 	clr	c
      0009B0 9E               [12] 3437 	subb	a,r6
      0009B1 F5 EC            [12] 3438 	mov	((_PCA0CP2 >> 0) & 0xFF),a
      0009B3 74 FF            [12] 3439 	mov	a,#0xFF
      0009B5 9F               [12] 3440 	subb	a,r7
      0009B6 F5 FC            [12] 3441 	mov	((_PCA0CP2 >> 8) & 0xFF),a
                           0009B8  3442 	C$Lab6.c$363$1$159 ==.
                                   3443 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:363: PCA0CP3 = 0xFFFF - left_pw;
      0009B8 AE*10            [24] 3444 	mov	r6,_left_pw
      0009BA AF*11            [24] 3445 	mov	r7,(_left_pw + 1)
      0009BC 74 FF            [12] 3446 	mov	a,#0xFF
      0009BE C3               [12] 3447 	clr	c
      0009BF 9E               [12] 3448 	subb	a,r6
      0009C0 F5 ED            [12] 3449 	mov	((_PCA0CP3 >> 0) & 0xFF),a
      0009C2 74 FF            [12] 3450 	mov	a,#0xFF
      0009C4 9F               [12] 3451 	subb	a,r7
      0009C5 F5 FD            [12] 3452 	mov	((_PCA0CP3 >> 8) & 0xFF),a
                           0009C7  3453 	C$Lab6.c$366$1$159 ==.
                           0009C7  3454 	XG$set_PW$0$0 ==.
      0009C7 22               [24] 3455 	ret
                                   3456 ;------------------------------------------------------------
                                   3457 ;Allocation info for local variables in function 'Set_Desired_Heading'
                                   3458 ;------------------------------------------------------------
                           0009C8  3459 	G$Set_Desired_Heading$0$0 ==.
                           0009C8  3460 	C$Lab6.c$369$1$159 ==.
                                   3461 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:369: void Set_Desired_Heading(void)
                                   3462 ;	-----------------------------------------
                                   3463 ;	 function Set_Desired_Heading
                                   3464 ;	-----------------------------------------
      0009C8                       3465 _Set_Desired_Heading:
                           0009C8  3466 	C$Lab6.c$372$1$159 ==.
                                   3467 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:372: }
                           0009C8  3468 	C$Lab6.c$372$1$159 ==.
                           0009C8  3469 	XG$Set_Desired_Heading$0$0 ==.
      0009C8 22               [24] 3470 	ret
                                   3471 ;------------------------------------------------------------
                                   3472 ;Allocation info for local variables in function 'Pick_Heading_kp'
                                   3473 ;------------------------------------------------------------
                                   3474 ;input                     Allocated to registers r7 
                                   3475 ;------------------------------------------------------------
                           0009C9  3476 	G$Pick_Heading_kp$0$0 ==.
                           0009C9  3477 	C$Lab6.c$377$1$159 ==.
                                   3478 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:377: void Pick_Heading_kp(void)
                                   3479 ;	-----------------------------------------
                                   3480 ;	 function Pick_Heading_kp
                                   3481 ;	-----------------------------------------
      0009C9                       3482 _Pick_Heading_kp:
                           0009C9  3483 	C$Lab6.c$380$1$163 ==.
                                   3484 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:380: printf("\rPlease select a desired heading kp.\n");
      0009C9 74r52            [12] 3485 	mov	a,#___str_12
      0009CB C0 E0            [24] 3486 	push	acc
      0009CD 74s01            [12] 3487 	mov	a,#(___str_12 >> 8)
      0009CF C0 E0            [24] 3488 	push	acc
      0009D1 74 80            [12] 3489 	mov	a,#0x80
      0009D3 C0 E0            [24] 3490 	push	acc
      0009D5 12r00r00         [24] 3491 	lcall	_printf
      0009D8 15 81            [12] 3492 	dec	sp
      0009DA 15 81            [12] 3493 	dec	sp
      0009DC 15 81            [12] 3494 	dec	sp
                           0009DE  3495 	C$Lab6.c$381$1$163 ==.
                                   3496 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:381: printf("\r'u' will increment by 0.1. 'd' will decrement by 0.1.\n");
      0009DE 74r78            [12] 3497 	mov	a,#___str_13
      0009E0 C0 E0            [24] 3498 	push	acc
      0009E2 74s01            [12] 3499 	mov	a,#(___str_13 >> 8)
      0009E4 C0 E0            [24] 3500 	push	acc
      0009E6 74 80            [12] 3501 	mov	a,#0x80
      0009E8 C0 E0            [24] 3502 	push	acc
      0009EA 12r00r00         [24] 3503 	lcall	_printf
      0009ED 15 81            [12] 3504 	dec	sp
      0009EF 15 81            [12] 3505 	dec	sp
      0009F1 15 81            [12] 3506 	dec	sp
                           0009F3  3507 	C$Lab6.c$382$1$163 ==.
                                   3508 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:382: printf("\r'f' when finished\n");
      0009F3 74r28            [12] 3509 	mov	a,#___str_10
      0009F5 C0 E0            [24] 3510 	push	acc
      0009F7 74s01            [12] 3511 	mov	a,#(___str_10 >> 8)
      0009F9 C0 E0            [24] 3512 	push	acc
      0009FB 74 80            [12] 3513 	mov	a,#0x80
      0009FD C0 E0            [24] 3514 	push	acc
      0009FF 12r00r00         [24] 3515 	lcall	_printf
      000A02 15 81            [12] 3516 	dec	sp
      000A04 15 81            [12] 3517 	dec	sp
      000A06 15 81            [12] 3518 	dec	sp
                           000A08  3519 	C$Lab6.c$383$1$163 ==.
                                   3520 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:383: while(1)
      000A08                       3521 00112$:
                           000A08  3522 	C$Lab6.c$385$2$164 ==.
                                   3523 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:385: input = getchar();
      000A08 12r00r4D         [24] 3524 	lcall	_getchar
      000A0B AF 82            [24] 3525 	mov	r7,dpl
                           000A0D  3526 	C$Lab6.c$386$2$164 ==.
                                   3527 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:386: if(input == 'u') heading_kp += 0.1;
      000A0D BF 75 30         [24] 3528 	cjne	r7,#0x75,00102$
      000A10 C0 07            [24] 3529 	push	ar7
      000A12 74 CD            [12] 3530 	mov	a,#0xCD
      000A14 C0 E0            [24] 3531 	push	acc
      000A16 14               [12] 3532 	dec	a
      000A17 C0 E0            [24] 3533 	push	acc
      000A19 C0 E0            [24] 3534 	push	acc
      000A1B 74 3D            [12] 3535 	mov	a,#0x3D
      000A1D C0 E0            [24] 3536 	push	acc
      000A1F 85*2F 82         [24] 3537 	mov	dpl,_heading_kp
      000A22 85*30 83         [24] 3538 	mov	dph,(_heading_kp + 1)
      000A25 85*31 F0         [24] 3539 	mov	b,(_heading_kp + 2)
      000A28 E5*32            [12] 3540 	mov	a,(_heading_kp + 3)
      000A2A 12r00r00         [24] 3541 	lcall	___fsadd
      000A2D 85 82*2F         [24] 3542 	mov	_heading_kp,dpl
      000A30 85 83*30         [24] 3543 	mov	(_heading_kp + 1),dph
      000A33 85 F0*31         [24] 3544 	mov	(_heading_kp + 2),b
      000A36 F5*32            [12] 3545 	mov	(_heading_kp + 3),a
      000A38 E5 81            [12] 3546 	mov	a,sp
      000A3A 24 FC            [12] 3547 	add	a,#0xfc
      000A3C F5 81            [12] 3548 	mov	sp,a
      000A3E D0 07            [24] 3549 	pop	ar7
      000A40                       3550 00102$:
                           000A40  3551 	C$Lab6.c$387$2$164 ==.
                                   3552 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:387: if(input == 'd') heading_kp -= 0.1;
      000A40 BF 64 30         [24] 3553 	cjne	r7,#0x64,00104$
      000A43 C0 07            [24] 3554 	push	ar7
      000A45 74 CD            [12] 3555 	mov	a,#0xCD
      000A47 C0 E0            [24] 3556 	push	acc
      000A49 14               [12] 3557 	dec	a
      000A4A C0 E0            [24] 3558 	push	acc
      000A4C C0 E0            [24] 3559 	push	acc
      000A4E 74 3D            [12] 3560 	mov	a,#0x3D
      000A50 C0 E0            [24] 3561 	push	acc
      000A52 85*2F 82         [24] 3562 	mov	dpl,_heading_kp
      000A55 85*30 83         [24] 3563 	mov	dph,(_heading_kp + 1)
      000A58 85*31 F0         [24] 3564 	mov	b,(_heading_kp + 2)
      000A5B E5*32            [12] 3565 	mov	a,(_heading_kp + 3)
      000A5D 12r00r00         [24] 3566 	lcall	___fssub
      000A60 85 82*2F         [24] 3567 	mov	_heading_kp,dpl
      000A63 85 83*30         [24] 3568 	mov	(_heading_kp + 1),dph
      000A66 85 F0*31         [24] 3569 	mov	(_heading_kp + 2),b
      000A69 F5*32            [12] 3570 	mov	(_heading_kp + 3),a
      000A6B E5 81            [12] 3571 	mov	a,sp
      000A6D 24 FC            [12] 3572 	add	a,#0xfc
      000A6F F5 81            [12] 3573 	mov	sp,a
      000A71 D0 07            [24] 3574 	pop	ar7
      000A73                       3575 00104$:
                           000A73  3576 	C$Lab6.c$388$2$164 ==.
                                   3577 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:388: if(input == 'f') return;
      000A73 BF 66 02         [24] 3578 	cjne	r7,#0x66,00106$
      000A76 80 76            [24] 3579 	sjmp	00114$
      000A78                       3580 00106$:
                           000A78  3581 	C$Lab6.c$389$1$163 ==.
                                   3582 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:389: if(heading_kp >= 15) heading_kp = 15;
      000A78 E4               [12] 3583 	clr	a
      000A79 C0 E0            [24] 3584 	push	acc
      000A7B C0 E0            [24] 3585 	push	acc
      000A7D 74 70            [12] 3586 	mov	a,#0x70
      000A7F C0 E0            [24] 3587 	push	acc
      000A81 74 41            [12] 3588 	mov	a,#0x41
      000A83 C0 E0            [24] 3589 	push	acc
      000A85 85*2F 82         [24] 3590 	mov	dpl,_heading_kp
      000A88 85*30 83         [24] 3591 	mov	dph,(_heading_kp + 1)
      000A8B 85*31 F0         [24] 3592 	mov	b,(_heading_kp + 2)
      000A8E E5*32            [12] 3593 	mov	a,(_heading_kp + 3)
      000A90 12r00r00         [24] 3594 	lcall	___fslt
      000A93 AF 82            [24] 3595 	mov	r7,dpl
      000A95 E5 81            [12] 3596 	mov	a,sp
      000A97 24 FC            [12] 3597 	add	a,#0xfc
      000A99 F5 81            [12] 3598 	mov	sp,a
      000A9B EF               [12] 3599 	mov	a,r7
      000A9C 70 0A            [24] 3600 	jnz	00108$
      000A9E F5*2F            [12] 3601 	mov	_heading_kp,a
      000AA0 F5*30            [12] 3602 	mov	(_heading_kp + 1),a
      000AA2 75*31 70         [24] 3603 	mov	(_heading_kp + 2),#0x70
      000AA5 75*32 41         [24] 3604 	mov	(_heading_kp + 3),#0x41
      000AA8                       3605 00108$:
                           000AA8  3606 	C$Lab6.c$390$1$163 ==.
                                   3607 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:390: if(heading_kp <= 0) heading_kp = 0;
      000AA8 E4               [12] 3608 	clr	a
      000AA9 C0 E0            [24] 3609 	push	acc
      000AAB C0 E0            [24] 3610 	push	acc
      000AAD C0 E0            [24] 3611 	push	acc
      000AAF C0 E0            [24] 3612 	push	acc
      000AB1 85*2F 82         [24] 3613 	mov	dpl,_heading_kp
      000AB4 85*30 83         [24] 3614 	mov	dph,(_heading_kp + 1)
      000AB7 85*31 F0         [24] 3615 	mov	b,(_heading_kp + 2)
      000ABA E5*32            [12] 3616 	mov	a,(_heading_kp + 3)
      000ABC 12r00r00         [24] 3617 	lcall	___fsgt
      000ABF AF 82            [24] 3618 	mov	r7,dpl
      000AC1 E5 81            [12] 3619 	mov	a,sp
      000AC3 24 FC            [12] 3620 	add	a,#0xfc
      000AC5 F5 81            [12] 3621 	mov	sp,a
      000AC7 EF               [12] 3622 	mov	a,r7
      000AC8 70 08            [24] 3623 	jnz	00110$
      000ACA F5*2F            [12] 3624 	mov	_heading_kp,a
      000ACC F5*30            [12] 3625 	mov	(_heading_kp + 1),a
      000ACE F5*31            [12] 3626 	mov	(_heading_kp + 2),a
      000AD0 F5*32            [12] 3627 	mov	(_heading_kp + 3),a
      000AD2                       3628 00110$:
                           000AD2  3629 	C$Lab6.c$391$2$164 ==.
                                   3630 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:391: printf_fast_f("\rDesired heading kp: %2.1f\n", heading_kp);
      000AD2 C0*2F            [24] 3631 	push	_heading_kp
      000AD4 C0*30            [24] 3632 	push	(_heading_kp + 1)
      000AD6 C0*31            [24] 3633 	push	(_heading_kp + 2)
      000AD8 C0*32            [24] 3634 	push	(_heading_kp + 3)
      000ADA 74rB0            [12] 3635 	mov	a,#___str_14
      000ADC C0 E0            [24] 3636 	push	acc
      000ADE 74s01            [12] 3637 	mov	a,#(___str_14 >> 8)
      000AE0 C0 E0            [24] 3638 	push	acc
      000AE2 12r00r00         [24] 3639 	lcall	_printf_fast_f
      000AE5 E5 81            [12] 3640 	mov	a,sp
      000AE7 24 FA            [12] 3641 	add	a,#0xfa
      000AE9 F5 81            [12] 3642 	mov	sp,a
      000AEB 02r0Ar08         [24] 3643 	ljmp	00112$
      000AEE                       3644 00114$:
                           000AEE  3645 	C$Lab6.c$393$1$163 ==.
                           000AEE  3646 	XG$Pick_Heading_kp$0$0 ==.
      000AEE 22               [24] 3647 	ret
                                   3648 ;------------------------------------------------------------
                                   3649 ;Allocation info for local variables in function 'Pick_Heading_kd'
                                   3650 ;------------------------------------------------------------
                                   3651 ;input                     Allocated to registers r7 
                                   3652 ;------------------------------------------------------------
                           000AEF  3653 	G$Pick_Heading_kd$0$0 ==.
                           000AEF  3654 	C$Lab6.c$394$1$163 ==.
                                   3655 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:394: void Pick_Heading_kd(void)
                                   3656 ;	-----------------------------------------
                                   3657 ;	 function Pick_Heading_kd
                                   3658 ;	-----------------------------------------
      000AEF                       3659 _Pick_Heading_kd:
                           000AEF  3660 	C$Lab6.c$397$1$166 ==.
                                   3661 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:397: printf("\rPlease select a desired heading kd.\n");
      000AEF 74rCC            [12] 3662 	mov	a,#___str_15
      000AF1 C0 E0            [24] 3663 	push	acc
      000AF3 74s01            [12] 3664 	mov	a,#(___str_15 >> 8)
      000AF5 C0 E0            [24] 3665 	push	acc
      000AF7 74 80            [12] 3666 	mov	a,#0x80
      000AF9 C0 E0            [24] 3667 	push	acc
      000AFB 12r00r00         [24] 3668 	lcall	_printf
      000AFE 15 81            [12] 3669 	dec	sp
      000B00 15 81            [12] 3670 	dec	sp
      000B02 15 81            [12] 3671 	dec	sp
                           000B04  3672 	C$Lab6.c$398$1$166 ==.
                                   3673 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:398: printf("\r'u' will increment by 5. 'd' will decrement by 5.\n");
      000B04 74rF2            [12] 3674 	mov	a,#___str_16
      000B06 C0 E0            [24] 3675 	push	acc
      000B08 74s01            [12] 3676 	mov	a,#(___str_16 >> 8)
      000B0A C0 E0            [24] 3677 	push	acc
      000B0C 74 80            [12] 3678 	mov	a,#0x80
      000B0E C0 E0            [24] 3679 	push	acc
      000B10 12r00r00         [24] 3680 	lcall	_printf
      000B13 15 81            [12] 3681 	dec	sp
      000B15 15 81            [12] 3682 	dec	sp
      000B17 15 81            [12] 3683 	dec	sp
                           000B19  3684 	C$Lab6.c$399$1$166 ==.
                                   3685 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:399: printf("\r'f' when finished\n");
      000B19 74r28            [12] 3686 	mov	a,#___str_10
      000B1B C0 E0            [24] 3687 	push	acc
      000B1D 74s01            [12] 3688 	mov	a,#(___str_10 >> 8)
      000B1F C0 E0            [24] 3689 	push	acc
      000B21 74 80            [12] 3690 	mov	a,#0x80
      000B23 C0 E0            [24] 3691 	push	acc
      000B25 12r00r00         [24] 3692 	lcall	_printf
      000B28 15 81            [12] 3693 	dec	sp
      000B2A 15 81            [12] 3694 	dec	sp
      000B2C 15 81            [12] 3695 	dec	sp
                           000B2E  3696 	C$Lab6.c$400$2$167 ==.
                                   3697 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:400: while(1)
      000B2E                       3698 00112$:
                           000B2E  3699 	C$Lab6.c$402$2$167 ==.
                                   3700 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:402: input = getchar();
      000B2E 12r00r4D         [24] 3701 	lcall	_getchar
      000B31 AF 82            [24] 3702 	mov	r7,dpl
                           000B33  3703 	C$Lab6.c$403$2$167 ==.
                                   3704 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:403: if(input == 'u') heading_kd += 5;
      000B33 BF 75 06         [24] 3705 	cjne	r7,#0x75,00102$
      000B36 74 05            [12] 3706 	mov	a,#0x05
      000B38 25*33            [12] 3707 	add	a,_heading_kd
      000B3A F5*33            [12] 3708 	mov	_heading_kd,a
      000B3C                       3709 00102$:
                           000B3C  3710 	C$Lab6.c$404$2$167 ==.
                                   3711 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:404: if(input == 'd') heading_kd -= 5;
      000B3C BF 64 06         [24] 3712 	cjne	r7,#0x64,00104$
      000B3F E5*33            [12] 3713 	mov	a,_heading_kd
      000B41 24 FB            [12] 3714 	add	a,#0xFB
      000B43 F5*33            [12] 3715 	mov	_heading_kd,a
      000B45                       3716 00104$:
                           000B45  3717 	C$Lab6.c$405$2$167 ==.
                                   3718 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:405: if(input == 'f') return;
      000B45 BF 66 02         [24] 3719 	cjne	r7,#0x66,00106$
      000B48 80 2E            [24] 3720 	sjmp	00114$
      000B4A                       3721 00106$:
                           000B4A  3722 	C$Lab6.c$406$2$167 ==.
                                   3723 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:406: if(heading_kd >= 200) heading_kd = 200;
      000B4A 74 38            [12] 3724 	mov	a,#0x100 - 0xC8
      000B4C 25*33            [12] 3725 	add	a,_heading_kd
      000B4E 50 03            [24] 3726 	jnc	00108$
      000B50 75*33 C8         [24] 3727 	mov	_heading_kd,#0xC8
      000B53                       3728 00108$:
                           000B53  3729 	C$Lab6.c$407$2$167 ==.
                                   3730 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:407: if(heading_kd <= 0) heading_kd = 0;
      000B53 E5*33            [12] 3731 	mov	a,_heading_kd
      000B55 70 02            [24] 3732 	jnz	00110$
      000B57 F5*33            [12] 3733 	mov	_heading_kd,a
      000B59                       3734 00110$:
                           000B59  3735 	C$Lab6.c$408$2$167 ==.
                                   3736 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:408: printf("\rDesired heading kd: %u\n", heading_kd);
      000B59 AE*33            [24] 3737 	mov	r6,_heading_kd
      000B5B 7F 00            [12] 3738 	mov	r7,#0x00
      000B5D C0 06            [24] 3739 	push	ar6
      000B5F C0 07            [24] 3740 	push	ar7
      000B61 74r26            [12] 3741 	mov	a,#___str_17
      000B63 C0 E0            [24] 3742 	push	acc
      000B65 74s02            [12] 3743 	mov	a,#(___str_17 >> 8)
      000B67 C0 E0            [24] 3744 	push	acc
      000B69 74 80            [12] 3745 	mov	a,#0x80
      000B6B C0 E0            [24] 3746 	push	acc
      000B6D 12r00r00         [24] 3747 	lcall	_printf
      000B70 E5 81            [12] 3748 	mov	a,sp
      000B72 24 FB            [12] 3749 	add	a,#0xfb
      000B74 F5 81            [12] 3750 	mov	sp,a
      000B76 80 B6            [24] 3751 	sjmp	00112$
      000B78                       3752 00114$:
                           000B78  3753 	C$Lab6.c$410$1$166 ==.
                           000B78  3754 	XG$Pick_Heading_kd$0$0 ==.
      000B78 22               [24] 3755 	ret
                                   3756 ;------------------------------------------------------------
                                   3757 ;Allocation info for local variables in function 'Set_Fan_Angle'
                                   3758 ;------------------------------------------------------------
                                   3759 ;input                     Allocated to registers r7 
                                   3760 ;------------------------------------------------------------
                           000B79  3761 	G$Set_Fan_Angle$0$0 ==.
                           000B79  3762 	C$Lab6.c$448$1$166 ==.
                                   3763 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:448: void Set_Fan_Angle(void)
                                   3764 ;	-----------------------------------------
                                   3765 ;	 function Set_Fan_Angle
                                   3766 ;	-----------------------------------------
      000B79                       3767 _Set_Fan_Angle:
                           000B79  3768 	C$Lab6.c$451$1$169 ==.
                                   3769 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:451: PCA0CP1 = 0xFFFF - 2300;
      000B79 75 EB 03         [24] 3770 	mov	((_PCA0CP1 >> 0) & 0xFF),#0x03
      000B7C 75 FB F7         [24] 3771 	mov	((_PCA0CP1 >> 8) & 0xFF),#0xF7
                           000B7F  3772 	C$Lab6.c$452$1$169 ==.
                                   3773 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:452: printf("\rAdjust fan angle. 'u' for up, 'd' for down, 'f' when finished.\n");
      000B7F 74r3F            [12] 3774 	mov	a,#___str_18
      000B81 C0 E0            [24] 3775 	push	acc
      000B83 74s02            [12] 3776 	mov	a,#(___str_18 >> 8)
      000B85 C0 E0            [24] 3777 	push	acc
      000B87 74 80            [12] 3778 	mov	a,#0x80
      000B89 C0 E0            [24] 3779 	push	acc
      000B8B 12r00r00         [24] 3780 	lcall	_printf
      000B8E 15 81            [12] 3781 	dec	sp
      000B90 15 81            [12] 3782 	dec	sp
      000B92 15 81            [12] 3783 	dec	sp
                           000B94  3784 	C$Lab6.c$453$2$170 ==.
                                   3785 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:453: while(1)
      000B94                       3786 00112$:
                           000B94  3787 	C$Lab6.c$455$2$170 ==.
                                   3788 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:455: input = getchar();
      000B94 12r00r4D         [24] 3789 	lcall	_getchar
      000B97 AF 82            [24] 3790 	mov	r7,dpl
                           000B99  3791 	C$Lab6.c$456$2$170 ==.
                                   3792 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:456: if(input == 'u') PCA0CP1 -= 10;
      000B99 BF 75 0C         [24] 3793 	cjne	r7,#0x75,00102$
      000B9C E5 EB            [12] 3794 	mov	a,((_PCA0CP1 >> 0) & 0xFF)
      000B9E 24 F6            [12] 3795 	add	a,#0xF6
      000BA0 F5 EB            [12] 3796 	mov	((_PCA0CP1 >> 0) & 0xFF),a
      000BA2 E5 FB            [12] 3797 	mov	a,((_PCA0CP1 >> 8) & 0xFF)
      000BA4 34 FF            [12] 3798 	addc	a,#0xFF
      000BA6 F5 FB            [12] 3799 	mov	((_PCA0CP1 >> 8) & 0xFF),a
      000BA8                       3800 00102$:
                           000BA8  3801 	C$Lab6.c$457$2$170 ==.
                                   3802 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:457: if(input == 'd') PCA0CP1 += 10;
      000BA8 BF 64 0B         [24] 3803 	cjne	r7,#0x64,00104$
      000BAB 74 0A            [12] 3804 	mov	a,#0x0A
      000BAD 25 EB            [12] 3805 	add	a,((_PCA0CP1 >> 0) & 0xFF)
      000BAF F5 EB            [12] 3806 	mov	((_PCA0CP1 >> 0) & 0xFF),a
      000BB1 E4               [12] 3807 	clr	a
      000BB2 35 FB            [12] 3808 	addc	a,((_PCA0CP1 >> 8) & 0xFF)
      000BB4 F5 FB            [12] 3809 	mov	((_PCA0CP1 >> 8) & 0xFF),a
      000BB6                       3810 00104$:
                           000BB6  3811 	C$Lab6.c$458$2$170 ==.
                                   3812 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:458: if(input == 'f') return;
      000BB6 BF 66 02         [24] 3813 	cjne	r7,#0x66,00106$
      000BB9 80 48            [24] 3814 	sjmp	00114$
      000BBB                       3815 00106$:
                           000BBB  3816 	C$Lab6.c$459$2$170 ==.
                                   3817 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:459: if(PCA0CP1 > (0xFFFF - 2000)) PCA0CP1 = (0xFFFF - 2000);
      000BBB C3               [12] 3818 	clr	c
      000BBC 74 2F            [12] 3819 	mov	a,#0x2F
      000BBE 95 EB            [12] 3820 	subb	a,((_PCA0CP1 >> 0) & 0xFF)
      000BC0 74 F8            [12] 3821 	mov	a,#0xF8
      000BC2 95 FB            [12] 3822 	subb	a,((_PCA0CP1 >> 8) & 0xFF)
      000BC4 50 06            [24] 3823 	jnc	00108$
      000BC6 75 EB 2F         [24] 3824 	mov	((_PCA0CP1 >> 0) & 0xFF),#0x2F
      000BC9 75 FB F8         [24] 3825 	mov	((_PCA0CP1 >> 8) & 0xFF),#0xF8
      000BCC                       3826 00108$:
                           000BCC  3827 	C$Lab6.c$460$2$170 ==.
                                   3828 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:460: if(PCA0CP1 < (0xFFFF - 3500)) PCA0CP1 = (0xFFFF - 3500);
      000BCC C3               [12] 3829 	clr	c
      000BCD E5 EB            [12] 3830 	mov	a,((_PCA0CP1 >> 0) & 0xFF)
      000BCF 94 53            [12] 3831 	subb	a,#0x53
      000BD1 E5 FB            [12] 3832 	mov	a,((_PCA0CP1 >> 8) & 0xFF)
      000BD3 94 F2            [12] 3833 	subb	a,#0xF2
      000BD5 50 06            [24] 3834 	jnc	00110$
      000BD7 75 EB 53         [24] 3835 	mov	((_PCA0CP1 >> 0) & 0xFF),#0x53
      000BDA 75 FB F2         [24] 3836 	mov	((_PCA0CP1 >> 8) & 0xFF),#0xF2
      000BDD                       3837 00110$:
                           000BDD  3838 	C$Lab6.c$461$2$170 ==.
                                   3839 ;	C:\Users\rutmas\Documents\LITEC\LITEC\Lab 6\Lab 6 Code\Lab6.c:461: printf("\rPW: %u\n", (0xFFFF - PCA0CP1));
      000BDD 74 FF            [12] 3840 	mov	a,#0xFF
      000BDF C3               [12] 3841 	clr	c
      000BE0 95 EB            [12] 3842 	subb	a,((_PCA0CP1 >> 0) & 0xFF)
      000BE2 FE               [12] 3843 	mov	r6,a
      000BE3 74 FF            [12] 3844 	mov	a,#0xFF
      000BE5 95 FB            [12] 3845 	subb	a,((_PCA0CP1 >> 8) & 0xFF)
      000BE7 FF               [12] 3846 	mov	r7,a
      000BE8 C0 06            [24] 3847 	push	ar6
      000BEA C0 07            [24] 3848 	push	ar7
      000BEC 74r80            [12] 3849 	mov	a,#___str_19
      000BEE C0 E0            [24] 3850 	push	acc
      000BF0 74s02            [12] 3851 	mov	a,#(___str_19 >> 8)
      000BF2 C0 E0            [24] 3852 	push	acc
      000BF4 74 80            [12] 3853 	mov	a,#0x80
      000BF6 C0 E0            [24] 3854 	push	acc
      000BF8 12r00r00         [24] 3855 	lcall	_printf
      000BFB E5 81            [12] 3856 	mov	a,sp
      000BFD 24 FB            [12] 3857 	add	a,#0xfb
      000BFF F5 81            [12] 3858 	mov	sp,a
      000C01 80 91            [24] 3859 	sjmp	00112$
      000C03                       3860 00114$:
                           000C03  3861 	C$Lab6.c$465$1$169 ==.
                           000C03  3862 	XG$Set_Fan_Angle$0$0 ==.
      000C03 22               [24] 3863 	ret
                                   3864 	.area CSEG    (CODE)
                                   3865 	.area CONST   (CODE)
                           000000  3866 FLab6$__str_0$0$0 == .
      000000                       3867 ___str_0:
      000000 0A                    3868 	.db 0x0A
      000001 54 79 70 65 20 64 69  3869 	.ascii "Type digits; end w/#"
             67 69 74 73 3B 20 65
             6E 64 20 77 2F 23
      000015 00                    3870 	.db 0x00
                           000016  3871 FLab6$__str_1$0$0 == .
      000016                       3872 ___str_1:
      000016 20 20 20 20 20 25 63  3873 	.ascii "     %c%c%c%c%c"
             25 63 25 63 25 63 25
             63
      000025 00                    3874 	.db 0x00
                           000026  3875 FLab6$__str_2$0$0 == .
      000026                       3876 ___str_2:
      000026 25 63                 3877 	.ascii "%c"
      000028 00                    3878 	.db 0x00
                           000029  3879 FLab6$__str_3$0$0 == .
      000029                       3880 ___str_3:
      000029 0A                    3881 	.db 0x0A
      00002A 53 74 61 72 74        3882 	.ascii "Start"
      00002F 0D                    3883 	.db 0x0D
      000030 0A                    3884 	.db 0x0A
      000031 00                    3885 	.db 0x00
                           000032  3886 FLab6$__str_4$0$0 == .
      000032                       3887 ___str_4:
      000032 0D                    3888 	.db 0x0D
      000033 68 6B 70 3A 20 25 32  3889 	.ascii "hkp: %2.1f "
             2E 31 66 20
      00003E 0A                    3890 	.db 0x0A
      00003F 0D                    3891 	.db 0x0D
      000040 68 6B 64 3A 20 25 75  3892 	.ascii "hkd: %u"
      000047 00                    3893 	.db 0x00
                           000048  3894 FLab6$__str_5$0$0 == .
      000048                       3895 ___str_5:
      000048 0A                    3896 	.db 0x0A
      000049 0D                    3897 	.db 0x0D
      00004A 2D 2D 2D 2D 2D 2D 2D  3898 	.ascii "------------DATA COLLECTION------------"
             2D 2D 2D 2D 2D 44 41
             54 41 20 43 4F 4C 4C
             45 43 54 49 4F 4E 2D
             2D 2D 2D 2D 2D 2D 2D
             2D 2D 2D 2D
      000071 0A                    3899 	.db 0x0A
      000072 00                    3900 	.db 0x00
                           000073  3901 FLab6$__str_6$0$0 == .
      000073                       3902 ___str_6:
      000073 0A                    3903 	.db 0x0A
      000074 0D                    3904 	.db 0x0D
      000075 48 65 61 64 69 6E 67  3905 	.ascii "Heading"
      00007C 09                    3906 	.db 0x09
      00007D 7C                    3907 	.ascii "|"
      00007E 09                    3908 	.db 0x09
      00007F 4C 65 66 74 20 50 57  3909 	.ascii "Left PW"
      000086 09                    3910 	.db 0x09
      000087 7C                    3911 	.ascii "|"
      000088 09                    3912 	.db 0x09
      000089 52 69 67 68 74 20 50  3913 	.ascii "Right PW|"
             57 7C
      000092 09                    3914 	.db 0x09
      000093 45 72 72 6F 72        3915 	.ascii "Error"
      000098 09                    3916 	.db 0x09
      000099 7C                    3917 	.ascii "|"
      00009A 09                    3918 	.db 0x09
      00009B 70 72 65 76 5F 65 72  3919 	.ascii "prev_error"
             72 6F 72
      0000A5 0A                    3920 	.db 0x0A
      0000A6 0D                    3921 	.db 0x0D
      0000A7 00                    3922 	.db 0x00
                           0000A8  3923 FLab6$__str_7$0$0 == .
      0000A8                       3924 ___str_7:
      0000A8 0D                    3925 	.db 0x0D
      0000A9 25 75                 3926 	.ascii "%u"
      0000AB 09                    3927 	.db 0x09
      0000AC 7C                    3928 	.ascii "|"
      0000AD 09                    3929 	.db 0x09
      0000AE 25 75                 3930 	.ascii "%u"
      0000B0 09                    3931 	.db 0x09
      0000B1 7C                    3932 	.ascii "|"
      0000B2 09                    3933 	.db 0x09
      0000B3 25 75                 3934 	.ascii "%u"
      0000B5 09                    3935 	.db 0x09
      0000B6 7C                    3936 	.ascii "|"
      0000B7 09                    3937 	.db 0x09
      0000B8 25 64                 3938 	.ascii "%d"
      0000BA 09                    3939 	.db 0x09
      0000BB 7C                    3940 	.ascii "|"
      0000BC 09                    3941 	.db 0x09
      0000BD 25 64                 3942 	.ascii "%d"
      0000BF 0A                    3943 	.db 0x0A
      0000C0 00                    3944 	.db 0x00
                           0000C1  3945 FLab6$__str_8$0$0 == .
      0000C1                       3946 ___str_8:
      0000C1 0D                    3947 	.db 0x0D
      0000C2 50 6C 65 61 73 65 20  3948 	.ascii "Please select a desired heading."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 2E
      0000E2 0A                    3949 	.db 0x0A
      0000E3 00                    3950 	.db 0x00
                           0000E4  3951 FLab6$__str_9$0$0 == .
      0000E4                       3952 ___str_9:
      0000E4 0D                    3953 	.db 0x0D
      0000E5 27 75 27 20 77 69 6C  3954 	.ascii "'u' will increment by 5 degrees. 'd' will decrement by 5 de"
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 35 20 64 65 67 72
             65 65 73 2E 20 27 64
             27 20 77 69 6C 6C 20
             64 65 63 72 65 6D 65
             6E 74 20 62 79 20 35
             20 64 65
      000120 67 72 65 65 73 2E     3955 	.ascii "grees."
      000126 0A                    3956 	.db 0x0A
      000127 00                    3957 	.db 0x00
                           000128  3958 FLab6$__str_10$0$0 == .
      000128                       3959 ___str_10:
      000128 0D                    3960 	.db 0x0D
      000129 27 66 27 20 77 68 65  3961 	.ascii "'f' when finished"
             6E 20 66 69 6E 69 73
             68 65 64
      00013A 0A                    3962 	.db 0x0A
      00013B 00                    3963 	.db 0x00
                           00013C  3964 FLab6$__str_11$0$0 == .
      00013C                       3965 ___str_11:
      00013C 0D                    3966 	.db 0x0D
      00013D 44 65 73 69 72 65 64  3967 	.ascii "Desired heading: %u"
             20 68 65 61 64 69 6E
             67 3A 20 25 75
      000150 0A                    3968 	.db 0x0A
      000151 00                    3969 	.db 0x00
                           000152  3970 FLab6$__str_12$0$0 == .
      000152                       3971 ___str_12:
      000152 0D                    3972 	.db 0x0D
      000153 50 6C 65 61 73 65 20  3973 	.ascii "Please select a desired heading kp."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 20 6B 70 2E
      000176 0A                    3974 	.db 0x0A
      000177 00                    3975 	.db 0x00
                           000178  3976 FLab6$__str_13$0$0 == .
      000178                       3977 ___str_13:
      000178 0D                    3978 	.db 0x0D
      000179 27 75 27 20 77 69 6C  3979 	.ascii "'u' will increment by 0.1. 'd' will decrement by 0.1."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 30 2E 31 2E 20 27
             64 27 20 77 69 6C 6C
             20 64 65 63 72 65 6D
             65 6E 74 20 62 79 20
             30 2E 31 2E
      0001AE 0A                    3980 	.db 0x0A
      0001AF 00                    3981 	.db 0x00
                           0001B0  3982 FLab6$__str_14$0$0 == .
      0001B0                       3983 ___str_14:
      0001B0 0D                    3984 	.db 0x0D
      0001B1 44 65 73 69 72 65 64  3985 	.ascii "Desired heading kp: %2.1f"
             20 68 65 61 64 69 6E
             67 20 6B 70 3A 20 25
             32 2E 31 66
      0001CA 0A                    3986 	.db 0x0A
      0001CB 00                    3987 	.db 0x00
                           0001CC  3988 FLab6$__str_15$0$0 == .
      0001CC                       3989 ___str_15:
      0001CC 0D                    3990 	.db 0x0D
      0001CD 50 6C 65 61 73 65 20  3991 	.ascii "Please select a desired heading kd."
             73 65 6C 65 63 74 20
             61 20 64 65 73 69 72
             65 64 20 68 65 61 64
             69 6E 67 20 6B 64 2E
      0001F0 0A                    3992 	.db 0x0A
      0001F1 00                    3993 	.db 0x00
                           0001F2  3994 FLab6$__str_16$0$0 == .
      0001F2                       3995 ___str_16:
      0001F2 0D                    3996 	.db 0x0D
      0001F3 27 75 27 20 77 69 6C  3997 	.ascii "'u' will increment by 5. 'd' will decrement by 5."
             6C 20 69 6E 63 72 65
             6D 65 6E 74 20 62 79
             20 35 2E 20 27 64 27
             20 77 69 6C 6C 20 64
             65 63 72 65 6D 65 6E
             74 20 62 79 20 35 2E
      000224 0A                    3998 	.db 0x0A
      000225 00                    3999 	.db 0x00
                           000226  4000 FLab6$__str_17$0$0 == .
      000226                       4001 ___str_17:
      000226 0D                    4002 	.db 0x0D
      000227 44 65 73 69 72 65 64  4003 	.ascii "Desired heading kd: %u"
             20 68 65 61 64 69 6E
             67 20 6B 64 3A 20 25
             75
      00023D 0A                    4004 	.db 0x0A
      00023E 00                    4005 	.db 0x00
                           00023F  4006 FLab6$__str_18$0$0 == .
      00023F                       4007 ___str_18:
      00023F 0D                    4008 	.db 0x0D
      000240 41 64 6A 75 73 74 20  4009 	.ascii "Adjust fan angle. 'u' for up, 'd' for down, 'f' when finish"
             66 61 6E 20 61 6E 67
             6C 65 2E 20 27 75 27
             20 66 6F 72 20 75 70
             2C 20 27 64 27 20 66
             6F 72 20 64 6F 77 6E
             2C 20 27 66 27 20 77
             68 65 6E 20 66 69 6E
             69 73 68
      00027B 65 64 2E              4010 	.ascii "ed."
      00027E 0A                    4011 	.db 0x0A
      00027F 00                    4012 	.db 0x00
                           000280  4013 FLab6$__str_19$0$0 == .
      000280                       4014 ___str_19:
      000280 0D                    4015 	.db 0x0D
      000281 50 57 3A 20 25 75     4016 	.ascii "PW: %u"
      000287 0A                    4017 	.db 0x0A
      000288 00                    4018 	.db 0x00
                                   4019 	.area XINIT   (CODE)
                                   4020 	.area CABS    (ABS,CODE)
